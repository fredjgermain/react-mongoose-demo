[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\input\\input.component.tsx":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\input.utils.ts":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\inputdata\\inputdata.component.tsx":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\show\\show.component.tsx":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\inputarray\\inputarray.component.tsx":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\inputdata\\useInput.hook.tsx":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\inputarray\\inputarray.hook.tsx":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\utils.ts":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\select\\select.component.tsx":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\select\\RemovableItems.component.tsx":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\select\\selectheader.component.tsx":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\select\\_select.tsx":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\select\\options.component.tsx":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\inputarray\\_inputarray.ts":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\inputarray\\inputarray.component.tsx":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\inputarray\\inputarray.hook.tsx":"26"},{"size":600,"mtime":1609529670659,"results":"27","hashOfConfig":"28"},{"size":594,"mtime":1609477790694,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"28"},{"size":225,"mtime":1609475507334,"results":"31","hashOfConfig":"28"},{"size":2003,"mtime":1609712505043,"results":"32","hashOfConfig":"28"},{"size":119,"mtime":1609476074144,"results":"33","hashOfConfig":"28"},{"size":117,"mtime":1609476049273,"results":"34","hashOfConfig":"28"},{"size":496,"mtime":1609529821305,"results":"35","hashOfConfig":"28"},{"size":3874,"mtime":1609711589147,"results":"36","hashOfConfig":"28"},{"size":541,"mtime":1609452678993,"results":"37","hashOfConfig":"28"},{"size":1628,"mtime":1609534858379,"results":"38","hashOfConfig":"28"},{"size":1371,"mtime":1609452679040,"results":"39","hashOfConfig":"28"},{"size":904,"mtime":1609452679066,"results":"40","hashOfConfig":"28"},{"size":1354,"mtime":1609452679033,"results":"41","hashOfConfig":"28"},{"size":1968,"mtime":1609452679042,"results":"42","hashOfConfig":"28"},{"size":1001,"mtime":1609452679037,"results":"43","hashOfConfig":"28"},{"size":126,"mtime":1609642909346,"results":"44","hashOfConfig":"28"},{"size":1226,"mtime":1609642875884,"results":"45","hashOfConfig":"28"},{"size":2570,"mtime":1609643066831,"results":"46","hashOfConfig":"28"},{"size":498,"mtime":1609640190936,"results":"47","hashOfConfig":"28"},{"size":794,"mtime":1609641206057,"results":"48","hashOfConfig":"28"},{"size":268,"mtime":1609640150119,"results":"49","hashOfConfig":"28"},{"size":1158,"mtime":1609642543153,"results":"50","hashOfConfig":"28"},{"size":402,"mtime":1609712457924,"results":"51","hashOfConfig":"28"},{"size":2440,"mtime":1609712420321,"results":"52","hashOfConfig":"28"},{"size":1171,"mtime":1609711753829,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"ke513i",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"67"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"67"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"67"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"67"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"67"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["113","114"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",["115","116","117","118"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",[],["119","120"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\input\\input.component.tsx",["121"],"import React from 'react'; \r\nimport {IEvent} from '../../reusable/_input'; \r\n\r\n\r\n// INPUT ========================================\r\nexport interface IInput extends React.HTMLAttributes<HTMLInputElement> { \r\n  type?:string; \r\n  inputType?:string; \r\n  value:any; \r\n  setValue:any; \r\n  //[key:string]:any; \r\n} \r\nexport function Input({value, setValue, type=(typeof value), inputType, ...props}:IInput) { \r\n  const OnChange = (event:IEvent) => setValue(() => GetValueFromInput(event, type)); \r\n  const InputType = GetInputType(type, inputType); \r\n\r\n  if(type === 'string') \r\n    return <input type={'text'} value={value} onChange={OnChange} {...props} /> \r\n  if(type === 'number') \r\n    return <input type={'number'} value={value} onChange={OnChange} {...props} /> \r\n  if(type === 'boolean') \r\n    return <input type={'checkbox'} checked={value} onChange={OnChange} {...props} /> \r\n  return <span>{JSON.stringify(value)}</span> \r\n} \r\n\r\n\r\n\r\n// GetInputType ---------------------------------\r\nfunction GetInputType(type:string, inputType?:string) { \r\n  if(!inputType) \r\n    return inputType; \r\n  \r\n  if(type === 'number') \r\n    return 'number'; \r\n  if(type === 'boolean') \r\n    return 'checkbox'; \r\n  if(type === 'string') \r\n    return 'text'; \r\n  return 'text'; \r\n}\r\n\r\n\r\n\r\n/* Get Value From Input\r\n  - Get correct value type (string, number, date, or boolean) from input element. */\r\nfunction GetValueFromInput(event:IEvent, type:string):any { \r\n  if(type === 'number') \r\n    return event.target.valueAsNumber as number; \r\n  if(type === 'date') \r\n    return event.target.valueAsDate; \r\n  if(type === 'boolean') \r\n    return event.target.checked as boolean; \r\n  return event.target.value; \r\n}\r\n\r\n\r\n/*\r\n<option key={i} value={o.value} >{o.label}</option>)} \r\ninterface ISelect extends React.SelectHTMLAttributes<HTMLSelectElement> {\r\n  type:string; \r\n  value?:any; \r\n  setValue:any; \r\n  muliple?:boolean; \r\n  //options:IOption[]; \r\n  [key:string]:any; \r\n} \r\n\r\nexport function Selector({value, type, setValue, multiple=false, children, ...props}:React.PropsWithChildren<ISelect>) { \r\n  // header \r\n  // select \r\n  // options \r\n\r\n  // selectedOptions \r\n  // value  ... needs to be converted ?? \r\n\r\n  const ref = useRef<HTMLSelectElement>(null);\r\n\r\n  const GetSelectedOptions = (event:IEvent) => { \r\n    return Object.keys(event.target.selectedOptions).map( (s:any) => event.target.selectedOptions[s] ) \r\n  } \r\n\r\n  function Fold() { \r\n    //ref.current?.blur(); \r\n    if(ref.current)\r\n      \r\n      //ref.current.ontoggle = () => console.log(\"toggle\");\r\n    console.log(ref.current.); \r\n    console.log(ref.current?.disabled); \r\n    /*console.log(ref.current?.hidden);\r\n    if(ref.current)\r\n      ref.current.hidden = true;\r\n    console.log(ref.current?.hidden);\r\n    \r\n    //console.log(); \r\n  }\r\n\r\n\r\n  const GetSelectedValues = (event:IEvent) => { \r\n    const selectedOptions = GetSelectedOptions(event); \r\n    return selectedOptions.map(o=> DeString(o.value, type)); \r\n  } \r\n\r\n  const OnChange = (event:any) => { \r\n    const selectedValues = GetSelectedValues(event); \r\n    const values= multiple ? selectedValues : selectedValues[0]; \r\n    setValue(() => values); \r\n    Fold(); \r\n  } \r\n\r\n  return <select onChange={OnChange}  {...{ref, multiple,...props}} > \r\n    {children} \r\n  </select> \r\n}\r\n\r\n\r\ninterface IOptions { \r\n  label?:string; // defines a optgroup with a label \r\n  options:IOption[]; \r\n  [key:string]:any; \r\n} \r\nconst OptionsContext = React.createContext({}); \r\nexport function Options({label, options, ...props}:IOptions) { \r\n\r\n  return <OptionsContext.Provider value={{}}> \r\n    {options.map( (o,i) => <option key={i} value={o.value} >{o.label}</option>)} \r\n  </OptionsContext.Provider>\r\n}\r\n\r\nfunction DeString(value:string, type:string) { \r\n  if(type==='number') \r\n    return Number(value); \r\n  if(type==='boolean') \r\n    return value === 'true'; \r\n  return value; \r\n} */","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\input.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\inputdata\\inputdata.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\show\\show.component.tsx",["122"],"import React from 'react'; \r\n\r\ninterface IShow { \r\n  value:any; \r\n  type?:string; \r\n  long?:boolean; \r\n}\r\nexport default function Show({value, type = typeof value, long = false}:IShow) { \r\n  if(Array.isArray(value)) \r\n    return <ShowArray {...{value, type, long}} /> \r\n  if(type === 'string' || type === 'number') \r\n    return <span>{value}</span> \r\n  if(type === 'boolean') \r\n    return <span>{JSON.stringify(value)}</span> \r\n  return <span>{JSON.stringify(value)}</span> \r\n}\r\n\r\nfunction ShowArray({long = false, ...props}:IShow) {\r\n  const values = props.value ?? []; \r\n  const type = props.type ?? 'any'; \r\n  \r\n  const isLong = <div>\r\n    [{values.map( (v:any, i:number) => { \r\n      return i < values.length-1 ? \r\n        <span key={i}> {v}, </span>: \r\n        <span key={i}> {v} </span>; \r\n    })}] \r\n  </div>\r\n\r\n  return <span> {props.type} x {values.length} \r\n    {long && isLong} \r\n  </span> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\inputarray\\inputarray.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\inputdata\\useInput.hook.tsx",["123","124"],"import {useState, useEffect} from 'react'; \r\nimport {IEvent, IInput, GetValueFromInput, IsPressEnter} from '../input.utils'; \r\n\r\n\r\n// Return interface -----------------------------\r\ninterface IUseInput { \r\n  value:any; \r\n  type: string; \r\n  setValue:React.Dispatch<React.SetStateAction<any>>; \r\n  useref?: any; \r\n\r\n  returnValue:(value:any) => any; \r\n\r\n  // Event\r\n  onChange: (event:any) => void; \r\n  onBlur: (event:any) => void; \r\n  onPressEnter: (event:any) => void; \r\n  [key:string]:any; \r\n} \r\n// useInput =====================================\r\nexport function useInput(props:IInput):IUseInput { \r\n  const [value, setValue] = useState(props.value); \r\n  \r\n  // Synchronize value with parent's value. \r\n  useEffect(() => { \r\n    if (props.value !== value) { \r\n      setValue(props.value); \r\n  } \r\n  }, [JSON.stringify(props.value)]); \r\n  const {type, useref, returnValue} = props; \r\n  const onChange = props.onChange? props.onChange : DefaultOnChange(type, setValue); \r\n  const onPressEnter = DefaultOnPressEnter(value, returnValue, props.onPressEnter); \r\n  const onBlur = props.onBlur ? props.onBlur : DefaultOnBlur(value, returnValue); \r\n\r\n  return {...props, value, type, setValue, useref, returnValue, onChange, onBlur, onPressEnter}; \r\n} \r\n\r\n\r\n// DEFAULT ON BLUR ==============================\r\nfunction DefaultOnBlur(value:any, returnValue:any):(event:any) => void { \r\n  return (event:any) => returnValue(value); \r\n}\r\n\r\n// DEFAULT ON PRESS ENTER =======================\r\nfunction DefaultOnPressEnter(value:any, returnValue:any, onPressEnter?:(event:any) => void):(event:any) => void {\r\n  return (event:any) => { \r\n    if(IsPressEnter((event as IEvent).code) ) \r\n      onPressEnter? onPressEnter(event) : returnValue(value); \r\n  } \r\n} \r\n\r\n// DEFAULT OnCHANGE =============================\r\nfunction DefaultOnChange(type:string, setValue:any):(event:any) => void {\r\n  return (event:any) => \r\n    setValue( () => GetValueFromInput(event as IEvent, type)); \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\select\\select.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\select\\RemovableItems.component.tsx",["125","126"],"import React, {useContext} from 'react'; \r\nimport {SelectContext} from './select.component'; \r\n\r\n\r\n// REMOVABLE ITEM LIST ===============================\r\nexport function RemovableItems() { \r\n  const {value, options, Select, Selection} = useContext(SelectContext); \r\n\r\n  const selection = Selection(); \r\n  return <span> \r\n    {selection.map( (o,i) => { \r\n      return <button key={i} \r\n        onClick={() => Select(o.value)}> \r\n          {o.label} | X \r\n        </button> \r\n    })} \r\n  </span> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\select\\selectheader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\select\\_select.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\select\\options.component.tsx",["127"],"import React, {useContext, useEffect} from 'react'; \r\nimport {IOption} from '../../reusable/_input'; \r\nimport {SelectContext} from './select.component'; \r\n\r\n\r\n\r\n// SELECT BODY ==================================\r\nexport function SelectBody() { \r\n\r\n}\r\n\r\n// OPTIONS ======================================\r\ninterface IOptions { \r\n  label?:string; // defines a optgroup with a label \r\n  options:IOption[]; \r\n  [key:string]:any; \r\n} \r\n//const OptionsContext = React.createContext({}); \r\nexport function Options({label, options:os}:IOptions) { \r\n  const {fold, setOptions} = useContext(SelectContext); \r\n  \r\n  useEffect(() => { \r\n    setOptions( (prev:any) => [...prev, ...os] ); \r\n  }, []); \r\n\r\n  //const Label = \r\n\r\n  return <div> \r\n    {!fold && label ? (<div className={'select_body_label'}>\r\n        {label}\r\n      </div>) : null} \r\n    {!fold ? os.map( (o,i) => { \r\n      return <Option key={i} option={o} /> \r\n    }) : null} \r\n  </div> \r\n} \r\n\r\nfunction Option({option}:{option:IOption}) { \r\n  const {Select} = useContext(SelectContext); \r\n  return <div className={'select_body_option'} onClick={() => Select(option.value)}> \r\n    {option.label} \r\n  </div>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\inputarray\\_inputarray.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\inputarray\\inputarray.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\inputarray\\inputarray.hook.tsx",["128"],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":30,"column":10,"nodeType":"135","messageId":"136","endLine":30,"endColumn":19},{"ruleId":"133","severity":1,"message":"137","line":50,"column":10,"nodeType":"135","messageId":"136","endLine":50,"endColumn":20},{"ruleId":"133","severity":1,"message":"138","line":52,"column":9,"nodeType":"135","messageId":"136","endLine":52,"endColumn":13},{"ruleId":"133","severity":1,"message":"139","line":53,"column":9,"nodeType":"135","messageId":"136","endLine":53,"endColumn":20},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"140","line":15,"column":9,"nodeType":"135","messageId":"136","endLine":15,"endColumn":18},{"ruleId":"133","severity":1,"message":"138","line":20,"column":9,"nodeType":"135","messageId":"136","endLine":20,"endColumn":13},{"ruleId":"141","severity":1,"message":"142","line":29,"column":6,"nodeType":"143","endLine":29,"endColumn":35,"suggestions":"144"},{"ruleId":"141","severity":1,"message":"145","line":29,"column":7,"nodeType":"146","endLine":29,"endColumn":34},{"ruleId":"133","severity":1,"message":"147","line":7,"column":10,"nodeType":"135","messageId":"136","endLine":7,"endColumn":15},{"ruleId":"133","severity":1,"message":"148","line":7,"column":17,"nodeType":"135","messageId":"136","endLine":7,"endColumn":24},{"ruleId":"141","severity":1,"message":"149","line":24,"column":6,"nodeType":"143","endLine":24,"endColumn":8,"suggestions":"150"},{"ruleId":"133","severity":1,"message":"151","line":1,"column":9,"nodeType":"135","messageId":"136","endLine":1,"endColumn":17},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"@typescript-eslint/no-unused-vars","'TestInput' is defined but never used.","Identifier","unusedVar","'TestSelect' is defined but never used.","'type' is assigned a value but never used.","'placeholder' is assigned a value but never used.","'InputType' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.value' and 'value'. Either include them or remove the dependency array. If 'setValue' needs the current value of 'props.value', you can also switch to useReducer instead of useState and read 'props.value' in the reducer.","ArrayExpression",["154"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'value' is assigned a value but never used.","'options' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'os' and 'setOptions'. Either include them or remove the dependency array.",["155"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},"Update the dependencies array to be: [props.value, value]",{"range":"160","text":"161"},"Update the dependencies array to be: [os, setOptions]",{"range":"162","text":"163"},[804,833],"[props.value, value]",[680,682],"[os, setOptions]"]