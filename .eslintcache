[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudmongoose.class.ts":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\testrender.tsx":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testarray\\testarrayutils.experiment.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\value.utils.ts":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrayutils.ts":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\editor.component.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\reader.component.tsx":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testLoader\\testLoader.tsx":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\preloader.component.tsx":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_session.ts":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useGetSet.hook.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objset\\objset.component.tsx":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\field.component.tsx":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\date.utils.ts":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_customhooks.ts":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.contexter.tsx":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.tsx":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\session\\usesession.hook.ts":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usecolumnsetting.hook.tsx":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\session\\session.class.ts":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usestateat.hook.tsx":"59","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"60","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx":"61","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx":"62","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentification.component.tsx":"63","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionpage.component.tsx":"64","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionitem.component.tsx":"65","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\pager.component.tsx":"66","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_pager.ts":"67","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\pager\\pager.component.tsx":"68","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx2\\objx.component.tsx":"69","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx2.ts":"70","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\landing\\landing.page.tsx":"71","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\AppTypeScript.tsx":"72","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\hooks\\usepatient.hook.ts":"73","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"74","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\hooks\\useadmin.hook.ts":"75","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx":"76","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\header.component.tsx":"77","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\hooks\\useeditstate.hook.tsx":"78","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\inlinenbtn.component.tsx":"79","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\hooks\\usequestionnaire.hook.tsx":"80","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\hooks\\userow.hook.ts":"81","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useientry.hook.tsx":"82","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\adminrow.component.tsx":"83","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\hooks\\usequestionnaireitem.hook.tsx":"84","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Button.stories.tsx":"85","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Header.stories.tsx":"86","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Page.stories.tsx":"87","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Button.tsx":"88","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Header.tsx":"89","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Page.tsx":"90","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\reader_editor\\editor.component.tsx":"91","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\reader_editor\\reader.component.tsx":"92","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\reader_editor\\editor_reader.utils.tsx":"93","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\reader_editor\\stories\\editor.stories.tsx":"94","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\reader_editor\\stories\\reader.stories.tsx":"95","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\input\\input.stories.tsx":"96","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\input\\input.component.tsx":"97","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\inputarray\\inputarray.stories.tsx":"98","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\inputarray\\inputarray.component.tsx":"99"},{"size":621,"mtime":1612141670677,"results":"100","hashOfConfig":"101"},{"size":123,"mtime":1615491516124,"results":"102","hashOfConfig":"101"},{"size":362,"mtime":499162500000,"results":"103","hashOfConfig":"101"},{"size":557,"mtime":1615492050370,"results":"104","hashOfConfig":"101"},{"size":1988,"mtime":1615841322977,"results":"105","hashOfConfig":"101"},{"size":4948,"mtime":1614814115967,"results":"106","hashOfConfig":"101"},{"size":1708,"mtime":1615752999802,"results":"107","hashOfConfig":"101"},{"size":1900,"mtime":1612141671217,"results":"108","hashOfConfig":"101"},{"size":3091,"mtime":1612141671217,"results":"109","hashOfConfig":"101"},{"size":1782,"mtime":1614038749839,"results":"110","hashOfConfig":"101"},{"size":1422,"mtime":1614206751965,"results":"111","hashOfConfig":"101"},{"size":1473,"mtime":1612141671140,"results":"112","hashOfConfig":"101"},{"size":462,"mtime":1612141671142,"results":"113","hashOfConfig":"101"},{"size":1042,"mtime":1612141671142,"results":"114","hashOfConfig":"101"},{"size":982,"mtime":1612141671141,"results":"115","hashOfConfig":"101"},{"size":6796,"mtime":1614451251884,"results":"116","hashOfConfig":"101"},{"size":280,"mtime":1614731139565,"results":"117","hashOfConfig":"101"},{"size":331,"mtime":1613681678872,"results":"118","hashOfConfig":"101"},{"size":879,"mtime":1615753042371,"results":"119","hashOfConfig":"101"},{"size":1725,"mtime":1613937646786,"results":"120","hashOfConfig":"101"},{"size":688,"mtime":1611105433287,"results":"121","hashOfConfig":"101"},{"size":1330,"mtime":1612141671143,"results":"122","hashOfConfig":"101"},{"size":233,"mtime":1612141670928,"results":"123","hashOfConfig":"101"},{"size":2947,"mtime":1614795800373,"results":"124","hashOfConfig":"101"},{"size":1544,"mtime":1614732740773,"results":"125","hashOfConfig":"101"},{"size":564,"mtime":1613957467554,"results":"126","hashOfConfig":"101"},{"size":1709,"mtime":1615326290210,"results":"127","hashOfConfig":"101"},{"size":2138,"mtime":1612987585877,"results":"128","hashOfConfig":"101"},{"size":1183,"mtime":1612987585982,"results":"129","hashOfConfig":"101"},{"size":447,"mtime":1612141670931,"results":"130","hashOfConfig":"101"},{"size":1697,"mtime":1614795986709,"results":"131","hashOfConfig":"101"},{"size":338,"mtime":1612141671148,"results":"132","hashOfConfig":"101"},{"size":329,"mtime":1614040019055,"results":"133","hashOfConfig":"101"},{"size":4408,"mtime":1612141670676,"results":"134","hashOfConfig":"101"},{"size":2808,"mtime":1615504962977,"results":"135","hashOfConfig":"101"},{"size":736,"mtime":1612141670564,"results":"136","hashOfConfig":"101"},{"size":2539,"mtime":1613766518266,"results":"137","hashOfConfig":"101"},{"size":2697,"mtime":1613884010314,"results":"138","hashOfConfig":"101"},{"size":484,"mtime":1615506232202,"results":"139","hashOfConfig":"101"},{"size":6470,"mtime":1612996434149,"results":"140","hashOfConfig":"101"},{"size":4725,"mtime":1614732728564,"results":"141","hashOfConfig":"101"},{"size":2779,"mtime":1615149115198,"results":"142","hashOfConfig":"101"},{"size":323,"mtime":1614809528857,"results":"143","hashOfConfig":"101"},{"size":4063,"mtime":1614795960140,"results":"144","hashOfConfig":"101"},{"size":3673,"mtime":1615326458895,"results":"145","hashOfConfig":"101"},{"size":758,"mtime":1613681678874,"results":"146","hashOfConfig":"101"},{"size":790,"mtime":1614731546782,"results":"147","hashOfConfig":"101"},{"size":204,"mtime":1614730588739,"results":"148","hashOfConfig":"101"},{"size":1287,"mtime":1613953897783,"results":"149","hashOfConfig":"101"},{"size":3295,"mtime":1614047931428,"results":"150","hashOfConfig":"101"},{"size":1559,"mtime":1614795790067,"results":"151","hashOfConfig":"101"},{"size":881,"mtime":1614217904889,"results":"152","hashOfConfig":"101"},{"size":942,"mtime":1615422780642,"results":"153","hashOfConfig":"101"},{"size":529,"mtime":1614731111696,"results":"154","hashOfConfig":"101"},{"size":3166,"mtime":1614731089791,"results":"155","hashOfConfig":"101"},{"size":1403,"mtime":1614730588739,"results":"156","hashOfConfig":"101"},{"size":582,"mtime":1612141671146,"results":"157","hashOfConfig":"101"},{"size":2834,"mtime":1614730588739,"results":"158","hashOfConfig":"101"},{"size":1499,"mtime":1615235871671,"results":"159","hashOfConfig":"101"},{"size":1321,"mtime":1615505408472,"results":"160","hashOfConfig":"101"},{"size":2885,"mtime":1615506050294,"results":"161","hashOfConfig":"101"},{"size":644,"mtime":1615506058125,"results":"162","hashOfConfig":"101"},{"size":1857,"mtime":1615506042712,"results":"163","hashOfConfig":"101"},{"size":909,"mtime":1615491748211,"results":"164","hashOfConfig":"101"},{"size":882,"mtime":1615491653357,"results":"165","hashOfConfig":"101"},{"size":1571,"mtime":1615506364247,"results":"166","hashOfConfig":"101"},{"size":163,"mtime":1614888850060,"results":"167","hashOfConfig":"101"},{"size":3864,"mtime":1614888810614,"results":"168","hashOfConfig":"101"},{"size":4256,"mtime":1615166005708,"results":"169","hashOfConfig":"101"},{"size":291,"mtime":1615162883609,"results":"170","hashOfConfig":"101"},{"size":136,"mtime":1615506021885,"results":"171","hashOfConfig":"101"},{"size":2057,"mtime":1615505863772,"results":"172","hashOfConfig":"101"},{"size":3659,"mtime":1615409463103,"results":"173","hashOfConfig":"101"},{"size":2215,"mtime":1615506021900,"results":"174","hashOfConfig":"101"},{"size":1735,"mtime":1615315589509,"results":"175","hashOfConfig":"101"},{"size":666,"mtime":1615245400413,"results":"176","hashOfConfig":"101"},{"size":297,"mtime":1615326757108,"results":"177","hashOfConfig":"101"},{"size":1188,"mtime":1615315567149,"results":"178","hashOfConfig":"101"},{"size":1768,"mtime":1615425538457,"results":"179","hashOfConfig":"101"},{"size":4884,"mtime":1615505573016,"results":"180","hashOfConfig":"101"},{"size":1969,"mtime":1615425463556,"results":"181","hashOfConfig":"101"},{"size":1451,"mtime":1615425436373,"results":"182","hashOfConfig":"101"},{"size":1000,"mtime":1615425527655,"results":"183","hashOfConfig":"101"},{"size":1689,"mtime":1615490461716,"results":"184","hashOfConfig":"101"},{"size":804,"mtime":499162500000,"results":"185","hashOfConfig":"101"},{"size":510,"mtime":499162500000,"results":"186","hashOfConfig":"101"},{"size":605,"mtime":499162500000,"results":"187","hashOfConfig":"101"},{"size":941,"mtime":499162500000,"results":"188","hashOfConfig":"101"},{"size":1356,"mtime":499162500000,"results":"189","hashOfConfig":"101"},{"size":2415,"mtime":499162500000,"results":"190","hashOfConfig":"101"},{"size":316,"mtime":1615834796587,"results":"191","hashOfConfig":"101"},{"size":535,"mtime":1615756798386,"results":"192","hashOfConfig":"101"},{"size":2399,"mtime":1615838815704,"results":"193","hashOfConfig":"101"},{"size":1633,"mtime":1615757514166,"results":"194","hashOfConfig":"101"},{"size":1291,"mtime":1615757367913,"results":"195","hashOfConfig":"101"},{"size":1341,"mtime":1615841418615,"results":"196","hashOfConfig":"101"},{"size":2126,"mtime":1615842790573,"results":"197","hashOfConfig":"101"},{"size":711,"mtime":1615847798149,"results":"198","hashOfConfig":"101"},{"size":3603,"mtime":1615847923735,"results":"199","hashOfConfig":"101"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},"ke513i",{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"209"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"231"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"209"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"209"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"209"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"209"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"219"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"231"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"209"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"297"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"301"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"214"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"209"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"231"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"209"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"209"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"326"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"227"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"209"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"209"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"209"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"209"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"370"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"370"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"377","messages":"378","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"209"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"209"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395","usedDeprecatedRules":"209"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"209"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"209"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"423","messages":"424","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"214"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428","usedDeprecatedRules":"214"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"433","messages":"434","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"435","messages":"436","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["437","438"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],["439","440"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",[],["441","442"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],["443","444"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["445"],"import {IsEmpty, IsInRange} from '../_utils';\r\n\r\nexport interface IMongooseCollection { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    enum?: any[]; \r\n    abbrev?: boolean; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\n// Parser functions =============================\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\nexport function ParseField(field:IMongooseField):IField { \r\n  const {path, instance, options, $embeddedSchemaType} = field; \r\n  const ifield:IField = {} as IField; \r\n\r\n  ifield.accessor = path ?? ''; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.type = options?.ref ?? $embeddedSchemaType?.instance ?? field.instance.toLowerCase(); \r\n  ifield.isMixed = instance.toLowerCase() === 'mixed'; \r\n  ifield.isEnum = !!options?.enum; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = !!options?.ref; \r\n  ifield.isAbbrev = !!options?.abbrev; \r\n  ifield.validators = GetValidators(field); \r\n  ifield.isRequired = field.options['required'] ?? false; \r\n  ifield.regex = field.options['regex']? field.options['regex']: undefined; \r\n\r\n  ifield.enums = options.enum ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, field.options); \r\n\r\n  return ifield; \r\n} \r\n\r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} \r\n\r\n\r\nfunction GetValidators(field:IMongooseField):IValidator[] { \r\n  const required = (value:any) => { \r\n    return !IsEmpty(value); \r\n  }; \r\n\r\n  const regex = (value:any) => { \r\n    if(field.options['regex']) \r\n      return new RegExp(field.options['regex']).test(value); \r\n    return true; \r\n  } \r\n\r\n  const range = (value:any) => { \r\n    return IsInRange(value, field.options['min'], field.options['max']); \r\n  } \r\n\r\n  let validators:IValidator[] = []; \r\n  if(field.options['required']) \r\n    validators.push(required); \r\n  if(field.options['regex']) \r\n    validators.push(regex); \r\n  if(field.options['min'] || field.options['max']) \r\n    validators.push(range); \r\n  return validators; \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],["446","447"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["448","449","450"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull, GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield) => { \r\n      return <Cell key={ifield.accessor} {...{ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const data = datas[row]; \r\n  const value = IsEmpty(data) ? GetDefaultValueFromIField(ifield): datas[row][ifield.accessor]; \r\n  const context = {value, row, ifield} as ICellContext; \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n",["451","452"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["453","454","455"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts",["456","457"],"import {Pick, Filter} from '../_arrayutils'; \r\nimport { IsEmpty } from '../_utils';\r\nimport {Collection} from './collection.class'; \r\n\r\nexport interface ICrud { \r\n  Collections:(accessors?:string[]) => Promise<ICrudResponse[]>; \r\n  Create: (accessor:string, toCreate:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Read: (accessor:string, id?:string[]) => Promise<ICrudResponse[]>; \r\n  Update: (accessor:string, toUpdate:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Delete: (accessor:string, toDelete:IEntry[]) => Promise<ICrudResponse[]>; \r\n} \r\n\r\n\r\n// DAO #############################################\r\nexport class DAO { \r\n  public collections:ICollection[] = [] as ICollection[]; \r\n\r\n  private crud:ICrud = {} as ICrud; \r\n\r\n  constructor(crud:ICrud) { \r\n    this.crud = crud; \r\n  } \r\n\r\n  // Get ICollections ----------------------------- \r\n  public GetICollections(accessors?:string[]):ICollection[] { \r\n    if(!accessors) \r\n      return this.collections; \r\n    const compare = (t:ICollection, accessor:string) => {return t.accessor === accessor}; \r\n    return Pick(this.collections, accessors, compare); \r\n  } \r\n\r\n  // Get IFields -----------------------------------\r\n  public GetIFields(accessor:string, fields?:string[]):IField[] { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    if(!fields) \r\n      return collection?.ifields ?? []; \r\n    const compare = (f:IField, accessor:string) => {return f.accessor === accessor}; \r\n    return Pick(collection?.ifields, fields, compare); \r\n  }\r\n\r\n  // Get Entries --------------------------------------\r\n  public GetIEntries(accessor:string, ids?:string[]):IEntry[] { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    if(!ids)\r\n      return collection?.entries ?? []; \r\n    const compare = (e:IEntry, id:string) => {return e._id === id}; \r\n    return Pick(collection?.entries, ids, compare); \r\n  }\r\n\r\n  // Get Default IEntry ----------------------------------\r\n  public GetDefaultIEntry(accessor:string):IEntry { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    return new Collection(collection).GetDefaultIEntry(); \r\n  } \r\n  \r\n  // GET FOREIGN ELEMENTS -----------------------------\r\n  public GetForeignElements(ifield:IField) \r\n    : {foreignCollection:ICollection|undefined, abbrevField:IField|undefined} \r\n  { \r\n    const foreignCollection = this.collections.find(c => c.accessor === ifield.type); \r\n    const abbrevField = foreignCollection?.ifields.find(f=>f.isAbbrev); \r\n    return {foreignCollection, abbrevField}; \r\n  } \r\n\r\n  // Get Options ----------------------------------------\r\n  public GetIOptions(ifield:IField):IOption[] { \r\n    if(ifield.isEnum)\r\n      return ifield.enums?.map(e => {return {value:e, label:e}}) ?? [] as IOption[];  \r\n    if(!ifield.isModel) \r\n      return [] as IOption[]; \r\n    const {foreignCollection, abbrevField} = this.GetForeignElements(ifield); \r\n    if(!foreignCollection || !abbrevField) \r\n      return [] as IOption[]; \r\n    return foreignCollection.entries?.map( e => { \r\n      return {value:e._id, label:e[abbrevField.accessor]} as IOption; \r\n    }); \r\n  } \r\n\r\n  // COLLECTIONS -------------------------------------------\r\n  public async Collections(accessors?:string[]):Promise<ICrudResponse[]> { \r\n    const responses = (await this.crud.Collections(accessors)) as ICrudResponse[]; \r\n    const icollections = responses.filter(r => r.success).map(r => r.data as ICollection); \r\n    this.PushUpdateCollection(icollections); \r\n    return responses; \r\n  } \r\n\r\n  private PushUpdateCollection(icollections:ICollection[]) { \r\n    icollections.forEach( newCol => { \r\n      const index = this.collections.findIndex(col => col.accessor === newCol.accessor); \r\n      if(index >=0) \r\n        this.collections[index] = newCol; \r\n      else \r\n        this.collections.push(newCol); \r\n    }) \r\n  } \r\n\r\n\r\n  /*Create Or Update ---------------------------------- \r\n  Create entries satisfying a given predicate. \r\n  Or else update entries. \r\n  */\r\n  public async CreateUpdate(accessor:string, entries:IEntry[], predicate?:(entry:IEntry)=>boolean):Promise<ICrudResponse[]> { \r\n    const defaultPredicate = (entry:IEntry):boolean => IsEmpty(entry._id); \r\n    const {inclusion:toCreate, exclusion:toUpdate} = Filter(entries, predicate ?? defaultPredicate); \r\n    const createResponses = !IsEmpty(toCreate) ? await this.Create(accessor, toCreate) : []; \r\n    const updateResponses = !IsEmpty(toUpdate) ? await this.Update(accessor, toUpdate) : []; \r\n    return [...createResponses, ...updateResponses]; \r\n  } \r\n\r\n  /* Create -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Create(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Create(accessor, entries)) as ICrudResponse[]; \r\n    const created = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Create(created); \r\n    return responses; \r\n  } \r\n\r\n  /* Read -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  Create/Update read data to local. \r\n  */\r\n  public async Read(accessor:string, ids?:string[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Read(accessor, ids)) as ICrudResponse[]; \r\n    const read = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    return responses; \r\n  } \r\n\r\n  /* Update -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Update(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Update(accessor, entries)) as ICrudResponse[]; \r\n    const updated = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Update(updated); \r\n    return responses; \r\n  } \r\n\r\n  /* Delete -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Delete(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Delete(accessor, entries)) as ICrudResponse[]; \r\n    const deleted = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Delete(deleted); \r\n    return responses; \r\n  } \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx",[],["458","459"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx",["460"],"import React, { useContext, useState } from 'react'; \r\nimport {IsEmpty} from '../../_utils'; \r\nimport {useSelect, IUseSelect} from './select.hook'; \r\nimport {IEditor} from '../../_input'; \r\nimport {useToggle, IUseToggle} from '../../_customhooks'; \r\n\r\n\r\nimport './select.style.css'; \r\n\r\nexport function TestSelect() { \r\n  const options:IOption[] = [\r\n    {value:0, label:'valeur 0'}, \r\n    {value:1, label:'valeur 1'}, \r\n    {value:2, label:'valeur 2'}, \r\n    {value:3, label:'valeur 3'}, \r\n  ] \r\n\r\n  const ifield = {accessor:'', label:'', defaultValue:'', type:'string'} as IField; \r\n  const [value, setValue] = useState(0); \r\n\r\n\r\n\r\n  return <div> \r\n    <span>{JSON.stringify(value)}</span> \r\n    <span>Label:</span> \r\n    <Select {...{ifield, value, setValue, options}} /> \r\n    <span>asdasdasdsa:</span> \r\n  </div> \r\n} \r\n\r\n\r\nexport const SelectContext = React.createContext({} as IUseSelect); \r\nexport function Select({ifield, value, setValue, options}:IEditor) { \r\n  const context = useSelect({ifield, value, setValue, options}); \r\n\r\n  const {toggle, ToggleBtnAction, toggleTarget, Toggle} = useToggle<HTMLDivElement>(true); \r\n\r\n  const CloseToggle = () => { \r\n    if(!context.multiple) \r\n      Toggle(); \r\n  }\r\n\r\n  return <SelectContext.Provider value={context}> \r\n    <div className={'select-main'} > \r\n      <div  {...ToggleBtnAction()} > \r\n        <Selection/> \r\n      </div> \r\n      <div tabIndex={0} ref={toggleTarget} hidden={toggle} onClick={CloseToggle}> \r\n        <Options /> \r\n      </div> \r\n    </div> \r\n  </SelectContext.Provider> \r\n}\r\n\r\n\r\nfunction Selection() {\r\n  const {SelectValue, GetSelection} = useContext(SelectContext); \r\n  const selection = GetSelection(); \r\n\r\n  return <div className={'select-header'}> \r\n\r\n    {IsEmpty(selection) && <span className={'select-placeholder'}> --- Empty --- </span>} \r\n\r\n    {selection.map( (option, i) => { \r\n      const key = JSON.stringify(option.value); \r\n      const onClick = () => SelectValue(option?.value); \r\n      const className = 'select-option'; \r\n      return <span key={key} {...{onClick, className}}> \r\n        {option?.label}{(i < selection.length-1) ? ', ':''}\r\n      </span> \r\n    })} \r\n  </div> \r\n}\r\n\r\n\r\n\r\nfunction Options() { \r\n  const {options, SelectValue, GetSelection} = useContext(SelectContext); \r\n  const selection = GetSelection(); \r\n  const IsSelected = (option:IOption) => selection.some(o => o?.value === option?.value); \r\n\r\n  /*const style: CSS.Properties = { \r\n    display: 'none', \r\n    position: 'absolute', \r\n    width: '100%', \r\n    zIndex: 1, \r\n  }*/\r\n\r\n  return <div className={'select-options'}  > \r\n    {options.map( option => { \r\n      const key = JSON.stringify(option.value); \r\n      const onClick = () => SelectValue(option.value); \r\n      const className = IsSelected(option) ? 'select-option-selected': 'select-option'; \r\n      return <div key={key} {...{onClick, className}} > \r\n        {option.label} \r\n      </div> \r\n    })}\r\n  </div>\r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx",["461","462","463","464","465","466"],"import React, { useContext, useEffect, useState } from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex, ElementValue} from '../../../reusable/_arrx'; \r\nimport {Input} from '../input/input.component'; \r\nimport {IInputArray, IUseInputArray, useInputArray} from './inputarray.hook'; \r\n\r\n\r\nexport const InputArrayContext = React.createContext({} as IUseInputArray); \r\nexport function InputArray({...props}:React.PropsWithChildren<IInputArray>) { \r\n  const context = useInputArray(props); \r\n  const {values} = props; \r\n  \r\n  return <InputArrayContext.Provider value={context} > \r\n    <Arrx {...{values}} > \r\n      <Elements> \r\n        <UpdateElement/> <DeleteBtn/>\r\n        <br/> \r\n      </Elements> \r\n      <CreateElement/>\r\n    </Arrx> \r\n  </InputArrayContext.Provider> \r\n} \r\n\r\n\r\n// Create element =======================================\r\nfunction CreateElement() { \r\n  const {ifield, Create} = useContext(InputArrayContext); \r\n  const {defaultValue} = ifield; \r\n  const [value, setValue] = useState(defaultValue); \r\n\r\n  const onPressEnter = () => { \r\n    Create(value); \r\n    setValue(defaultValue); // reset input to defaultValue after creation. \r\n  }; \r\n  return <Input {...{value, setValue, ifield, onPressEnter}}  /> \r\n} \r\n\r\n// Update element =======================================\r\nfunction UpdateElement() { \r\n  const {values, ifield, Update} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  const [value, setValue] = useState(values[index]); \r\n  \r\n  useEffect(() => { \r\n    setValue(values[index]); \r\n  }, [JSON.stringify(values[index])]); \r\n\r\n  const onPressEnter = () => Update(index, value); \r\n  return <Input {...{value, setValue, ifield, onPressEnter}}  /> \r\n}\r\n\r\n// Delete Btn ===================================\r\nexport function DeleteBtn({children, ...props}:React.PropsWithChildren<React.ButtonHTMLAttributes<HTMLButtonElement>>) { \r\n  const {Delete} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  return <button onClick={() => Delete(index)} {...props}> \r\n    {!children ? 'x' : children} \r\n  </button> \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx",["467","468"],"import {useEffect, useRef} from 'react'; \r\n\r\nexport function useUpdate(callback:() => void, changeling:any) { \r\n  const flagFirstRender = useRef(true); \r\n  \r\n  useEffect(() => { \r\n    if(flagFirstRender.current) { \r\n      flagFirstRender.current = false; \r\n      return; \r\n    } \r\n    callback(); \r\n  }, [JSON.stringify(changeling)]); \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx",["469","470"],"import React, { useState } from 'react'; \r\nimport {Reader, Editor, Select} from '../reusable/_input'; \r\nimport {GetValueAt, SetValueAt} from '../reusable/_utils'; \r\n\r\n\r\nconst numField:IField = {accessor:'num', label:'Accessor', type:'number', defaultValue:0, options:{}} as IField; \r\nconst strField:IField = {accessor:'str', label:'Accessor', type:'string', defaultValue:'', options:{}} as IField; \r\nconst boolField:IField = {accessor:'bool', label:'Accessor', type:'boolean', defaultValue:false, options:{}} as IField; \r\n\r\nconst numOptions:IOption[] = [ \r\n  {value: 0, label:'value 0'}, \r\n  {value: 1, label:'value 1'}, \r\n  {value: 2, label:'value 2'}, \r\n  {value: 3, label:'value 3'}, \r\n] \r\n\r\nconst strOptions:IOption[] = [ \r\n  {value: 'a', label:'value a'}, \r\n  {value: 'b', label:'value b'}, \r\n  {value: 'c', label:'value c'}, \r\n  {value: 'd', label:'value d'}, \r\n] \r\n\r\nconst boolOptions:IOption[] = [ \r\n  {value: false, label:'female'}, \r\n  {value: true, label:'male'}, \r\n] \r\n\r\nconst testRead:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n  {value: 12, ifield: {...numField}}, \r\n  {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n  {value: 'bababa', ifield:{...strField} }, \r\n  {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n  {value: false, ifield:{...boolField} }, \r\n  {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n  // options\r\n  {value: 2, ifield:{...numField}, options:numOptions }, \r\n  {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n  {value: 'b', ifield:{...strField}, options:strOptions}, \r\n  {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n  {value: false, ifield:{...boolField}, options:strOptions}, \r\n  {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n] \r\n\r\n  /*const testEditor:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n    {value: 12, ifield: {...numField}}, \r\n    {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n    {value: 'bababa', ifield:{...strField} }, \r\n    {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n    {value: false, ifield:{...boolField} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n    // options\r\n    {value: 2, ifield:{...numField}, options:numOptions }, \r\n    {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n    {value: 'b', ifield:{...strField}, options:strOptions}, \r\n    {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n    {value: false, ifield:{...boolField, options:strOptions} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n  ] */\r\n\r\n/*\r\nfunction useStateAt(_value:any) { \r\n  const [value, setValue] = useState(_value); \r\n  const ValueAt = (keys?:any[], newValue?:any) => { \r\n    if(newValue && JSON.stringify(ValueAt(keys)) !== newValue) \r\n      return SetValueAt(value, newValue, keys); \r\n    return GetValueAt(value, keys); \r\n  } \r\n  return ValueAt; \r\n} \r\n  \r\nexport function TestValueAt() { \r\n  const VALUE = {a:[15,46], b:[96,45]} \r\n  const valueAt = useStateAt(VALUE); \r\n  const value = valueAt(['a',0]); \r\n  const setValue = valueAt(['a',0]); \r\n\r\n  return <div> \r\n    <Editor {...{value}} /> \r\n  </div> \r\n} */\r\n\r\n\r\n// Test select when value is not in the avaible options */ \r\nexport function TestSelect () { \r\n  const [value, setValue] = useState(['-1']); \r\n  const options = [ \r\n    {value:'0', label:'option 0'}, \r\n    {value:'1', label:'option 1'}, \r\n    {value:'2', label:'option 2'}, \r\n    {value:'3', label:'option 3'} \r\n  ] \r\n\r\n  return <Select {...{value, setValue, options, multiple:true}} /> \r\n} \r\n\r\nexport function TestEditors() {\r\n  \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <TestEditor {...e} /></div> \r\n    })} \r\n    <br/>\r\n    asdsadsadas\r\n    <br/>\r\n  </div> \r\n}\r\n\r\n\r\nexport function TestEditor({ifield, options, ...props}:{value:any, ifield:IField, options?:IOption[]}) { \r\n  const [value, setValue] = useState(props.value); \r\n  return <div> \r\n    <div>{JSON.stringify(value)}</div> \r\n    <Editor {...{ifield, value, setValue, options}} /> \r\n    <br/>\r\n  </div>\r\n}\r\n\r\n\r\nexport function TestReader() { \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <Reader {...e} /></div> \r\n    })} \r\n  </div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx",["471"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudmongoose.class.ts",["472"],"import axios from 'axios'; \r\nimport {ParseCollection} from './mongooseparser.utils'; \r\n\r\n\r\n// Crud Mongoose =======================================\r\nexport class Fetcher { \r\n  public baseUrl:string = ''; \r\n\r\n  constructor(baseUrl:string) { \r\n    this.baseUrl = baseUrl; \r\n  }\r\n\r\n  // Access -----------------------------------------------\r\n  public async Access() { \r\n    return await axios.get(this.baseUrl); \r\n  } \r\n\r\n  /* \r\n  PUT ...api/collections \r\n    req.body => accessors:string[] \r\n    res:ICrudResponse[] \r\n  */ \r\n  // Collections ..........................................\r\n  public async Collections(accessors:string[]): Promise<ICrudResponse[]> { \r\n    const axiosResponses = (await axios.put(this.baseUrl+'collections/', accessors)).data as ICrudResponse[]; \r\n    return axiosResponses.map( r => { \r\n      const parsedCollection = ParseCollection(r.data); \r\n      return {...r, data:parsedCollection} as ICrudResponse; \r\n    }); \r\n  } \r\n\r\n  // Validate .............................................\r\n  public async Validate(accessor:string, entries:IEntry[]) { \r\n    return await axios.put(this.baseUrl+'validate/'+accessor, entries); \r\n  } \r\n\r\n  // Ids ..................................................\r\n  public async Ids(accessor:string): Promise<string[]>{ \r\n    return (await axios.get(this.baseUrl+'ids/'+accessor)).data; \r\n  } \r\n\r\n\r\n  //?? public async CreateUpdate ?? \r\n\r\n\r\n  // Create ...............................................\r\n  public async Create(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toCreate = entries.map(e => { \r\n      const {_id, _v, ...data} = e; \r\n      return data; \r\n    }); \r\n    return (await axios.put(this.baseUrl+'create/'+accessor, toCreate)).data; \r\n  } \r\n\r\n  // ICrudResponse ?? or IEntry ??\r\n  // Read .................................................\r\n  public async Read(accessor:string, ids?:string[]): Promise<ICrudResponse[]> {\r\n    const responses = await axios.put(this.baseUrl+'read/'+accessor, ids); \r\n    return responses.data; \r\n  }\r\n\r\n  // Update ...............................................\r\n  public async Update(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    return (await axios.put(this.baseUrl+'update/'+accessor, entries)).data; \r\n  }\r\n\r\n  // Delete ...............................................\r\n  /* Sends an array of objects with the only property being '_id' ... [{_id}] */\r\n  public async Delete(modelName:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toDelete = entries.map(e => { \r\n      const {_id, ...data} = e; \r\n      return {_id}; \r\n    }); \r\n    return (await axios.put(this.baseUrl+'delete/'+modelName, toDelete)).data; \r\n  } \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\testrender.tsx",["473","474"],"import {useState} from 'react'; \r\nimport {Reader, IReader, Editor, IEditor} from '../../reusable/_input'; \r\n\r\n\r\nconst stringField = {accessor:'', label:'', defaultValue:'', type:'string'} as IField; \r\nconst numField = {accessor:'', label:'', defaultValue:0, type:'number'} as IField; \r\nconst boolField = {accessor:'', label:'', defaultValue:false, type:'boolean'} as IField; \r\n\r\n// Options\r\nconst stringOptions = [ \r\n  {value:'a', label:'option 0'}, \r\n  {value:'b', label:'option 1'}, \r\n  {value:'c', label:'option 2'} \r\n] as IOption[]; \r\n\r\nconst numOptions = [ \r\n  {value:0, label:'option 0'}, \r\n  {value:1, label:'option 1'}, \r\n  {value:2, label:'option 2'} \r\n] as IOption[]; \r\n\r\n\r\n\r\n// One String \r\nconst strOne:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined string', args:{ifield: stringField, value:undefined}}, // undefined string \r\n  {label: 'Empty string', args:{ifield: stringField, value:''}}, // empty string \r\n  {label: 'Correct string', args:{ifield: stringField, value:'baba'}}, // none empty string \r\n]\r\n\r\n// One option String\r\nconst strOneOptions:{label:string, args:IReader}[] = [\r\n  \r\n  {label: 'Undefined string option', args:{ifield: stringField, value:undefined, options:stringOptions}}, // undefined string \r\n  {label: 'Empty string option', args:{ifield: stringField, value:''}}, // empty string \r\n  {label: 'a string option', args:{ifield: stringField, value:'a', options:stringOptions}}, // some string\r\n  {label: 'b string option', args:{ifield: stringField, value:'b', options:stringOptions}}, // some string\r\n]\r\n\r\n\r\n// Many String \r\nconst strMany:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined string[]', args:{ifield:{...stringField, isArray:true}, value:undefined}},  // undefined string[] \r\n  {label: 'Empty string[]', args:{ifield:{...stringField, isArray:true}, value:[]}},  // empty string[] \r\n  {label: 'Single string[]', args:{ifield:{...stringField, isArray:true}, value:['dada']}},  // one correct string[] \r\n  {label: 'Many string[]', args:{ifield:{...stringField, isArray:true}, value:['dada', 'fafa', 'gaga']}},  // many correct string[] \r\n]\r\n\r\n  // Many options String \r\nconst strManyOptions:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined option string[]', args:{ifield:{...stringField, isArray:true}, value:undefined, options:stringOptions}},  // undefined string[] \r\n  {label: 'Empty option string[]', args:{ifield:{...stringField, isArray:true}, value:[], options:stringOptions}},  // empty string[] \r\n  {label: 'One string[]', args:{ifield:{...stringField, isArray:true}, value:['a'], options:stringOptions}},  // one correct string[] \r\n  {label: 'Incorrect option string[]', args:{ifield:{...stringField, isArray:true}, value:['babaa'], options:stringOptions}},  // one incorrect string[] \r\n  {label: 'Many options string[]', args:{ifield:{...stringField, isArray:true}, value:['c', 'b', 'a'], options:stringOptions}},  // many correct string[] \r\n]\r\n\r\nconst numOne:{label:string, args:IReader}[] = [\r\n  // One Number \r\n  {label: 'Undefined number', args:{ifield: numField, value:undefined}}, // undefined number \r\n  {label: 'Number zero', args:{ifield: numField, value:0}}, // zero number \r\n  {label: 'Number 12', args:{ifield: numField, value:12}}, // some number \r\n]\r\n\r\n// One options number \r\nconst numOneOptions:{label:string, args:IReader}[] = [  \r\n  {label: 'Undefined number[] option', args:{ifield: numField, value:undefined, options:numOptions}}, // undefined number \r\n  {label: 'Zero options string[] option', args:{ifield: numField, value:0, options:numOptions}}, // zero number \r\n  {label: 'Correct string[] option', args:{ifield: numField, value:2, options:numOptions}}, // zero number \r\n  {label: 'Incorrect string[] option', args:{ifield: numField, value:12, options:numOptions}}, // incorrect options value\r\n]\r\n\r\n// Many Number\r\nconst numMany:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined number[]', args:{ifield:{...numField, isArray:true}, value:undefined}},  // undefined number[] \r\n  {label: 'Empty number[]', args:{ifield:{...numField, isArray:true}, value:[]}},  // empty number[] \r\n  {label: 'Single number[]', args:{ifield:{...numField, isArray:true}, value:[2]}},  // single correct number[] \r\n  {label: 'Many number[]', args:{ifield:{...numField, isArray:true}, value:[1, 2, 0]}},  // many correct number[] \r\n]\r\n  // Many options Number\r\nconst numManyOptions:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined option number[]', args:{ifield:{...numField, isArray:true}, value:undefined, options:numOptions}},  // undefined number[] \r\n  {label: 'Empty option number[]', args:{ifield:{...numField, isArray:true}, value:[], options:numOptions}},  // empty number[] \r\n  {label: 'Single option number[]', args:{ifield:{...numField, isArray:true}, value:[2], options:numOptions}},  // single correct number[] \r\n  {label: 'Many option number[]', args:{ifield:{...numField, isArray:true}, value:[1, 2, 0], options:numOptions}},  // many correct number[] \r\n  {label: 'Single incorrect number[]', args:{ifield:{...numField, isArray:true}, value:[12], options:numOptions}},  // incorrect number[] \r\n]\r\n\r\n\r\nexport function ReaderFuncSpecial({ifield, value}:IReader) { \r\n  return <div>SPECIAL :{JSON.stringify(value)}</div> \r\n} \r\n\r\nexport function TestReader() { \r\n  const strs = [...strOne, ...strOneOptions, ...strMany, ...strManyOptions]; \r\n  const nums = [...numOne, ...numOneOptions, ...numMany, ...numManyOptions]; \r\n\r\n  return <div> \r\n    <h3>Strings</h3> \r\n    {strs.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <Reader {...{...args}} /><br/></div> \r\n    })} \r\n\r\n    <h3>Numbers </h3>\r\n    {nums.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <Reader {...args} /><br/></div> \r\n    })} \r\n    </div> \r\n} \r\n\r\n\r\nexport function TestEditors() { \r\n  return <div>\r\n    <h3>Strings </h3>\r\n    {strOne.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <TestEditor {...args} /><br/></div>\r\n    })} \r\n\r\n    <h3>Numbers </h3>\r\n    {numOne.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <TestEditor {...args} /><br/></div>\r\n    })} \r\n    </div> \r\n} \r\n\r\n\r\nexport function TestEditor({...args}:IReader) { \r\n  const [value, setValue] = useState(args.value); \r\n  const {ifield, options} = args; \r\n  return <div>\r\n    {value} :\r\n    <Editor {...{value, setValue, ifield, options}} /> \r\n  </div>\r\n} ",["475","476"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testarray\\testarrayutils.experiment.tsx",["477","478","479","480","481","482","483","484","485","486","487","488","489","490"],"import React from 'react'; \r\nimport {Comparator, Predicate, Sorter, Pick, ToArray, Intersect, Filter, Union, Groups, Group, Sort} \r\n  from '../../reusable/_arrayutils'; \r\nimport {IsEmpty, IsNull} from '../../reusable/_utils'; \r\n\r\n\r\n\r\nconst nul = undefined; \r\nconst empty:any[] = []; \r\nconst nums = [5, 3, 7, 9, 6, 7, 8]; \r\nconst strs = ['a', 'bf', 'hf', 'l']; \r\n\r\ntype ObjId = {id:string}; \r\nconst objs = [\r\n  {id:'b'}, \r\n  {id:'c'}, \r\n  {id:'d'}, \r\n  {id:'c'}, \r\n  {id:'d'}, \r\n  {id:'a'},\r\n  {id:'c'}, \r\n  {id:'d'}, \r\n  {id:'a'}\r\n]; \r\ntype ObjIdNumStr = {id:string, num:number, str:string}; \r\nconst objIdVal:ObjIdNumStr[] = [ \r\n  {id:'a', num:1, str: 'b'}, \r\n  {id:'a', num:2, str: 'f'}, \r\n  {id:'c', num:1, str: 'g'}, \r\n  {id:'a', num:3, str: 'l'}, \r\n  {id:'c', num:2, str: 'f'}, \r\n  {id:'a', num:3, str: 'l'}, \r\n  {id:'c', num:1, str: 'd'}, \r\n]; \r\n\r\n\r\n// Test Util ==================================== \r\nexport function TestArrayUtil() { \r\n  /*\r\n    <TestFilters/> \r\n    <TestSorts/> \r\n  */\r\n  return <div> \r\n\r\n    <TestGroups /> \r\n  </div> \r\n} \r\n\r\n\r\n// GROUP ==================================================\r\nfunction TestGroups() { \r\n  const indexes:number[][] = []; \r\n\r\n  const groupOf3 = (v:any, As:any[], Bs:any[], Cs:any[]) => { \r\n    const result = As.length < 3; \r\n    return result; \r\n  }\r\n  const groupById = (v:ObjId, As:ObjId[], Bs:ObjId[]) => { \r\n    const [pivot] = As; \r\n    const result = IsNull(pivot) || pivot.id === v.id; \r\n    return result; \r\n  } \r\n  \r\n  // <TestGroup {...{data:empty, predicate:groupById}} /> <br/>\r\n  // <TestGroup {...{data:objs, predicate:groupOf3}} /> <br/>\r\n  return <div> \r\n    <TestGroup {...{data:objs, predicate:groupById}} /> <br/>\r\n    \r\n  </div> \r\n} \r\n\r\n\r\nfunction TestGroup<T>({data = [], predicate}:{data:T[], predicate:Predicate<T>}) { \r\n  const groups = Group(data, predicate); \r\n\r\n  return <div> \r\n    <b>{JSON.stringify(predicate.name)}</b> <br/> \r\n    data: {JSON.stringify(data)} <br/> \r\n    {groups.map( (group,i) => { \r\n      return <div key={i}><span>{i}:</span> \r\n        {JSON.stringify(group)} \r\n      </div> \r\n    })} \r\n  </div> \r\n} \r\n\r\n\r\n\r\n\r\n\r\n// SORT =================================================== \r\nfunction TestSorts() { \r\n  const ascending = (t:any, pivot:any) => t > pivot; \r\n  const descending = (t:any, pivot:any) => t < pivot; \r\n\r\n  const ascendingId = (t:ObjId, pivot:ObjId) => t.id > pivot.id; \r\n  const descendingId = (t:ObjId, pivot:ObjId) => t.id < pivot.id; \r\n\r\n  return <div> \r\n    <TestSort {...{data:nums, sorter:ascending}} /> <br/> \r\n    <TestSort {...{data:nums, sorter:descending}} /> <br/> \r\n\r\n    <TestSort {...{data:strs, sorter:ascending}} /> <br/> \r\n    <TestSort {...{data:strs, sorter:descending}} /> <br/> \r\n\r\n    <TestSort {...{data:objs, sorter:ascendingId}} /> <br/> \r\n    <TestSort {...{data:objs, sorter:descendingId}} /> <br/> \r\n  </div> \r\n} \r\n\r\nfunction TestSort<T>({data, sorter}:{data:T[], sorter:Sorter<T>}) { \r\n  const sorted = Sort(data, sorter); \r\n\r\n  return <div>\r\n    <b>{JSON.stringify(sorter.name)}</b> <br/> \r\n    <div>Unsorted: {JSON.stringify(data)}</div> \r\n    <div>Sorted: {JSON.stringify(sorted)}</div> \r\n  </div>\r\n}\r\n\r\n\r\n// Filter ================================================= \r\nfunction TestFilters() { \r\n  const even = (value:number) => value % 2 === 0; \r\n  const half = (v:any, a:any[], b:any[], c:any[]) => a.length < b.length; \r\n  const first4 = (v:any, a:any[], b:any[], c:any[]) => a.length < 4; \r\n  const last4 = (v:any, a:any[], b:any[], c:any[]) => c.length < 4; \r\n  const duplicate = (v:any, As:any[], Bs:any[], Cs:any[]) => { \r\n    return As.some( a => a === v ) || Cs.some( c => c === v); \r\n  } \r\n  const idC = (v:ObjId) => v.id === 'c'; \r\n  const duplicateId = (v:ObjId, As:ObjId[], Bs:ObjId[], Cs:ObjId[]) => { \r\n    return As.some( a => a.id === v.id ) || Cs.some( c => c.id === v.id); \r\n  } \r\n\r\n  return <div>\r\n    <TestFilter {...{data:strs, predicate:half}}/> <br/> \r\n    <TestFilter {...{data:nums, predicate:duplicate}}/> <br/> \r\n    <TestFilter {...{data:objs, predicate:duplicateId}}/> <br/> \r\n\r\n    <TestFilter {...{data:objs, predicate:idC}}/> <br/> \r\n\r\n    <TestFilter {...{data:nums, predicate:even}}/> <br/> \r\n    <TestFilter {...{data:nums, predicate:half}}/> <br/> \r\n    <TestFilter {...{data:nums, predicate:first4}}/> <br/> \r\n    <TestFilter {...{data:nums, predicate:last4}}/> <br/> \r\n  </div>\r\n}\r\n\r\nfunction TestFilter<T>({data, predicate}:{data:T[], predicate:Predicate<T>}) { \r\n  const [positive, negative] = Filter(data, predicate); \r\n\r\n  return <div> \r\n    {JSON.stringify(predicate.name)} <br/> \r\n    data: {JSON.stringify(data)} <br/> \r\n    positive: {JSON.stringify(positive)} <br/> \r\n    negative: {JSON.stringify(negative)} <br/> \r\n  </div> \r\n}\r\n\r\n",["491","492"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\value.utils.ts",["493","494"],"/* Copy ========================================= \r\nreturn a shallow copy of a value \r\nif that value is either an array or an object\r\n\r\notherwise return the value itself. \r\n*/\r\nexport function Copy(value:any) { \r\n  if(Array.isArray(value)) \r\n    return [...value] \r\n  if(typeof value === 'object') \r\n    return {...value} \r\n  return value; \r\n} \r\n\r\n\r\n/* HasKey =========================================\r\nRecursively search through 'value' to find the nested keys specified in keys. \r\nReturns false if it fails to find one of the keys. \r\nReturn true if it find all of the keys. \r\n\r\n!!! Note: Works for both objects and arrays. \r\n*/ \r\nexport function HasKey(value:any, keys?:any[]):boolean { \r\n  if(IsEmpty(value) || !keys || IsEmpty(keys)) \r\n    return false; \r\n  const [key, ...remainingKeys] = keys; \r\n  const _key = typeof key === 'string' ? key: new Number(key).toString(); \r\n  if(!Object.keys(value).includes(_key) ) \r\n    return false; \r\n  if(IsEmpty(remainingKeys)) \r\n    return true; \r\n  return HasKey(value[_key], remainingKeys); \r\n}\r\n\r\n\r\n/* SetValueAt =====================================\r\nAssign a newValue in object or array value at the index/key defined by keys. \r\nCan assign a newValue to object with multiple levels. \r\n*/\r\nexport function SetValueAt(value:any, newValue:any, keys?:any[]):any { \r\n  if(!keys || IsEmpty(keys)) \r\n    return newValue; \r\n  const [key, ...remainingKeys] = keys; \r\n  const copy = Copy(value); \r\n  copy[key] = IsEmpty(remainingKeys) ? \r\n    copy[key] = newValue: \r\n    copy[key] = SetValueAt(copy[key], newValue, remainingKeys); \r\n  return copy; \r\n} \r\n\r\n/* GetValueAt ========================================\r\nReturn value specified at 'keys' \r\n*/\r\nexport function GetValueAt(value:any, keys?:any[]):any { \r\n  if(IsEmpty(value) || !keys || IsEmpty(keys)) \r\n    return value; \r\n  const [key, ...remainingKeys] = keys; \r\n  return GetValueAt(value[key], remainingKeys); \r\n} \r\n\r\n\r\n/* IsNUll =======================================\r\nreturns true if value is:\r\n  - undefined\r\n  - null\r\notherwise returns false\r\n*/\r\nexport function IsNull(value:any): boolean { \r\n  return (value ?? null) === null || IsNaN(value); \r\n} \r\n\r\nexport function IsNaN(value:any): boolean { \r\n  return typeof value === 'number' && new Number(value).toString() === 'NaN'; \r\n}\r\n\r\n/* IsEmpty ====================================== \r\nreturn true if value is \r\n  - undefined\r\n  - null\r\n  - '' (an empty string)\r\n  - [] (an empty array)\r\n  - {} (an empty object)\r\notherwise returns false\r\n*/\r\nexport function IsEmpty(value:any): boolean {\r\n  if(IsNull(value)) \r\n    return true; \r\n  if(Array.isArray(value) && value.length === 0) \r\n    return true; \r\n  if(JSON.stringify(value) === '{}') \r\n    return true; \r\n  if(value === '') \r\n    return true; \r\n  return false; \r\n}\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrayutils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\editor.component.tsx",["495","496"],"import React, {useEffect, useState} from 'react'; \r\nimport {GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\nimport {ToArray, Pick} from '../../_arrayutils'; \r\nimport {Input, InputArray} from '../../_input'; \r\nimport {Select} from '../../_input'; \r\n\r\nimport {IReader} from './reader.component'; \r\nimport { useUpdate } from '../../_customhooks'; \r\n\r\n\r\n\r\nexport interface IEditor extends IReader { \r\n  //setValue: React.Dispatch<React.SetStateAction<any>>; \r\n  setValue: (newValue:any) => void; \r\n} \r\n\r\ntype EditorFunc = ({...props}:IEditor) => JSX.Element; \r\n\r\nexport interface IEditorComponent extends IEditor { \r\n  CustomEditDefault?:EditorFunc; \r\n\r\n  CustomEditOne?:EditorFunc; \r\n  CustomEditMany?:EditorFunc; \r\n\r\n  CustomEditOneOptions?:EditorFunc; \r\n  CustomEditManyOptions?:EditorFunc; \r\n\r\n  CustomEditMixed?:EditorFunc; \r\n} \r\n\r\n/* EDITOR ===========================================================\r\n- ifield      // gives info about the type and default values to be displayed. \r\n- value       // will be assigned to its appropriate default values if undefined. \r\n- options     // if not empty, the label matching the value will be displayed. \r\n- setValue    // hooks with parent component value. \r\n\r\n- CustomEditDefault : if defined this function will be used display value. \r\n\r\n- CustomEditOne : if defined is used to display value, otherwise uses 'EditOne' (Input) \r\n\r\n- CustomEditMany : if defined is used to display value, otherwise uses 'EditMany' (Input array) \r\n\r\n- CustomEditOneOptions : if defined is used to display value, otherwise uses 'EditOneOptions' (Select with multiple:false) \r\n\r\n- CustomEditOneOptions : if defined is used to display value, otherwise uses 'EditManyOptions' (Select with multiple:true) \r\n\r\n- CustomEditMixed : if defined is use to display value, otherwise uses 'EditMixed' (EditMixed) \r\n*/ \r\nexport function Editor({ifield, options, ...props}:IEditorComponent) { \r\n  const _value = IsEmpty(options) ? \r\n    props.value ?? GetDefaultValueFromIField(ifield): \r\n    GetSelection(props.value).map(o => o.value); \r\n  \r\n  const [value, setValue] = useState(_value); \r\n  \r\n  // synchronize from parent value\r\n  useEffect(() => { \r\n    if(value !== _value) \r\n      props.setValue(value); \r\n  }, [value]); \r\n\r\n  // synchronize to parent value \r\n  //useUpdate(() => {props.setValue(_value)},_value); \r\n\r\n  function GetSelection (value:any) { \r\n    return Pick(options, ToArray(props.value), (o,u) => o.value === u); \r\n  } \r\n\r\n  const args = {ifield, value, setValue, options}; \r\n  const hasOptions = !IsEmpty(options); \r\n\r\n  // Edit Default\r\n  let editfunc = props.CustomEditDefault ?? undefined; \r\n\r\n  // Edit Many options\r\n  if(!editfunc && ifield.isArray && hasOptions) \r\n    editfunc = props.CustomEditManyOptions ?? EditManyOptions; \r\n\r\n  // Edit Many\r\n  if(!editfunc && ifield.isArray && !hasOptions) \r\n    editfunc = props.CustomEditMany ?? EditMany; \r\n\r\n  // Edit Mixed\r\n  if(!editfunc && ifield.isMixed) \r\n    editfunc = props.CustomEditMixed ?? EditMixed; \r\n\r\n  // Edit One option\r\n  if(!editfunc && hasOptions) \r\n    editfunc = props.CustomEditOneOptions ?? EditOneOptions; \r\n  // Edit One\r\n  editfunc = editfunc ?? props.CustomEditOne ?? EditOne; \r\n\r\n  return <EditFunc {...{editfunc, args}} /> \r\n} \r\n\r\n\r\nfunction EditFunc({...props}:{editfunc:EditorFunc, args:IEditor}) { \r\n  return <props.editfunc {...props.args} />; \r\n} \r\n\r\n\r\nfunction EditOne({...args}:IEditor) { \r\n  return <Input {...args} /> \r\n}\r\n\r\nfunction EditMany({value, setValue, ifield}:IEditor) { \r\n  return <InputArray {...{ifield, values:value, setValues:setValue}} /> \r\n}\r\n\r\nfunction EditOneOptions({ifield, value, setValue, ...props}:IEditor) { \r\n  const options = props.options ?? [] as IOption[]; \r\n  return <Select {...{ifield, value, setValue, options}  } /> \r\n} \r\n\r\nfunction EditManyOptions({...props}:IEditor) { \r\n  const options = props.options ?? [] as IOption[]; \r\n  return <Select {...{...props, options} } /> \r\n} \r\n\r\nfunction EditMixed({ifield, value, options, setValue}:IEditor) {\r\n  return <div>{JSON.stringify(value)}</div> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\reader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testLoader\\testLoader.tsx",["497"],"import {useEffect} from 'react'; \r\nimport {useLoader} from '../../reusable/customhooks/useloader.hook';\r\nimport {ICrud, DAO} from '../../reusable/_dao'; \r\nimport {Fetcher} from '../../reusable/_mongooseparser'; \r\n\r\nconst baseUrl = `https://fjg-mongoose-heroku.herokuapp.com/api/`; \r\n\r\nconst dao = new DAO(new Fetcher(baseUrl) as ICrud); \r\n\r\n\r\nexport function TestLoader() { \r\n  const {state, Load} = useLoader(); \r\n  \r\n\r\n  async function LoadFunc() { \r\n    await dao.Collections(['patients']) as ICrudResponse[]; \r\n  } \r\n\r\n  useEffect(() => { \r\n    Load(() => LoadFunc()); \r\n  }, []); \r\n\r\n  return <div>\r\n    TestLoader\r\n      <div>State-busy {JSON.stringify(state.busy)}</div> \r\n      <div>State-success {JSON.stringify(state.success)}</div> \r\n    </div>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\preloader.component.tsx",["498"],"import {useContext, useEffect} from 'react'; \r\nimport { DaoContext } from '../reusable/_dao'; \r\nimport { useLoader } from '../reusable/_customhooks'; \r\n\r\n\r\n// Preloader ==============================================\r\nexport function PreloadCollection () { \r\n  const ready = usePreloadCollections(); \r\n  return <div> \r\n    Preloading : {JSON.stringify(ready)} \r\n  </div> \r\n}\r\n\r\n\r\nexport function usePreloadCollections() { \r\n  const {Collections} = useContext(DaoContext); \r\n  const accessors = ['questions','responses', 'answers', 'forms', 'instructions', 'patients', 'appointments']; \r\n  const callback = (res:any) => {}; \r\n  const {state, Load} = useLoader(); \r\n\r\n  useEffect(() => { \r\n    Load( () => Collections(accessors), callback); \r\n  }, []); \r\n\r\n  return state.success; \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_session.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useGetSet.hook.tsx",["499","500"],"import {useState, useEffect} from 'react'; \r\nimport {GetValueAt, SetValueAt} from '../_utils'; \r\n\r\n\r\ninterface IUseStateAt { \r\n  getValueAt: (keys:string[]) => any; \r\n  setValueAt: (keys:string[]) => (newValue:any) => any; \r\n}\r\n\r\nexport function useStateAt(Value:any) { \r\n  const [value, setValue] = useState(Value); \r\n\r\n  const getValueAt = (keys?:string[]) => GetValueAt(value, keys); \r\n  \r\n  //type arg = T | ((prevState: T) => T); \r\n  const setValueAt = (keys?:string[]) => { \r\n    return (newValue:any) => { \r\n      setValue((prev:any) => { \r\n        return SetValueAt(prev, newValue, keys); \r\n      }); \r\n    } \r\n  }\r\n  return {getValueAt, setValueAt}; \r\n}\r\n\r\n\r\ninterface IUseGetSet { \r\n  value: any; \r\n  setValue: React.Dispatch<React.SetStateAction<any>>; \r\n  accessor: string; \r\n} \r\n\r\nexport function useGetSet(Value:any, SetValue:React.Dispatch<React.SetStateAction<any>>, accessor:string):IUseGetSet { \r\n  const [value, setValue] = useState(GetValueAt(Value, [accessor])); \r\n\r\n  useEffect(() => { \r\n    const prev = GetValueAt(Value, [accessor]); \r\n    if(JSON.stringify(prev) !== JSON.stringify(value)) { \r\n      SetValue((prev:any) => { \r\n        return SetValueAt(prev, value, [accessor]); \r\n      }); \r\n    } \r\n  }, [value]) \r\n\r\n  return {value, setValue, accessor}; \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objset\\objset.component.tsx",["501","502","503","504"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport { IsEmpty, SetValueAt } from '../../utils/value.utils';\r\nimport { GetValueAt } from '../../_utils';\r\n\r\n\r\nexport interface IObjx { \r\n  value:any; \r\n} \r\n\r\nexport const ObjxContext = React.createContext({} as IObjx); \r\nexport const KeysContext = React.createContext({} as {keys: IKeys}); \r\nexport const KeyContext = React.createContext({} as {k: number|string}); \r\n\r\n// ARRX =========================================\r\nexport function Objx({value, children}:React.PropsWithChildren<IObjx>) { \r\n  return <ObjxContext.Provider value={{value}} > \r\n    {children} \r\n  </ObjxContext.Provider> \r\n} \r\n\r\ntype IKeys = (number|string)[][]; \r\n\r\nexport function Keys({keys, children}:React.PropsWithChildren<{keys:IKeys}>) { \r\n  const {value} = useContext(ObjxContext); \r\n  const [firstKeys, ...remaining] = keys; \r\n\r\n  if(!IsEmpty(remaining)) { \r\n    return <KeysContext.Provider value={{keys:[firstKeys] as IKeys}}> \r\n      {firstKeys.map( k => { \r\n        const _value = value[k]; \r\n        return <Objx key={k} value={_value}> \r\n          <Keys keys={remaining}>{children}</Keys> \r\n        </Objx> \r\n      })} \r\n    </KeysContext.Provider> \r\n  } \r\n\r\n  return <KeysContext.Provider value={{keys:[firstKeys] as IKeys}}> \r\n    {firstKeys.map( k => {       \r\n      return <KeyContext.Provider key={k} value={{k}}> \r\n        {children} \r\n      </KeyContext.Provider> \r\n    })} \r\n  </KeysContext.Provider> \r\n} \r\n\r\n\r\ninterface IKey { \r\n  k: number|string; \r\n} \r\nexport function Key({k, children}:React.PropsWithChildren<IKey>) { \r\n  return <KeyContext.Provider value={{k}}> \r\n    {children} \r\n  </KeyContext.Provider> \r\n} \r\n\r\nexport function Label() { \r\n  const {k} = useContext(KeyContext); \r\n  return <span>{k}: </span> \r\n} \r\n\r\nexport function Value() { \r\n  const {value} = useContext(ObjxContext); \r\n  const {k} = useContext(KeyContext); \r\n  return <span>{value[k]}</span> \r\n} \r\n\r\nexport function Test() { \r\n  const obj = [ \r\n    {a:12, b:'as'}, \r\n    {a:13, b:'bs'}\r\n  ]\r\n  return <Objx value={obj}> \r\n    <Keys keys={[[0, 1], ['a','b']]} > \r\n      <Label/><Value/> <br/>\r\n    </Keys> \r\n  </Objx> \r\n} \r\n\r\n\r\n/*\r\nexport function ElementEdit({...props}:{setValue:React.Dispatch<React.SetStateAction<any>> }) { \r\n  const {value:_value} = useContext(ObjxContext); \r\n  const {k} = useContext(ElementContext); \r\n  const [value, setValue] = useState(GetValueAt(_value, [k])); \r\n\r\n  useEffect(() => { \r\n    const prev = GetValueAt(_value, [k]); \r\n    if(JSON.stringify(prev) !== JSON.stringify(value)) { \r\n      props.setValue((prev:any) => { \r\n        return SetValueAt(prev, value, [k]); \r\n      }); \r\n    } \r\n  }, [value]) \r\n\r\n  return <TestEditor {...{k, value, setValue}} /> \r\n} \r\n\r\ninterface ITestEditor {\r\n  k:string|number, \r\n  value:any, \r\n  setValue:React.Dispatch<React.SetStateAction<any>>\r\n}\r\n\r\nfunction TestEditor({k, value, setValue}:ITestEditor) { \r\n  return <div>\r\n    {k} : {value} <br/> \r\n    <button onClick={() => setValue((prev:any) => { \r\n      return prev + prev; \r\n    })} >Increment</button> \r\n  </div>\r\n}\r\n\r\n\r\nexport function Test() { \r\n  const obj = {a:12, b:'adas'}; \r\n  const [value, setValue] = useState(obj); \r\n\r\n  return <Objx {...{value, keys:['a', 'b']}} > \r\n    <ElementEdit {...{setValue}}/> \r\n  </Objx> \r\n}\r\n*/",["505","506"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\field.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\date.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_customhooks.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.contexter.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.tsx",["507"],"import {useMemo} from 'react'; \r\nimport { DAO, ICrud } from '../_dao'; \r\nimport {Fetcher} from '../_mongooseparser'; \r\n\r\n\r\nexport interface IUseDao { \r\n  // Get collections, entry, fields data \r\n  GetICollections:(accessors?:string[]) => ICollection[]; \r\n  GetIFields:(accessor:string, fields?:string[]) => IField[]; \r\n  GetIEntries:(accessor:string, ids?:string[]) => IEntry[]; \r\n  GetDefaultIEntry:(accessor:string) => IEntry; \r\n  \r\n  // Get foreign elements\r\n  GetForeignElements: (ifield:IField) => {foreignCollection:ICollection|undefined, abbrevField:IField|undefined}, \r\n\r\n  // Get options \r\n  GetIOptions: (ifield:IField) => IOption[]; \r\n\r\n  // load remote collections. \r\n  Collections:(accessors?:string[]) => Promise<ICrudResponse[]>; \r\n\r\n  // Crud functionalities. \r\n  CreateUpdate: (accessor:string, entries:IEntry[], predicate?:(entry:IEntry)=>boolean) => Promise<ICrudResponse[]>; \r\n  Create: (accessor:string, entries:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Read: (accessor:string, id?:string[]) => Promise<ICrudResponse[]>; \r\n  Update: (accessor:string, entries:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Delete: (accessor:string, entries:IEntry[]) => Promise<ICrudResponse[]>; \r\n\r\n  // Validate \r\n  Validate: (collectionAccessor:string, ifieldAccessor:string, value:any) => boolean; \r\n}\r\n\r\nexport function useDao(baseUrl:string):IUseDao { \r\n  const Dao = useMemo(() => new DAO(new Fetcher(baseUrl) as ICrud), []); \r\n\r\n  const GetICollections = (accessors?:string[]) => Dao.GetICollections(accessors); \r\n  const GetIFields = (accessor:string, fields?:string[]) => Dao.GetIFields(accessor, fields); \r\n  const GetIEntries = (accessor:string, ids?:string[]) => Dao.GetIEntries(accessor, ids); \r\n  const GetDefaultIEntry = (accessor:string) => Dao.GetDefaultIEntry(accessor); \r\n  // Get foreign elements\r\n  const GetForeignElements = (ifield:IField) => Dao.GetForeignElements(ifield); \r\n  // Get options \r\n  const GetIOptions = (ifield:IField) => Dao.GetIOptions(ifield); \r\n\r\n  // Collections \r\n  const Collections = async (accessors?:string[]) => Dao.Collections(accessors); \r\n\r\n  // Crud functionalities \r\n  // async Validate ... \r\n  // async Ids ... \r\n  const CreateUpdate = async (accessor:string, entries:IEntry[], predicate?:(entry:IEntry)=>boolean) => \r\n    Dao.CreateUpdate(accessor, entries, predicate); \r\n  const Create = async (accessor:string, entries:IEntry[]) => Dao.Create(accessor, entries); \r\n  const Read = async (accessor:string, ids?:string[]) => Dao.Read(accessor, ids); \r\n  const Update = async (accessor:string, entries:IEntry[]) => Dao.Update(accessor, entries); \r\n  const Delete = async (accessor:string, entries:IEntry[]) => Dao.Delete(accessor, entries); \r\n\r\n  // Validate\r\n  const Validate = (collectionAccessor:string, ifieldAccessor:string, value:any) => { \r\n    const [ifield] = GetIFields(collectionAccessor, [ifieldAccessor]); \r\n    return ifield?.validators?.every( valid => valid(value) ) ?? false; \r\n  }; \r\n\r\n  return { \r\n    GetICollections, GetIFields, GetIEntries, GetDefaultIEntry, \r\n    GetForeignElements, GetIOptions, \r\n    Collections, CreateUpdate, Create, Read, Update, Delete, \r\n    Validate\r\n  }; \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\session\\usesession.hook.ts",["508"],"import { useEffect, useState } from 'react';\r\nimport { GetValueAt, SetValueAt } from '../../_utils';\r\nimport {Session} from './session.class'; \r\n\r\n\r\ntype Keys = any[]; \r\n\r\nexport interface IUseSession { \r\n  Get: (keys?:Keys) => any; \r\n  Set: (newValue: any, keys?:Keys) => void; \r\n  Reset: () => void; \r\n  End: () => void; \r\n} \r\n\r\n// UseSession =============================================\r\nexport function useSession(sessionName:string, value?:any):IUseSession { \r\n  const _value = Session.Exists(sessionName) ? Session.Get(sessionName): value;\r\n  const [session, setSession] = useState(_value); \r\n\r\n  function Reset() { \r\n    Set(value); \r\n  } \r\n\r\n  function Get(keys?:string[]) { \r\n    if(!Session.Exists(sessionName)) \r\n      Session.Set(sessionName, session); \r\n    return GetValueAt(session, keys); \r\n  } \r\n\r\n  function Set(newValue:any, keys?:string[]) { \r\n    if(IsChanging(newValue, keys)) \r\n      setSession((prev:any) => { \r\n        const newSession = SetValueAt(prev, newValue, keys); \r\n        Session.Set(sessionName, newSession); \r\n        return newSession; \r\n      }) \r\n  } \r\n\r\n  function End() { \r\n    Session.EndSession(sessionName); \r\n    setSession(undefined) \r\n  } \r\n\r\n  function IsChanging(newValue:any, keys?:string[]) { \r\n    const prev = GetValueAt(session, keys); \r\n    return JSON.stringify(prev) !== JSON.stringify(newValue); \r\n  }\r\n  \r\n  return {Get, Set, Reset, End}; \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usecolumnsetting.hook.tsx",["509"],"import {useMemo, useState} from 'react'; \r\n\r\n\r\n\r\n// Use Column Setting =========================== \r\nexport function useColumnSetting(ifields:IField[]) { \r\n  const memIfields = useMemo(() => ifields, []); \r\n  const [cols, setCols] = useState(ifields); \r\n\r\n  // TEMPORARY\r\n  function OrderFields(ifields:string[]) { \r\n    const ordered:IField[] = []; \r\n    ifields.forEach( f => { \r\n      const found = memIfields.find(mf => mf.accessor === f); \r\n      if(found) \r\n        ordered.push(found); \r\n    }) \r\n    setCols(ordered); \r\n  } \r\n  return {memIfields, cols, OrderFields}; \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\session\\session.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usestateat.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx",["510","511","512","513","514"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentification.component.tsx",["515","516"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionpage.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionitem.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\pager.component.tsx",["517","518"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_pager.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\pager\\pager.component.tsx",["519","520","521","522","523","524","525","526","527","528"],"import { IPageHook } from '../../../reusable/_customhooks'; \r\nimport {Filter, HeadMidTail} from '../../../reusable/_arrayutils';\r\nimport { IsNull } from '../../../reusable/_utils';\r\nimport {usePage} from '../../_customhooks'; \r\n\r\n\r\n\r\n/* Pager Btn\r\nDisplay buttons to change pages. \r\n*/\r\nexport function PagerBtn<T>({paging:{pageIndex, setPageIndex, page, pages}}:{paging:IPageHook<T>}) { \r\n  let indexes = pages.map( (p,i) => i); \r\n  if(indexes.length > 10) \r\n    indexes = AbbrevIndexes(pageIndex, indexes); \r\n\r\n  return <span> \r\n    {indexes.map( (index, i) => { \r\n      return <span key={index}> \r\n        <button onClick={() => setPageIndex(index)} disabled={index===pageIndex}>{index+1}</button> \r\n        {index + 1 !== indexes[i+1] && i < indexes.length-1 && '...'} \r\n      </span> \r\n    })} \r\n  </span> \r\n} \r\n\r\n/* Pager From To\r\nDisplay the range of element being represented on a given page. \r\n*/\r\nexport function PagerFromTo<T>({paging:{pageIndex, setPageIndex, page, pages}}:{paging:IPageHook<T>}) { \r\n  const indexes = page?.map(p=>p.i) ?? []; \r\n  let [from, a, mid, b, to] = HeadMidTail(indexes); \r\n  from = !IsNull(from) ? from+1: 0; \r\n  to = !IsNull(to) ? to+1: from; \r\n  //const indexes.length-1; \r\n  return <span> \r\n    {from === to ? \r\n      <span>Item #{from}</span>: \r\n      <span>Items #{from} to {to}</span>} \r\n  </span> \r\n} \r\n\r\n\r\n/* PageOfPages \r\nDisplay index the current page being display and the total number of pages. \r\n*/\r\nexport function PageOfPages<T>({paging:{pageIndex, setPageIndex, page, pages}}:{paging:IPageHook<T>}) { \r\n  return <span>Page {pageIndex+1} of {pages?.length ?? 0}</span> \r\n} \r\n\r\n\r\n\r\nfunction IndexesWindow(index:number, min:number, max:number, length:number) { \r\n  const window = []; \r\n  let i = index-2; \r\n  i = Math.min(i, max-length); \r\n  i = Math.max(i, min); \r\n  while(window.length < length && i >=min && i<max) { \r\n    window.push(i++); \r\n  } \r\n  return window; \r\n} \r\n\r\nfunction AbbrevIndexes(index:number, indexes:number[]) { \r\n  const window = IndexesWindow(index, 0, indexes.length-1, 5); \r\n  const [abbrev] = Filter(indexes, (i:number, positive:number[], negative:number[], remainder:number[]) => { \r\n    const t = Math.floor(indexes.length/5); \r\n    return [0, ...window, indexes.length-1].includes(i) || (i % t) === 0; \r\n  }) \r\n  return abbrev; \r\n}\r\n\r\nfunction AbbrevIndexes2(index:number, indexes:number[]) { \r\n  const [firstHalf, remainder] = Filter(indexes, (n:number, firstHalf:number[]) => firstHalf.length < index); \r\n  const [current, ...secondHalf] = remainder; \r\n\r\n  const [first, fistLeft, firstQuart, firstRight, prev] = HeadMidTail(firstHalf); \r\n  const [next, secondLeft, secondQuart, secondRight, last] = HeadMidTail(secondHalf); \r\n  \r\n  const abbrevIndexes = [ \r\n    first, first+1, firstQuart, \r\n    prev-1, prev, current, next, next+1, \r\n    secondQuart, last-1, last]; \r\n  const [abbrev] = Filter(abbrevIndexes, (i:number, positive:number[]) => { \r\n    return !IsNull(i) && !positive.includes(i) && i>=0 && i < indexes.length; \r\n  }) \r\n  return abbrev; \r\n}\r\n\r\n\r\n\r\n\r\nexport function TestPagerBtn<T>() { \r\n  let items = [] as number[]; \r\n  while(items.length < 98) \r\n    items.push(items.length); \r\n\r\n  const paging = usePage(items, 5); \r\n\r\n  \r\n  let i = 0;\r\n  while(i<11) {\r\n    console.log([i, IndexesWindow(i++, 0, 10, 5)]);\r\n  }\r\n\r\n  /*TestAbbrev(10);\r\n  TestAbbrev(50);\r\n  TestAbbrev(98);\r\n  TestAbbrev(99);\r\n  TestAbbrev(100);*/\r\n\r\n  return <div> \r\n    {JSON.stringify(paging.page)} <br/> \r\n    <PagerBtn {...{paging}}/> \r\n  </div> \r\n} \r\n\r\n\r\nfunction TestAbbrev(length:number) {\r\n  let items = [] as number[]; \r\n  while(items.length < length) \r\n    items.push(items.length); \r\n\r\n  AbbrevIndexes(0, items); \r\n  AbbrevIndexes(1, items); \r\n  AbbrevIndexes(2, items); \r\n  AbbrevIndexes(length-3, items); \r\n  AbbrevIndexes(length-2, items); \r\n  AbbrevIndexes(length-1, items); \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx2\\objx.component.tsx",["529"],"import React, { useContext } from 'react'; \r\nimport { ToArray, Union } from '../../_arrayutils'; \r\nimport { IReaderComponent, IEditorComponent } from '../../_input'; \r\nimport { GetValueAt, IsNull } from '../../_utils'; \r\n\r\n\r\n// GET SET AT ==============================================\r\ninterface IGetSetAt {\r\n  Get:(keys?: TKey[]|undefined) => any; \r\n  Set:(newValue: any, keys?: TKey[]|undefined) => void; \r\n  Args:(keys:TKey[]) => any; \r\n}\r\nexport const GetSetAtContext = React.createContext({} as IGetSetAt); \r\nexport function GetSetAt({Get, Set, Args, children}:React.PropsWithChildren<IGetSetAt>) { \r\n  return <GetSetAtContext.Provider value={{Get, Set, Args}}> \r\n    {children}\r\n  </GetSetAtContext.Provider> \r\n} \r\n\r\ntype ReaderFunc = ({...props}:IReaderComponent) => JSX.Element; \r\nexport function ReaderAt({...props}:{readerFunc:ReaderFunc}) { \r\n  const {Get, Args} = useContext(GetSetAtContext); \r\n  const {k} = useContext(KeyContext); \r\n  const value = Get(k); \r\n  const {ifield, options} = Args(k) as {ifield:IField, options:IOption[]}; \r\n  return <props.readerFunc {...{value, ifield, options}} /> \r\n} \r\n\r\n\r\ntype EditorFunc = ({...props}:IEditorComponent) => JSX.Element; \r\nexport function EditorAt({...props}:{editorFunc:EditorFunc}) { \r\n  const {Get, Set, Args} = useContext(GetSetAtContext); \r\n  const {k} = useContext(KeyContext); \r\n  const value = Get(k); \r\n  const setValue = (newValue:any) => Set(newValue, k); \r\n  const {ifield, options} = Args(k) as {ifield:IField, options:IOption[]}; \r\n\r\n  return <props.editorFunc {...{value, setValue, ifield, options}} /> \r\n} \r\n\r\n\r\n\r\n\r\n\r\nexport const ObjxContext = React.createContext({} as {value:any}); \r\nconst KeysContext = React.createContext({} as any); \r\nexport const KeyContext = React.createContext({} as {k:TKey[]}); \r\n\r\n// OBJX =================================================== \r\nexport function Objx({value, children}:React.PropsWithChildren<{value:any}>) { \r\n  return <ObjxContext.Provider value={{value}}> \r\n    {children} \r\n  </ObjxContext.Provider> \r\n} \r\n\r\n// Keys =================================================== \r\nexport function Keys({keys, nested = false, children}:React.PropsWithChildren<{keys:TKey[][], nested?:boolean}>) { \r\n  //const {value} = useContext(ObjxContext); \r\n  return <KeysContext.Provider value={{}}> \r\n    {keys?.map( k => { \r\n      return <Key key={JSON.stringify(k)} {...{k, nested}} > \r\n        {children} \r\n      </Key> \r\n    })} \r\n  </KeysContext.Provider> \r\n} \r\n\r\n// Key ==================================================== \r\nexport function Key({k, nested = false, children}:React.PropsWithChildren<{k:TKey[], nested?:boolean}>) { \r\n  let {k:_k} = useContext(KeyContext); \r\n  _k = !IsNull(_k) && nested ? Union(_k, k) as TKey[]: k; \r\n  \r\n  return <KeyContext.Provider value={{k:_k}} > \r\n    {children ?? <KeyValue/>} \r\n  </KeyContext.Provider> \r\n} \r\n\r\n// KeyString ============================================== \r\nexport function KeyString() { \r\n  const {k} = useContext(KeyContext); \r\n  return <span>{JSON.stringify(k)} : </span> \r\n} \r\n\r\n// KeyValue =============================================== \r\nexport function KeyValue() { \r\n  const {value} = useContext(ObjxContext); \r\n  const {k} = useContext(KeyContext); \r\n  return <span>{JSON.stringify(GetValueAt(value, ToArray(k)))}</span> \r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function TestsObjx() { \r\n  const value = [0,['a', 'b','d'],5,65,['a', 'b','d']]; \r\n  const keys = [['4', 2], [1]]; \r\n\r\n  return <TestObjx {...{ value, keys }} /> \r\n} \r\n\r\nexport function TestObjx({value, keys}:{value:any, keys:TKey[][]}) { \r\n  return <Objx value={value}> \r\n    <Keys keys={keys}> \r\n      <KeyString/><KeyValue/> <br/> \r\n    </Keys> \r\n  </Objx> \r\n} \r\n\r\n\r\nexport function TestsNestedObjx() { \r\n  const value = [0,['a', 'b','d'],5,65,['a', 'b','d']]; \r\n  const keys = [['4'], [1]]; \r\n  const keys2= [['2'], ['0']]; \r\n  return <TestNestedObjx {...{value, keys, keys2 }} /> \r\n} \r\n\r\nexport function TestNestedObjx({value, keys, keys2}:{value:any, keys:TKey[][], keys2:TKey[][]}) { \r\n\r\n  return <Objx value={value}> \r\n    <Keys keys={keys}> \r\n      <KeyString/><KeyValue/><br/> \r\n      -----\r\n        <Keys keys={keys2}> \r\n          // <KeyString/><KeyValue/><br/> \r\n        </Keys> \r\n    </Keys> \r\n  </Objx> \r\n} \r\n\r\n/*\r\n\r\n*/",["530","531"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx2.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\landing\\landing.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\AppTypeScript.tsx",["532"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\hooks\\usepatient.hook.ts",["533","534","535"],"import { useContext } from 'react'; \r\nimport { DaoContext } from '../../../reusable/_dao'; \r\nimport { Session, useSession, IUseSession } from '../../../reusable/_session'; \r\nimport { feedback } from '../../../components/feedback/feedback.component'; \r\n\r\n\r\nexport interface IUsePatient { \r\n  TestResetSession: () => void; \r\n\r\n  profile: IEntry; \r\n  setProfile: (newValue:any, keys:any[]) => void; \r\n\r\n  appointment: IEntry; \r\n  setAppointment: (newValue:any, keys:any[]) => void; \r\n\r\n  IdentifyPatient: (ramq:string) => void; \r\n  RamqIsValid: (value:string) => boolean; \r\n  \r\n  CreateUpdateProfile: (patient: IEntry) => Promise<void>; \r\n  //CreateUpdateAppointment: (patient: IEntry) => Promise<void>; \r\n} \r\n\r\n\r\n// UsePatient ============================================= \r\nexport function usePatient():IUsePatient { \r\n  const {GetDefaultIEntry, GetIEntries, CreateUpdate, Validate} = useContext(DaoContext); \r\n\r\n  // Profile & Appointment session --------------------------------------\r\n  const sessionProfile = useSession('profile', {}); \r\n  const sessionAppointment = useSession('appointment', {}); \r\n\r\n  const profile = sessionProfile.Get(); \r\n  const setProfile = (newValue:any, keys:any[] = []) => sessionProfile.Set(newValue, [...keys]); \r\n  const appointment = sessionAppointment.Get(); \r\n  const setAppointment = (newValue:any, keys:any[] = []) => sessionAppointment.Set(newValue, [...keys]); \r\n\r\n  // RamqIsValid ------------------------------------------\r\n  function RamqIsValid(value:string) { \r\n    return Validate('patients', 'ramq', value); \r\n  } \r\n\r\n  // IdentifyPatient --------------------------------------\r\n  function IdentifyPatient(ramq:string) { \r\n    const entries = GetIEntries('patients'); \r\n    const foundProfile = entries.find( e => { \r\n      const e_ramq = (e['ramq'] as string); \r\n      return e_ramq.toLowerCase() === ramq.toLowerCase(); \r\n    });\r\n    const newProfile = {...GetDefaultIEntry('patients'), ramq}; \r\n    setProfile(foundProfile ?? newProfile); \r\n  }\r\n\r\n  // CreateUpdateProfile ----------------------------------\r\n  async function CreateUpdateProfile(patient: IEntry) { \r\n    const [response] = await CreateUpdate('patients', [patient]); \r\n    feedback.setValue([response]); \r\n    if(response.success) { \r\n      await CreateUpdateAppointment(response.data); \r\n      setProfile(response.data); \r\n    } \r\n    else \r\n      console.log(response.err); \r\n  } \r\n\r\n  // CreateUpdateappointment ----------------------------------\r\n  async function CreateUpdateAppointment(patient: IEntry) { \r\n    const appointment = FindAppointment(patient); \r\n    const [response] = await CreateUpdate('appointments', [appointment]); \r\n    feedback.setValue([response]); \r\n    if(response.success) { \r\n      setAppointment(response.data); \r\n      const date = new Date(response.data['date'] as any); \r\n    } \r\n    else \r\n      console.log('appointment failed ...'); \r\n  } \r\n\r\n  // FindCurrentSession -----------------------------------\r\n  function FindAppointment(patient: IEntry) { \r\n    const entries = GetIEntries('appointments'); \r\n    const defaultAppointment = {...GetDefaultIEntry('appointments'), patient:patient._id}; \r\n    const foundAppointment = entries.find( e => { \r\n      const e_patient = (e['patient'] as string); \r\n      return e_patient === patient._id; \r\n    }); \r\n    return {...defaultAppointment, ...foundAppointment}; \r\n  } \r\n\r\n\r\n  const TestResetSession = () => {\r\n    sessionProfile.Reset(); \r\n    sessionAppointment.Reset(); \r\n  }\r\n\r\n  return { \r\n    TestResetSession, \r\n\r\n    profile, setProfile, \r\n    appointment, setAppointment, \r\n    RamqIsValid, \r\n    IdentifyPatient, \r\n    CreateUpdateProfile\r\n  } \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\hooks\\useadmin.hook.ts",["536"],"import { useContext, useEffect, useState } from 'react'; \r\nimport { DaoContext } from '../../../reusable/_dao'; \r\nimport { usePage, IPageHook } from '../../../reusable/_customhooks'; \r\nimport { IUseEditState, useEditState } from './useeditstate.hook';\r\n\r\n\r\n\r\nexport interface IUseAdmin extends IUseEditState {\r\n  paging: IPageHook<IEntry>; \r\n  collectionAccessor: string; \r\n\r\n  columns: string[]; \r\n  setColumns: React.Dispatch<React.SetStateAction<string[]>>; \r\n\r\n  GetFields: (field?: string[] | undefined) => IField[]; \r\n  GetCollectionOptions(): IOption[]; \r\n} \r\n\r\n\r\n// useAdmin ===============================================\r\nexport function useAdmin() { \r\n  const {GetICollections, GetIEntries, GetIFields} = useContext(DaoContext); \r\n\r\n  const [columns, setColumns] = useState([] as string[]); \r\n  const editState = useEditState(); \r\n  const collectionAccessor = editState.GetEditState(['collection']) as string; \r\n  const paging = usePage(GetIEntries(collectionAccessor), 5); \r\n\r\n\r\n  // Reset Columns on collection change\r\n  useEffect(() => { \r\n    IniColumns(); \r\n  }, [collectionAccessor]); \r\n\r\n  function IniColumns() { \r\n    if(!!collectionAccessor) \r\n      setColumns(GetFields().filter(f => !!f.label).map( f => f.accessor )); \r\n  } \r\n\r\n  // GetCollectionOptions ................................. \r\n  function GetCollectionOptions():IOption[] { \r\n    const collections = GetICollections(); \r\n    return collections.map( c => { \r\n      return {value:c.accessor, label:c.label} \r\n    }); \r\n  } \r\n\r\n  // \r\n  function GetFields(field?:string[]) { \r\n    return GetIFields(collectionAccessor, field); \r\n  } \r\n  \r\n  return {paging, columns, setColumns, collectionAccessor, GetFields, GetCollectionOptions, ...editState} \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\header.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\hooks\\useeditstate.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\inlinenbtn.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\hooks\\usequestionnaire.hook.tsx",["537"],"import { useContext } from 'react'; \r\nimport { DaoContext } from '../../../reusable/_dao'; \r\nimport { useSession, Session } from '../../../reusable/_session'; \r\nimport { IsEmpty } from '../../../reusable/_utils'; \r\nimport { usePage, IPageHook } from '../../../reusable/_customhooks'; \r\nimport { feedback } from '../../../components/feedback/feedback.component'; \r\n\r\n\r\nexport interface IUseQuestionnaire { \r\n  TestResetSession: () => void; \r\n\r\n  paging: IPageHook<IAnswer>; \r\n  questionnaire: IAnswer[]; \r\n  setQuestionnaire: (newAnswer:number, keys:any[]) => void; \r\n  //GetPages: () => any[][]; \r\n\r\n  AnswersAreComplete: (answers?:IAnswer[]) => boolean; \r\n  LoadQuestionnaire: () => void; \r\n  /*GetQuestionnaireItem:(answer:IAnswer) => { \r\n    form: undefined|IForm; \r\n    instructions: undefined|IInstruction[]; \r\n    question: undefined|IQuestion; \r\n    response: undefined|IResponse; \r\n  } */\r\n  SubmitQuestionnaire: (answers?:IEntry[]) => Promise<ICrudResponse[]>; \r\n} \r\n\r\n\r\nexport function useQuestionnaire():IUseQuestionnaire { \r\n  console.log('questionnaire');\r\n  const {GetIEntries, CreateUpdate} = useContext(DaoContext); \r\n  const profile = Session.Get('profile') as IEntry; \r\n\r\n  const sessionQuestionnaire = useSession('questionnaire', LoadQuestionnaire()); \r\n  const questionnaire:IAnswer[] = sessionQuestionnaire.Get(); \r\n  const setQuestionnaire = (newValue:any, keys:any[] = []) => sessionQuestionnaire.Set(newValue, [...keys]); \r\n  const paging = usePage(questionnaire, PageBreakPredicates()); \r\n\r\n  function GetQuestion(answer:IAnswer) { \r\n    const [question] = GetIEntries('questions', [answer?.question]) as IQuestion[]; \r\n    return question; \r\n  }\r\n\r\n  // LoadQuestionnaire -----------------------------------\r\n  function LoadQuestionnaire() { \r\n    const loadQuestionnaire = [] as any[]; \r\n    /*(GetIEntries('answers') as IAnswer[]).filter( a => { \r\n      return a.patient === profile._id && IsToday(a.date); \r\n    }) */\r\n    return IsEmpty(loadQuestionnaire) ? BlankQuestionnaire() : loadQuestionnaire; \r\n  } \r\n\r\n  // BlankQuestionnaire ----------------------------------- \r\n  function BlankQuestionnaire():IAnswer[] { \r\n    const entries = GetIEntries('questions'); \r\n    return entries.map( q => { \r\n      return {_id:'', patient:profile._id, date: new Date(), question:q._id, answer:-1} as IAnswer; \r\n    }); \r\n  } \r\n\r\n  // SubmitQuestionnaire ----------------------------------\r\n  async function SubmitQuestionnaire(answers?:IEntry[]) { \r\n    const toSubmit = answers ?? questionnaire; \r\n    const responses = await CreateUpdate('answers', toSubmit); \r\n    return responses; \r\n  } \r\n\r\n  // return form, instructions, question, response\r\n  /*function GetQuestionnaireItem(answer:IAnswer) { \r\n    if(!answer) \r\n      return {form:undefined, instructions:undefined, question:undefined, response:undefined}; \r\n    const [question] = GetIEntries('questions', [answer.question]) as IQuestion[]; \r\n    const [form] = GetIEntries('forms', [question?.form]) as IForm[]; \r\n    const instructions = GetIEntries('instructions', question?.instructions) as IInstruction[]; \r\n    const [response] = GetIEntries('responses', [question?.responseType]) as IResponse[]; \r\n    return {form, instructions, question, response}; \r\n  } */\r\n\r\n  function AnswersAreComplete(answers?:IAnswer[]) { \r\n    const _answers = answers ?? questionnaire; \r\n    return _answers.every( answer => {\r\n      const question = GetQuestion(answer); \r\n      return question && (question?.optional || answer.answer >=0); \r\n    }); \r\n  } \r\n\r\n\r\n  // Page Break Predicates =============================================\r\n  function PageBreakPredicates() { \r\n    function GetQuestionAndPivot(answer:IAnswer, As:IAnswer[]) { \r\n      const question = GetQuestion(answer); \r\n      const pivot = GetQuestion(As[0]); \r\n      return {question, pivot}; \r\n    } \r\n\r\n    // group by form\r\n    const GroupByForm = (a:IAnswer, As:IAnswer[], Bs:IAnswer[], Cs:IAnswer[]) => { \r\n      const {question, pivot} = GetQuestionAndPivot(a, As);\r\n      return JSON.stringify(question?.form) === JSON.stringify(pivot?.form) || IsEmpty(As); \r\n    } \r\n\r\n    // group by instructions set\r\n    const GroupByInstruction = (a:IAnswer, As:IAnswer[], Bs:IAnswer[], Cs:IAnswer[]) => { \r\n      const {question, pivot} = GetQuestionAndPivot(a, As);\r\n      return JSON.stringify(question?.instructions) === JSON.stringify(pivot?.instructions) || IsEmpty(As); \r\n    } \r\n\r\n    // max 4 items\r\n    const GroupBy4 = (a:IAnswer, As:IAnswer[], Bs:IAnswer[], Cs:IAnswer[]) => { \r\n      return As.length < 4; \r\n    } \r\n\r\n    return [GroupByForm, GroupByInstruction, GroupBy4]; \r\n  } \r\n\r\n\r\n  const TestResetSession = () => {\r\n    sessionQuestionnaire.Reset(); \r\n  }\r\n\r\n  return { \r\n    TestResetSession, \r\n\r\n    paging, \r\n    questionnaire, setQuestionnaire, \r\n\r\n    AnswersAreComplete, \r\n    LoadQuestionnaire, \r\n    SubmitQuestionnaire \r\n  } \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\hooks\\userow.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useientry.hook.tsx",["538","539","540","541"],"import { useContext } from 'react'; \r\nimport { DaoContext } from '../_dao'; \r\nimport { useStateAt } from '../_customhooks'; \r\nimport { IEditor, IReader } from '../_input'; \r\n\r\n\r\n// IENTRY =================================================\r\nexport interface IUseIEntry { \r\n  index:number; \r\n  Get: (keys?: TKey[] | undefined) => any; \r\n  Set: (newValue: any, keys?: TKey[] | undefined) => void; \r\n  GetIEditorArgs: (columns: string[]) => IEditor[]; \r\n} \r\n\r\nexport function useIEntry(collectionAccessor:string, index:number):IUseIEntry { \r\n  const {GetDefaultIEntry, GetIEntries, Validate, GetIFields, GetIOptions, CreateUpdate, Delete} = useContext(DaoContext); \r\n  const [Get, Set] = useStateAt(GetEntry()); \r\n\r\n  // Get Entry ............................................\r\n  function GetEntry() { \r\n    return GetIEntries(collectionAccessor).find( (e,i) => i === index) \r\n      ?? GetDefaultIEntry(collectionAccessor) \r\n      ?? {} as IEntry; \r\n  } \r\n  \r\n  // Get Columns Args .....................................\r\n  function GetIEditorArgs(columns: string[]) { \r\n    const ifields = GetIFields(collectionAccessor, columns); \r\n    return ifields.map( ifield => { \r\n      const value = Get([ifield.accessor]); \r\n      const setValue = (newValue:any) => Set(newValue, [ifield.accessor]); \r\n      const options = GetIOptions(ifield); \r\n      return {ifield, value, setValue, options}; \r\n    }); \r\n  } \r\n\r\n  return {index, Get, Set, GetIEditorArgs} \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\adminrow.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\hooks\\usequestionnaireitem.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Button.stories.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Header.stories.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Page.stories.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Button.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Header.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\reader_editor\\editor.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\reader_editor\\reader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\reader_editor\\editor_reader.utils.tsx",["542","543"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\reader_editor\\stories\\editor.stories.tsx",["544"],"import React from 'react'; \r\nimport Editor from '../editor.component'; \r\n\r\nexport default { \r\n  title: 'editor/Editor', \r\n  component: Editor \r\n} \r\n\r\nconst Template = args => <Editor {...args} /> \r\n\r\nexport const EditorOneNumber = Template.bind({}) \r\nEditorOneNumber.args = { \r\n  value:12, \r\n  ifield:{accessor:'', label:'', type:'number', defaultValue:12}, \r\n  editValue: (newValue:any) => console.log(newValue) \r\n} \r\n\r\nexport const EditorManyNumber = Template.bind({})\r\nEditorManyNumber.args = { \r\n  value:[1,23,6,5,8], \r\n  ifield:{accessor:'', label:'', type:'number', defaultValue:0, isArray:true}, \r\n  editValue: (newValue:any) => console.log(newValue) \r\n}\r\n\r\nexport const EditorString = Template.bind({})\r\nEditorString.args = { \r\n  value:'this is a string test', \r\n  ifield:{accessor:'', label:'', type:'string', defaultValue:''}, \r\n  editValue: (newValue:any) => console.log(newValue)  \r\n}\r\n\r\nexport const EditorManyString = Template.bind({})\r\nEditorManyString.args = { \r\n  value:['there', 'is', 'many', 'strings'], \r\n  ifield:{accessor:'', label:'', type:'string', defaultValue:'', isArray:true}, \r\n  editValue: (newValue:any) => console.log(newValue)  \r\n}\r\n\r\nexport const EditorBool = Template.bind({}) \r\nEditorBool.args = { \r\n  value:false, \r\n  ifield:{accessor:'', label:'', type:'boolean', defaultValue:false}, \r\n  editValue: (newValue:any) => console.log(newValue) \r\n}\r\n\r\nexport const EditorManyBool = Template.bind({})\r\nEditorManyBool.args = {\r\n  value:[false, true, false],\r\n  ifield:{accessor:'', label:'', type:'boolean', defaultValue:false, isArray:true}, \r\n  editValue: (newValue:any) => console.log(newValue)  \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\reader_editor\\stories\\reader.stories.tsx",["545"],"import React from 'react'; \r\nimport Reader from '../reader.component'; \r\n\r\nexport default { \r\n  title: 'editor/Reader', \r\n  component: Reader \r\n} \r\n\r\nconst Template = args => <Reader {...args} /> \r\n\r\nexport const ReaderOneNumber = Template.bind({}) \r\nReaderOneNumber.args = { \r\n  value:12, \r\n  ifield:{accessor:'', label:'', type:'number', defaultValue:12} \r\n} \r\n\r\nexport const ReaderManyNumber = Template.bind({})\r\nReaderManyNumber.args = { \r\n  value:[1,23,6,5,8], \r\n  ifield:{accessor:'', label:'', type:'number', defaultValue:0, isArray:true} \r\n}\r\n\r\nexport const ReaderString = Template.bind({})\r\nReaderString.args = { \r\n  value:'this is a string test', \r\n  ifield:{accessor:'', label:'', type:'string', defaultValue:''} \r\n}\r\n\r\nexport const ReaderManyString = Template.bind({})\r\nReaderManyString.args = { \r\n  value:['there', 'is', 'many', 'strings'], \r\n  ifield:{accessor:'', label:'', type:'string', defaultValue:'', isArray:true} \r\n}\r\n\r\nexport const ReaderBool = Template.bind({})\r\nReaderBool.args = {\r\n  value:false,\r\n  ifield:{accessor:'', label:'', type:'boolean', defaultValue:false} \r\n}\r\n\r\nexport const ReaderManyBool = Template.bind({})\r\nReaderManyBool.args = {\r\n  value:[false, true, false],\r\n  ifield:{accessor:'', label:'', type:'boolean', defaultValue:false, isArray:true} \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\input\\input.stories.tsx",["546"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\input\\input.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\inputarray\\inputarray.stories.tsx",["547"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\inputarray\\inputarray.component.tsx",["548","549"],{"ruleId":"550","replacedBy":"551"},{"ruleId":"552","replacedBy":"553"},{"ruleId":"550","replacedBy":"551"},{"ruleId":"552","replacedBy":"553"},{"ruleId":"550","replacedBy":"554"},{"ruleId":"552","replacedBy":"555"},{"ruleId":"550","replacedBy":"556"},{"ruleId":"552","replacedBy":"557"},{"ruleId":"558","severity":1,"message":"559","line":62,"column":37,"nodeType":"560","messageId":"561","endLine":62,"endColumn":47},{"ruleId":"550","replacedBy":"562"},{"ruleId":"552","replacedBy":"563"},{"ruleId":"564","severity":1,"message":"565","line":4,"column":9,"nodeType":"566","messageId":"567","endLine":4,"endColumn":15},{"ruleId":"568","severity":1,"message":"569","line":34,"column":22,"nodeType":"570","messageId":"571","endLine":34,"endColumn":24},{"ruleId":"568","severity":1,"message":"569","line":34,"column":47,"nodeType":"570","messageId":"571","endLine":34,"endColumn":49},{"ruleId":"550","replacedBy":"572"},{"ruleId":"552","replacedBy":"573"},{"ruleId":"564","severity":1,"message":"574","line":1,"column":16,"nodeType":"566","messageId":"567","endLine":1,"endColumn":26},{"ruleId":"568","severity":1,"message":"569","line":28,"column":20,"nodeType":"570","messageId":"571","endLine":28,"endColumn":22},{"ruleId":"568","severity":1,"message":"569","line":28,"column":36,"nodeType":"570","messageId":"571","endLine":28,"endColumn":38},{"ruleId":"564","severity":1,"message":"575","line":127,"column":12,"nodeType":"566","messageId":"567","endLine":127,"endColumn":22},{"ruleId":"564","severity":1,"message":"576","line":130,"column":11,"nodeType":"566","messageId":"567","endLine":130,"endColumn":15},{"ruleId":"550","replacedBy":"577"},{"ruleId":"552","replacedBy":"578"},{"ruleId":"564","severity":1,"message":"579","line":5,"column":20,"nodeType":"566","messageId":"567","endLine":5,"endColumn":30},{"ruleId":"564","severity":1,"message":"580","line":2,"column":15,"nodeType":"566","messageId":"567","endLine":2,"endColumn":26},{"ruleId":"564","severity":1,"message":"581","line":2,"column":38,"nodeType":"566","messageId":"567","endLine":2,"endColumn":45},{"ruleId":"564","severity":1,"message":"582","line":2,"column":63,"nodeType":"566","messageId":"567","endLine":2,"endColumn":75},{"ruleId":"564","severity":1,"message":"583","line":2,"column":77,"nodeType":"566","messageId":"567","endLine":2,"endColumn":89},{"ruleId":"584","severity":1,"message":"585","line":45,"column":6,"nodeType":"586","endLine":45,"endColumn":37,"suggestions":"587"},{"ruleId":"584","severity":1,"message":"588","line":45,"column":7,"nodeType":"589","endLine":45,"endColumn":36},{"ruleId":"584","severity":1,"message":"590","line":12,"column":6,"nodeType":"586","endLine":12,"endColumn":34,"suggestions":"591"},{"ruleId":"584","severity":1,"message":"588","line":12,"column":7,"nodeType":"589","endLine":12,"endColumn":33},{"ruleId":"564","severity":1,"message":"592","line":3,"column":9,"nodeType":"566","messageId":"567","endLine":3,"endColumn":19},{"ruleId":"564","severity":1,"message":"593","line":3,"column":21,"nodeType":"566","messageId":"567","endLine":3,"endColumn":31},{"ruleId":"584","severity":1,"message":"594","line":25,"column":6,"nodeType":"586","endLine":25,"endColumn":8,"suggestions":"595"},{"ruleId":"564","severity":1,"message":"596","line":71,"column":22,"nodeType":"566","messageId":"567","endLine":71,"endColumn":26},{"ruleId":"564","severity":1,"message":"597","line":2,"column":34,"nodeType":"566","messageId":"567","endLine":2,"endColumn":41},{"ruleId":"564","severity":1,"message":"598","line":7,"column":7,"nodeType":"566","messageId":"567","endLine":7,"endColumn":16},{"ruleId":"550","replacedBy":"599"},{"ruleId":"552","replacedBy":"600"},{"ruleId":"564","severity":1,"message":"601","line":2,"column":9,"nodeType":"566","messageId":"567","endLine":2,"endColumn":19},{"ruleId":"564","severity":1,"message":"602","line":2,"column":40,"nodeType":"566","messageId":"567","endLine":2,"endColumn":44},{"ruleId":"564","severity":1,"message":"603","line":2,"column":46,"nodeType":"566","messageId":"567","endLine":2,"endColumn":53},{"ruleId":"564","severity":1,"message":"604","line":2,"column":55,"nodeType":"566","messageId":"567","endLine":2,"endColumn":64},{"ruleId":"564","severity":1,"message":"605","line":2,"column":74,"nodeType":"566","messageId":"567","endLine":2,"endColumn":79},{"ruleId":"564","severity":1,"message":"606","line":2,"column":81,"nodeType":"566","messageId":"567","endLine":2,"endColumn":87},{"ruleId":"564","severity":1,"message":"607","line":4,"column":9,"nodeType":"566","messageId":"567","endLine":4,"endColumn":16},{"ruleId":"564","severity":1,"message":"608","line":8,"column":7,"nodeType":"566","messageId":"567","endLine":8,"endColumn":10},{"ruleId":"564","severity":1,"message":"609","line":9,"column":7,"nodeType":"566","messageId":"567","endLine":9,"endColumn":18},{"ruleId":"564","severity":1,"message":"610","line":26,"column":7,"nodeType":"566","messageId":"567","endLine":26,"endColumn":29},{"ruleId":"564","severity":1,"message":"611","line":52,"column":9,"nodeType":"566","messageId":"567","endLine":52,"endColumn":27},{"ruleId":"564","severity":1,"message":"612","line":54,"column":9,"nodeType":"566","messageId":"567","endLine":54,"endColumn":17},{"ruleId":"564","severity":1,"message":"613","line":92,"column":10,"nodeType":"566","messageId":"567","endLine":92,"endColumn":19},{"ruleId":"564","severity":1,"message":"614","line":123,"column":10,"nodeType":"566","messageId":"567","endLine":123,"endColumn":21},{"ruleId":"550","replacedBy":"615"},{"ruleId":"552","replacedBy":"616"},{"ruleId":"617","severity":1,"message":"618","line":27,"column":47,"nodeType":"619","messageId":"620","endLine":27,"endColumn":62},{"ruleId":"621","severity":1,"message":"622","line":69,"column":68,"nodeType":"623","messageId":"624","endLine":69,"endColumn":81},{"ruleId":"564","severity":1,"message":"625","line":8,"column":10,"nodeType":"566","messageId":"567","endLine":8,"endColumn":19},{"ruleId":"584","severity":1,"message":"626","line":60,"column":6,"nodeType":"586","endLine":60,"endColumn":13,"suggestions":"627"},{"ruleId":"584","severity":1,"message":"628","line":21,"column":6,"nodeType":"586","endLine":21,"endColumn":8,"suggestions":"629"},{"ruleId":"584","severity":1,"message":"630","line":23,"column":6,"nodeType":"586","endLine":23,"endColumn":8,"suggestions":"631"},{"ruleId":"564","severity":1,"message":"632","line":5,"column":11,"nodeType":"566","messageId":"567","endLine":5,"endColumn":22},{"ruleId":"584","severity":1,"message":"633","line":43,"column":6,"nodeType":"586","endLine":43,"endColumn":13,"suggestions":"634"},{"ruleId":"564","severity":1,"message":"635","line":1,"column":28,"nodeType":"566","messageId":"567","endLine":1,"endColumn":37},{"ruleId":"564","severity":1,"message":"636","line":1,"column":39,"nodeType":"566","messageId":"567","endLine":1,"endColumn":47},{"ruleId":"564","severity":1,"message":"593","line":2,"column":19,"nodeType":"566","messageId":"567","endLine":2,"endColumn":29},{"ruleId":"564","severity":1,"message":"592","line":3,"column":10,"nodeType":"566","messageId":"567","endLine":3,"endColumn":20},{"ruleId":"550","replacedBy":"637"},{"ruleId":"552","replacedBy":"638"},{"ruleId":"584","severity":1,"message":"639","line":34,"column":69,"nodeType":"586","endLine":34,"endColumn":71,"suggestions":"640"},{"ruleId":"564","severity":1,"message":"635","line":1,"column":10,"nodeType":"566","messageId":"567","endLine":1,"endColumn":19},{"ruleId":"584","severity":1,"message":"641","line":7,"column":45,"nodeType":"586","endLine":7,"endColumn":47,"suggestions":"642"},{"ruleId":"564","severity":1,"message":"636","line":1,"column":29,"nodeType":"566","messageId":"567","endLine":1,"endColumn":37},{"ruleId":"564","severity":1,"message":"592","line":3,"column":19,"nodeType":"566","messageId":"567","endLine":3,"endColumn":29},{"ruleId":"564","severity":1,"message":"643","line":14,"column":10,"nodeType":"566","messageId":"567","endLine":14,"endColumn":20},{"ruleId":"564","severity":1,"message":"644","line":14,"column":22,"nodeType":"566","messageId":"567","endLine":14,"endColumn":36},{"ruleId":"564","severity":1,"message":"645","line":14,"column":38,"nodeType":"566","messageId":"567","endLine":14,"endColumn":51},{"ruleId":"564","severity":1,"message":"636","line":1,"column":29,"nodeType":"566","messageId":"567","endLine":1,"endColumn":37},{"ruleId":"564","severity":1,"message":"646","line":2,"column":18,"nodeType":"566","messageId":"567","endLine":2,"endColumn":24},{"ruleId":"564","severity":1,"message":"647","line":27,"column":27,"nodeType":"566","messageId":"567","endLine":27,"endColumn":32},{"ruleId":"564","severity":1,"message":"648","line":31,"column":18,"nodeType":"566","messageId":"567","endLine":31,"endColumn":42},{"ruleId":"564","severity":1,"message":"649","line":31,"column":14,"nodeType":"566","messageId":"567","endLine":31,"endColumn":15},{"ruleId":"564","severity":1,"message":"650","line":31,"column":17,"nodeType":"566","messageId":"567","endLine":31,"endColumn":20},{"ruleId":"564","severity":1,"message":"651","line":31,"column":22,"nodeType":"566","messageId":"567","endLine":31,"endColumn":23},{"ruleId":"564","severity":1,"message":"652","line":72,"column":10,"nodeType":"566","messageId":"567","endLine":72,"endColumn":24},{"ruleId":"564","severity":1,"message":"653","line":76,"column":17,"nodeType":"566","messageId":"567","endLine":76,"endColumn":25},{"ruleId":"564","severity":1,"message":"654","line":76,"column":39,"nodeType":"566","messageId":"567","endLine":76,"endColumn":49},{"ruleId":"564","severity":1,"message":"655","line":77,"column":16,"nodeType":"566","messageId":"567","endLine":77,"endColumn":26},{"ruleId":"564","severity":1,"message":"656","line":77,"column":41,"nodeType":"566","messageId":"567","endLine":77,"endColumn":52},{"ruleId":"564","severity":1,"message":"657","line":92,"column":30,"nodeType":"566","messageId":"567","endLine":92,"endColumn":31},{"ruleId":"564","severity":1,"message":"658","line":118,"column":10,"nodeType":"566","messageId":"567","endLine":118,"endColumn":20},{"ruleId":"659","severity":1,"message":"660","line":125,"column":28,"nodeType":"661","endLine":126,"endColumn":14},{"ruleId":"550","replacedBy":"662"},{"ruleId":"552","replacedBy":"663"},{"ruleId":"564","severity":1,"message":"664","line":26,"column":6,"nodeType":"566","messageId":"567","endLine":26,"endColumn":18},{"ruleId":"564","severity":1,"message":"665","line":3,"column":10,"nodeType":"566","messageId":"567","endLine":3,"endColumn":17},{"ruleId":"564","severity":1,"message":"666","line":3,"column":31,"nodeType":"566","messageId":"567","endLine":3,"endColumn":42},{"ruleId":"564","severity":1,"message":"667","line":72,"column":13,"nodeType":"566","messageId":"567","endLine":72,"endColumn":17},{"ruleId":"584","severity":1,"message":"668","line":33,"column":6,"nodeType":"586","endLine":33,"endColumn":26,"suggestions":"669"},{"ruleId":"564","severity":1,"message":"670","line":6,"column":10,"nodeType":"566","messageId":"567","endLine":6,"endColumn":18},{"ruleId":"564","severity":1,"message":"671","line":4,"column":19,"nodeType":"566","messageId":"567","endLine":4,"endColumn":26},{"ruleId":"564","severity":1,"message":"672","line":16,"column":41,"nodeType":"566","messageId":"567","endLine":16,"endColumn":49},{"ruleId":"564","severity":1,"message":"673","line":16,"column":76,"nodeType":"566","messageId":"567","endLine":16,"endColumn":88},{"ruleId":"564","severity":1,"message":"674","line":16,"column":90,"nodeType":"566","messageId":"567","endLine":16,"endColumn":96},{"ruleId":"564","severity":1,"message":"675","line":1,"column":10,"nodeType":"566","messageId":"567","endLine":1,"endColumn":15},{"ruleId":"564","severity":1,"message":"676","line":93,"column":10,"nodeType":"566","messageId":"567","endLine":93,"endColumn":21},{"ruleId":"677","severity":1,"message":"678","line":4,"column":1,"nodeType":"679","endLine":7,"endColumn":2},{"ruleId":"677","severity":1,"message":"678","line":4,"column":1,"nodeType":"679","endLine":7,"endColumn":2},{"ruleId":"677","severity":1,"message":"678","line":5,"column":1,"nodeType":"679","endLine":8,"endColumn":2},{"ruleId":"677","severity":1,"message":"678","line":5,"column":1,"nodeType":"679","endLine":8,"endColumn":2},{"ruleId":"584","severity":1,"message":"680","line":97,"column":6,"nodeType":"586","endLine":97,"endColumn":38,"suggestions":"681"},{"ruleId":"584","severity":1,"message":"588","line":97,"column":7,"nodeType":"589","endLine":97,"endColumn":37},"no-native-reassign",["682"],"no-negated-in-lhs",["683"],["682"],["683"],["682"],["683"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression",["682"],["683"],"@typescript-eslint/no-unused-vars","'IsNull' is defined but never used.","Identifier","unusedVar","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator",["682"],["683"],"'useContext' is defined but never used.","'collection' is assigned a value but never used.","'read' is assigned a value but never used.",["682"],["683"],"'IUseToggle' is defined but never used.","'ArrxContext' is defined but never used.","'Element' is defined but never used.","'ElementIndex' is defined but never used.","'ElementValue' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'index' and 'values'. Either include them or remove the dependency array.","ArrayExpression",["684"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["685"],"'GetValueAt' is defined but never used.","'SetValueAt' is defined but never used.","React Hook useEffect has missing dependencies: '_ref' and 'feedbacks'. Either include them or remove the dependency array.",["686"],"'data' is assigned a value but never used.","'IEditor' is defined but never used.","'boolField' is assigned a value but never used.",["682"],["683"],"'Comparator' is defined but never used.","'Pick' is defined but never used.","'ToArray' is defined but never used.","'Intersect' is defined but never used.","'Union' is defined but never used.","'Groups' is defined but never used.","'IsEmpty' is defined but never used.","'nul' is assigned a value but never used.","'empty' is assigned a value but never used.","'objIdVal' is assigned a value but never used.","'indexes' is assigned a value but never used.","'groupOf3' is assigned a value but never used.","'TestSorts' is defined but never used.","'TestFilters' is defined but never used.",["682"],["683"],"no-new-wrappers","Do not use Number as a constructor.","NewExpression","noConstructor","use-isnan","Use the isNaN function to compare with NaN.","BinaryExpression","comparisonWithNaN","'useUpdate' is defined but never used.","React Hook useEffect has missing dependencies: '_value' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["687"],"React Hook useEffect has a missing dependency: 'Load'. Either include it or remove the dependency array.",["688"],"React Hook useEffect has missing dependencies: 'Collections', 'Load', and 'accessors'. Either include them or remove the dependency array.",["689"],"'IUseStateAt' is defined but never used.","React Hook useEffect has missing dependencies: 'SetValue', 'Value', and 'accessor'. Either include them or remove the dependency array. If 'SetValue' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["690"],"'useEffect' is defined but never used.","'useState' is defined but never used.",["682"],["683"],"React Hook useMemo has a missing dependency: 'baseUrl'. Either include it or remove the dependency array.",["691"],"React Hook useMemo has a missing dependency: 'ifields'. Either include it or remove the dependency array.",["692"],"'ramqIField' is assigned a value but never used.","'firstNameField' is assigned a value but never used.","'lastNameField' is assigned a value but never used.","'Reader' is defined but never used.","'pages' is assigned a value but never used.","'SubmitAnswersAndNextPage' is defined but never used.","'a' is assigned a value but never used.","'mid' is assigned a value but never used.","'b' is assigned a value but never used.","'AbbrevIndexes2' is defined but never used.","'fistLeft' is assigned a value but never used.","'firstRight' is assigned a value but never used.","'secondLeft' is assigned a value but never used.","'secondRight' is assigned a value but never used.","'T' is defined but never used.","'TestAbbrev' is defined but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText",["682"],["683"],"'FeedbackHook' is defined but never used.","'Session' is defined but never used.","'IUseSession' is defined but never used.","'date' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'IniColumns'. Either include it or remove the dependency array.",["693"],"'feedback' is defined but never used.","'IReader' is defined but never used.","'Validate' is assigned a value but never used.","'CreateUpdate' is assigned a value but never used.","'Delete' is assigned a value but never used.","'Input' is defined but never used.","'ReadDefault' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook useEffect has missing dependencies: '_values' and 'index'. Either include them or remove the dependency array. If 'setValue' needs the current value of 'index', you can also switch to useReducer instead of useState and read 'index' in the reducer.",["694"],"no-global-assign","no-unsafe-negation",{"desc":"695","fix":"696"},{"desc":"697","fix":"698"},{"desc":"699","fix":"700"},{"desc":"701","fix":"702"},{"desc":"703","fix":"704"},{"desc":"705","fix":"706"},{"desc":"707","fix":"708"},{"desc":"709","fix":"710"},{"desc":"711","fix":"712"},{"desc":"713","fix":"714"},{"desc":"715","fix":"716"},"Update the dependencies array to be: [index, values]",{"range":"717","text":"718"},"Update the dependencies array to be: [callback]",{"range":"719","text":"720"},"Update the dependencies array to be: [_ref, feedbacks]",{"range":"721","text":"722"},"Update the dependencies array to be: [_value, props, value]",{"range":"723","text":"724"},"Update the dependencies array to be: [Load]",{"range":"725","text":"726"},"Update the dependencies array to be: [Collections, Load, accessors]",{"range":"727","text":"728"},"Update the dependencies array to be: [SetValue, Value, accessor, value]",{"range":"729","text":"730"},"Update the dependencies array to be: [baseUrl]",{"range":"731","text":"732"},"Update the dependencies array to be: [ifields]",{"range":"733","text":"734"},"Update the dependencies array to be: [IniColumns, collectionAccessor]",{"range":"735","text":"736"},"Update the dependencies array to be: [_values, index]",{"range":"737","text":"738"},[1586,1617],"[index, values]",[304,332],"[callback]",[777,779],"[_ref, feedbacks]",[2239,2246],"[_value, props, value]",[580,582],"[Load]",[745,747],"[Collections, Load, accessors]",[1231,1238],"[SetValue, Value, accessor, value]",[1429,1431],"[baseUrl]",[200,202],"[ifields]",[1079,1099],"[IniColumns, collectionAccessor]",[3127,3159],"[_values, index]"]