[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentification.component.tsx":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionitem.component.tsx":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\pager.component.tsx":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\landing\\landing.page.tsx":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\AppTypeScript.tsx":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\hooks\\usepatient.hook.ts":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\hooks\\usequestionnaire.hook.tsx":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\hooks\\usequestionnaireitem.hook.tsx":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.stories.tsx":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedbackcrud.component.tsx":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\stories\\questionnaire.stories.tsx":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaire.feedback.tsx":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\stories\\patient.stories.tsx":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patient.feedback.tsx":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\landing\\stories\\landing.stories.tsx":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\sessiondebug\\sessiondebug.component.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\thankyou\\thankyou.page.tsx":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\input\\input.stories.tsx":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputfilter\\inputfilter.stories.tsx":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\pager\\pager.stories.tsx":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputselect\\imputselection.stories.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\array\\sort.stories.tsx":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\array\\group.stories.tsx":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputarray\\inputarray.stories.tsx":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\stories\\dao.stories.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_utils.ts":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputfilter\\_inputfilter.ts":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_arrayutils.ts":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_dao.ts":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputselect\\_inputselect.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\array\\arrays.utils.tsx":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputarray\\_inputarray.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputfilter\\inputfilter.hook.ts":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\htmlelement.utils.ts":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\utils\\dao.class.ts":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputfilter\\inputfilter.component.tsx":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\components\\dao.contexter.tsx":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputselect\\inputselect.hook.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputselect\\inputselect.component.tsx":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputarray\\inputarray.component.tsx":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputfilter\\inputfilter.utils.ts":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\utils\\collection.class.ts":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\input\\_input.ts":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_customhooks.ts":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_toggle.ts":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputarray\\inputarray.hook.tsx":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\input\\input.component.tsx":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\toggle\\hooks\\usetoggle.hook.ts":"59","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\useRange.hook.tsx":"60","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\toggle\\components\\toggle.component.tsx":"61","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\useTimer.hook.tsx":"62","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\useientry.hook.tsx":"63","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\useupdate.hook.tsx":"64","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\session\\usesession.hook.ts":"65","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\useloader.hook.tsx":"66","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\usestateat.hook.tsx":"67","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\useGetSet.hook.tsx":"68","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\usecolumnsetting.hook.tsx":"69","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\session\\session.class.ts":"70","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\stories\\mockcrud.ts":"71","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\stories\\mockdb.ts":"72","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_mongooseparser.ts":"73","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_session.ts":"74","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\stories\\mockdata.ts":"75","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\mongooseparser\\fetcher.class.ts":"76","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\mongooseparser\\mongooseparser.utils.ts":"77","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\pager\\_pager.ts":"78","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\pager\\pager.component.tsx":"79","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\utils\\validators.tsx":"80","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_inputs.ts":"81","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputsort\\_inputsort.ts":"82","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputsort\\inputsort.hook.ts":"83","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputsort\\inputsort.component.tsx":"84","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputsort\\inputsorter.utils.ts":"85","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\redirector\\redirector.stories.tsx":"86","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\redirector\\redirector.component.tsx":"87","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\redirector\\redirectbtn.component.tsx":"88","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\answers\\answers.page.tsx":"89","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\answers\\hooks\\useanswers.hook.tsx":"90","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\valuetypetesting\\valuetypetesting.utils.ts":"91","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\valuetypetesting\\value.utils.ts":"92","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\date\\date.utils.ts":"93","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\date\\ymd.class.ts":"94","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\editor_reader\\editor\\editor.stories.tsx":"95","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\editor_reader\\reader\\reader.stories.tsx":"96","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\editor_reader\\reader\\reader.component.tsx":"97","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\editor_reader\\editor\\editor.component.tsx":"98","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\editor_reader\\_editor_reader.tsx":"99","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\editor_reader\\reader\\_reader.tsx":"100","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\editor_reader\\editor\\_editor.tsx":"101","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\pager\\pager.hook.ts":"102","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\pager\\pager.utils.ts":"103","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\hooks\\dao.hook.ts":"104","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\usestatereset\\usestatereset.stories.tsx":"105","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\usestatereset\\useStateReset.hook.ts":"106","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\components\\inlinebtn.component.tsx":"107","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.stories.tsx":"108","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.hook.ts":"109","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\inlineadmintable.component.tsx":"110","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\row.components.tsx":"111","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cell.components.tsx":"112","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\_table.tsx":"113","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\components\\inlineentry.components.tsx":"114","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\components\\columnselector.component.tsx":"115","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\components\\cell.components.tsx":"116","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\components\\rows.components.tsx":"117","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\components\\cols.components.tsx":"118","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\components\\thead.components.tsx":"119","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\hooks\\inlinetable.hook.tsx":"120","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\hooks\\inlineentry.hook.tsx":"121","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\utils\\utils.ts":"122","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\stories\\inlinetable.stories.tsx":"123","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\stories\\statictable.stories.tsx":"124","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\stories\\daotable.stories.tsx":"125","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\stories\\inlinetablefeedback.component.tsx":"126"},{"size":621,"mtime":1612141670677,"results":"127","hashOfConfig":"128"},{"size":123,"mtime":1615491516124,"results":"129","hashOfConfig":"128"},{"size":362,"mtime":499162500000,"results":"130","hashOfConfig":"128"},{"size":528,"mtime":1618943181665,"results":"131","hashOfConfig":"128"},{"size":1870,"mtime":1618769214287,"results":"132","hashOfConfig":"128"},{"size":816,"mtime":1617406544457,"results":"133","hashOfConfig":"128"},{"size":1156,"mtime":1618869033407,"results":"134","hashOfConfig":"128"},{"size":1611,"mtime":1619119874808,"results":"135","hashOfConfig":"128"},{"size":2185,"mtime":1618866398539,"results":"136","hashOfConfig":"128"},{"size":1839,"mtime":1616541181855,"results":"137","hashOfConfig":"128"},{"size":906,"mtime":1619119874807,"results":"138","hashOfConfig":"128"},{"size":1410,"mtime":1618775283454,"results":"139","hashOfConfig":"128"},{"size":743,"mtime":1617409396047,"results":"140","hashOfConfig":"128"},{"size":1927,"mtime":1618943148762,"results":"141","hashOfConfig":"128"},{"size":3771,"mtime":1618769214288,"results":"142","hashOfConfig":"128"},{"size":818,"mtime":1620083242368,"results":"143","hashOfConfig":"128"},{"size":673,"mtime":1620076559302,"results":"144","hashOfConfig":"128"},{"size":4648,"mtime":1618869230993,"results":"145","hashOfConfig":"128"},{"size":1695,"mtime":1619119874807,"results":"146","hashOfConfig":"128"},{"size":2462,"mtime":1616089040399,"results":"147","hashOfConfig":"128"},{"size":1736,"mtime":1618769629347,"results":"148","hashOfConfig":"128"},{"size":2319,"mtime":1618944852018,"results":"149","hashOfConfig":"128"},{"size":1279,"mtime":1618861787907,"results":"150","hashOfConfig":"128"},{"size":1075,"mtime":1618864099595,"results":"151","hashOfConfig":"128"},{"size":1123,"mtime":1618865515321,"results":"152","hashOfConfig":"128"},{"size":733,"mtime":1618944836051,"results":"153","hashOfConfig":"128"},{"size":808,"mtime":1618863665444,"results":"154","hashOfConfig":"128"},{"size":1350,"mtime":1618944860227,"results":"155","hashOfConfig":"128"},{"size":2367,"mtime":1618950857948,"results":"156","hashOfConfig":"128"},{"size":1591,"mtime":1619979800382,"results":"157","hashOfConfig":"128"},{"size":3021,"mtime":1619551185548,"results":"158","hashOfConfig":"128"},{"size":1201,"mtime":1618772625724,"results":"159","hashOfConfig":"128"},{"size":2755,"mtime":1618170464473,"results":"160","hashOfConfig":"128"},{"size":2854,"mtime":1618170341385,"results":"161","hashOfConfig":"128"},{"size":1263,"mtime":1618945439532,"results":"162","hashOfConfig":"128"},{"size":1853,"mtime":1617484078106,"results":"163","hashOfConfig":"128"},{"size":618,"mtime":1619641969059,"results":"164","hashOfConfig":"128"},{"size":175,"mtime":1619979580568,"results":"165","hashOfConfig":"128"},{"size":199,"mtime":1619464148809,"results":"166","hashOfConfig":"128"},{"size":288,"mtime":1619635645605,"results":"167","hashOfConfig":"128"},{"size":180,"mtime":1618773909312,"results":"168","hashOfConfig":"128"},{"size":5052,"mtime":1619549306953,"results":"169","hashOfConfig":"128"},{"size":113,"mtime":1618773618379,"results":"170","hashOfConfig":"128"},{"size":1591,"mtime":1619979736373,"results":"171","hashOfConfig":"128"},{"size":2633,"mtime":1618950702183,"results":"172","hashOfConfig":"128"},{"size":7036,"mtime":1620080038238,"results":"173","hashOfConfig":"128"},{"size":818,"mtime":1619979757334,"results":"174","hashOfConfig":"128"},{"size":1320,"mtime":1619635520069,"results":"175","hashOfConfig":"128"},{"size":1246,"mtime":1618773773710,"results":"176","hashOfConfig":"128"},{"size":2147,"mtime":1618773821180,"results":"177","hashOfConfig":"128"},{"size":2195,"mtime":1618773702661,"results":"178","hashOfConfig":"128"},{"size":1514,"mtime":1620248344148,"results":"179","hashOfConfig":"128"},{"size":2542,"mtime":1618770168056,"results":"180","hashOfConfig":"128"},{"size":86,"mtime":1618773437113,"results":"181","hashOfConfig":"128"},{"size":823,"mtime":1619642713025,"results":"182","hashOfConfig":"128"},{"size":188,"mtime":1618771019308,"results":"183","hashOfConfig":"128"},{"size":1470,"mtime":1618945860771,"results":"184","hashOfConfig":"128"},{"size":2030,"mtime":1619659029484,"results":"185","hashOfConfig":"128"},{"size":1330,"mtime":1618770061411,"results":"186","hashOfConfig":"128"},{"size":422,"mtime":1618771778364,"results":"187","hashOfConfig":"128"},{"size":695,"mtime":1618770066436,"results":"188","hashOfConfig":"128"},{"size":1085,"mtime":1617397604984,"results":"189","hashOfConfig":"128"},{"size":1397,"mtime":1619119874809,"results":"190","hashOfConfig":"128"},{"size":338,"mtime":1612141671148,"results":"191","hashOfConfig":"128"},{"size":1403,"mtime":1616720637273,"results":"192","hashOfConfig":"128"},{"size":1725,"mtime":1613937646786,"results":"193","hashOfConfig":"128"},{"size":1460,"mtime":1618778090439,"results":"194","hashOfConfig":"128"},{"size":1287,"mtime":1613953897783,"results":"195","hashOfConfig":"128"},{"size":582,"mtime":1612141671146,"results":"196","hashOfConfig":"128"},{"size":2834,"mtime":1614730588739,"results":"197","hashOfConfig":"128"},{"size":2929,"mtime":1618770771520,"results":"198","hashOfConfig":"128"},{"size":1292,"mtime":1618776850866,"results":"199","hashOfConfig":"128"},{"size":254,"mtime":1618771440724,"results":"200","hashOfConfig":"128"},{"size":203,"mtime":1618771612531,"results":"201","hashOfConfig":"128"},{"size":5993,"mtime":1618776836384,"results":"202","hashOfConfig":"128"},{"size":2757,"mtime":1619655855737,"results":"203","hashOfConfig":"128"},{"size":3352,"mtime":1618951767760,"results":"204","hashOfConfig":"128"},{"size":149,"mtime":1619551032169,"results":"205","hashOfConfig":"128"},{"size":2691,"mtime":1619551067425,"results":"206","hashOfConfig":"128"},{"size":834,"mtime":1618860436487,"results":"207","hashOfConfig":"128"},{"size":916,"mtime":1619979915969,"results":"208","hashOfConfig":"128"},{"size":169,"mtime":1619979888968,"results":"209","hashOfConfig":"128"},{"size":828,"mtime":1619980000563,"results":"210","hashOfConfig":"128"},{"size":1091,"mtime":1620433442393,"results":"211","hashOfConfig":"128"},{"size":545,"mtime":1619486507211,"results":"212","hashOfConfig":"128"},{"size":1056,"mtime":1618862131879,"results":"213","hashOfConfig":"128"},{"size":289,"mtime":1618861784137,"results":"214","hashOfConfig":"128"},{"size":282,"mtime":1618866136148,"results":"215","hashOfConfig":"128"},{"size":903,"mtime":1618943803059,"results":"216","hashOfConfig":"128"},{"size":688,"mtime":1618943854809,"results":"217","hashOfConfig":"128"},{"size":1755,"mtime":1618966315873,"results":"218","hashOfConfig":"128"},{"size":3044,"mtime":1619919040376,"results":"219","hashOfConfig":"128"},{"size":1520,"mtime":1618951962577,"results":"220","hashOfConfig":"128"},{"size":442,"mtime":1618952735931,"results":"221","hashOfConfig":"128"},{"size":2761,"mtime":1618951118392,"results":"222","hashOfConfig":"128"},{"size":1595,"mtime":1617484387213,"results":"223","hashOfConfig":"128"},{"size":2023,"mtime":1619657634700,"results":"224","hashOfConfig":"128"},{"size":2493,"mtime":1619119874808,"results":"225","hashOfConfig":"128"},{"size":243,"mtime":1616268898447,"results":"226","hashOfConfig":"128"},{"size":148,"mtime":1616267999410,"results":"227","hashOfConfig":"128"},{"size":111,"mtime":1618776917632,"results":"228","hashOfConfig":"128"},{"size":418,"mtime":1620262999417,"results":"229","hashOfConfig":"128"},{"size":453,"mtime":1619550352367,"results":"230","hashOfConfig":"128"},{"size":397,"mtime":1619635430530,"results":"231","hashOfConfig":"128"},{"size":1176,"mtime":1619654245036,"results":"232","hashOfConfig":"128"},{"size":502,"mtime":1619654567158,"results":"233","hashOfConfig":"128"},{"size":2036,"mtime":1620520699983,"results":"234","hashOfConfig":"128"},{"size":734,"mtime":1620076848937,"results":"235","hashOfConfig":"128"},{"size":939,"mtime":1620078969385,"results":"236","hashOfConfig":"128"},{"size":1177,"mtime":1620083216610,"results":"237","hashOfConfig":"128"},{"size":1285,"mtime":1620079231830,"results":"238","hashOfConfig":"128"},{"size":2183,"mtime":1620084213127,"results":"239","hashOfConfig":"128"},{"size":950,"mtime":1620680542622,"results":"240","hashOfConfig":"128"},{"size":770,"mtime":1620515948498,"results":"241","hashOfConfig":"128"},{"size":710,"mtime":1620500711140,"results":"242","hashOfConfig":"128"},{"size":886,"mtime":1620521257530,"results":"243","hashOfConfig":"128"},{"size":614,"mtime":1620411044645,"results":"244","hashOfConfig":"128"},{"size":610,"mtime":1620409104604,"results":"245","hashOfConfig":"128"},{"size":1436,"mtime":1620523028089,"results":"246","hashOfConfig":"128"},{"size":1248,"mtime":1620680196697,"results":"247","hashOfConfig":"128"},{"size":933,"mtime":1620521765667,"results":"248","hashOfConfig":"128"},{"size":280,"mtime":1620423321527,"results":"249","hashOfConfig":"128"},{"size":5716,"mtime":1620680884416,"results":"250","hashOfConfig":"128"},{"size":3431,"mtime":1620680904195,"results":"251","hashOfConfig":"128"},{"size":5110,"mtime":1620681470063,"results":"252","hashOfConfig":"128"},{"size":977,"mtime":1620681415494,"results":"253","hashOfConfig":"128"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},"ke513i",{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"263"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"266"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"279"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"266"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"266"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"266"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"266"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"266"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"266"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"266"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"266"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"266"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"325","messages":"326","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"266"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"266"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"266"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"266"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"266"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"266"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"266"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"266"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"266"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"266"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"266"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"266"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"266"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"266"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"266"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"266"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"266"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"266"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"266"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"266"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"266"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"266"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"266"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"266"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"266"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"266"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"266"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"266"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"266"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"263"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479","usedDeprecatedRules":"263"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"266"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"266"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"490","messages":"491","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"266"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495","usedDeprecatedRules":"266"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498","usedDeprecatedRules":"266"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501","usedDeprecatedRules":"266"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514","usedDeprecatedRules":"266"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"517","usedDeprecatedRules":"266"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"266"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"266"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532","usedDeprecatedRules":"266"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"551","messages":"552","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"553","usedDeprecatedRules":"266"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"266"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"558","messages":"559","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"560","messages":"561","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["564","565"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],["566","567"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx",[],["568","569"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx",["570"],"import {Link, withRouter} from 'react-router-dom'; \r\n\r\n\r\n// HOME =================================================== \r\nexport default function HomePage() { \r\n  return <div> \r\n    <h1>Demo</h1> \r\n    <p>This is a fullstack projects using <em>React</em>, <em>Mongoose/MongoDb</em> and <em>Expess</em>. Both front and back-ends are written in <em>Typescript</em>. The project is deployed on <em>Heroku</em>, and its database hosted on <em>MongoDb Atlas</em>.</p> \r\n    \r\n    <h2><Link to='/admin'>Admin Section</Link></h2> \r\n    <p>The admin section allows you to edit the forms content, patients profile etc.</p> \r\n\r\n    <h2><Link to={'/patient'}>Patient Section</Link></h2> \r\n    <p>The patient section allows you to create a patient profile and complete a questionnaire and submit your answers.</p> \r\n  </div> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx",["571"],"import { useContext } from 'react'; \r\nimport { Editor, IEditor } from '../../../libs/editor_reader/_editor_reader'; \r\nimport { PatientContext } from '../patient.page'; \r\n\r\nimport { DaoContext } from '../../../libs/_dao'; \r\nimport { useStateAt } from '../../../libs/_customhooks'; \r\n\r\n\r\nexport function PatientProfile() { \r\n  const context = useContext(PatientContext); \r\n  const {CreateUpdateProfile} = context; \r\n  const [Get, Set] = useStateAt({ramq:'', firstName:'', lastName:''}); \r\n  const {ramq, firstName, lastName} = CollectArgs(['ramq', 'firstName', 'lastName'], Get, Set); \r\n\r\n  return <div className={'borderedform'}> \r\n    <div><label>Ramq:</label><Editor {...{...ramq, sizeFunc:() => 13}} /></div> \r\n    <div><label>First name:</label><Editor {...{...firstName, sizeFunc:() => 20}} /></div> \r\n    <div><label>Last name:</label><Editor {...{...lastName, sizeFunc:() => 20}} /></div> \r\n    <br/> \r\n    <button onClick={() => CreateUpdateProfile(Get())}>Save</button> \r\n  </div> \r\n} \r\n\r\n\r\nfunction CollectArgs( \r\n    fieldAccessors: string[], \r\n    Get: (keys?: TKey[] | undefined) => any, \r\n    Set?: (newValue: any, keys?: TKey[] | undefined) => void) \r\n{ \r\n  const dao = useContext(DaoContext); \r\n  const ifields = dao.GetIFields('patients', fieldAccessors); \r\n  let args:any = {}; \r\n  ifields.forEach( ifield => { \r\n    const value = Get([ifield.accessor]); \r\n    const editValue = Set ? (newValue:any) => Set(newValue, [ifield.accessor]): undefined; \r\n    const options = dao.GetIOptions(ifield); \r\n    args[ifield.accessor] = {ifield, value, editValue, options}; \r\n  }); \r\n  return args; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentification.component.tsx",[],["572","573"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionitem.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\pager.component.tsx",["574","575"],"import React, { useContext } from 'react'; \r\nimport { QuestionnaireContext } from '../questionnaire.page'; \r\nimport {PageOfPages, PagerBtn, PagerFromTo} from '../../../libs/pager/_pager';\r\n\r\n\r\n\r\n// PAGER ==================================================\r\nexport function Pager() { \r\n  const {paging} = useContext(QuestionnaireContext); \r\n\r\n  return <div> \r\n    <BtnSubmitAnswers/> <br/> \r\n    <PageOfPages {...{paging}}/> <br/> \r\n    <PagerFromTo {...{paging}}/> <br/> \r\n    <PagerBtn {...{paging}} /> <br/> \r\n  </div> \r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\n// Butonn Submit Answers =========================================\r\nexport function BtnSubmitAnswers() { \r\n  const {paging, feedbackRef, AnswersAreComplete, SubmitQuestionnaire} = useContext(QuestionnaireContext); \r\n  const {page, pageIndex, pages, setPageIndex} = paging; \r\n  const pageIsComplete = AnswersAreComplete(page.map(ia => ia.t)); \r\n  const formIsComplete = AnswersAreComplete(); \r\n\r\n  async function SubmitAnswersAndNextPage () { \r\n    \r\n  }\r\n\r\n  async function SubmitAnswersFinal() { \r\n    const responses = await SubmitQuestionnaire(); \r\n    feedbackRef.current.Set(responses); // success \r\n  }\r\n\r\n  return <div> \r\n    {formIsComplete ? \r\n      <button onClick={() => SubmitAnswersFinal()} disabled={!formIsComplete}>Submit</button>: \r\n      <button onClick={() => setPageIndex(pageIndex+1)} disabled={!pageIsComplete} >Next</button> \r\n    } \r\n  </div> \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\landing\\landing.page.tsx",["576","577","578","579","580"],"import { useEffect, useState, useMemo } from \"react\"; \r\nimport { setInterval, clearInterval } from \"timers\"; \r\n\r\n\r\nexport default function Landing() { \r\n  const [timer, setTimer] = useState(0); \r\n  \r\n  /*const Callback = () => setTimer((prev:number) => prev+1); \r\n  useEffect(() => { \r\n    setInterval( Callback, 1000 ); \r\n  }, []); */\r\n\r\n  return <div className={'landing'}> \r\n    {timer} \r\n    <LoadingDots {...{timer}}/> \r\n    {timer > 0 && <div> \r\n      <h1>Heroku is waking up</h1> \r\n      It should not take long  \r\n    </div>} \r\n  </div> \r\n} \r\n\r\nfunction LoadingDots({timer}:{timer:number}) { \r\n  const nDots = (timer % 3); \r\n  return <div> \r\n    {nDots === 0 && '.'} \r\n    {nDots === 1 && '.'} \r\n    {nDots === 2 && '.'} \r\n  </div> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\AppTypeScript.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\hooks\\usepatient.hook.ts",["581"],"import { useContext, useState } from 'react'; \r\nimport { DaoContext } from '../../../libs/_dao'; \r\nimport { useSession, Session } from '../../../libs/_session'; \r\nimport { IsEmpty } from '../../../libs/_utils'; \r\nimport { PatientFeedBackRef, usePatientFeedbackRef } from '../components/patient.feedback'; \r\n\r\n\r\nexport interface IUsePatient { \r\n  TestResetSession: () => void; \r\n\r\n  profile: IEntry; \r\n  setProfile: (newValue:any, keys:any[]) => void; \r\n  ready: boolean; \r\n\r\n  feedbackRef:PatientFeedBackRef; \r\n\r\n  IdentifyPatient: (ramq:string) => void; \r\n  RamqIsValid: (value:string) => boolean; \r\n  \r\n  CreateUpdateProfile: (patient: IEntry) => Promise<void>; \r\n  //CreateUpdateAppointment: (patient: IEntry) => Promise<void>; \r\n} \r\n\r\n\r\n// UsePatient ============================================= \r\nexport function usePatient():IUsePatient { \r\n  console.log(\"patient\"); \r\n  const dao = useContext(DaoContext); \r\n\r\n  // Profile session -------------------------------------- \r\n  const [profile, _setProfile] = useState(Session.Get('profile')); \r\n  const setProfile = (newValue:any) => { \r\n    Session.Set('profile', newValue); \r\n    _setProfile(newValue); \r\n  }\r\n  \r\n  //const sessionReady = useSession('ready', false); \r\n  const ready = IsReady(); \r\n  \r\n  function IsReady() { \r\n    if(IsEmpty(profile)) \r\n      return false; \r\n    return Object.keys(profile).every( k => !IsEmpty(profile[k])) \r\n  }\r\n\r\n\r\n  const feedbackRef = usePatientFeedbackRef(); \r\n\r\n  // RamqIsValid ------------------------------------------\r\n  function RamqIsValid(value:string) { \r\n    const [ramqIsValid] = dao.Validate('patients', {ramq:value}); \r\n    return ramqIsValid; \r\n  } \r\n\r\n  // IdentifyPatient --------------------------------------\r\n  function IdentifyPatient(ramq:string) { \r\n    const entries = dao.GetIEntries('patients'); \r\n    const foundProfile = entries.find( e => { \r\n      const e_ramq = (e['ramq'] as string); \r\n      return e_ramq.toLowerCase() === ramq.toLowerCase(); \r\n    }); \r\n    const newProfile = {...dao.GetDefaultIEntry('patients'), ramq}; \r\n    setProfile(foundProfile ?? newProfile); \r\n  }\r\n\r\n  // CreateUpdateProfile ----------------------------------\r\n  async function CreateUpdateProfile(patient: IEntry) { \r\n    const [response] = await dao.CreateUpdate('patients', [patient]); \r\n    feedbackRef.current.Set(response); \r\n    //console.log(response);\r\n    if(response.success) { \r\n      setProfile(response.data); \r\n    } \r\n    else { \r\n      console.log(response.err); \r\n    } \r\n  } \r\n\r\n  // CreateUpdateappointment ----------------------------------\r\n  /*async function CreateUpdateAppointment(patient: IEntry) { \r\n    const appointment = FindAppointment(patient); \r\n    const [response] = await dao.CreateUpdate('appointments', [appointment]); \r\n    //feedback.setValue([response]); \r\n    if(response.success) { \r\n      setAppointment(response.data); \r\n      const date = new Date(response.data['date'] as any); \r\n    } \r\n    else \r\n      console.log('appointment failed ...'); \r\n  } */\r\n\r\n  // FindCurrentSession -----------------------------------\r\n  /*function FindAppointment(patient: IEntry) { \r\n    const entries = dao.GetIEntries('appointments'); \r\n    const defaultAppointment = {...dao.GetDefaultIEntry('appointments'), patient:patient._id}; \r\n    const foundAppointment = entries.find( e => { \r\n      const e_patient = (e['patient'] as string); \r\n      return e_patient === patient._id; \r\n    }); \r\n    return {...defaultAppointment, ...foundAppointment}; \r\n  } */\r\n\r\n\r\n  const TestResetSession = () => { \r\n    setProfile({}); \r\n    //sessionProfile.Reset(); \r\n  }\r\n\r\n  return { \r\n    TestResetSession, \r\n\r\n    profile, setProfile, \r\n    ready, \r\n    feedbackRef, \r\n    RamqIsValid, \r\n    IdentifyPatient, \r\n    CreateUpdateProfile\r\n  } \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\hooks\\usequestionnaire.hook.tsx",["582"],"import { useContext } from 'react'; \r\nimport { DaoContext } from '../../../libs/_dao'; \r\nimport { useSession } from '../../../libs/_session'; \r\nimport { IsEmpty } from '../../../libs/_utils'; \r\nimport { usePage, IPageHook } from '../../../libs/pager/_pager'; \r\nimport { QuestionnaireFeedBackRef, useQuestionnaireFeedbackRef } from '../components/questionnaire.feedback'; \r\n\r\n\r\nexport interface IUseQuestionnaire { \r\n  TestResetSession: () => void; \r\n\r\n  paging: IPageHook<IAnswer>; \r\n  questionnaire: IAnswer[]; \r\n  setQuestionnaire: (newAnswer:number, keys:any[]) => void; \r\n\r\n  feedbackRef:QuestionnaireFeedBackRef; \r\n  //GetPages: () => any[][]; \r\n\r\n  AnswersAreComplete: (answers?:IAnswer[]) => boolean; \r\n  LoadQuestionnaire: () => void; \r\n  /*GetQuestionnaireItem:(answer:IAnswer) => { \r\n    form: undefined|IForm; \r\n    instructions: undefined|IInstruction[]; \r\n    question: undefined|IQuestion; \r\n    response: undefined|IResponse; \r\n  } */\r\n  SubmitQuestionnaire: (answers?:IEntry[]) => Promise<ICrudResponse[]>; \r\n} \r\n\r\nexport function useQuestionnaire(patient:IEntry):IUseQuestionnaire { \r\n  //console.log('questionnaire'); \r\n  \r\n  const dao = useContext(DaoContext); \r\n  const date = new Date(); \r\n  const feedbackRef = useQuestionnaireFeedbackRef(); \r\n  //const profile = Session.Get('profile') as IEntry; \r\n\r\n  // Questionnaire session --------------------------------\r\n  //const blankQuestionnaire = BlankQuestionnaire(); \r\n  const sessionQuestionnaire = useSession('questionnaire', LoadQuestionnaire()); \r\n  const questionnaire:IAnswer[] = sessionQuestionnaire.Get(); \r\n  const setQuestionnaire = (newValue:any, keys:any[] = []) => sessionQuestionnaire.Set(newValue, [...keys]); \r\n\r\n  // Paging -----------------------------------------------\r\n  const paging = usePage(questionnaire, PageGrouping()); \r\n  \r\n  function GetQuestion(answer:IAnswer) { \r\n    const [question] = dao.GetIEntries('questions', [answer?.question]) as IQuestion[]; \r\n    return question; \r\n  } \r\n\r\n  // LoadQuestionnaire -----------------------------------\r\n  function LoadQuestionnaire() { \r\n    const loadQuestionnaire = [] as any[]; \r\n    const questions = IsEmpty(loadQuestionnaire) ? BlankQuestionnaire() : loadQuestionnaire; \r\n    return questions // Sorts(questions, [QuestionSorting()]); \r\n  } \r\n\r\n  // BlankQuestionnaire ----------------------------------- \r\n  function BlankQuestionnaire():IAnswer[] { \r\n    const entries = dao.GetIEntries('questions'); \r\n    const patientId = patient?._id ?? ''; \r\n    return entries.map( q => { \r\n      return {_id:'', patient:patientId, date, question:q._id, answer:-1} as IAnswer; \r\n    }); \r\n  } \r\n\r\n  // SubmitQuestionnaire ----------------------------------\r\n  async function SubmitQuestionnaire(answers?:IEntry[]) { \r\n    const toSubmit = answers ?? questionnaire; \r\n    const responses = await dao.CreateUpdate('answers', toSubmit); \r\n    return responses; \r\n  } \r\n\r\n  function AnswersAreComplete(answers?:IAnswer[]) { \r\n    const _answers = answers ?? questionnaire; \r\n    return _answers.every( answer => {\r\n      const question = GetQuestion(answer); \r\n      return question && (question?.optional || answer.answer >=0); \r\n    }); \r\n  } \r\n\r\n  function QuestionSorting() { \r\n    return (t:IAnswer, pivot:IAnswer) => { \r\n      const q = GetQuestion(t); \r\n      const qPivot = GetQuestion(pivot); \r\n      // Regroup question by form. \r\n      const byForm = JSON.stringify(q?.form) === JSON.stringify(qPivot?.form); \r\n      // Regroup question by instruction. \r\n      const byInstruction = JSON.stringify(q?.instructions) === JSON.stringify(qPivot?.instructions); \r\n      return byForm && byInstruction; \r\n    } \r\n  } \r\n\r\n  // Page Break Predicates ============================================= \r\n  function PageGrouping() { \r\n    return (t:IAnswer, i:number, a:IAnswer[], positive:IAnswer[]) => { \r\n      const [pivot] = a; \r\n      const q = GetQuestion(t); \r\n      const qPivot = GetQuestion(pivot); \r\n      \r\n      // Regroup question by form. \r\n      const byForm = JSON.stringify(q?.form) === JSON.stringify(qPivot?.form); \r\n      // Regroup question by instruction. \r\n      const byInstruction = JSON.stringify(q?.instructions) === JSON.stringify(qPivot?.instructions); \r\n      // Max 4 question per page. \r\n      const pageCap = positive.length < 4; \r\n      return byForm && byInstruction && pageCap; \r\n    } \r\n  } \r\n\r\n  const TestResetSession = () => { \r\n    sessionQuestionnaire.Reset(); \r\n  } \r\n\r\n  return { \r\n    TestResetSession, \r\n\r\n    paging, \r\n    questionnaire, setQuestionnaire, \r\n\r\n    feedbackRef, \r\n\r\n    AnswersAreComplete, \r\n    LoadQuestionnaire, \r\n    SubmitQuestionnaire \r\n  } \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\hooks\\usequestionnaireitem.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.stories.tsx",["583"],"import React, { useRef } from 'react'; \r\nimport { TestFeedback, FeedbackLines, GetSet } from './feedback.component'; \r\nimport { FeedbackCruds } from './feedbackcrud.component'; \r\n\r\n\r\n\r\nfunction FeedbackSetter({feedbackRef}:{feedbackRef:React.MutableRefObject<GetSet>}) { \r\n  return <div> \r\n    <button onClick={() => feedbackRef.current?.Set([{type:0, msg:'success !!'}] )} >Success</button> <br/> \r\n    <button onClick={() => feedbackRef.current?.Set([{type:1, msg:'note?'}] )} >Note</button> <br/> \r\n    <button onClick={() => feedbackRef.current?.Set([{type:2, msg:'warning !!'}] )} >Warning</button> <br/> \r\n    <button onClick={() => feedbackRef.current?.Set([{type:3, msg:'failure !!'}] )} >Failure</button> <br/> \r\n  </div> \r\n}\r\n\r\nfunction FeedbackCrudSetter({feedbackRef}:{feedbackRef:React.MutableRefObject<GetSet>}) { \r\n  const responses = [{actionType: 'create', success:true, data:{}, err:[]}]; \r\n  const responses2 = [{actionType: 'update', success:true, data:{}, err:[]}]; \r\n  const responses3 = [{actionType: 'delete', success:true, data:{}, err:[]}]; \r\n  return <div> \r\n    <button onClick={() => feedbackRef.current?.Set(responses)} >Create</button> <br/> \r\n    <button onClick={() => feedbackRef.current?.Set(responses2)} >Update</button> <br/> \r\n    <button onClick={() => feedbackRef.current?.Set(responses3)} >Delete</button> <br/> \r\n  </div> \r\n}\r\n\r\n\r\n/*function TestFeedbackStory({...props}:{child:any, setter:any}) { \r\n  const feedbackRef = useRef<GetSet>(); \r\n  \r\n  return <div>\r\n    <FeedbackComponent {...{feedbackRef}}> \r\n      <props.child/> \r\n    </FeedbackComponent> \r\n    <props.setter {...{feedbackRef}} /> \r\n  </div> \r\n}*/\r\n\r\nfunction TestFeedbackStory({...props}:{child:any, setter:any}) { \r\n  const feedbackRef = useRef<GetSet>(); \r\n  return <div> \r\n    <props.child {...{feedbackRef}} /> \r\n    <props.setter {...{feedbackRef}} /> \r\n  </div> \r\n} \r\n\r\n\r\nexport default { \r\n  title: 'Feedback', \r\n  component: TestFeedbackStory, \r\n} \r\n\r\nconst Template = args => <TestFeedbackStory {...args} /> \r\n\r\nexport const TestFeedbackSingleLine = Template.bind({}) \r\nTestFeedbackSingleLine.args = { \r\n  child: TestFeedback, \r\n  setter: FeedbackSetter \r\n} \r\n\r\nexport const TestFeedbackLines = Template.bind({}) \r\nTestFeedbackLines.args = { \r\n  child: FeedbackLines, \r\n  setter: FeedbackSetter \r\n} \r\n\r\nexport const TestFeedbackCrud = Template.bind({}) \r\nTestFeedbackCrud.args = { \r\n  child: FeedbackCruds, \r\n  setter: FeedbackCrudSetter \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedbackcrud.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\stories\\questionnaire.stories.tsx",["584","585","586","587"],"import { Story } from '@storybook/react'; \r\nimport { Switch, Route } from 'react-router'; \r\nimport { BrowserRouter } from 'react-router-dom'; \r\nimport { crud } from '../../../libs/dao/stories/mockcrud'; \r\nimport { DaoContexter, DaoContext, ICrud } from '../../../libs/_dao'; \r\nimport { useSession, Session } from '../../../libs/_session'; \r\n\r\nimport QuestionnairePage from '../questionnaire.page'; \r\n\r\n\r\nimport { IsEmpty } from '../../../libs/_utils';\r\nimport { useContext } from 'react';\r\n\r\n\r\nfunction TemplateComponent({accessors, patient}:{accessors:string[], patient:IPatient}) { \r\n  return <DaoContexter {...{crud:crud as ICrud, accessors}}> \r\n    <BrowserRouter> \r\n      <SimulatePatientSession /> \r\n    </BrowserRouter> \r\n  </DaoContexter> \r\n} \r\n\r\n// {patient}:{patient:IPatient} \r\nfunction SimulatePatientSession() { \r\n  const dao = useContext(DaoContext); \r\n  const [patient] = dao.GetIEntries('patients'); \r\n  const sessionProfile = useSession('profile', patient); \r\n  const ready = !IsEmpty(sessionProfile.Get()?._id); \r\n  \r\n  return <div> \r\n    <DebugSessions/>\r\n    {ready && <QuestionnairePage/>} \r\n  </div> \r\n}\r\n\r\nfunction DebugSessions() {\r\n  const EndSession = () => { \r\n    Session.EndSession('profile'); \r\n    Session.EndSession('questionnaire'); \r\n  }\r\n  /*\r\n  <DisplaySession session={'profile'}/> \r\n  <DisplaySession session={'questionnaire'}/> */ \r\n  return <div>\r\n    \r\n    <button onClick={EndSession}>ResetProfile</button> \r\n  </div>\r\n}\r\n\r\nfunction DisplaySession({session}:{session:string}) { \r\n  const value = Session.Get(session); \r\n  if(Array.isArray(value)) \r\n    return <div> <div>session:{session}</div>\r\n      {value.map( (v,i) => { \r\n        return <div key={i}>{JSON.stringify(v)}</div> \r\n      })} \r\n    </div> \r\n  return <div><div>session:{session}</div> {JSON.stringify(value)}</div> \r\n} \r\n\r\n\r\nexport default { \r\n  title: 'Questionnaire/Questionnaire', \r\n  component: TemplateComponent, \r\n} \r\n\r\nconst Template:Story<{accessors:string[], patient:IPatient}> = args => <TemplateComponent {...args} /> \r\nexport const TestQuestionnairePage = Template.bind({}) \r\nTestQuestionnairePage.args = { \r\n  accessors: ['questions', 'patients', 'responses', 'answers', 'forms', 'instructions'], \r\n  patient: {_id:'1', ramq:'JEAF23118301', firstName:'Fred', lastName:'Jean' } as IPatient, \r\n} \r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaire.feedback.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\stories\\patient.stories.tsx",["588"],"import { Story } from '@storybook/react'; \r\nimport { Switch, Route } from 'react-router'; \r\n\r\nimport { crud } from '../../../libs/dao/stories/mockcrud'; \r\nimport { DaoContexter, ICrud } from '../../../libs/_dao'; \r\nimport PatientPage from '../patient.page'; \r\nimport QuestionnairePage from '../../questionnaire/questionnaire.page'; \r\nimport { BrowserRouter } from 'react-router-dom'; \r\n\r\n\r\n\r\nfunction TemplateComponent({accessors}:{accessors:string[]}) { \r\n  return <DaoContexter {...{crud:crud as ICrud, accessors}} > \r\n    <BrowserRouter> \r\n      <Switch> \r\n        <PatientPage/> \r\n        <Route path={'/questionnaire'} component={QuestionnairePage} /> \r\n      </Switch> \r\n    </BrowserRouter> \r\n  </DaoContexter> \r\n} \r\n\r\nexport default { \r\n  title: 'Patient/Patient', \r\n  component: TemplateComponent, \r\n} \r\n\r\nconst Template:Story<{accessors:string[]}> = args => <TemplateComponent {...args} /> \r\nexport const TestPatientPage = Template.bind({}) \r\nTestPatientPage.args = { \r\n  accessors: ['questions', 'patients', 'responses', 'answers', 'forms', 'instructions']\r\n} \r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patient.feedback.tsx",["589"],"import React, { useRef } from 'react'; \r\nimport { useRefGetSet, GetSet } from '../../../components/feedback/feedback.component'; \r\n\r\n\r\nexport type PatientFeedBackRef = React.MutableRefObject<GetSet>; \r\nexport function usePatientFeedbackRef() { \r\n  const getset = {Get:()=>{}, Set:(newValue:any)=>{}} as GetSet; \r\n  return useRef<GetSet>(getset as GetSet); \r\n} \r\n\r\nexport function PatientFeedback({feedbackRef}:{feedbackRef:React.MutableRefObject<GetSet>}) { \r\n  const {Get, Set} = useRefGetSet(feedbackRef); \r\n  const response = Get() as ICrudResponse; \r\n  \r\n  return <div> \r\n    {response.success ? \r\n      <Success {...{response}} /> : \r\n      <ListErrMsgs {...{response}}/> } \r\n  </div> \r\n} \r\n\r\nfunction Success({response}:{response:ICrudResponse}) { \r\n  const {firstName, lastName} = response?.data as IPatient; \r\n  return <div className={'optional'}> \r\n    Welcome {firstName} {lastName}. \r\n  </div> \r\n} \r\n\r\nfunction ListErrMsgs({response}:{response:ICrudResponse}) { \r\n  const errMsg = response.err; \r\n  return <ul> \r\n    {errMsg?.map( e => { \r\n      return <li className={'failure'}>{e}</li> \r\n    })} \r\n  </ul> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\landing\\stories\\landing.stories.tsx",["590"],"import { Story } from '@storybook/react'; \r\nimport LandingPage from '../landing.page'; \r\n\r\n\r\nimport '../../../css/main.css'; \r\n\r\nfunction TemplateComponent({accessors}:{accessors:string[]}) { \r\n  //const loadingComponent = <LandingPage/>; \r\n  return <LandingPage/> \r\n  /*return <DaoContexter {...{crud:(crud as ICrud), accessors, loadingComponent}} > \r\n    <div> main content ... </div> \r\n  </DaoContexter> */\r\n} \r\n\r\nexport default { \r\n  title: 'Landing/Landing', \r\n  component: TemplateComponent, \r\n} \r\n\r\nconst Template:Story<{accessors:string[]}> =  args => <TemplateComponent {...args} /> \r\nexport const TestLandingPage = Template.bind({}) \r\nTestLandingPage.args = { \r\n  accessors: ['questions', 'patients', 'responses', 'answers', 'forms', 'instructions'], \r\n} \r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\sessiondebug\\sessiondebug.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\thankyou\\thankyou.page.tsx",["591","592"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\input\\input.stories.tsx",["593"],"import React, {useState} from 'react'; \r\nimport { Story } from '@storybook/react'; \r\n//import { IInput, Input } from './_input'; \r\nimport { IInput, Input } from './_input'; \r\nimport { GetInputType } from '../../../libs/_utils'; \r\n\r\n\r\n\r\nfunction TestInput({...props}:IInput) { \r\n  const [value, setValue] = useState(props.value); \r\n  props.value = value; \r\n  props.onSetValue = (newValue:any) => setValue(newValue); \r\n\r\n  return <div> \r\n    {JSON.stringify(value)} {GetInputType(props.type)} <br/> \r\n    <Input {...props} /> \r\n  </div>\r\n}\r\n\r\n\r\nexport default { \r\n  title: 'Input/Input', \r\n  component: TestInput, \r\n} \r\n\r\nconst Template:Story<IInput> = args => <TestInput {...args} /> \r\n\r\n\r\nexport const TestInput_DefaultValueNull = Template.bind({}) \r\nTestInput_DefaultValueNull.args = { \r\n  type: 'string', \r\n  value: undefined, \r\n  defaultValue: null, \r\n  onSetValue: (newValue:any) => console.log(newValue), \r\n  onPressEnter: () => console.log('on Press Enter'), \r\n  //_width: , \r\n} \r\n\r\nexport const TestInput_String = Template.bind({}) \r\nTestInput_String.args = { \r\n  type: 'string', \r\n  value:'a string', \r\n  placeholder: '3 digits', \r\n  onSetValue: (newValue:any) => console.log(newValue), \r\n  onPressEnter: () => console.log('on Press Enter'), \r\n  //_width: , \r\n} \r\n\r\nexport const TestInput_Number = Template.bind({}) \r\nTestInput_Number.args = { \r\n  type: 'number', \r\n  value: 12, \r\n  onSetValue: (newValue:any) => console.log(newValue), \r\n  onPressEnter: () => console.log('on Press Enter'), \r\n  //_width: , \r\n} \r\n\r\n\r\nexport const TestInput_Color = Template.bind({}) \r\nTestInput_Color.args = { \r\n  type: 'color', \r\n  value: '', \r\n  onSetValue: (newValue:any) => console.log(newValue), \r\n  //onPressEnter: () => console.log('on Press Enter'), \r\n  //_width: , \r\n} \r\n\r\nexport const TestInput_Bool = Template.bind({}) \r\nTestInput_Bool.args = { \r\n  type: 'boolean', \r\n  value: false, \r\n  onSetValue: (newValue:any) => console.log(newValue), \r\n  onPressEnter: () => console.log('on Press Enter'), \r\n  //sizeFunc: (value:any) => 5, \r\n  //_width: , \r\n} \r\n\r\nexport const TestInput_Date = Template.bind({}) \r\nTestInput_Date.args = { \r\n  type: 'date', \r\n  value: '2010-10-10', \r\n  onSetValue: (newValue:any) => console.log(newValue), \r\n  onPressEnter: () => console.log('on Press Enter'), \r\n  inputAttribute: {style: {color:`blue`}}, \r\n  sizeFunc: (value:any) => 17, \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputfilter\\inputfilter.stories.tsx",["594"],"import { Story } from '@storybook/react'; \r\nimport { InputFilter, useFilter } from './_inputfilter'; \r\nimport { InputSorter, useSorter } from '../inputsort/_inputsort'; \r\n\r\n\r\nfunction TemplateResearch({values, filters}:{values:any[], filters:{handle:string, type:string}[]}) { \r\n  const {matchValues, SetFilters} = useFilter(values); \r\n  const {sortedValues, SetSorters} = useSorter(matchValues); \r\n\r\n  return <div> \r\n    <div> \r\n      {sortedValues.map( (v,i) => { \r\n        return <div key={i}>{JSON.stringify(v)}</div> \r\n      })} \r\n    </div> \r\n    <div> \r\n      {filters.map( (f,i) => { \r\n        return <span key={i}> \r\n          <InputFilter {...{ type:f.type, keys:[f.handle], SetFilters }} /> \r\n          <InputSorter {...{ type:f.type, keys:[f.handle], SetSorters }} /> \r\n        </span>\r\n      })} \r\n    </div> \r\n  </div> \r\n} \r\n\r\n\r\nexport default { \r\n  title: 'input/FilterSorter', \r\n  component: TemplateResearch \r\n} \r\n\r\nconst Template:Story<any> = args => <TemplateResearch {...args} /> \r\n\r\n\r\n\r\nexport const LambdaFilter = Template.bind({}) \r\nLambdaFilter.args = { \r\n  values:[3,4,1,2,6,8,9], \r\n  filters:[{handle:'', type:'number'}] \r\n} \r\n  \r\nexport const MultipleFieldFilter = Template.bind({}) \r\nMultipleFieldFilter.args = { \r\n  values:[ \r\n    {a:'aa', v:1, bool:false}, \r\n    {a:'aa', v:2, bool:true}, \r\n    {a:'b', v:3, bool:false}, \r\n    {a:'bb', v:4, bool:true}, \r\n    {a:'ee', v:2, bool:false}, \r\n    {a:'bbb', v:3, bool:false}, \r\n  ], \r\n  filters:[ \r\n    {handle:'a', type:'string'}, \r\n    {handle:'v', type:'number'}, \r\n    {handle:'bool', type:'boolean'}, \r\n  ] \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\pager\\pager.stories.tsx",["595","596"],"import { Story } from '@storybook/react'; \r\nimport { PageOfPages, PagerBtn } from './pager.component'; \r\nimport { usePager } from './pager.hook'; \r\n\r\nimport { Sorts, Sorter, Predicate } from '../_arrayutils';\r\n\r\n\r\ninterface ITemplate {items:Item[], sorter:Sorter<Item>[], grouping:Predicate<Item>} \r\nfunction TemplateComponent({items, sorter, grouping}:ITemplate) { \r\n  //const sorted = Sorts(items, sorter); \r\n  const paging = usePager(items, grouping); \r\n\r\n  return <div> \r\n    <div> \r\n      {items.map( (e,i) => { \r\n        return <div>[{i}] {JSON.stringify(e)}</div> \r\n      })} \r\n    </div> \r\n    <br/> \r\n    <div> \r\n      {paging.page.map( (e,i) => { \r\n        return <div>[{i}] {JSON.stringify(e)}</div> \r\n      })} \r\n    </div> \r\n    <PageOfPages {...{paging}} /> \r\n    <PagerBtn {...{paging}} /> \r\n  </div>\r\n} \r\n\r\nexport default { \r\n  title: 'Pager/Pager', \r\n  component: TemplateComponent, \r\n} \r\n\r\nconst Template:Story<ITemplate> = args => <TemplateComponent {...args} /> \r\n\r\ntype Item = {id:string, num:number, str:string}; \r\n\r\nexport const GroupById = Template.bind({}) \r\nGroupById.args = { \r\n  items: [ \r\n    {id:'a', num:3, str: 'l'}, \r\n    {id:'a', num:1, str: 'b'}, \r\n    {id:'a', num:2, str: 'f'}, \r\n    {id:'c', num:1, str: 'g'}, \r\n    {id:'b', num:1, str: 'g'}, \r\n    {id:'a', num:3, str: 'v'}, \r\n    {id:'c', num:2, str: 'f'}, \r\n    {id:'b', num:4, str: 'g'}, \r\n    {id:'a', num:3, str: 'z'}, \r\n    {id:'c', num:1, str: 'd'}, \r\n  ], \r\n  sorter: [\r\n    (x:Item, pivot:Item) => x.id < pivot.id, \r\n  ],   \r\n  grouping: (x:Item, i:number, a:Item[]) => {\r\n    const [pivot] = a; \r\n    return x.id === pivot?.id; \r\n  }, \r\n} \r\n\r\n\r\n\r\nexport const GroupByIdNum = Template.bind({}) \r\nGroupByIdNum.args = { \r\n  items: [ \r\n    {id:'a', num:3, str: 'l'}, \r\n    {id:'a', num:1, str: 'b'}, \r\n    {id:'a', num:2, str: 'f'}, \r\n    {id:'c', num:1, str: 'g'}, \r\n    {id:'b', num:1, str: 'g'}, \r\n    {id:'a', num:3, str: 'v'}, \r\n    {id:'c', num:2, str: 'f'}, \r\n    {id:'b', num:4, str: 'g'}, \r\n    {id:'a', num:3, str: 'z'}, \r\n    {id:'c', num:1, str: 'd'}, \r\n  ], \r\n  sorter: [\r\n    (x:Item, pivot:Item) => x.id < pivot.id, \r\n    (x:Item, pivot:Item) => x.num < pivot.num, \r\n  ], \r\n  grouping: (x:Item, i:number, a:Item[]) => { \r\n    const [pivot] = a; \r\n    return x.id === pivot?.id && x.num === pivot.num; \r\n  }, \r\n} \r\n\r\n\r\nexport const GroupBy3 = Template.bind({}) \r\nGroupBy3.args = { \r\n  items: [ \r\n    {id:'a', num:3, str: 'l'}, \r\n    {id:'a', num:1, str: 'b'}, \r\n    {id:'a', num:2, str: 'f'}, \r\n    {id:'c', num:1, str: 'g'}, \r\n    {id:'b', num:1, str: 'g'}, \r\n    {id:'a', num:3, str: 'v'}, \r\n    {id:'c', num:2, str: 'f'}, \r\n    {id:'b', num:4, str: 'g'}, \r\n    {id:'a', num:3, str: 'z'}, \r\n    {id:'c', num:1, str: 'd'}, \r\n  ], \r\n  sorter: [\r\n    (x:Item, pivot:Item) => x.id < pivot?.id, \r\n    (x:Item, pivot:Item) => x.num < pivot?.num, \r\n  ], \r\n  grouping: (x:Item, i:number, a:Item[], positive:Item[] ) => { \r\n    const [pivot] = a; \r\n    return x.id === pivot.id && positive.length < 3; \r\n  }, \r\n} \r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputselect\\imputselection.stories.tsx",["597"],"import React, {useState} from 'react'; \r\nimport { Story } from '@storybook/react'; \r\nimport {IInputSelect, InputSelect, } from './_inputselect'; \r\n\r\n\r\nfunction TestInputSelect({...props}:IInputSelect) { \r\n  const [value, setValue] = useState(props.value); \r\n  props.value = value; \r\n  props.onSetValue = (newValue:any[]) => setValue(newValue); \r\n\r\n  return <div> \r\n    {JSON.stringify(value)} <br/> \r\n    <InputSelect {...props} /> \r\n  </div> \r\n} \r\n\r\n\r\nexport default { \r\n  title: 'Input/InputSelect', \r\n  component: TestInputSelect, \r\n} \r\n\r\nconst Template:Story<IInputSelect> = args => <TestInputSelect {...args} /> \r\n\r\nexport const TestInputSelect_single = Template.bind({}) \r\nTestInputSelect_single.args = { \r\n  value:0, \r\n  options: [ \r\n    {value:0, label:'option 0'}, \r\n    {value:1, label:'option 1'}, \r\n    {value:2, label:'option 2'}, \r\n  ] as IOption[], \r\n  multiple: false, \r\n  placeholder: 'select one'\r\n} \r\n\r\n\r\nexport const TestInputSelect_multi = Template.bind({}) \r\nTestInputSelect_multi.args = { \r\n  value:['a'], \r\n  options: [ \r\n    {value:'0', label:'option 0'}, \r\n    {value:'1', label:'option 1'}, \r\n    {value:'2', label:'option 2'}, \r\n  ] as IOption[], \r\n  multiple: true, \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\array\\sort.stories.tsx",["598"],"import { Story } from '@storybook/react'; \r\nimport { Sorts, Sorter } from './arrays.utils'; \r\n\r\n\r\nfunction TemplateArray({values, sorters}:{values:Item[], sorters:Sorter<Item>[]}) { \r\n  const results = Sorts(values, sorters); \r\n\r\n  return <div> \r\n    <div>{JSON.stringify(values)}</div> \r\n    \r\n    <div>---------</div> \r\n    {results.map( (r,i) => { \r\n      return <div key={i}>[{i}] {JSON.stringify(r)}</div> \r\n    })} \r\n  </div> \r\n} \r\n\r\n\r\nexport default { \r\n  title: 'utils/sort', \r\n  component: TemplateArray \r\n} \r\n\r\nconst Template:Story<{values:Item[], sorters:Sorter<Item>[]}> = args => <TemplateArray {...args} /> \r\n\r\ntype Item = {id:string, num:number, str:string}; \r\n\r\n\r\nexport const SortById = Template.bind({}) \r\nSortById.args = { \r\n  values: [ \r\n    {id:'a', num:3, str: 'l'}, \r\n    {id:'a', num:1, str: 'b'}, \r\n    {id:'a', num:2, str: 'f'}, \r\n    {id:'c', num:1, str: 'g'}, \r\n    {id:'b', num:1, str: 'g'}, \r\n    {id:'a', num:3, str: 'v'}, \r\n    {id:'c', num:2, str: 'f'}, \r\n    {id:'b', num:4, str: 'g'}, \r\n    {id:'a', num:3, str: 'z'}, \r\n    {id:'c', num:1, str: 'd'}, \r\n  ], \r\n  sorters: [ \r\n    (x:Item, pivot:Item) => x.id < pivot.id, \r\n  ]\r\n} \r\n\r\nexport const SortByNum = Template.bind({}) \r\nSortByNum.args = { \r\n  values: [ \r\n    {id:'a', num:3, str: 'l'}, \r\n    {id:'a', num:1, str: 'b'}, \r\n    {id:'a', num:2, str: 'f'}, \r\n    {id:'c', num:1, str: 'g'}, \r\n    {id:'b', num:1, str: 'g'}, \r\n    {id:'a', num:3, str: 'v'}, \r\n    {id:'c', num:2, str: 'f'}, \r\n    {id:'b', num:4, str: 'g'}, \r\n    {id:'a', num:3, str: 'z'}, \r\n    {id:'c', num:1, str: 'd'}, \r\n  ], \r\n  sorters: [ \r\n    (x:Item, pivot:Item) => x.num < pivot.num, \r\n  ]\r\n} \r\n\r\n\r\nexport const SortByStr = Template.bind({}) \r\nSortByStr.args = { \r\n  values: [ \r\n    {id:'a', num:3, str: 'l'}, \r\n    {id:'a', num:1, str: 'b'}, \r\n    {id:'a', num:2, str: 'f'}, \r\n    {id:'c', num:1, str: 'g'}, \r\n    {id:'b', num:1, str: 'g'}, \r\n    {id:'a', num:3, str: 'v'}, \r\n    {id:'c', num:2, str: 'f'}, \r\n    {id:'b', num:4, str: 'g'}, \r\n    {id:'a', num:3, str: 'z'}, \r\n    {id:'c', num:1, str: 'd'}, \r\n  ], \r\n  sorters: [ \r\n    (x:Item, pivot:Item) => x.str < pivot.str, \r\n  ] \r\n} \r\n\r\nexport const SortByIdNumStr = Template.bind({}) \r\nSortByIdNumStr.args = { \r\n  values: [ \r\n    {id:'a', num:3, str: 'l'}, \r\n    {id:'a', num:1, str: 'b'}, \r\n    {id:'a', num:2, str: 'f'}, \r\n    {id:'c', num:1, str: 'g'}, \r\n    {id:'b', num:1, str: 'g'}, \r\n    {id:'a', num:3, str: 'v'}, \r\n    {id:'c', num:2, str: 'f'}, \r\n    {id:'b', num:4, str: 'g'}, \r\n    {id:'a', num:3, str: 'z'}, \r\n    {id:'c', num:1, str: 'd'}, \r\n  ], \r\n  sorters: [ \r\n    (x:Item, pivot:Item) => x.id < pivot.id, \r\n    (x:Item, pivot:Item) => x.num < pivot.num, \r\n    (x:Item, pivot:Item) => x.str < pivot.str, \r\n  ]\r\n} \r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\array\\group.stories.tsx",["599"],"import { Story } from '@storybook/react'; \r\nimport { Group, Predicate } from './arrays.utils'; \r\n\r\n\r\nfunction TemplateArray({values, predicate}:{values:Item[], predicate:Predicate<Item>}) { \r\n  const results = Group(values, predicate); \r\n\r\n  return <div> \r\n    <div>{JSON.stringify(values)}</div> \r\n    \r\n    <div>---------</div> \r\n    {results.map( (r,i) => { \r\n      return <div key={i}>[{i}] {JSON.stringify(r)}</div> \r\n    })} \r\n  </div> \r\n} \r\n\r\nexport default { \r\n  title: 'utils/group', \r\n  component: TemplateArray \r\n} \r\n\r\nconst Template:Story<{values:Item[], predicate:Predicate<Item>}> = args => <TemplateArray {...args} /> \r\n\r\ntype Item = {id:string, num:number, str:string}; \r\n\r\nexport const GroupById = Template.bind({}) \r\nGroupById.args = { \r\n  values: [ \r\n    {id:'a', num:3, str: 'l'}, \r\n    {id:'a', num:1, str: 'b'}, \r\n    {id:'a', num:2, str: 'f'}, \r\n    {id:'c', num:1, str: 'g'}, \r\n    {id:'b', num:1, str: 'g'}, \r\n    {id:'a', num:3, str: 'v'}, \r\n    {id:'c', num:2, str: 'f'}, \r\n    {id:'b', num:4, str: 'g'}, \r\n    {id:'a', num:3, str: 'z'}, \r\n    {id:'c', num:1, str: 'd'}, \r\n  ], \r\n  predicate: (x:Item, i:number, a:Item[]) => {\r\n    const [pivot] = a; \r\n    return x.id === pivot?.id; \r\n  }, \r\n} \r\n\r\n\r\n\r\nexport const GroupByIdNum = Template.bind({}) \r\nGroupByIdNum.args = { \r\n  values: [ \r\n    {id:'a', num:3, str: 'l'}, \r\n    {id:'a', num:1, str: 'b'}, \r\n    {id:'a', num:2, str: 'f'}, \r\n    {id:'c', num:1, str: 'g'}, \r\n    {id:'b', num:1, str: 'g'}, \r\n    {id:'a', num:3, str: 'v'}, \r\n    {id:'c', num:2, str: 'f'}, \r\n    {id:'b', num:4, str: 'g'}, \r\n    {id:'a', num:3, str: 'z'}, \r\n    {id:'c', num:1, str: 'd'}, \r\n  ], \r\n  predicate: (x:Item, i:number, a:Item[]) => { \r\n    const [pivot] = a; \r\n    return x.id === pivot?.id && x.num === pivot.num; \r\n  }, \r\n} \r\n\r\n\r\nexport const GroupBy3 = Template.bind({}) \r\nGroupBy3.args = { \r\n  values: [ \r\n    {id:'a', num:3, str: 'l'}, \r\n    {id:'a', num:1, str: 'b'}, \r\n    {id:'a', num:2, str: 'f'}, \r\n    {id:'c', num:1, str: 'g'}, \r\n    {id:'b', num:1, str: 'g'}, \r\n    {id:'a', num:3, str: 'v'}, \r\n    {id:'c', num:2, str: 'f'}, \r\n    {id:'b', num:4, str: 'g'}, \r\n    {id:'a', num:3, str: 'z'}, \r\n    {id:'c', num:1, str: 'd'}, \r\n  ], \r\n  predicate: (x:Item, i:number, a:Item[], positive:Item[] ) => { \r\n    const [pivot] = a; \r\n    return x.id === pivot.id && positive.length < 3; \r\n  }, \r\n} \r\n\r\n/*\r\nexport const GroupById = Template.bind({}) \r\nGroupById.args = { \r\n  values: [ \r\n    {id:'a', num:3, str: 'l'}, \r\n    {id:'a', num:1, str: 'b'}, \r\n    {id:'a', num:2, str: 'f'}, \r\n    {id:'c', num:1, str: 'g'}, \r\n    {id:'b', num:1, str: 'g'}, \r\n    {id:'a', num:3, str: 'v'}, \r\n    {id:'c', num:2, str: 'f'}, \r\n    {id:'b', num:4, str: 'g'}, \r\n    {id:'a', num:3, str: 'z'}, \r\n    {id:'c', num:1, str: 'd'}, \r\n  ], \r\n  sorters: (x:Item, pivot:Item) => x.id === pivot.id, \r\n} */","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputarray\\inputarray.stories.tsx",["600"],"import React, { useState } from 'react'; \r\nimport { Story } from '@storybook/react'; \r\nimport {InputArray, IInputArray} from './_inputarray'; \r\n\r\n\r\n\r\nfunction TestInputArray({...props}:IInputArray) { \r\n  const [values, setValues] = useState(props.values); \r\n  const onSetValues = (newValue:any[]) => setValues(newValue); \r\n  props.values = values; \r\n  props.onSetValues = onSetValues; \r\n\r\n  return <div> \r\n    {JSON.stringify(values)} \r\n    <InputArray {...props} /> \r\n  </div> \r\n} \r\n\r\n\r\n\r\nexport default { \r\n  title: 'Input/InputArray', \r\n  component: TestInputArray, \r\n} \r\n\r\nconst Template:Story<IInputArray> = args => <TestInputArray {...args} /> \r\n\r\nexport const TestInput_StringsError = Template.bind({}) \r\nTestInput_StringsError.args = { \r\n  type: 'string', \r\n  values:['a string']\r\n} \r\n\r\n\r\nexport const TestInput_StringS = Template.bind({}) \r\nTestInput_StringS.args = { \r\n  type: 'string', \r\n  values:['a string'], \r\n  defaultValue: '', \r\n} \r\n\r\nexport const TestInput_NumberS = Template.bind({}) \r\nTestInput_NumberS.args = { \r\n  type: 'number', \r\n  values:[21, 56], \r\n  defaultValue: 0, \r\n} \r\n\r\n\r\nexport const TestInput_BoolS = Template.bind({}) \r\nTestInput_BoolS.args = { \r\n  type: 'boolean', \r\n  values:[true, false, false], \r\n  defaultValue: false, \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\stories\\dao.stories.tsx",["601"],"import { Story } from \"@storybook/react\";\r\nimport { useContext } from 'react'; \r\nimport { crud } from './mockcrud'; \r\nimport { DaoContext, DaoContexter, ICrud} from '../../_dao'; \r\n\r\n\r\nfunction TestValidate({accessor, value}:{accessor:string, value:{[key:string]:any}}) { \r\n  const dao = useContext(DaoContext); \r\n  const validation = dao.Validate(accessor, value); \r\n  return <div> \r\n    {JSON.stringify(validation)} \r\n  </div> \r\n} \r\n\r\n\r\nfunction DisplayCollection({accessor}:{accessor:string}) { \r\n  const dao = useContext(DaoContext); \r\n  const [collection] = dao.GetICollections([accessor]); \r\n\r\n  return <div> \r\n    FIELDS: <br/>\r\n    {collection?.ifields.map( f => { \r\n      return <div key={f.accessor}>{JSON.stringify(f)}</div> \r\n    })} \r\n    <br/>\r\n    ENTRIES <br/>\r\n    {collection?.entries.map( e => { \r\n      return <div key={e._id}>{JSON.stringify(e)}</div> \r\n    })} \r\n  </div> \r\n} \r\n\r\nfunction TestMockDao({...props}:{child:any, accessors: string[], args:any}) { \r\n  return <DaoContexter {...{crud:(crud as ICrud), accessors:props.accessors}} > \r\n    <props.child {...props.args} /> \r\n  </DaoContexter> \r\n} \r\n\r\n\r\nexport default { \r\n  title: 'Dao/Dao', \r\n  component: TestMockDao, \r\n} \r\n\r\nconst Template:Story<{child:any, accessors: string[], args:any}> = args => <TestMockDao {...args} /> \r\nexport const Mock_TestValidate = Template.bind({}) \r\nMock_TestValidate.args = { \r\n  child: TestValidate,\r\n  accessors: ['questions', 'patients', 'responses', 'answers', 'forms', 'instructions'], \r\n  args: { \r\n    accessor:'patients', \r\n    value: {ramq:'JEAF23118301'} \r\n  }, \r\n} \r\n\r\nexport const Mock_DisplayQuestions = Template.bind({}) \r\nMock_DisplayQuestions.args = { \r\n  child: DisplayCollection, \r\n  accessors: ['questions', 'patients', 'responses', 'answers', 'forms', 'instructions'], \r\n  args: { \r\n    accessor:'answers', \r\n  } \r\n} \r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputfilter\\_inputfilter.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_arrayutils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputselect\\_inputselect.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\array\\arrays.utils.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputarray\\_inputarray.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputfilter\\inputfilter.hook.ts",["602"],"import { useState } from 'react'; \r\nimport { Filter, Predicate } from '../../_arrayutils'; \r\nimport { IUseFilter } from './inputfilter.type'; \r\n\r\n\r\nexport function usePredicates<K, P>(): [ \r\n    [K, P][], \r\n    (key:K, newPredicate?:P) => void, \r\n    () => void, \r\n  ] { \r\n  const [predicates, setPredicates] = useState([] as [K, P][]); \r\n\r\n  function SetPredicates(key:K, newPredicate?:P) { \r\n    setPredicates( prev => { \r\n      const rest = prev.filter(kp => key != kp[0]); \r\n      return newPredicate ? \r\n        [...rest, [key, newPredicate]]: \r\n        [...rest]; \r\n    }) \r\n  } \r\n\r\n  function ResetPredicates() { \r\n    setPredicates([] as [K, P][]) \r\n  }; \r\n\r\n  return [predicates, SetPredicates, ResetPredicates]; \r\n}\r\n\r\n\r\nexport function useFilter<T>(values:T[]): IUseFilter<T> { \r\n  const [keyFilters, SetFilters, ResetFilters] = usePredicates<string, Predicate<T>>(); \r\n\r\n  const filters = (t: T, i: number, a: T[], positive: T[], negative: T[]) => { \r\n    return keyFilters.map( f => f[1] ).every( f => f(t, i, a, positive, negative) ); \r\n  } \r\n  const [matchValues, unmatchValues] = Filter(values, filters); \r\n  return {matchValues, unmatchValues, SetFilters, ResetFilters} \r\n}\r\n\r\n\r\n/*\r\nexport function useFilter<T>(values:T[]) { \r\n  const [Getfilters, SetFilters] = useStateAt({} as Filters); \r\n  const filtersobject = Getfilters(); \r\n  \r\n  const predicate = (x:any) => Object.keys(filtersobject as Filters) \r\n    .map( p => filtersobject[p] ).every( p => p(x) ); \r\n  const filteredValues = values.filter( x => predicate(x)); \r\n\r\n  return {filteredValues, SetFilters}; \r\n} \r\n*/","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\htmlelement.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\utils\\dao.class.ts",["603","604"],"import { Pick, Filter } from '../../_arrayutils'; \r\nimport { IsEmpty } from '../../_utils'; \r\nimport { Collection } from './collection.class'; \r\nimport { ICrud, IDao } from '../dao.type'; \r\n\r\n\r\n// DAO #############################################\r\nexport class DAO implements IDao { \r\n  private collections:ICollection[] = [] as ICollection[]; \r\n\r\n  private crud:ICrud = {} as ICrud; \r\n\r\n  constructor(crud:ICrud) { \r\n    this.crud = crud; \r\n  } \r\n\r\n  // Get ICollections ----------------------------- \r\n  public GetICollections(accessors?:string[]):ICollection[] { \r\n    if(!accessors) \r\n      return this.collections; \r\n    const compare = (t:ICollection, accessor:string) => {return t.accessor === accessor}; \r\n    return Pick(this.collections, accessors, compare); \r\n  } \r\n\r\n  // Get IFields -----------------------------------\r\n  public GetIFields(accessor:string, fields?:string[]):IField[] { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    if(!fields) \r\n      return collection?.ifields ?? []; \r\n    const compare = (f:IField, accessor:string) => {return f.accessor === accessor}; \r\n    return Pick(collection?.ifields, fields, compare); \r\n  }\r\n\r\n  // Get Entries --------------------------------------\r\n  public GetIEntries(accessor:string, ids?:string[]):IEntry[] { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    if(!ids)\r\n      return collection?.entries ?? []; \r\n    const compare = (e:IEntry, id:string) => {return e._id === id}; \r\n    return Pick(collection?.entries, ids, compare); \r\n  }\r\n\r\n  // Get Default IEntry ----------------------------------\r\n  public GetDefaultIEntry(accessor:string):IEntry { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    return new Collection(collection).GetDefaultIEntry(); \r\n  } \r\n  \r\n  // GET FOREIGN ELEMENTS -----------------------------\r\n  public GetForeignElements(ifield:IField) \r\n    : {foreignCollection:ICollection|undefined, abbrevField:IField|undefined} \r\n  { \r\n    const foreignCollection = this.collections.find(c => c.accessor === ifield.type); \r\n    const abbrevField = foreignCollection?.ifields.find(f=>f.isAbbrev); \r\n    return {foreignCollection, abbrevField}; \r\n  } \r\n\r\n  // Get Options ----------------------------------------\r\n  public GetIOptions(ifield:IField):IOption[] { \r\n    if(IsEmpty(ifield)) \r\n      return []; \r\n    if(ifield.isEnum) \r\n      return ifield.enums?.map(e => {return {value:e, label:e}}) ?? [] as IOption[]; \r\n    if(!ifield.isModel) \r\n      return [] as IOption[]; \r\n    const {foreignCollection, abbrevField} = this.GetForeignElements(ifield); \r\n    if(!foreignCollection || !abbrevField) \r\n      return [] as IOption[]; \r\n    return foreignCollection.entries?.map( e => { \r\n      return {value:e._id, label:e[abbrevField.accessor]} as IOption; \r\n    }); \r\n  } \r\n\r\n  // Validate --------------------------------------------- \r\n  public Validate(collection:string, value:{[key:string]:any}):boolean[] { \r\n    const ifieldAccessors = Object.keys(value); \r\n    const ifields = this.GetIFields(collection, ifieldAccessors); \r\n    return ifields.map( ifield => { \r\n      return ifield.validators?.every( valid => valid(value[ifield.accessor]) ) ?? true; \r\n    }) \r\n  } \r\n\r\n  // COLLECTIONS -------------------------------------------\r\n  public async Collections(accessors?:string[]):Promise<ICrudResponse[]> { \r\n    const responses = (await this.crud.Collections(accessors)) as ICrudResponse[]; \r\n    const icollections = responses.filter(r => r.success).map(r => r.data as ICollection); \r\n    this.PushUpdateCollection(icollections); \r\n    return responses; \r\n  } \r\n\r\n  /* \r\n  Either Add/Push new collection \"this.collections\" or update present collection stored in \"this.collections\". \r\n  */\r\n  private PushUpdateCollection(icollections:ICollection[]) { \r\n    icollections.forEach( newCol => { \r\n      const index = this.collections.findIndex(col => col.accessor === newCol.accessor); \r\n      if(index >=0) \r\n        this.collections[index] = newCol; \r\n      else \r\n        this.collections.push(newCol); \r\n    }) \r\n  } \r\n\r\n  /*Create Or Update ---------------------------------- \r\n  Create entries satisfying a given predicate. \r\n  Or else update entries. \r\n  */\r\n  public async CreateUpdate(accessor:string, entries:IEntry[], predicate?:(entry:IEntry)=>boolean):Promise<ICrudResponse[]> { \r\n    const defaultPredicate = (entry:IEntry):boolean => IsEmpty(entry._id); \r\n    const [toCreate, toUpdate] = Filter(entries, predicate ?? defaultPredicate); \r\n    const createResponses = !IsEmpty(toCreate) ? await this.Create(accessor, toCreate) : []; \r\n    const updateResponses = !IsEmpty(toUpdate) ? await this.Update(accessor, toUpdate) : []; \r\n    return [...createResponses, ...updateResponses]; \r\n  } \r\n\r\n  /* Create -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Create(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Create(accessor, entries)) as ICrudResponse[]; \r\n    const created = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Create(created); \r\n    return responses; \r\n  } \r\n\r\n  /* Read -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  Create/Update read data to local. \r\n  */\r\n  public async Read(accessor:string, ids?:string[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Read(accessor, ids)) as ICrudResponse[]; \r\n    const read = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    return responses; \r\n  } \r\n\r\n  /* Update -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Update(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Update(accessor, entries)) as ICrudResponse[]; \r\n    const updated = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Update(updated); \r\n    return responses; \r\n  } \r\n\r\n  /* Delete -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Delete(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Delete(accessor, entries)) as ICrudResponse[]; \r\n    const deleted = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Delete(deleted); \r\n    return responses; \r\n  } \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputfilter\\inputfilter.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\components\\dao.contexter.tsx",["605","606"],"import React, { useMemo } from 'react'; \r\nimport { DAO } from '../utils/dao.class'; \r\n//import { useLoader } from '../../_customhooks'; \r\nimport { useDaoLoader } from '../hooks/dao.hook'; \r\nimport { ICrud, IDao, IDaoContexter } from '../dao.type'; \r\n\r\n// -------------------------------------------------------\r\n/*export function useLoadCollection(accessors:string[]) { \r\n  const dao = useContext(DaoContext); \r\n  const callback = (res:any) => {}; \r\n  const {state, Load} = useLoader(); \r\n\r\n  useEffect(() => { \r\n    Load( () => dao.Collections(accessors), callback); \r\n  }, []); \r\n\r\n  return state.success; \r\n} \r\n\r\n\r\nexport function Preloader({accessors, children}:React.PropsWithChildren<{accessors:string[]}>) { \r\n  const ready = useLoadCollection(accessors); \r\n  return <div> \r\n    {ready ? children: 'Loading ...'} \r\n  </div> \r\n}*/\r\n\r\nexport const DaoContext = React.createContext({} as IDao); \r\nexport function DaoContexter({crud, accessors, loadingComponent, children}:React.PropsWithChildren<IDaoContexter>) { \r\n  const dao = useMemo(() => new DAO(crud), []); \r\n  const ready = useDaoLoader(dao, accessors); \r\n  const _loadingComponent = loadingComponent ?? <em> ... Is loading ... </em>; \r\n  \r\n  return <DaoContext.Provider value={dao}> \r\n    {ready ? children: _loadingComponent} \r\n  </DaoContext.Provider> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputselect\\inputselect.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputselect\\inputselect.component.tsx",["607"],"import React, {useContext} from 'react'; \r\nimport { useInputSelect } from './inputselect.hook'; \r\nimport { IInputSelect, IUseSelect } from './inputselect.type'; \r\nimport { useToggle } from '../../../libs/_toggle'; \r\nimport { IsEmpty } from '../../../libs/_utils';\r\n\r\nimport './select.style.css'; \r\n\r\n\r\nexport const SelectContext = React.createContext({} as IUseSelect); \r\nexport function InputSelect({...props}:IInputSelect) { \r\n  const context = useInputSelect(props); \r\n\r\n  const {toggle, ToggleBtnAction, toggleTarget, Toggle} = useToggle<HTMLDivElement>(true); \r\n\r\n  const CloseToggle = () => { \r\n    if(!context.multiple) \r\n      Toggle(); \r\n  }\r\n\r\n  return <SelectContext.Provider value={context}> \r\n    <div className={'select-main'} > \r\n      <div  {...ToggleBtnAction()} > \r\n        <Selection/> \r\n      </div> \r\n      <div tabIndex={0} ref={toggleTarget} hidden={toggle} onClick={CloseToggle}> \r\n        <Options /> \r\n      </div> \r\n    </div> \r\n  </SelectContext.Provider> \r\n}\r\n\r\n\r\nfunction Selection() {\r\n  const {SelectValue, GetSelection, placeholder} = useContext(SelectContext); \r\n  const selection = GetSelection(); \r\n\r\n  return <div className={'select-header'}> \r\n\r\n    {IsEmpty(selection) && <div className={'select-placeholder'}> {placeholder} </div>} \r\n\r\n    {selection.map( (option, i) => { \r\n      //const onClick = () => SelectValue(option?.value); \r\n      const className = ''; \r\n      return <div key={i} {...{className}}> \r\n        {option?.label}{(i < selection.length-1) ? ', ':''}\r\n      </div> \r\n    })} \r\n  </div> \r\n}\r\n\r\n\r\n\r\nfunction Options() { \r\n  const {options: _options, SelectValue, GetSelection} = useContext(SelectContext); \r\n  const selection = GetSelection(); \r\n  const IsSelected = (option:IOption) => selection.some(o => o?.value === option?.value); \r\n\r\n  return <div className={'select-options'}  > \r\n    {_options.map( (option,i) => { \r\n      const onClick = () => SelectValue(option.value); \r\n      const className = IsSelected(option) ? 'select-option-selected': 'select-option'; \r\n      return <div key={i} {...{onClick, className}} > \r\n        {option.label} \r\n      </div> \r\n    })}\r\n  </div>\r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputarray\\inputarray.component.tsx",["608","609"],"import React, { useContext, useEffect, useState } from 'react'; \r\nimport { Input } from '../input/_input'; \r\nimport { useInputArray } from './inputarray.hook'; \r\nimport { IInputArray, IUseInputArray } from './inputarray.type'; \r\n\r\n//interface IProps extends IInputArray, React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> {} \r\nexport const InputArrayContext = React.createContext({} as IUseInputArray); \r\nexport function InputArray({...props}:IInputArray) { \r\n  const context = useInputArray(props); \r\n\r\n  return <InputArrayContext.Provider value={context} > \r\n    {context.values.map( (e,i) => { \r\n      return <div key={i} > \r\n        [{i}]: <UpdateElement index={i} /> <DeleteElement index={i}/> \r\n      </div> \r\n    })} \r\n    [+]: <CreateElement/> \r\n  </InputArrayContext.Provider> \r\n}\r\n\r\n// Create element =======================================\r\nfunction CreateElement() { \r\n  const { Create, ElementArgs } = useContext(InputArrayContext); \r\n  const elementArgs = ElementArgs(); \r\n  const [value, setValue] = useState(elementArgs.value); \r\n  elementArgs.value = value; \r\n  elementArgs.onSetValue = (newValue:any) => setValue(newValue); \r\n  elementArgs.onPressEnter = () => { \r\n    Create(value); \r\n    setValue(elementArgs.defaultValue); // reset input to defaultValue after creation. \r\n  }; \r\n  \r\n  return <Input {...elementArgs}  /> \r\n} \r\n\r\n// Update element =======================================\r\nfunction UpdateElement({index}:{index:number}) { \r\n  const { Update, ElementArgs } = useContext(InputArrayContext); \r\n  const elementArgs = ElementArgs(index); \r\n  const [value, setValue] = useState(elementArgs.value); \r\n  elementArgs.value = value; \r\n  elementArgs.onSetValue = (newValue:any) => setValue(newValue); \r\n  elementArgs.onPressEnter = () => Update(index, value); \r\n  \r\n  useEffect(() => { \r\n    setValue(elementArgs.value); \r\n  }, [JSON.stringify(elementArgs.value)]); \r\n\r\n  return <Input {...elementArgs}  /> \r\n}\r\n\r\n// Delete Btn ===================================\r\nfunction DeleteElement({index}:{index:number}) {\r\n  const {Delete} = useContext(InputArrayContext); \r\n  return <button onClick={() => Delete(index)} >x</button> \r\n}\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputfilter\\inputfilter.utils.ts",["610"],"import { IsEmpty, GetValueAt } from '../../_utils'; \r\n\r\n\r\nexport function FilterPredicate(strPredicate:string, type:string, keys?:string[]): (x:any) => boolean { \r\n  let predicate = (x:any) => true; \r\n  if(IsEmpty(strPredicate)) \r\n    return predicate; \r\n  \r\n  if(type === 'boolean') \r\n    predicate = EqualPredicate(strPredicate); \r\n  else if(type === 'string') \r\n    predicate = StringMatchPredicate(strPredicate); \r\n  else \r\n    predicate = LambdaPredicate(strPredicate); \r\n\r\n  return !IsEmpty(keys) ? \r\n    (x:any) => \r\n      predicate(GetValueAt(x, keys)): \r\n      predicate; \r\n} \r\n\r\n\r\nfunction EqualPredicate(strPredicate:string):(x:any) => boolean { \r\n  return (x:string) => { \r\n    return String(x) === strPredicate; \r\n  } \r\n} \r\n\r\nfunction StringMatchPredicate(strPredicate:string):(x:any) => boolean { \r\n  return (x:string) => { \r\n    return !!x.match(strPredicate); \r\n  } \r\n}\r\n\r\nfunction LambdaPredicate(strPredicate:string): (x:any) => boolean { \r\n  /*const operator =  /[(>=)|(<=)|(>)|(<)|(=)]/ \r\n  const operand =  /[(>=)|(<=)|(>)|(<)|(=)]/ */ \r\n  const seperator = /[(&&)]/ \r\n  const strPredicates = strPredicate.split(seperator).filter(s => s!==''); \r\n  const predicates:((x:any) => boolean)[] = []; \r\n  strPredicates.forEach( p => { \r\n    try{ \r\n      const func = (x:any):boolean => eval(x.toString() + p); \r\n      func(0); \r\n      predicates.push(func); \r\n    }catch(error) { \r\n      return (x:any) => true; \r\n    }; \r\n  }) \r\n  return (x:any) => predicates.every( predicate => predicate(x) ); \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\utils\\collection.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\input\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_customhooks.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_toggle.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputarray\\inputarray.hook.tsx",["611"],"import { IInput } from '../input/_input'; \r\nimport { IsNull, \r\n  GetInputType, GetDefaultValueByType} from '../../../libs/_utils'; \r\nimport { IInputArray, IUseInputArray } from './inputarray.type'; \r\n\r\n\r\n// USE INPUT ARRAY ========================================\r\nexport function useInputArray({...props}:IInputArray):IUseInputArray { \r\n  props.values = IsNull(props.values) ? []: props.values; \r\n  props.defaultValue = IsNull(props.defaultValue) ? \r\n    GetDefaultValueByType(props.type) : \r\n    props.defaultValue; \r\n\r\n  // ElementArgs \r\n  function ElementArgs(at?:number):IInput { \r\n    const { type, defaultValue, placeholder, inputAttribute, sizeFunc } = props; \r\n    const value = props.values[at??-1] ?? defaultValue; \r\n    const onSetValue = (newValue:any) => {}; \r\n    const onPressEnter = () => {}; \r\n    return {type, value, defaultValue, placeholder, onSetValue, onPressEnter, sizeFunc, inputAttribute} \r\n  }\r\n\r\n  // Creates new elements \r\n  function Create (newValue:any) { \r\n    props.onSetValues([...props.values, newValue]); \r\n  }; \r\n  // Update existing new elements \r\n  function Update (at:number, newValue:any) { \r\n    const copy = [...props.values]; \r\n    copy[at] = newValue; \r\n    props.onSetValues(copy); \r\n  }; \r\n  // Delete existing elements \r\n  function Delete (at:number) { \r\n    const copy = [...props.values]; \r\n    copy.splice(at,1); \r\n    props.onSetValues(copy); \r\n  }; \r\n\r\n  return {...props, ElementArgs, Create, Update, Delete}; \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\input\\input.component.tsx",["612"],"import React from 'react'; \r\nimport {IEvent, IsNull, OnEnter, OnTab, DefaultWidth, \r\n  GetValueFromInput, GetInputType, GetDefaultValueByType} from '../../../libs/_utils'; \r\nimport { IInput } from './input.type'; \r\n\r\n\r\n/**\r\n * \r\n * @param param0 \r\n * @returns \r\n */\r\nexport function Input({...props}:IInput) { \r\n  const {width, ...args} = PrepArgs(props); \r\n  // Concatenate width defined above with inputAttribute.style if any other style has been defined. \r\n  const style = {...props.inputAttribute?.style, ...width} \r\n\r\n  // Regroup arguments\r\n  const inputArgs = {...props.inputAttribute, ...args, style}; \r\n\r\n  if(args.type==='checkbox') \r\n    return <input {...inputArgs} {...{checked:args.value} }  /> \r\n  return <input {...inputArgs} /> \r\n} \r\n\r\n\r\nfunction PrepArgs({...props}:IInput) { \r\n  const type = GetInputType(props.type); \r\n  const defaultValue = IsNull(props.defaultValue) ? GetDefaultValueByType(props.type) ?? '': props.defaultValue; \r\n  const value = IsNull(props.value) ? defaultValue : props.value; \r\n  const placeholder = props.placeholder ?? ''; \r\n\r\n  // Called on input Change\r\n  const onChange = (event:IEvent) => { \r\n    const valueFromInput = GetValueFromInput(event); \r\n    const newValue = IsNull(valueFromInput) ? defaultValue : valueFromInput; \r\n    if(JSON.stringify(newValue) !== JSON.stringify(value) ) \r\n      props.onSetValue(newValue); \r\n  } \r\n\r\n  // Tab Function called on KeyDown. \r\n  //const onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => OnTab(event, props.onPressEnter); \r\n  const onBlur = () => props.onPressEnter && props.onPressEnter(); \r\n  // Enter Function called on KeyUp. \r\n  const onKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => OnEnter(event, props.onPressEnter); \r\n\r\n  // Calculate input width \r\n  const width = props.sizeFunc ? \r\n    {width: `${props.sizeFunc(value)}ch`}: \r\n    {width: `${DefaultWidth(value, type)}ch`}; \r\n  \r\n  // Regroups to arguments to pass to input tag\r\n  return {type, value, placeholder, onChange, onKeyUp, width, onBlur} \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\toggle\\hooks\\usetoggle.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\useRange.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\toggle\\components\\toggle.component.tsx",["613"],"import React from 'react';\r\nimport {useToggle} from '../hooks/usetoggle.hook';\r\n\r\n\r\nexport function TestToggle () { \r\n  const {toggle, ToggleBtnAction, toggleTarget} = useToggle<HTMLDivElement>(true); \r\n\r\n  return <div> \r\n    <button {...ToggleBtnAction()} >{toggle ? 'On': 'Off'}</button> \r\n    <div tabIndex={0} ref={toggleTarget} hidden={toggle}> \r\n      Open\r\n    </div> \r\n  </div> \r\n} \r\n\r\n\r\ninterface IToggleTarget {\r\n  toggle:boolean, \r\n  toggleTarget:React.RefObject<HTMLDivElement>, \r\n} \r\nfunction ToggleTarget ({toggle, toggleTarget, children}:React.PropsWithChildren<IToggleTarget>) { \r\n  return <div tabIndex={0} ref={toggleTarget} hidden={toggle}> \r\n      {children} \r\n    </div> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\useTimer.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\useientry.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\useupdate.hook.tsx",["614","615"],"import {useEffect, useRef} from 'react'; \r\n\r\nexport function useUpdate(callback:() => void, changeling:any) { \r\n  const flagFirstRender = useRef(true); \r\n  \r\n  useEffect(() => { \r\n    if(flagFirstRender.current) { \r\n      flagFirstRender.current = false; \r\n      return; \r\n    } \r\n    callback(); \r\n  }, [JSON.stringify(changeling)]); \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\session\\usesession.hook.ts",["616"],"import { useEffect, useState } from 'react';\r\nimport { GetValueAt, SetValueAt } from '../../_utils';\r\nimport {Session} from './session.class'; \r\n\r\n\r\ntype Keys = any[]; \r\n\r\nexport interface IUseSession { \r\n  Get: (keys?:Keys) => any; \r\n  Set: (newValue: any, keys?:Keys) => void; \r\n  Reset: () => void; \r\n  End: () => void; \r\n} \r\n\r\n// UseSession =============================================\r\nexport function useSession(sessionName:string, value?:any):IUseSession { \r\n  const _value = Session.Exists(sessionName) ? Session.Get(sessionName): value;\r\n  const [session, setSession] = useState(_value); \r\n\r\n  function Reset() { \r\n    Set(value); \r\n  } \r\n\r\n  function Get(keys?:string[]) { \r\n    if(!Session.Exists(sessionName)) \r\n      Session.Set(sessionName, session); \r\n    return GetValueAt(session, keys); \r\n  } \r\n\r\n  function Set(newValue:any, keys?:string[]) { \r\n    if(IsChanging(newValue, keys)) \r\n      setSession((prev:any) => { \r\n        const newSession = SetValueAt(prev, newValue, keys); \r\n        Session.Set(sessionName, newSession); \r\n        return newSession; \r\n      }) \r\n  } \r\n\r\n  function End() { \r\n    Session.EndSession(sessionName); \r\n    setSession(undefined) \r\n  } \r\n\r\n  function IsChanging(newValue:any, keys?:string[]) { \r\n    const prev = GetValueAt(session, keys); \r\n    return JSON.stringify(prev) !== JSON.stringify(newValue); \r\n  }\r\n  \r\n  return {Get, Set, Reset, End}; \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\usestateat.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\useGetSet.hook.tsx",["617","618"],"import {useState, useEffect} from 'react'; \r\nimport {GetValueAt, SetValueAt} from '../_utils'; \r\n\r\n\r\ninterface IUseStateAt { \r\n  getValueAt: (keys:string[]) => any; \r\n  setValueAt: (keys:string[]) => (newValue:any) => any; \r\n}\r\n\r\nexport function useStateAt(Value:any) { \r\n  const [value, setValue] = useState(Value); \r\n\r\n  const getValueAt = (keys?:string[]) => GetValueAt(value, keys); \r\n  \r\n  //type arg = T | ((prevState: T) => T); \r\n  const setValueAt = (keys?:string[]) => { \r\n    return (newValue:any) => { \r\n      setValue((prev:any) => { \r\n        return SetValueAt(prev, newValue, keys); \r\n      }); \r\n    } \r\n  }\r\n  return {getValueAt, setValueAt}; \r\n}\r\n\r\n\r\ninterface IUseGetSet { \r\n  value: any; \r\n  setValue: React.Dispatch<React.SetStateAction<any>>; \r\n  accessor: string; \r\n} \r\n\r\nexport function useGetSet(Value:any, SetValue:React.Dispatch<React.SetStateAction<any>>, accessor:string):IUseGetSet { \r\n  const [value, setValue] = useState(GetValueAt(Value, [accessor])); \r\n\r\n  useEffect(() => { \r\n    const prev = GetValueAt(Value, [accessor]); \r\n    if(JSON.stringify(prev) !== JSON.stringify(value)) { \r\n      SetValue((prev:any) => { \r\n        return SetValueAt(prev, value, [accessor]); \r\n      }); \r\n    } \r\n  }, [value]) \r\n\r\n  return {value, setValue, accessor}; \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\usecolumnsetting.hook.tsx",["619"],"import {useMemo, useState} from 'react'; \r\n\r\n\r\n\r\n// Use Column Setting =========================== \r\nexport function useColumnSetting(ifields:IField[]) { \r\n  const memIfields = useMemo(() => ifields, []); \r\n  const [cols, setCols] = useState(ifields); \r\n\r\n  // TEMPORARY\r\n  function OrderFields(ifields:string[]) { \r\n    const ordered:IField[] = []; \r\n    ifields.forEach( f => { \r\n      const found = memIfields.find(mf => mf.accessor === f); \r\n      if(found) \r\n        ordered.push(found); \r\n    }) \r\n    setCols(ordered); \r\n  } \r\n  return {memIfields, cols, OrderFields}; \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\customhooks\\session\\session.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\stories\\mockcrud.ts",["620","621","622","623","624","625"],"import { Fetcher } from '../../_mongooseparser';\r\nimport {Collection} from '../utils/collection.class'; \r\n//import {ICrud} from '../utils/dao.class'; \r\nimport {mockDb} from './mockdb'; \r\n\r\n\r\n\r\nfunction GetMockCollections(accessors?: string[] | undefined) { \r\n  if(!accessors) \r\n    return mockDb; \r\n  const collections:ICollection[] = []; \r\n  accessors?.forEach( accessor => { \r\n    const found = mockDb.find( c => c.accessor===accessor); \r\n    if(found) \r\n      collections.push(found); \r\n  }) \r\n  return collections; \r\n}\r\n\r\n\r\n// Collections ..........................................\r\nasync function Collections(accessors?: string[] | undefined): Promise<ICrudResponse[]> { \r\n  const collections = GetMockCollections(accessors); \r\n  return collections.map( data => { \r\n    return {actionType:'read', success:true, data, err:[]} as ICrudResponse; \r\n  })\r\n}\r\n\r\n// Create ...............................................\r\nasync function Create(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n  const toCreate = entries.map(e => { \r\n    const {_id, _v, ...data} = e; \r\n    return data; \r\n  }); \r\n\r\n  const [icollection] = GetMockCollections([accessor]); \r\n  const collection = new Collection(icollection); \r\n\r\n  // increment ids ...\r\n  collection.Create(entries); \r\n  return entries.map( data => { \r\n    return {actionType:'create', success:true, data, err:[]} as ICrudResponse; \r\n  }) \r\n} \r\n\r\n// Read .................................................\r\nasync function Read(accessor:string, ids?:string[]): Promise<ICrudResponse[]> {\r\n  const [icollection] = GetMockCollections([accessor]); \r\n  const collection = new Collection(icollection); \r\n  const read = collection.Read(ids);\r\n  return read.map( data => { \r\n    return {actionType:'read', success:true, data, err:[]} as ICrudResponse; \r\n  }) \r\n}\r\n\r\n// Update ...............................................\r\nasync function Update(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n  const [icollection] = GetMockCollections([accessor]); \r\n  const collection = new Collection(icollection); \r\n  collection.Update(entries); \r\n  return entries.map( data => { \r\n    return {actionType:'update', success:true, data, err:[]} as ICrudResponse; \r\n  }) \r\n}\r\n\r\n// Delete ...............................................\r\n/* Sends an array of objects with the only property being '_id' ... [{_id}] */\r\nasync function Delete(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n  const [icollection] = GetMockCollections([accessor]); \r\n  const collection = new Collection(icollection); \r\n  collection.Delete(entries); \r\n  return entries.map( data => { \r\n    return {actionType:'delete', success:true, data, err:[]} as ICrudResponse; \r\n  }) \r\n} \r\n\r\n// MockCrud\r\n//export const crud:ICrud = { Collections, Create, Delete, Read, Update} \r\n\r\nconst baseUrl = `https://fjg-mongoose-heroku.herokuapp.com/api/`; \r\nexport const crud = new Fetcher(baseUrl); ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\stories\\mockdb.ts",["626","627"],"import { ValidatorArrayLength, ValidatorMinMaxNumber, ValidatorRegex, ValidatorRequired } from '../utils/validators';\r\nimport {collections} from './mockdata';\r\n\r\n\r\nconst mockCollectiona:ICollection = {accessor:'collectiona', label:'Collection A', \r\n  ifields: [ \r\n    // _id\r\n    {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n    {accessor:'name', label:'Name', defaultValue:'', type:'string', validators:[ \r\n      ValidatorRequired(), \r\n    ]}, \r\n    {accessor:'age', label:'Age', defaultValue:0, type:'number', validators:[ \r\n      ValidatorRequired(), \r\n      ValidatorMinMaxNumber(0), \r\n    ]}, \r\n  ], entries:[ \r\n    {_id:'1', name:'jo', age:12}, \r\n    {_id:'2', name:'biz', age:52} \r\n  ]\r\n} \r\n\r\nconst mockCollectionb:ICollection = {accessor:'collectionb', label:'Collection B', \r\n  ifields: [ \r\n    // _id\r\n    {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n    {accessor:'question', label:'Question', defaultValue:'', type:'string', validators:[ \r\n      ValidatorRequired(), \r\n    ]}, \r\n  ], entries:[ \r\n    {_id:'1', question:'question 1'}, \r\n    {_id:'2', question:'question 2'} \r\n  ]\r\n} \r\n\r\n\r\nexport const mockDb:ICollection[] = [ \r\n  mockCollectiona, \r\n  mockCollectionb, \r\n  ...collections, \r\n] \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_session.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\stories\\mockdata.ts",["628","629"],"import { ValidatorArrayLength, ValidatorMinMaxNumber, ValidatorRegex, ValidatorRequired } from '../utils/validators';\r\n\r\n// QUESTIONS \r\nconst questions:ICollection = {accessor:'questions', label:'Questions', \r\nifields: [ \r\n  // _id\r\n  {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n  // form\r\n  {accessor:'form', label:'Form', defaultValue:'', type:'string', \r\n  validators:[ValidatorRequired()]}, \r\n  // instructions\r\n  {accessor:'instructions', label:'Instructions', defaultValue:'', type:'string', isArray:true}, \r\n  // labels\r\n  {accessor:'labels', label:'Labels', defaultValue:'', type:'string', isArray:true, \r\n  validators:[ValidatorRequired()]}, \r\n  // optional\r\n  {accessor:'optional', label:'Optional', defaultValue:false, type:'boolean'}, \r\n  //order \r\n  {accessor:'order', label:'Order', defaultValue:0, type:'number'}, \r\n  // qId\r\n  {accessor:'qId', label:'Qid', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // responseType\r\n  {accessor:'responseType', label:'Response type', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // section\r\n  {accessor:'section', label:'Section', defaultValue:'', type:'string'}, \r\n\r\n], entries:[ \r\n  {_id:'1', form:'1', instructions:[1], labels:['question 1'], qId:'q1', responseType:'1'}, \r\n  {_id:'2', form:'1', instructions:[1], labels:['question 2'], qId:'q2', responseType:'1'}, \r\n  {_id:'3', form:'1', instructions:[1], labels:['question 3'], qId:'q3', responseType:'1'}, \r\n  {_id:'4', form:'1', instructions:[1], labels:['question 4'], qId:'q4', responseType:'1'}, \r\n  {_id:'5', form:'1', instructions:[1], labels:['question 5'], qId:'q5', responseType:'1'}, \r\n\r\n  {_id:'6', form:'2', instructions:[2], labels:['question 6'], qId:'q6', responseType:'2'}, \r\n  {_id:'7', form:'2', instructions:[2], labels:['question 7'], qId:'q7', responseType:'2'}, \r\n  {_id:'8', form:'2', instructions:[2], labels:['question 8'], qId:'q8', responseType:'2'}, \r\n  {_id:'9', form:'2', instructions:[2], labels:['question 9'], qId:'q9', responseType:'2'}, \r\n  {_id:'10', form:'2', instructions:[1], labels:['question 10'], qId:'q10', responseType:'3'}, \r\n]\r\n} \r\n\r\n\r\n// RESPONSES \r\nconst responses:ICollection = {accessor:'responses', label:'Responses', \r\nifields: [ \r\n  // _id\r\n  {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n  // rId\r\n  {accessor:'rId', label:'Rid', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // responseType\r\n  {accessor:'responseType', label:'Response type', defaultValue:{}, type:'mixed', isMixed:true, validators:[ValidatorRequired()]}, \r\n\r\n], entries:[ \r\n  { \r\n    _id:'1', rId: 'weekdays', \r\n    responseType: { \r\n      type: 'String', \r\n      enum: ['monday', 'thuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'], \r\n    }, \r\n  }, \r\n  { \r\n    _id:'2', rId: 'disagreeagree', \r\n    responseType: { \r\n      type: 'String', \r\n      enum: ['strongly disagree', 'disagree', 'neutral', 'agree', 'strongly agree'], \r\n    }, \r\n  }, \r\n  { \r\n    _id:'3', rId: '0-7', \r\n    responseType: { \r\n      type: 'String', \r\n      enum: [0, 1, 2, 3, 4, 5, 6, 7], \r\n    }, \r\n  } \r\n] \r\n} \r\n\r\n// FORMS\r\nconst forms:ICollection = {accessor:'forms', label:'Forms', \r\nifields: [ \r\n  // _id\r\n  {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n  // fId\r\n  {accessor:'fId', label:'Fid', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // titles\r\n  {accessor:'titles', label:'Titles', defaultValue:'', type:'string', isArray:true, \r\n  validators:[ValidatorRequired()]}, \r\n\r\n], entries:[ \r\n  { \r\n    _id: '1', fId: 'f1', \r\n    titles: ['Title form 1', 'titre form 1'], \r\n  }, \r\n  { \r\n    _id: '2', fId: 'f2', \r\n    titles: ['Title form 2', 'titre form 2'], \r\n  },\r\n  { \r\n    _id: '3', fId: 'f3', \r\n    titles: ['Title form 3', 'titre form 3'], \r\n  } \r\n] \r\n} \r\n\r\n// INSTRUCTIONS\r\nconst instructions:ICollection = {accessor:'instructions', label:'Instructions', \r\nifields: [ \r\n  // _id\r\n  {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n  // iId\r\n  {accessor:'iId', label:'Iid', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // labels\r\n  {accessor:'labels', label:'Labels', defaultValue:'', type:'string', isArray:true, \r\n  validators:[ValidatorRequired()]}, \r\n\r\n], entries:[ \r\n  { \r\n    _id: '1', iId: 'i1', \r\n    label: ['Instruction 1', 'Instruction 1'], \r\n  }, \r\n  { \r\n    _id: '2', iId: 'i2', \r\n    labels: ['Instruction 2', 'Instruction 2'], \r\n  } \r\n] \r\n} \r\n\r\n\r\n\r\n// ANSWERS \r\nconst answers:ICollection = {accessor:'answers', label:'Answers', \r\nifields: [ \r\n  // _id\r\n  {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n  // patient\r\n  {accessor:'patient', label:'Patient', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // patient\r\n  {accessor:'date', label:'Date', defaultValue:Date.now(), type:'date', validators:[ValidatorRequired()]}, \r\n  // question\r\n  {accessor:'question', label:'Question', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // answer\r\n  {accessor:'answer', label:'Answer', defaultValue:-1, type:'number', validators:[ValidatorRequired()]}, \r\n], entries:[] \r\n} \r\n\r\nconst patients:ICollection = {accessor:'patients', label:'Patients', \r\nifields: [ \r\n  // _id\r\n  {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n  // ramq\r\n  {accessor:'ramq', label:'Ramq', defaultValue:'', type:'string', validators:[ValidatorRegex('^[a-zA-Z]{4}[0-9]{8}$')]}, \r\n  // firstname\r\n  {accessor:'firstName', label:'First name', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // patient\r\n  {accessor:'lastName', label:'Last Name', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  \r\n], entries:[] \r\n} \r\n\r\nexport const collections = [questions, responses, forms, instructions, patients, answers]; ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\mongooseparser\\fetcher.class.ts",["630"],"import axios from 'axios'; \r\nimport {ParseCollection} from './mongooseparser.utils'; \r\n\r\n\r\n// Crud Mongoose =======================================\r\nexport class Fetcher { \r\n  public baseUrl:string = ''; \r\n\r\n  constructor(baseUrl:string) { \r\n    this.baseUrl = baseUrl; \r\n  }\r\n\r\n  // Access -----------------------------------------------\r\n  public async Access() { \r\n    return await axios.get(this.baseUrl); \r\n  } \r\n\r\n  /* \r\n  PUT ...api/collections \r\n    req.body => accessors:string[] \r\n    res:ICrudResponse[] \r\n  */ \r\n  // Collections ..........................................\r\n  public async Collections(accessors:string[]): Promise<ICrudResponse[]> { \r\n    const axiosResponses = (await axios.put(this.baseUrl+'collections/', accessors)).data as ICrudResponse[]; \r\n    return axiosResponses.map( r => { \r\n      const parsedCollection = ParseCollection(r.data); \r\n      return {...r, data:parsedCollection} as ICrudResponse; \r\n    }); \r\n  } \r\n\r\n  // Validate .............................................\r\n  public async Validate(accessor:string, entries:IEntry[]) { \r\n    return await axios.put(this.baseUrl+'validate/'+accessor, entries); \r\n  } \r\n\r\n  // Ids ..................................................\r\n  public async Ids(accessor:string): Promise<string[]>{ \r\n    return (await axios.get(this.baseUrl+'ids/'+accessor)).data; \r\n  } \r\n\r\n\r\n  //?? public async CreateUpdate ?? \r\n\r\n\r\n  // Create ...............................................\r\n  public async Create(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toCreate = entries.map(e => { \r\n      const {_id, _v, ...data} = e; \r\n      return data; \r\n    }); \r\n    const response = (await axios.put(this.baseUrl+'create/'+accessor, toCreate)).data; \r\n    console.log(response); \r\n    return response; \r\n  } \r\n\r\n  // ICrudResponse ?? or IEntry ??\r\n  // Read .................................................\r\n  public async Read(accessor:string, ids?:string[]): Promise<ICrudResponse[]> {\r\n    const responses = await axios.put(this.baseUrl+'read/'+accessor, ids); \r\n    return responses.data; \r\n  }\r\n\r\n  // Update ...............................................\r\n  public async Update(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    return (await axios.put(this.baseUrl+'update/'+accessor, entries)).data; \r\n  }\r\n\r\n  // Delete ...............................................\r\n  /* Sends an array of objects with the only property being '_id' ... [{_id}] */\r\n  public async Delete(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toDelete = entries.map(e => { \r\n      const {_id, ...data} = e; \r\n      return {_id}; \r\n    }); \r\n    return (await axios.put(this.baseUrl+'delete/'+accessor, toDelete)).data; \r\n  } \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\mongooseparser\\mongooseparser.utils.ts",["631"],"import {IsEmpty, IsInRange, GetDefaultValueByType} from '../_utils';\r\n\r\nexport interface IMongooseCollection { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    enum?: any[]; \r\n    abbrev?: boolean; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\n// Parser functions =============================\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\nexport function ParseField(field:IMongooseField):IField { \r\n  const {path, instance, options, $embeddedSchemaType} = field; \r\n  const ifield:IField = {} as IField; \r\n  const type = options?.ref ?? $embeddedSchemaType?.instance ?? field.instance ?? ''; \r\n\r\n  ifield.accessor = path ?? ''; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.type = type.toLowerCase(); \r\n  ifield.isMixed = instance.toLowerCase() === 'mixed'; \r\n  ifield.isEnum = !!options?.enum; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = !!options?.ref; \r\n  ifield.isAbbrev = !!options?.abbrev; \r\n  ifield.validators = GetValidators(field); \r\n  ifield.isRequired = field.options['required'] ?? false; \r\n  ifield.regex = field.options['regex']? field.options['regex']: undefined; \r\n\r\n  ifield.enums = options.enum ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, field.options); \r\n\r\n  return ifield; \r\n} \r\n\r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  return GetDefaultValueByType(type); \r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction GetValidators(field:IMongooseField):IValidator[] { \r\n  const required = (value:any) => { \r\n    return !IsEmpty(value); \r\n  }; \r\n\r\n  const regex = (value:any) => { \r\n    if(field.options['regex']) \r\n      return new RegExp(field.options['regex']).test(value); \r\n    return true; \r\n  } \r\n\r\n  const arrayLength = (value:any[]) => { \r\n    return IsInRange(value.length, field.options['minelements'], field.options['maxelements']) \r\n  } \r\n\r\n  const numberRange = (value:any) => { \r\n    return IsInRange(value, field.options['min'], field.options['max']); \r\n  } \r\n\r\n  let validators:IValidator[] = []; \r\n  if(field.options['required']) \r\n    validators.push(required); \r\n  if(field.options['regex']) \r\n    validators.push(regex); \r\n  if(field.options['min'] || field.options['max']) \r\n    validators.push(numberRange); \r\n  if(field.options['minelements'] || field.options['maxelements']) \r\n    validators.push(arrayLength); \r\n  return validators; \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\pager\\_pager.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\pager\\pager.component.tsx",["632","633"],"import { Filter } from '../_arrayutils'; \r\nimport { IsNull } from '../_utils'; \r\n\r\nimport { IPageHook } from './pager.type'; \r\n\r\n/* Pager Btn\r\nDisplay buttons to change pages. */\r\nexport function PagerBtn<T>({paging:{pageIndex, setPageIndex, page, pages}}:{paging:IPageHook<T>}) { \r\n  let indexes = pages.map( (p,i) => i); \r\n  if(indexes.length > 10) \r\n    indexes = AbbrevIndexes(pageIndex, indexes); \r\n\r\n  return <div> \r\n    {indexes.map( (index, i) => { \r\n      return <span key={index}> \r\n        <button onClick={() => setPageIndex(index)} disabled={index===pageIndex}>{index+1}</button> \r\n        {index + 1 !== indexes[i+1] && i < indexes.length-1 && '...'} \r\n      </span> \r\n    })} \r\n  </div> \r\n} \r\n\r\n/* Pager From To\r\nDisplay the range of element being represented on a given page. \r\n*/\r\n/*export function PagerFromTo<T>({paging:{pageIndex, setPageIndex, page, pages}}:{paging:IPageHook<T>}) { \r\n  const indexes = page?.map(p=>p) ?? []; \r\n  let [from, a, mid, b, to] = HeadMidTail(indexes); \r\n  from = !IsNull(from) ? from+1: 0; \r\n  to = !IsNull(to) ? to+1: from; \r\n  //const indexes.length-1; \r\n  return <div> \r\n    {from === to ? \r\n      <div>Item #{from}</div>: \r\n      <div>Items #{from} to {to}</div>} \r\n  </div> \r\n} */\r\n\r\n\r\n/* PageOfPages \r\nDisplay index the current page being display and the total number of pages. \r\n*/\r\nexport function PageOfPages<T>({paging:{pageIndex, setPageIndex, page, pages}}:{paging:IPageHook<T>}) { \r\n  return <div>Page {pageIndex+1} of {pages?.length ?? 0}</div> \r\n} \r\n\r\n\r\n\r\n/* GetHeadMidTail ==================================\r\n*/\r\nfunction HeadMidTail<T>(array:T[] = []): [T, T[], T, T[], T] { \r\n  const [firstHalf, secondHalf] = Filter(array, (t:T, i:number, a:T[], firstHalf:T[]) => firstHalf.length < a.length/2); \r\n  const [head, ...remainder] = firstHalf ?? []; \r\n  const [mid, ...firstRemainder] = remainder.reverse() ?? []; \r\n  const [tail, ...secondRemainder] = secondHalf?.reverse() ?? []; \r\n\r\n  return [head, firstRemainder?.reverse() ?? [], mid ?? head, secondRemainder?.reverse() ?? [], tail ?? head]; \r\n} \r\n\r\nfunction IndexesWindow(index:number, min:number, max:number, length:number) { \r\n  const window = []; \r\n  let i = index-2; \r\n  i = Math.min(i, max-length); \r\n  i = Math.max(i, min); \r\n  while(window.length < length && i >=min && i<max) { \r\n    window.push(i++); \r\n  } \r\n  return window; \r\n} \r\n\r\nfunction AbbrevIndexes(index:number, indexes:number[]) { \r\n  const window = IndexesWindow(index, 0, indexes.length-1, 5); \r\n  const [abbrev] = Filter(indexes, (i:number) => { \r\n    const t = Math.floor(indexes.length/5); \r\n    return [0, ...window, indexes.length-1].includes(i) || (i % t) === 0; \r\n  }) \r\n  return abbrev; \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\utils\\validators.tsx",["634"],"import { IsEmpty, IsInRange, IsNull } from '../../_utils'; \r\n\r\n//console.log(new RegExp(\"^[a-zA-Z]{4}[0-9]{8}$\").test('JEAF23118301')); \r\n\r\n\r\nexport const ValidatorRequired = ():IValidator => { \r\n  return (value:any) => !IsNull(value); \r\n} \r\n\r\nexport const ValidatorMinMaxNumber = (min?:number, max?:number):IValidator => { \r\n  return (value:any) => IsInRange(value, min, max); \r\n} \r\n\r\nexport const ValidatorArrayLength = (min?:number, max?:number):IValidator => { \r\n  return (value:any[] = []) => { \r\n    if(!Array.isArray(value)) \r\n      return false; \r\n    return IsInRange(value.length, min, max) \r\n  }; \r\n} \r\n\r\nexport const ValidatorRegex = (regex:string):IValidator => { \r\n  return (value:string) => { \r\n    const result = new RegExp(regex).test(value);\r\n    console.log([value, regex, result]); \r\n    return result; \r\n  }; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\_inputs.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputsort\\_inputsort.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputsort\\inputsort.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputsort\\inputsort.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\inputs\\inputsort\\inputsorter.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\redirector\\redirector.stories.tsx",["635","636"],"import { Story } from '@storybook/react'; \r\nimport { useState } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router'; \r\nimport { Redirection } from './redirector.component';\r\n\r\nimport { BrowserRouter } from 'react-router-dom'; \r\n\r\nfunction Page1() { \r\n  const [condition, setValue] = useState(false); \r\n  return <div>\r\n    Pager 1\r\n    <button onClick={() => setValue(true)} >Redirect to page2</button> \r\n    <Redirection  {...{condition, destination:\"page2\"}} /> \r\n  </div> \r\n}\r\n\r\nfunction Page2() { \r\n  return <div>Pager 2</div> \r\n}\r\n\r\n\r\nfunction TemplateComponent() { \r\n  return <BrowserRouter> \r\n      <Switch> \r\n        <Page1/> \r\n        <Route path={'/page1'} component={Page1} /> \r\n        <Route path={'/page2'} component={Page2} /> \r\n      </Switch> \r\n    </BrowserRouter> \r\n} \r\n\r\nexport default { \r\n  title: 'Redirection/Redirection', \r\n  component: TemplateComponent, \r\n} \r\n\r\nconst Template:Story<any> = args => <TemplateComponent {...args} /> \r\nexport const TestRedirection = Template.bind({}) \r\nTestRedirection.args = {} \r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\redirector\\redirector.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\redirector\\redirectbtn.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\answers\\answers.page.tsx",["637","638"],"import React from 'react'; \r\nimport { IUseAnswers, useAnswers } from './hooks/useanswers.hook'; \r\nimport { InputFilter, useFilter, IInputFilter } from '../../libs/_inputs'; \r\n\r\n\r\nexport const AnswersContext = React.createContext({} as IUseAnswers); \r\nexport default function AnswersPage() { \r\n  const context = useAnswers(); \r\n  const {patients, filteredValues, SetFilters} = context; \r\n\r\n  return <AnswersContext.Provider value={context}> \r\n    {patients.map( (patient,i) => <div key={i}> \r\n      {JSON.stringify(patient)} \r\n    </div>)} \r\n    <InputFilter {...{ type:'string', handle:\"ramq\", SetFilters }} /> \r\n    <InputFilter {...{ type:'string', handle:\"firstName\", SetFilters }} /> \r\n    <InputFilter {...{ type:'string', handle:\"lastName\", SetFilters }} /> \r\n\r\n    {filteredValues.map( (answer,i) => <div key={i}> \r\n      {JSON.stringify(answer)} \r\n    </div>)} \r\n  </AnswersContext.Provider> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\answers\\hooks\\useanswers.hook.tsx",["639","640","641","642","643"],"import React, {useContext, useState} from 'react'; \r\nimport { DaoContext, IDao } from '../../../libs/_dao'; \r\nimport { InputFilter, useFilter, IInputFilter } from '../../../libs/_inputs'; \r\n\r\nexport interface IUseAnswers { \r\n  patients: IPatient[]; \r\n  filteredValues: IPatient[]; \r\n  SetFilters: (newValue: any, keys?: TKey[] | undefined) => void; \r\n} \r\n\r\n\r\n/** \r\n * Get answers ... \r\n * add filters . \r\n*/\r\nexport function useAnswers():IUseAnswers { \r\n  const dao = useContext(DaoContext); \r\n  const patients = dao.GetIEntries('patients') as IPatient[]; \r\n  const {filteredValues, SetFilters} = useFilter(patients); \r\n  return {patients, filteredValues, SetFilters} as IUseAnswers; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\valuetypetesting\\valuetypetesting.utils.ts",["644"],"import { YMD } from '../date/ymd.class'; \r\nimport { Pick, ToArray } from \"../../_arrayutils\";\r\n\r\n// TYPE VALUE TESTING ###########################\r\nexport function GetDefaultIEntry(ifields:IField[]) { \r\n  let entry = {} as IEntry; \r\n  ifields?.forEach( f => { \r\n    entry[f.accessor] = GetDefaultValueFromIField(f); \r\n  }); \r\n  return entry; \r\n}\r\n\r\nexport function GetSelectedValuesFromOptions(value:any, options:IOption[]) { \r\n  return Pick(options, ToArray(value), (o,u) => o.value === u); \r\n}\r\n\r\nexport function GetDefaultValueFromIField(ifield:IField) { \r\n  if(ifield.isArray) \r\n    return []; \r\n  if(ifield.isModel) \r\n    return ''; // return an null id value ?? \r\n  if(ifield.isMixed) \r\n    return {}; \r\n  if(ifield.defaultValue) \r\n    return ifield.defaultValue; \r\n  return GetDefaultValueByType(ifield.type); \r\n}\r\n\r\nexport function IsInRange(value:number, min?:number, max?:number) { \r\n  if(!value && min) \r\n    return false; \r\n  const minCondition = min ? (value >= min) : true; \r\n  const maxCondition = max ? (value <= max) : true; \r\n  return minCondition && maxCondition; \r\n} \r\n\r\nexport function GetTypeByValue(value:any) { \r\n  if(typeof value === 'string') \r\n    return 'string'; \r\n  if(typeof value === 'number') \r\n    return 'number'; \r\n  if(typeof value === 'boolean') \r\n    return 'boolean'; \r\n  if(Array.isArray(value)) \r\n    return 'array'; \r\n  if(typeof value === 'object') \r\n    return 'object'; \r\n} \r\n\r\nexport function GetDefaultValueByType(type:string) { \r\n  if(type==='boolean') \r\n    return false; \r\n  if(type==='string') \r\n    return ''; \r\n  if(type==='number') \r\n    return 0; \r\n  if(type==='array') \r\n    return []; \r\n  if(type==='date') \r\n    return new Date(); \r\n  if(type==='object') \r\n    return {}; \r\n  return null; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\valuetypetesting\\value.utils.ts",["645","646"],"/* Copy ========================================= \r\nreturn a shallow copy of a value \r\nif that value is either an array or an object\r\n\r\notherwise return the value itself. \r\n*/\r\nexport function Copy(value:any) { \r\n  if(Array.isArray(value)) \r\n    return [...value] \r\n  if(typeof value === 'object') \r\n    return {...value} \r\n  return value; \r\n} \r\n\r\n\r\n/* HasKey =========================================\r\nRecursively search through 'value' to find the nested keys specified in keys. \r\nReturns false if it fails to find one of the keys. \r\nReturn true if it find all of the keys. \r\n\r\n!!! Note: Works for both objects and arrays. \r\n*/ \r\nexport function HasKey(value:any, keys?:any[]):boolean { \r\n  if(IsEmpty(value) || !keys || IsEmpty(keys)) \r\n    return false; \r\n  const [key, ...remainingKeys] = keys; \r\n  const _key = typeof key === 'string' ? key: new Number(key).toString(); \r\n  if(!Object.keys(value).includes(_key) ) \r\n    return false; \r\n  if(IsEmpty(remainingKeys)) \r\n    return true; \r\n  return HasKey(value[_key], remainingKeys); \r\n}\r\n\r\n\r\nexport function UpdateValue<T>(initValue:T, newValue:T) { \r\n  if(Array.isArray(newValue)) \r\n    return newValue; \r\n  if(typeof initValue === 'object') \r\n    return {...initValue, ...newValue}; \r\n  return newValue; \r\n} \r\n\r\n\r\n/* SetValueAt =====================================\r\nAssign a newValue in object or array value at the index/key defined by keys. \r\nCan assign a newValue to object with multiple levels. \r\n*/\r\nexport function SetValueAt(value:any, newValue:any, keys?:TKey[]):any { \r\n  if(!keys || IsEmpty(keys)) \r\n    return newValue; \r\n  const [key, ...remainingKeys] = keys; \r\n  const copy = Copy(value); \r\n  copy[key] = IsEmpty(remainingKeys) ? \r\n    copy[key] = newValue: \r\n    copy[key] = SetValueAt(copy[key], newValue, remainingKeys); \r\n  return copy; \r\n} \r\n\r\n/* GetValueAt ========================================\r\nReturn value specified at 'keys' \r\n*/\r\nexport function GetValueAt(value:any, keys?:TKey[]):any { \r\n  if(IsEmpty(value) || !keys || IsEmpty(keys)) \r\n    return value; \r\n  const [key, ...remainingKeys] = keys; \r\n  if(IsEmpty(key)) \r\n    return value; \r\n  return GetValueAt(value[key], remainingKeys); \r\n} \r\n\r\n\r\n/* IsNUll =======================================\r\nreturns true if value is:\r\n  - undefined\r\n  - null\r\notherwise returns false\r\n*/\r\nexport function IsNull(value:any): boolean { \r\n  return (value ?? null) === null || IsNaN(value); \r\n} \r\n\r\nexport function IsNaN(value:any): boolean { \r\n  return typeof value === 'number' && new Number(value).toString() === 'NaN'; \r\n}\r\n\r\n/* IsEmpty ====================================== \r\nreturn true if value is \r\n  - undefined\r\n  - null\r\n  - '' (an empty string)\r\n  - [] (an empty array)\r\n  - {} (an empty object)\r\notherwise returns false\r\n*/\r\nexport function IsEmpty(value:any): boolean {\r\n  if(IsNull(value)) \r\n    return true; \r\n  if(Array.isArray(value) && value.length === 0) \r\n    return true; \r\n  if(JSON.stringify(value) === '{}') \r\n    return true; \r\n  if(value === '') \r\n    return true; \r\n  return false; \r\n}\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\date\\date.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\utils\\date\\ymd.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\editor_reader\\editor\\editor.stories.tsx",["647"],"import React, {useState} from 'react'; \r\nimport {Editor, IEditor} from './editor.component'; \r\n\r\n\r\n\r\nfunction TemplateEditor({...props}:IEditor) { \r\n  const [value, setValue] = useState(props.value); \r\n  const editValue = (newValue:any) => setValue(newValue); \r\n  const args = {...props, value, editValue}\r\n\r\n  return <div> \r\n    {JSON.stringify(value)} <br/>\r\n    <Editor {...args} /> \r\n  </div>\r\n}\r\n\r\n\r\n\r\nexport default { \r\n  title: 'editor/Editor', \r\n  component: TemplateEditor \r\n} \r\n\r\nconst Template = args => <TemplateEditor {...args} /> \r\n\r\n\r\n// Editor One Value ===========================================\r\nexport const EditorDate = Template.bind({}) \r\nEditorDate.args = { \r\n  value:new Date(), \r\n  ifield:{accessor:'', label:'', type:'date', defaultValue:new Date()}, \r\n} \r\n\r\nexport const EditorNumber = Template.bind({}) \r\nEditorNumber.args = { \r\n  value:12, \r\n  ifield:{accessor:'', label:'', type:'number', defaultValue:12}, \r\n} \r\n\r\nexport const EditorString = Template.bind({})\r\nEditorString.args = { \r\n  value:'this is a string test', \r\n  ifield:{accessor:'', label:'', type:'string', defaultValue:''}, \r\n}\r\n\r\nexport const EditorBool = Template.bind({}) \r\nEditorBool.args = { \r\n  value:false, \r\n  ifield:{accessor:'', label:'', type:'boolean', defaultValue:false}, \r\n}\r\n\r\n// Editor Many value =============================================\r\nexport const EditorManyNumber = Template.bind({})\r\nEditorManyNumber.args = { \r\n  value:[1,23,6,5,8], \r\n  ifield:{accessor:'', label:'', type:'number', defaultValue:0, isArray:true}, \r\n}\r\n\r\nexport const EditorManyString = Template.bind({})\r\nEditorManyString.args = { \r\n  value:['there', 'is', 'many', 'strings'], \r\n  ifield:{accessor:'', label:'', type:'string', defaultValue:'', isArray:true}, \r\n}\r\n\r\nexport const EditorManyBool = Template.bind({})\r\nEditorManyBool.args = {\r\n  value:[false, true, false],\r\n  ifield:{accessor:'', label:'', type:'boolean', defaultValue:false, isArray:true}, \r\n}\r\n\r\n\r\n// Editor Select Single ===================================\r\nexport const EditorSelectSingle_String = Template.bind({}) \r\nEditorSelectSingle_String.args = { \r\n  value:'', \r\n  ifield:{accessor:'', label:'', type:'string', defaultValue:'', isArray:false}, \r\n  options: [ \r\n    {value:'a', label:'option a'}, \r\n    {value:'b', label:'option b'}, \r\n    {value:'c', label:'option c'}, \r\n  ] as IOption[],\r\n}\r\n\r\n// Editor Select Single ===================================\r\nexport const EditorSelectSingle_multi = Template.bind({}) \r\nEditorSelectSingle_multi.args = { \r\n  value:['1'], \r\n  ifield:{accessor:'', label:'', type:'string', defaultValue:'', isArray:true}, \r\n  options: [ \r\n    {value:'a', label:'option a'}, \r\n    {value:'b', label:'option b'}, \r\n    {value:'c', label:'option c'}, \r\n  ] as IOption[],\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\editor_reader\\reader\\reader.stories.tsx",["648"],"import React from 'react'; \r\nimport {Reader} from './reader.component'; \r\n\r\nexport default { \r\n  title: 'editor/Reader', \r\n  component: Reader \r\n} \r\n\r\nconst Template = args => <Reader {...args} /> \r\n\r\n// Reader One Value ===========================================\r\nexport const ReaderDate = Template.bind({}) \r\nReaderDate.args = { \r\n  value:new Date(), \r\n  ifield:{accessor:'', label:'', type:'date', defaultValue:new Date()}, \r\n} \r\n\r\nexport const ReaderOneNumber = Template.bind({}) \r\nReaderOneNumber.args = { \r\n  value:12, \r\n  ifield:{accessor:'', label:'', type:'number', defaultValue:12} \r\n} \r\n\r\nexport const ReaderString = Template.bind({})\r\nReaderString.args = { \r\n  value:'this is a string test', \r\n  ifield:{accessor:'', label:'', type:'string', defaultValue:''} \r\n}\r\n\r\nexport const ReaderBool = Template.bind({})\r\nReaderBool.args = {\r\n  value:false,\r\n  ifield:{accessor:'', label:'', type:'boolean', defaultValue:false} \r\n}\r\n\r\n// Reader Many value =============================================\r\nexport const ReaderManyString = Template.bind({})\r\nReaderManyString.args = { \r\n  value:['there', 'is', 'many', 'strings'], \r\n  ifield:{accessor:'', label:'', type:'string', defaultValue:'', isArray:true} \r\n}\r\n\r\nexport const ReaderManyNumber = Template.bind({})\r\nReaderManyNumber.args = { \r\n  value:[1,23,6,5,8], \r\n  ifield:{accessor:'', label:'', type:'number', defaultValue:0, isArray:true} \r\n}\r\n\r\nexport const ReaderManyBool = Template.bind({})\r\nReaderManyBool.args = {\r\n  value:[false, true, false],\r\n  ifield:{accessor:'', label:'', type:'boolean', defaultValue:false, isArray:true} \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\editor_reader\\reader\\reader.component.tsx",["649"],"import { GetDefaultValueFromIField, GetSelectedValuesFromOptions, IsEmpty } from \"../../_utils\";\r\n\r\n\r\nexport type IReaderFunc = ({...props}:IReader) => JSX.Element; \r\nexport interface IReader { \r\n  value:any; \r\n  options?:IOption[]; \r\n  ifield:IField;    // type:IType ?? \r\n} \r\ninterface IProps extends IReader { \r\n  func?:IReaderFunc; \r\n} \r\n\r\nexport function GetReadValue(value:any, options:IOption[], ifield:IField) { \r\n  if(IsEmpty(options))\r\n    return value ?? GetDefaultValueFromIField(ifield); \r\n  const values = GetSelectedValuesFromOptions(value, options).map(o=>o.label); \r\n  return ifield.isArray ? values: values[0]; \r\n} \r\n\r\nexport function GetDefaultReaderFunc(ifield:IField) { \r\n  if(ifield.isArray) \r\n    return ReadMany; \r\n  if(ifield.isMixed) \r\n    return ReadMixed; \r\n  return ReadOne; \r\n} \r\n\r\nexport function Reader({ifield, options=[], ...props}:IProps) { \r\n  const value = GetReadValue(props.value, options, ifield); \r\n  props.func = props.func ?? GetDefaultReaderFunc(ifield); \r\n  return <props.func {...{value, options, ifield}} /> \r\n} \r\n\r\n\r\nfunction ReadOne({value, options, ifield}:IReader) { \r\n  if(ifield.type === 'string' || ifield.type === 'number') \r\n    return <div>{value}</div> \r\n  return <div>{JSON.stringify(value)}</div> \r\n} \r\n\r\nfunction ReadMany({value, options, ifield}:IReader) { \r\n  const isShort = JSON.stringify(value).length < 15; \r\n\r\n  if(!Array.isArray(value)) \r\n    return <div>{JSON.stringify(value)}</div> \r\n\r\n  if(isShort) { \r\n    return <div>[{value.map( (e, i) => { \r\n        return <span key={i}>{i!==0 && ', '}{JSON.stringify(e)}</span> \r\n    })}]</div> \r\n  } \r\n  return <div>\r\n    <div className={'readmany-long'}> \r\n      {value.map( (e, i) => { \r\n        return <div key={i}>{i}. {JSON.stringify(e)}</div> \r\n      })} \r\n    </div> \r\n  </div>\r\n} \r\n\r\n\r\nfunction ReadMixed({value, options, ifield}:IReader) { \r\n  return <div>{JSON.stringify(value)}</div> \r\n} \r\n\r\nfunction ReadDefault({value, options, ifield}:IReader) { \r\n  return <div>{JSON.stringify(value)}</div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\editor_reader\\editor\\editor.component.tsx",["650","651","652"],"import { useEffect, useState } from 'react'; \r\nimport { IsEmpty, GetDefaultValueFromIField } from '../../_utils'; \r\nimport { GetReadValue, IReader } from '../reader/_reader'; \r\nimport { Input, InputArray, InputSelect } from '../../_inputs'; \r\n\r\n\r\nexport type IEditorFunc = ({...props}:IEditor) => JSX.Element; \r\nexport interface IEditor extends IReader { \r\n  editValue: (newValue:any) => void; \r\n  validation?: (newValue:any) => boolean; \r\n  \r\n  placeholder?: string; \r\n  sizeFunc?: (value:any) => number; \r\n  inputAttribute?: React.InputHTMLAttributes<HTMLInputElement>; \r\n} \r\n\r\ninterface IProps extends IEditor{ \r\n  func?: IEditorFunc; \r\n}\r\n\r\n\r\n\r\nexport function Editor({options = [], validation = () => true, ...props}:IProps) { \r\n  const value = IsEmpty(props.value) ? GetDefaultValueFromIField(props.ifield): props.value; \r\n  const args = {...props, value, options, validation}; \r\n  props.func = props.func ?? GetDefaultEditorFunc(props.ifield, !IsEmpty(options)); \r\n  return <props.func {...args} /> \r\n} \r\n\r\n\r\nfunction GetDefaultEditorFunc(ifield:IField, hasOptions:boolean) { \r\n  if(hasOptions) \r\n    return EditSelection(ifield); \r\n  if(ifield.isArray) \r\n    return EditMany; \r\n  if(ifield.isMixed) \r\n    return EditMixed; \r\n  return EditOne; \r\n} \r\n\r\n// Edit one\r\nfunction EditOne({value, editValue, ifield, ...props}:IEditor) { \r\n  const onSetValue = editValue; \r\n  const type = ifield.type; \r\n  const defaultValue = ifield.defaultValue; \r\n  return <Input {...{...props, type, value, onSetValue, defaultValue}} /> \r\n}\r\n\r\n\r\n// Edit many\r\nfunction EditMany({value, editValue, options, ifield, ...props}:IEditor) { \r\n  const values = value; \r\n  const onSetValues = editValue; \r\n  const type = ifield.type; \r\n  const defaultValue = ifield.defaultValue; \r\n  return <InputArray {...{...props, type, values, onSetValues, defaultValue}} /> \r\n}\r\n\r\nfunction EditMixed({value, editValue, options, ifield}:IEditor) { \r\n  return <div>\r\n    Edit Mixed\r\n  </div>\r\n}\r\n\r\n\r\n\r\n\r\n// Edit Selection \r\nfunction EditSelection(ifield:IField) { \r\n  return ifield.isArray ? \r\n    EditSelectMulti: \r\n    EditSelectSingle; \r\n}\r\n\r\nfunction EditSelectSingle({editValue, options = [], ifield, ...props}:IEditor) { \r\n  const onSetValue = editValue; \r\n  return <InputSelect {...{...props, onSetValue, options}} /> \r\n}\r\n\r\nfunction EditSelectMulti({editValue, options = [], ifield, ...props}:IEditor) { \r\n  const onSetValue = editValue; \r\n  return <InputSelect {...{...props, onSetValue, options, multiple:true}} /> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\editor_reader\\_editor_reader.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\editor_reader\\reader\\_reader.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\editor_reader\\editor\\_editor.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\pager\\pager.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\pager\\pager.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\dao\\hooks\\dao.hook.ts",["653","654"],"import { useEffect } from 'react'; \r\nimport { useLoader } from '../../_customhooks'; \r\nimport { ICrud, IDao } from '../dao.type'; \r\n\r\n\r\nexport function useDaoLoader(dao:IDao, accessors:string[]) { \r\n  const callback = (res:any) => {}; \r\n  const {state, Load} = useLoader(); \r\n  useEffect(() => { \r\n    Load( () => dao.Collections(accessors), callback); \r\n  }, []); \r\n  return state.success; \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\usestatereset\\usestatereset.stories.tsx",["655"],"import { Story } from '@storybook/react'; \r\nimport { useStateReset } from './useStateReset.hook'; \r\n\r\nexport default { \r\n  title: 'Hooks/useStateReset', \r\n  component: TemplateComponent, \r\n} \r\n\r\nfunction TemplateComponent({initValue, change}:{initValue:any, change:any}) { \r\n  const [value, SetValue, ResetValue] = useStateReset(initValue); \r\n\r\n  return <div> \r\n    {JSON.stringify(value)} \r\n    <button onClick={() => SetValue(change)}>Change</button> \r\n    <button onClick={ResetValue}>Reset</button> \r\n  </div> \r\n} \r\n\r\nconst Template:Story<{initValue:any, change:any}> = (args) => <TemplateComponent {...args} /> \r\n\r\nexport const InitString = Template.bind({}) \r\nInitString.args = { \r\n  initValue:'value', \r\n  change:'modified' \r\n} \r\n\r\nexport const IniNumber = Template.bind({}) \r\nIniNumber.args = { \r\n  initValue:12, \r\n  change:14, \r\n} \r\n\r\nexport const IniArray = Template.bind({}) \r\nIniArray.args = { \r\n  initValue:[12, 5], \r\n  change:[], \r\n} \r\n\r\nexport const IniObj = Template.bind({}) \r\nIniObj.args = { \r\n  initValue:{row:0, mode:'read'}, \r\n  change:{row:1} \r\n} \r\n\r\nexport const IniObj2 = Template.bind({}) \r\nIniObj2.args = { \r\n  initValue:{}, \r\n  change:{row:1} \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\usestatereset\\useStateReset.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\components\\inlinebtn.component.tsx",["656"],"import { useContext } from 'react'; \r\nimport { InlineTableContext } from '../hooks/inlinetable.hook'; \r\nimport { InlineEntryContext } from './inlineentry.components'; \r\nimport { RowContext } from './rows.components'; \r\n\r\n\r\n// Create Btn ---------------------------------------------\r\nexport function InlineCreateBtn() { \r\n  const {Create} = useContext(InlineTableContext); \r\n\r\n  const CreateBtn = { \r\n    mode:'create', \r\n    labels:{affirm:'Create', confirm:'Confirm', cancel:'Cancel'}, \r\n    action:Create, \r\n  } \r\n  return <InlineBtn {...CreateBtn} /> \r\n} \r\n\r\n\r\n// Update Delete Btn ---------------------------------------------\r\nexport function InlineUpdateDeleteBtn() { \r\n  const {Update, Delete} = useContext(InlineTableContext); \r\n  \r\n  const UpdateBtn = { \r\n    mode:'update', \r\n    labels:{affirm:'Update', confirm:'Confirm', cancel:'Cancel'}, \r\n    action:Update, \r\n  } \r\n\r\n  const DeleteBtn = { \r\n    mode:'delete', \r\n    labels:{affirm:'Delete', confirm:'Confirm', cancel:'Cancel'}, \r\n    action:Delete, \r\n  } \r\n\r\n  return <div>\r\n    <InlineBtn {...UpdateBtn} /> \r\n    <InlineBtn {...DeleteBtn} /> \r\n  </div>\r\n} \r\n\r\n// Inline Btn ---------------------------------------------\r\ninterface IInlineBtn { \r\n  mode:string, \r\n  labels:{affirm:string, confirm:string, cancel:string}, \r\n  action:(entry:IEntry)=>Promise<ICrudResponse>, \r\n} \r\nexport function InlineBtn({mode, labels, action}:IInlineBtn) { \r\n  const {inlineState, SetInlineState, ResetInlineState} = useContext(InlineTableContext); \r\n  const {entry, isSelected} = useContext(InlineEntryContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  if(isSelected && inlineState.mode === mode) \r\n    return <div>\r\n      <div><button onClick={() => action(entry)}>{labels.confirm}</button></div>\r\n      <div><button onClick={ResetInlineState}>{labels.cancel}</button></div>\r\n    </div>\r\n  if(isSelected && inlineState.mode != mode) \r\n    return <div></div>; \r\n  return <div> \r\n    <button onClick={() => SetInlineState({row, mode}) }>{labels.affirm}</button>\r\n  </div> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.stories.tsx",["657"],"import { Story } from '@storybook/react'; \r\nimport { crud } from '../../libs/dao/stories/mockcrud'; \r\nimport { DaoContexter, ICrud } from '../../libs/_dao'; \r\nimport AdminPage from './admin.page'; \r\n\r\n\r\nfunction TemplateComponent({...props}:{accessors:string[]}) { \r\n  return <DaoContexter {...{crud:crud as ICrud, accessors:props.accessors}}> \r\n    <AdminPage/> \r\n  </DaoContexter> \r\n} \r\n\r\nexport default { \r\n  title: 'Admin/Admin', \r\n  component: TemplateComponent, \r\n} \r\n\r\nconst Template:Story<{accessors:string[]}> = (args) => <TemplateComponent {...args} /> \r\n\r\nexport const TestAdminPage = Template.bind({}) \r\nTestAdminPage.args = { \r\n  accessors: ['questions', 'patients', 'responses', 'answers', 'forms', 'instructions'], \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\inlineadmintable.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\row.components.tsx",["658"],"import React, { useContext } from 'react'; \r\nimport { Cell } from './cell.components'; \r\n\r\nimport { InlineEntryContext, InlineTableContext, TCols, useInlineEntry, \r\n  InlineCreateBtn, InlineUpdateDeleteBtn } \r\n  from '../../../libs/table/_table'; \r\n\r\n\r\n\r\n\r\nexport function Row() { \r\n  const {IsSelected} = useContext(InlineTableContext); \r\n  if(IsSelected()) \r\n    return <RowSelected/> \r\n  return <RowRead/> \r\n}\r\n\r\nconst ReadEntryContext = React.createContext(null); \r\nfunction RowRead() { \r\n  const {cols, GetRowCol} = useContext(InlineTableContext); \r\n  const {row} = GetRowCol(); \r\n  return <ReadEntryContext.Provider value={null} >\r\n    <TCols cols={cols}> \r\n      <Cell/>\r\n    </TCols> \r\n    <InlineBtn/>\r\n  </ReadEntryContext.Provider>\r\n}\r\n\r\nfunction RowSelected() { \r\n  const {cols, GetRowCol} = useContext(InlineTableContext); \r\n  const {row} = GetRowCol(); \r\n  const inlineEntry = useInlineEntry(row); \r\n  return <InlineEntryContext.Provider value={inlineEntry}> \r\n    <TCols cols={cols}>\r\n      <Cell/>\r\n    </TCols> \r\n    <InlineBtn/>\r\n  </InlineEntryContext.Provider> \r\n}\r\n\r\nfunction InlineBtn() { \r\n  const {GetRowCol} = useContext(InlineTableContext); \r\n  const {row} = GetRowCol(); \r\n\r\n  return <td>{row === -1 ? <InlineCreateBtn />: <InlineUpdateDeleteBtn/>}</td>\r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cell.components.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\_table.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\components\\inlineentry.components.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\components\\columnselector.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\components\\cell.components.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\components\\rows.components.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\components\\cols.components.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\components\\thead.components.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\hooks\\inlinetable.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\hooks\\inlineentry.hook.tsx",["659","660"],"import { useState, useEffect, useContext } from 'react'; \r\n//import { useStateReset } from '../../_customhooks'; \r\nimport { InlineTableContext } from './inlinetable.hook'; \r\nimport { RowContext } from '../components/rows.components'; \r\nimport { IUseInlineEntry } from '../table.types'; \r\n\r\n\r\n\r\nexport function useInlineEntry():IUseInlineEntry { \r\n  const {row} = useContext(RowContext); \r\n  const {GetEntry, inlineState} = useContext(InlineTableContext); \r\n  const _entry = GetEntry(row); \r\n  const [entry, SetEntry] = useState(_entry); \r\n\r\n  const isSelected = inlineState.row === row; \r\n  const editModes = ['create', 'update']; \r\n  const isEditing = editModes.includes(inlineState.mode); \r\n\r\n  const ResetEntry = JSON.stringify(_entry) != JSON.stringify(entry) && !isSelected; \r\n\r\n  useEffect(() => { \r\n    if(ResetEntry) \r\n      SetEntry(_entry); \r\n  }, [ResetEntry]); \r\n  \r\n  return {entry, SetEntry, isSelected, isEditing}; \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\utils\\utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\stories\\inlinetable.stories.tsx",["661","662","663"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\stories\\statictable.stories.tsx",["664","665","666","667"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\stories\\daotable.stories.tsx",["668","669","670"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\libs\\table\\stories\\inlinetablefeedback.component.tsx",[],{"ruleId":"671","replacedBy":"672"},{"ruleId":"673","replacedBy":"674"},{"ruleId":"671","replacedBy":"672"},{"ruleId":"673","replacedBy":"674"},{"ruleId":"671","replacedBy":"675"},{"ruleId":"673","replacedBy":"676"},{"ruleId":"677","severity":1,"message":"678","line":1,"column":15,"nodeType":"679","messageId":"680","endLine":1,"endColumn":25},{"ruleId":"677","severity":1,"message":"681","line":2,"column":18,"nodeType":"679","messageId":"680","endLine":2,"endColumn":25},{"ruleId":"671","replacedBy":"682"},{"ruleId":"673","replacedBy":"683"},{"ruleId":"677","severity":1,"message":"684","line":27,"column":27,"nodeType":"679","messageId":"680","endLine":27,"endColumn":32},{"ruleId":"677","severity":1,"message":"685","line":31,"column":18,"nodeType":"679","messageId":"680","endLine":31,"endColumn":42},{"ruleId":"677","severity":1,"message":"686","line":1,"column":10,"nodeType":"679","messageId":"680","endLine":1,"endColumn":19},{"ruleId":"677","severity":1,"message":"687","line":1,"column":31,"nodeType":"679","messageId":"680","endLine":1,"endColumn":38},{"ruleId":"677","severity":1,"message":"688","line":2,"column":10,"nodeType":"679","messageId":"680","endLine":2,"endColumn":21},{"ruleId":"677","severity":1,"message":"689","line":2,"column":23,"nodeType":"679","messageId":"680","endLine":2,"endColumn":36},{"ruleId":"677","severity":1,"message":"690","line":6,"column":17,"nodeType":"679","messageId":"680","endLine":6,"endColumn":25},{"ruleId":"677","severity":1,"message":"691","line":3,"column":10,"nodeType":"679","messageId":"680","endLine":3,"endColumn":20},{"ruleId":"677","severity":1,"message":"692","line":84,"column":12,"nodeType":"679","messageId":"680","endLine":84,"endColumn":27},{"ruleId":"693","severity":1,"message":"694","line":48,"column":1,"nodeType":"695","endLine":51,"endColumn":2},{"ruleId":"677","severity":1,"message":"696","line":2,"column":10,"nodeType":"679","messageId":"680","endLine":2,"endColumn":16},{"ruleId":"677","severity":1,"message":"697","line":2,"column":18,"nodeType":"679","messageId":"680","endLine":2,"endColumn":23},{"ruleId":"677","severity":1,"message":"698","line":50,"column":10,"nodeType":"679","messageId":"680","endLine":50,"endColumn":24},{"ruleId":"693","severity":1,"message":"694","line":62,"column":1,"nodeType":"695","endLine":65,"endColumn":2},{"ruleId":"693","severity":1,"message":"694","line":23,"column":1,"nodeType":"695","endLine":26,"endColumn":2},{"ruleId":"677","severity":1,"message":"699","line":12,"column":15,"nodeType":"679","messageId":"680","endLine":12,"endColumn":18},{"ruleId":"693","severity":1,"message":"694","line":15,"column":1,"nodeType":"695","endLine":18,"endColumn":2},{"ruleId":"677","severity":1,"message":"700","line":10,"column":11,"nodeType":"679","messageId":"680","endLine":10,"endColumn":18},{"ruleId":"677","severity":1,"message":"701","line":21,"column":10,"nodeType":"679","messageId":"680","endLine":21,"endColumn":19},{"ruleId":"693","severity":1,"message":"694","line":21,"column":1,"nodeType":"695","endLine":24,"endColumn":2},{"ruleId":"693","severity":1,"message":"694","line":28,"column":1,"nodeType":"695","endLine":31,"endColumn":2},{"ruleId":"677","severity":1,"message":"702","line":5,"column":10,"nodeType":"679","messageId":"680","endLine":5,"endColumn":15},{"ruleId":"693","severity":1,"message":"694","line":30,"column":1,"nodeType":"695","endLine":33,"endColumn":2},{"ruleId":"693","severity":1,"message":"694","line":18,"column":1,"nodeType":"695","endLine":21,"endColumn":2},{"ruleId":"693","severity":1,"message":"694","line":19,"column":1,"nodeType":"695","endLine":22,"endColumn":2},{"ruleId":"693","severity":1,"message":"694","line":18,"column":1,"nodeType":"695","endLine":21,"endColumn":2},{"ruleId":"693","severity":1,"message":"694","line":21,"column":1,"nodeType":"695","endLine":24,"endColumn":2},{"ruleId":"693","severity":1,"message":"694","line":40,"column":1,"nodeType":"695","endLine":43,"endColumn":2},{"ruleId":"703","severity":1,"message":"704","line":15,"column":42,"nodeType":"705","messageId":"706","endLine":15,"endColumn":44},{"ruleId":"677","severity":1,"message":"707","line":133,"column":12,"nodeType":"679","messageId":"680","endLine":133,"endColumn":22},{"ruleId":"677","severity":1,"message":"708","line":136,"column":11,"nodeType":"679","messageId":"680","endLine":136,"endColumn":15},{"ruleId":"677","severity":1,"message":"709","line":5,"column":10,"nodeType":"679","messageId":"680","endLine":5,"endColumn":15},{"ruleId":"710","severity":1,"message":"711","line":30,"column":44,"nodeType":"712","endLine":30,"endColumn":46,"suggestions":"713"},{"ruleId":"677","severity":1,"message":"714","line":35,"column":10,"nodeType":"679","messageId":"680","endLine":35,"endColumn":21},{"ruleId":"710","severity":1,"message":"715","line":47,"column":6,"nodeType":"712","endLine":47,"endColumn":41,"suggestions":"716"},{"ruleId":"710","severity":1,"message":"717","line":47,"column":7,"nodeType":"718","endLine":47,"endColumn":40},{"ruleId":"719","severity":1,"message":"720","line":43,"column":39,"nodeType":"718","messageId":"706","endLine":43,"endColumn":43},{"ruleId":"677","severity":1,"message":"721","line":3,"column":3,"nodeType":"679","messageId":"680","endLine":3,"endColumn":15},{"ruleId":"677","severity":1,"message":"722","line":2,"column":34,"nodeType":"679","messageId":"680","endLine":2,"endColumn":39},{"ruleId":"677","severity":1,"message":"723","line":21,"column":10,"nodeType":"679","messageId":"680","endLine":21,"endColumn":22},{"ruleId":"710","severity":1,"message":"724","line":12,"column":6,"nodeType":"712","endLine":12,"endColumn":34,"suggestions":"725"},{"ruleId":"710","severity":1,"message":"717","line":12,"column":7,"nodeType":"718","endLine":12,"endColumn":33},{"ruleId":"677","severity":1,"message":"686","line":1,"column":10,"nodeType":"679","messageId":"680","endLine":1,"endColumn":19},{"ruleId":"677","severity":1,"message":"726","line":5,"column":11,"nodeType":"679","messageId":"680","endLine":5,"endColumn":22},{"ruleId":"710","severity":1,"message":"727","line":43,"column":6,"nodeType":"712","endLine":43,"endColumn":13,"suggestions":"728"},{"ruleId":"710","severity":1,"message":"729","line":7,"column":45,"nodeType":"712","endLine":7,"endColumn":47,"suggestions":"730"},{"ruleId":"677","severity":1,"message":"731","line":22,"column":16,"nodeType":"679","messageId":"680","endLine":22,"endColumn":27},{"ruleId":"677","severity":1,"message":"732","line":30,"column":16,"nodeType":"679","messageId":"680","endLine":30,"endColumn":22},{"ruleId":"677","severity":1,"message":"733","line":31,"column":9,"nodeType":"679","messageId":"680","endLine":31,"endColumn":17},{"ruleId":"677","severity":1,"message":"734","line":47,"column":16,"nodeType":"679","messageId":"680","endLine":47,"endColumn":20},{"ruleId":"677","severity":1,"message":"735","line":57,"column":16,"nodeType":"679","messageId":"680","endLine":57,"endColumn":22},{"ruleId":"677","severity":1,"message":"736","line":68,"column":16,"nodeType":"679","messageId":"680","endLine":68,"endColumn":22},{"ruleId":"677","severity":1,"message":"737","line":1,"column":10,"nodeType":"679","messageId":"680","endLine":1,"endColumn":30},{"ruleId":"677","severity":1,"message":"738","line":1,"column":55,"nodeType":"679","messageId":"680","endLine":1,"endColumn":69},{"ruleId":"677","severity":1,"message":"737","line":1,"column":10,"nodeType":"679","messageId":"680","endLine":1,"endColumn":30},{"ruleId":"677","severity":1,"message":"739","line":1,"column":32,"nodeType":"679","messageId":"680","endLine":1,"endColumn":53},{"ruleId":"677","severity":1,"message":"740","line":73,"column":22,"nodeType":"679","messageId":"680","endLine":73,"endColumn":26},{"ruleId":"741","severity":1,"message":"742","line":63,"column":37,"nodeType":"743","messageId":"744","endLine":63,"endColumn":47},{"ruleId":"677","severity":1,"message":"745","line":2,"column":10,"nodeType":"679","messageId":"680","endLine":2,"endColumn":16},{"ruleId":"677","severity":1,"message":"746","line":51,"column":10,"nodeType":"679","messageId":"680","endLine":51,"endColumn":21},{"ruleId":"677","severity":1,"message":"747","line":1,"column":10,"nodeType":"679","messageId":"680","endLine":1,"endColumn":17},{"ruleId":"677","severity":1,"message":"748","line":3,"column":25,"nodeType":"679","messageId":"680","endLine":3,"endColumn":33},{"ruleId":"693","severity":1,"message":"694","line":32,"column":1,"nodeType":"695","endLine":35,"endColumn":2},{"ruleId":"677","severity":1,"message":"749","line":3,"column":23,"nodeType":"679","messageId":"680","endLine":3,"endColumn":32},{"ruleId":"677","severity":1,"message":"750","line":3,"column":34,"nodeType":"679","messageId":"680","endLine":3,"endColumn":46},{"ruleId":"677","severity":1,"message":"751","line":1,"column":8,"nodeType":"679","messageId":"680","endLine":1,"endColumn":13},{"ruleId":"677","severity":1,"message":"752","line":1,"column":28,"nodeType":"679","messageId":"680","endLine":1,"endColumn":36},{"ruleId":"677","severity":1,"message":"753","line":2,"column":22,"nodeType":"679","messageId":"680","endLine":2,"endColumn":26},{"ruleId":"677","severity":1,"message":"754","line":3,"column":10,"nodeType":"679","messageId":"680","endLine":3,"endColumn":21},{"ruleId":"677","severity":1,"message":"750","line":3,"column":34,"nodeType":"679","messageId":"680","endLine":3,"endColumn":46},{"ruleId":"677","severity":1,"message":"755","line":1,"column":10,"nodeType":"679","messageId":"680","endLine":1,"endColumn":13},{"ruleId":"756","severity":1,"message":"757","line":27,"column":47,"nodeType":"758","messageId":"759","endLine":27,"endColumn":62},{"ruleId":"756","severity":1,"message":"757","line":84,"column":39,"nodeType":"758","messageId":"759","endLine":84,"endColumn":56},{"ruleId":"693","severity":1,"message":"694","line":19,"column":1,"nodeType":"695","endLine":22,"endColumn":2},{"ruleId":"693","severity":1,"message":"694","line":4,"column":1,"nodeType":"695","endLine":7,"endColumn":2},{"ruleId":"677","severity":1,"message":"760","line":67,"column":10,"nodeType":"679","messageId":"680","endLine":67,"endColumn":21},{"ruleId":"677","severity":1,"message":"686","line":1,"column":10,"nodeType":"679","messageId":"680","endLine":1,"endColumn":19},{"ruleId":"677","severity":1,"message":"752","line":1,"column":21,"nodeType":"679","messageId":"680","endLine":1,"endColumn":29},{"ruleId":"677","severity":1,"message":"761","line":3,"column":10,"nodeType":"679","messageId":"680","endLine":3,"endColumn":22},{"ruleId":"677","severity":1,"message":"709","line":3,"column":10,"nodeType":"679","messageId":"680","endLine":3,"endColumn":15},{"ruleId":"710","severity":1,"message":"762","line":11,"column":6,"nodeType":"712","endLine":11,"endColumn":8,"suggestions":"763"},{"ruleId":"693","severity":1,"message":"694","line":4,"column":1,"nodeType":"695","endLine":7,"endColumn":2},{"ruleId":"703","severity":1,"message":"704","line":58,"column":37,"nodeType":"705","messageId":"706","endLine":58,"endColumn":39},{"ruleId":"693","severity":1,"message":"694","line":13,"column":1,"nodeType":"695","endLine":16,"endColumn":2},{"ruleId":"677","severity":1,"message":"764","line":21,"column":10,"nodeType":"679","messageId":"680","endLine":21,"endColumn":13},{"ruleId":"703","severity":1,"message":"704","line":19,"column":45,"nodeType":"705","messageId":"706","endLine":19,"endColumn":47},{"ruleId":"710","severity":1,"message":"765","line":24,"column":6,"nodeType":"712","endLine":24,"endColumn":18,"suggestions":"766"},{"ruleId":"677","severity":1,"message":"767","line":6,"column":30,"nodeType":"679","messageId":"680","endLine":6,"endColumn":41},{"ruleId":"677","severity":1,"message":"768","line":15,"column":10,"nodeType":"679","messageId":"680","endLine":15,"endColumn":29},{"ruleId":"693","severity":1,"message":"694","line":19,"column":1,"nodeType":"695","endLine":22,"endColumn":2},{"ruleId":"677","severity":1,"message":"767","line":11,"column":30,"nodeType":"679","messageId":"680","endLine":11,"endColumn":41},{"ruleId":"693","severity":1,"message":"694","line":14,"column":1,"nodeType":"695","endLine":17,"endColumn":2},{"ruleId":"677","severity":1,"message":"769","line":34,"column":30,"nodeType":"679","messageId":"680","endLine":34,"endColumn":37},{"ruleId":"677","severity":1,"message":"770","line":34,"column":39,"nodeType":"679","messageId":"680","endLine":34,"endColumn":46},{"ruleId":"677","severity":1,"message":"767","line":7,"column":30,"nodeType":"679","messageId":"680","endLine":7,"endColumn":41},{"ruleId":"693","severity":1,"message":"694","line":22,"column":1,"nodeType":"695","endLine":25,"endColumn":2},{"ruleId":"677","severity":1,"message":"771","line":101,"column":33,"nodeType":"679","messageId":"680","endLine":101,"endColumn":46},"no-native-reassign",["772"],"no-negated-in-lhs",["773"],["772"],["773"],"@typescript-eslint/no-unused-vars","'withRouter' is defined but never used.","Identifier","unusedVar","'IEditor' is defined but never used.",["772"],["773"],"'pages' is assigned a value but never used.","'SubmitAnswersAndNextPage' is defined but never used.","'useEffect' is defined but never used.","'useMemo' is defined but never used.","'setInterval' is defined but never used.","'clearInterval' is defined but never used.","'setTimer' is assigned a value but never used.","'useSession' is defined but never used.","'QuestionSorting' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Switch' is defined but never used.","'Route' is defined but never used.","'DisplaySession' is defined but never used.","'Set' is assigned a value but never used.","'timeout' is assigned a value but never used.","'TestTimer' is defined but never used.","'Sorts' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'collection' is assigned a value but never used.","'read' is assigned a value but never used.","'ICrud' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'crud'. Either include it or remove the dependency array.","ArrayExpression",["774"],"'SelectValue' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'elementArgs.value'. Either include it or remove the dependency array.",["775"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","no-eval","eval can be harmful.","'GetInputType' is defined but never used.","'OnTab' is defined but never used.","'ToggleTarget' is defined but never used.","React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["776"],"'IUseStateAt' is defined but never used.","React Hook useEffect has missing dependencies: 'SetValue', 'Value', and 'accessor'. Either include them or remove the dependency array. If 'SetValue' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["777"],"React Hook useMemo has a missing dependency: 'ifields'. Either include it or remove the dependency array.",["778"],"'Collections' is defined but never used.","'Create' is defined but never used.","'toCreate' is assigned a value but never used.","'Read' is defined but never used.","'Update' is defined but never used.","'Delete' is defined but never used.","'ValidatorArrayLength' is defined but never used.","'ValidatorRegex' is defined but never used.","'ValidatorMinMaxNumber' is defined but never used.","'data' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'IsNull' is defined but never used.","'HeadMidTail' is defined but never used.","'IsEmpty' is defined but never used.","'Redirect' is defined but never used.","'useFilter' is defined but never used.","'IInputFilter' is defined but never used.","'React' is defined but never used.","'useState' is defined but never used.","'IDao' is defined but never used.","'InputFilter' is defined but never used.","'YMD' is defined but never used.","no-new-wrappers","Do not use Number as a constructor.","NewExpression","noConstructor","'ReadDefault' is defined but never used.","'GetReadValue' is defined but never used.","React Hook useEffect has missing dependencies: 'Load', 'accessors', and 'dao'. Either include them or remove the dependency array.",["779"],"'row' is assigned a value but never used.","React Hook useEffect has a missing dependency: '_entry'. Either include it or remove the dependency array.",["780"],"'PageOfPages' is defined but never used.","'InlineTableFeedback' is defined but never used.","'filters' is assigned a value but never used.","'sorters' is assigned a value but never used.","'ResetFeedback' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"781","fix":"782"},{"desc":"783","fix":"784"},{"desc":"785","fix":"786"},{"desc":"787","fix":"788"},{"desc":"789","fix":"790"},{"desc":"791","fix":"792"},{"desc":"793","fix":"794"},"Update the dependencies array to be: [crud]",{"range":"795","text":"796"},"Update the dependencies array to be: [elementArgs.value]",{"range":"797","text":"798"},"Update the dependencies array to be: [callback]",{"range":"799","text":"800"},"Update the dependencies array to be: [SetValue, Value, accessor, value]",{"range":"801","text":"802"},"Update the dependencies array to be: [ifields]",{"range":"803","text":"804"},"Update the dependencies array to be: [Load, accessors, dao]",{"range":"805","text":"806"},"Update the dependencies array to be: [ResetEntry, _entry]",{"range":"807","text":"808"},[1063,1065],"[crud]",[1888,1923],"[elementArgs.value]",[304,332],"[callback]",[1231,1238],"[SetValue, Value, accessor, value]",[200,202],"[ifields]",[360,362],"[Load, accessors, dao]",[858,870],"[ResetEntry, _entry]"]