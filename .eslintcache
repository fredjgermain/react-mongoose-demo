[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\valuerenderer.component.tsx":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\loadpatient.component.tsx":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\loadquestionnaire.component.tsx":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx":"59"},{"size":600,"mtime":1609529670659,"results":"60","hashOfConfig":"61"},{"size":590,"mtime":1611787196542,"results":"62","hashOfConfig":"61"},{"size":362,"mtime":499162500000,"results":"63","hashOfConfig":"61"},{"size":225,"mtime":1609475507334,"results":"64","hashOfConfig":"61"},{"size":1141,"mtime":1611607453355,"results":"65","hashOfConfig":"61"},{"size":117,"mtime":1609476049273,"results":"66","hashOfConfig":"61"},{"size":496,"mtime":1609883323259,"results":"67","hashOfConfig":"61"},{"size":1493,"mtime":1611613395214,"results":"68","hashOfConfig":"61"},{"size":3330,"mtime":1611094858686,"results":"69","hashOfConfig":"61"},{"size":2003,"mtime":1611094858767,"results":"70","hashOfConfig":"61"},{"size":2253,"mtime":1611776071422,"results":"71","hashOfConfig":"61"},{"size":2309,"mtime":1611354518934,"results":"72","hashOfConfig":"61"},{"size":1780,"mtime":1611276492206,"results":"73","hashOfConfig":"61"},{"size":2274,"mtime":1611360455578,"results":"74","hashOfConfig":"61"},{"size":1473,"mtime":1611094858490,"results":"75","hashOfConfig":"61"},{"size":462,"mtime":1611094858513,"results":"76","hashOfConfig":"61"},{"size":1042,"mtime":1611094858511,"results":"77","hashOfConfig":"61"},{"size":982,"mtime":1611094858504,"results":"78","hashOfConfig":"61"},{"size":8180,"mtime":1611862124753,"results":"79","hashOfConfig":"61"},{"size":3573,"mtime":1611862428881,"results":"80","hashOfConfig":"61"},{"size":425,"mtime":1611094858586,"results":"81","hashOfConfig":"61"},{"size":313,"mtime":1611186041859,"results":"82","hashOfConfig":"61"},{"size":336,"mtime":1611094858220,"results":"83","hashOfConfig":"61"},{"size":811,"mtime":1611613379299,"results":"84","hashOfConfig":"61"},{"size":112,"mtime":1611094858253,"results":"85","hashOfConfig":"61"},{"size":1301,"mtime":1611094858561,"results":"86","hashOfConfig":"61"},{"size":688,"mtime":1611105433287,"results":"87","hashOfConfig":"61"},{"size":1330,"mtime":1611105734495,"results":"88","hashOfConfig":"61"},{"size":124,"mtime":1611105257047,"results":"89","hashOfConfig":"61"},{"size":233,"mtime":1611094858166,"results":"90","hashOfConfig":"61"},{"size":3111,"mtime":1611261423772,"results":"91","hashOfConfig":"61"},{"size":1241,"mtime":1611175973024,"results":"92","hashOfConfig":"61"},{"size":510,"mtime":1611452000844,"results":"93","hashOfConfig":"61"},{"size":1532,"mtime":1611265998385,"results":"94","hashOfConfig":"61"},{"size":2116,"mtime":1611102160553,"results":"95","hashOfConfig":"61"},{"size":943,"mtime":1611094858392,"results":"96","hashOfConfig":"61"},{"size":447,"mtime":1611094858232,"results":"97","hashOfConfig":"61"},{"size":4285,"mtime":1611356030017,"results":"98","hashOfConfig":"61"},{"size":1373,"mtime":1611177659474,"results":"99","hashOfConfig":"61"},{"size":107,"mtime":1611094858263,"results":"100","hashOfConfig":"61"},{"size":2751,"mtime":1611357393940,"results":"101","hashOfConfig":"61"},{"size":79,"mtime":1611192421523,"results":"102","hashOfConfig":"61"},{"size":338,"mtime":1611192348931,"results":"103","hashOfConfig":"61"},{"size":1535,"mtime":1611776191785,"results":"104","hashOfConfig":"61"},{"size":231,"mtime":1611094858225,"results":"105","hashOfConfig":"61"},{"size":1927,"mtime":1611534878890,"results":"106","hashOfConfig":"61"},{"size":1598,"mtime":1611522375233,"results":"107","hashOfConfig":"61"},{"size":3429,"mtime":1611522023225,"results":"108","hashOfConfig":"61"},{"size":512,"mtime":1611777771531,"results":"109","hashOfConfig":"61"},{"size":1421,"mtime":1611785745919,"results":"110","hashOfConfig":"61"},{"size":1246,"mtime":1611776071424,"results":"111","hashOfConfig":"61"},{"size":1055,"mtime":1611604553824,"results":"112","hashOfConfig":"61"},{"size":2681,"mtime":1611862821989,"results":"113","hashOfConfig":"61"},{"size":2968,"mtime":1611779065227,"results":"114","hashOfConfig":"61"},{"size":4449,"mtime":1611692562224,"results":"115","hashOfConfig":"61"},{"size":4618,"mtime":1611787164693,"results":"116","hashOfConfig":"61"},{"size":701,"mtime":1611777860845,"results":"117","hashOfConfig":"61"},{"size":1229,"mtime":1611783304558,"results":"118","hashOfConfig":"61"},{"size":736,"mtime":1611785745918,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"ke513i",{"filePath":"123","messages":"124","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"122"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"133"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"133"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"133"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"133"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"133"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"133"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"133"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"133"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"133"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"133"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"133"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"133"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"133"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"133"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["260","261"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",["262","263","264","265","266","267","268","269"],"import React, {useState, useEffect, useRef} from 'react'; \nimport {Admin} from './pages/admin/admin.page'; \nimport {Patient} from './pages/patient/patient.page'; \nimport {Input} from './reusable/_input'; \n//import {TestToggle} from './reusable/components/toggle/toggle.component'; \nimport {TestSelect} from './reusable/components/select/select.component'; \nimport {TestReader, TestEditors} from './experiments/testReaderEditor'; \n\n\n\nexport default function App() { \n  //return <TestToggle/> \n  //return <TestSelect/> \n  //return <Patient/> \n  return <Admin/> \n  //return <TestEffect/> \n} \n\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",["270"],"import React, {useEffect} from 'react'; \r\nimport {useDao, DaoContexter, ICrud, DataAccessObject} from '../../reusable/_dao'; \r\nimport {CrudMongoose} from '../../reusable/_mongooseparser'; \r\nimport {FeedBack} from '../../components/feedback/feedback.component'; \r\nimport {IsEmpty} from '../../reusable/_utils'; \r\n\r\nimport {CollectionSelector} from './components/collectionselector.component'; \r\nimport {AdminTablr} from './components/admintablr.component'; \r\n\r\nimport '../../css/table.css'; \r\n\r\nconst crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n\r\n\r\n// ADMIN PAGE ====================================\r\nexport function Admin() { \r\n  const UseDao = useDao( new DataAccessObject(crud as ICrud) ); \r\n  const {state, activeCollection, Collections} = UseDao; \r\n\r\n  useEffect(() => { \r\n    Collections(['questions','responses', 'forms', 'instructions', 'patients', 'answers']); \r\n  }, []); \r\n\r\n  return <DaoContexter {...{UseDao}} > \r\n    <h1>Admin</h1> \r\n    <FeedBack/> \r\n    {state.ready && state.success && <CollectionSelector /> } \r\n    {!IsEmpty(activeCollection) && <AdminTablr/>} \r\n  </DaoContexter> \r\n}\r\n\r\n\r\n",["271","272"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx",[],["273","274"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["275"],"export interface IMongooseCollection { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    enum?: any[]; \r\n    abbrev?: boolean; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\n//async function ParseFields() \r\nexport function ParseField(field:IMongooseField):IField { \r\n  \r\n  const {path, instance, options, $embeddedSchemaType} = field; \r\n  /*if(path==='fId')\r\n    console.log(field); \r\n\r\n  if(path==='titles')\r\n    console.log(field); */\r\n\r\n  const ifield:IField = {} as IField; \r\n\r\n  ifield.accessor = path ?? ''; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.options = options ?? {}; \r\n  ifield.type = options?.ref ?? $embeddedSchemaType?.instance ?? field.instance.toLowerCase(); \r\n  ifield.isMixed = instance.toLowerCase() === 'mixed'; \r\n  ifield.isEnum = !!options?.enum; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = !!options?.ref; \r\n  ifield.isAbbrev = !!options?.abbrev; \r\n\r\n  ifield.enums = options.enum ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, ifield.options); \r\n  \r\n  //ifield.validators = \r\n  return ifield; \r\n} \r\n\r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["276","277","278"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull, GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield) => { \r\n      return <Cell key={ifield.accessor} {...{ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const data = datas[row]; \r\n  const value = IsEmpty(data) ? GetDefaultValueFromIField(ifield): datas[row][ifield.accessor]; \r\n  const context = {value, row, ifield} as ICellContext; \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["279","280","281"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts",["282"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts",["283","284"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx",[],["285","286"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts",[],["287","288"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx",["289"],"import React from 'react'; \r\n//import CSS from ''\r\nimport {IEvent, IsNull, OnEnter, SetSize, SetWidth, \r\n  GetDefaultValueByType, GetTypeByValue, GetInputType, GetValueFromInput} from '../../_utils'; \r\n\r\n\r\n// INPUT ========================================\r\nexport interface IInput extends React.HTMLAttributes<HTMLInputElement> { \r\n  value:any; \r\n  setValue:any; \r\n  type?:string; \r\n  defaultValue?:any; \r\n  inputType?:string; \r\n  onEnterUp?:() => void; \r\n  width?: number; \r\n  [key:string]:any; \r\n} \r\nexport function Input(\r\n  {\r\n    value, setValue, \r\n    type=GetTypeByValue(value??''), \r\n    defaultValue=GetDefaultValueByType(type??'string'), \r\n    inputType=GetInputType(type??''), \r\n    onEnterUp=() => {}, \r\n    ...props\r\n  }:IInput) \r\n{ \r\n  const onChange = (event:IEvent) => setValue(GetInputValueOrDefault(event, defaultValue)); \r\n  const Value = IsNull(value) ? defaultValue: value; \r\n  const onKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => OnEnter(event, onEnterUp); \r\n\r\n  const width = props.width ?? SetSize(value); \r\n  const style = {width: `${width+2}ch`}; \r\n\r\n  if(type === 'boolean') \r\n    return <input {...{type:inputType, checked:Value, onChange, onKeyUp,  ...props}} /> \r\n  return <input {...{type:inputType, value:Value, onChange, onKeyUp, ...props}} style={style} /> \r\n} \r\n\r\n\r\n// GetValue --------------------------------------\r\nfunction GetInputValueOrDefault (event:IEvent, defaultValue:any) { \r\n  const value = GetValueFromInput(event); \r\n  return IsNull(value) ? defaultValue: value; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx",["290","291","292","293","294","295"],"import React, { useContext, useEffect, useState } from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex, ElementValue} from '../../_arrx'; \r\nimport {Input} from '../../_input'; \r\nimport {IInputArray, IUseInputArray, useInputArray} from './inputarray.hook'; \r\n\r\n\r\nexport const InputArrayContext = React.createContext({} as IUseInputArray); \r\nexport function InputArray({...props}:React.PropsWithChildren<IInputArray>) { \r\n  const context = useInputArray(props); \r\n  const {values} = props; \r\n  \r\n  return <InputArrayContext.Provider value={context} > \r\n    <Arrx {...{values}} > \r\n      <Elements> \r\n        <UpdateElement/> <DeleteBtn/>\r\n        <br/> \r\n      </Elements> \r\n      <CreateElement/>\r\n    </Arrx> \r\n  </InputArrayContext.Provider> \r\n} \r\n\r\n\r\n// Create element =======================================\r\nfunction CreateElement() { \r\n  const {type, defaultValue, Create} = useContext(InputArrayContext); \r\n  const [value, setValue] = useState(defaultValue); \r\n\r\n  const onEnterUp = () => {\r\n    Create(value); \r\n    setValue(() => defaultValue); // reset input to defaultValue after creation. \r\n  }; \r\n  return <Input {...{value, setValue, defaultValue, type, onEnterUp}}  /> \r\n} \r\n\r\n// Update element =======================================\r\nfunction UpdateElement() { \r\n  const {values, type, defaultValue, Update} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n\r\n  const [value, setValue] = useState(values[index]); \r\n  useEffect(() => { \r\n    setValue(values[index]); \r\n  }, [JSON.stringify(values[index])]); \r\n\r\n  const onEnterUp = () => Update(index, value); \r\n  return <Input {...{value, setValue, type, defaultValue, onEnterUp}} />\r\n}\r\n\r\n// Delete Btn ===================================\r\nexport function DeleteBtn({children, ...props}:React.PropsWithChildren<React.ButtonHTMLAttributes<HTMLButtonElement>>) { \r\n  const {Delete} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  return <button onClick={() => Delete(index)} {...props}> \r\n    {!children ? 'x' : children} \r\n  </button> \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx",[],["296","297"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\valuerenderer.component.tsx",["298","299","300","301","302","303","304"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx",["305","306"],"import {useEffect, useRef} from 'react'; \r\n\r\nexport function useUpdate(callback:() => void, changeling:any) { \r\n  const flagFirstRender = useRef(true); \r\n  \r\n  useEffect(() => { \r\n    if(flagFirstRender.current) { \r\n      flagFirstRender.current = false; \r\n      return; \r\n    } \r\n    callback(); \r\n  }, [JSON.stringify(changeling)]); \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",["307","308","309"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {useDao, DaoContexter, ICrud, DataAccessObject, DaoContext} from '../../reusable/_dao'; \r\nimport {CrudMongoose} from '../../reusable/_mongooseparser'; \r\nimport {IsEmpty} from '../../reusable/_utils'; \r\nimport {PatientProfile} from './components/patientprofile.component'; \r\nimport {Questionnaire} from '../questionnaire/questionnaire.page'; \r\nimport {LoadPatients } from './components/loadpatient.component'; \r\n//import {RamqIdentification} from './components/ramqidentitication.component';\r\n\r\nconst crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n\r\n\r\n\r\n\r\n// PATIENT PAGE =================================\r\ninterface IPatientProfileContext { \r\n  patientProfile: IEntry; \r\n  setPatientProfile: React.Dispatch<IEntry>; \r\n} \r\nexport const PatientProfileContext = React.createContext({} as IPatientProfileContext); \r\nexport function Patient() { \r\n  const UseDao = useDao( new DataAccessObject(crud as ICrud) ); \r\n  const {activeCollection} = UseDao; \r\n  const [patientProfile, setPatientProfile] = useState({} as IEntry); \r\n\r\n  const context = {patientProfile, setPatientProfile}; \r\n  return <DaoContexter {...{UseDao}} > \r\n    <PatientProfileContext.Provider value={context} > \r\n      {IsEmpty(activeCollection) && <LoadPatients/>} \r\n      {!IsEmpty(activeCollection) && IsEmpty(patientProfile) && <PatientProfile/>} \r\n      {!IsEmpty(patientProfile) && <Questionnaire/>} \r\n    </PatientProfileContext.Provider> \r\n  </DaoContexter> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx",["310"],"import React, { useEffect, useState } from 'react'; \r\nimport {Input, InputArray, Select} from '../../_input'; \r\nimport {GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\nimport {useUpdate} from '../../_useupdate'; \r\n\r\n\r\n\r\n// Reader =======================================\r\ninterface IEditor{ \r\n  ifield:IField; \r\n  value:any; \r\n  setValue:React.Dispatch<any>; \r\n  options?:IOption[]; \r\n} \r\nexport function Editor({ ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) { \r\n  const {defaultValue, type} = ifield; \r\n  const _options = options ?? [] as IOption[]; \r\n  const [_value, _setValue] = useState(value); \r\n\r\n  // synchronize from parent value\r\n  useEffect(() => { \r\n    if(value !== _value) \r\n      _setValue(value); \r\n  }, [value]); \r\n\r\n  // synchronize to parent value \r\n  useUpdate(() => {setValue(_value)},_value); \r\n\r\n  // Edit Many\r\n  if(ifield.isArray) {\r\n    if(IsEmpty(options)) \r\n      return <InputArray {...{defaultValue, type, values:_value, setValues:_setValue}} /> \r\n    return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:true}} /> \r\n  }\r\n  // Edit Mixed\r\n  if(ifield.isMixed) \r\n    return <EditMixed {...{ifield, value, setValue}} /> \r\n\r\n  // Edit One\r\n  if(IsEmpty(options)) \r\n    return <Input {...{value:_value, setValue:_setValue, type, defaultValue}} /> \r\n  return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:false}} /> \r\n} \r\n\r\n\r\nfunction EditMixed ({ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) {\r\n  return <span>{JSON.stringify(value)}</span>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx",["311"],"import React, {useContext} from 'react'; \r\nimport {DaoContext} from '../../reusable/_dao'; \r\nimport {Arrx} from '../../reusable/_arrx'; \r\n\r\nimport '../../css/feedback.css'; \r\n\r\n\r\n// Feedback =====================================\r\nexport function FeedBack() { \r\n  const {state} = useContext(DaoContext); \r\n\r\n  return <div> \r\n    {!state.ready && <span>LOADING ... </span>} \r\n    {state.ready && <span>Ready </span>} \r\n    {state.ready && state.success && <CrudFeedBack />}\r\n    {state.ready && !state.success && 'an errors occured'} \r\n  </div> \r\n} \r\n\r\nfunction CrudFeedBack() { \r\n  const {state} = useContext(DaoContext); \r\n  // assumes state is ready and successful\r\n  const {actionType, success, data, err} = state.response as ICrudResponse; \r\n  \r\n  const successMsg:any = { \r\n    create:'Creation succeed', \r\n    update:'Update succeed', \r\n    delete:'Deletion succeed', \r\n  } \r\n  const errorMsg:any = { \r\n    create:'Creation failed ', \r\n    update:'Update failed', \r\n    delete:'Deletion failed', \r\n  } \r\n\r\n  const className = success ? 'success' : 'failure'; \r\n\r\n  return <div className={className}> \r\n    <div>{success ? successMsg[actionType] : errorMsg[actionType]}</div> \r\n    {!success && <Arrx {...{values:(err)}} />} \r\n    </div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx",["312","313"],"import React, {useContext} from 'react'; \r\nimport {DaoContext, EActionType} from '../../../reusable/_dao'; \r\n\r\nimport {Rows, Row, RowContext, Cells, Cell, CellContext} from '../../../reusable/_tablr'; \r\nimport {CreateBtn, DeleteBtn, UpdateBtn} from './crudbtn.component'; \r\nimport {CellRender} from './cellrenderer.component';\r\n\r\n\r\n\r\nexport function InlineUpdateDelete({page, cols, colBtn}:{page:number[], cols:IField[], colBtn:IField}) { \r\n  return <Rows {...{rows:page}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <CellRender/> \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <UpdateBtn/><DeleteBtn/> \r\n    </Cell> \r\n  </Rows> \r\n} \r\n\r\nexport function InlineCreate({cols, colBtn}:{cols:IField[], colBtn:IField}) { \r\n  const {activeMode} = useContext(DaoContext); \r\n  const isCreate = activeMode === EActionType.CREATE; \r\n\r\n  return <Row {...{row:-1}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <span></span>\r\n      {isCreate && <CellRender/> } \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <CreateBtn/> \r\n    </Cell> \r\n  </Row> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx",["314"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx",["315","316","317","318"],"import React, {useContext, useState, useRef} from 'react'; \r\nimport {DaoContext, EActionType} from '../../../reusable/_dao'; \r\nimport {IsEmpty} from '../../../reusable/_utils'; \r\nimport {FeedBack} from '../../../components/feedback/feedback.component'; \r\n\r\nimport {Objx, ObjxContext, Fields, Field, \r\n  FieldContext, FieldLabel, FieldValue} from '../../../reusable/_objx'; \r\nimport {Reader, Editor} from '../../../reusable/_input'; \r\n//import {Questionnaire} from '../../questionnaire/questionnaire.page'; \r\nimport {PatientProfileContext} from '../patient.page'; \r\n\r\n\r\n// Patient profile ============================== \r\nexport function PatientProfile() { \r\n  const {activeEntry} = useContext(DaoContext); \r\n\r\n  return <div> \r\n    {IsEmpty(activeEntry['ramq']) ? \r\n      <IdPatientProfile />: \r\n      <UpdateCreatePatientProfile />} \r\n  </div> \r\n} \r\n\r\nfunction UpdateCreatePatientProfile() {\r\n  const {state, activeEntry, activeMode, activeCollection, Create, Update} = useContext(DaoContext); \r\n  const {ifields} = activeCollection; \r\n  const ramqField = ifields.find(f => f.accessor==='ramq') as IField; \r\n  const cols = ifields.filter(f => ['firstName', 'lastName'].includes(f.accessor) ); \r\n\r\n  const {setPatientProfile} = useContext(PatientProfileContext); \r\n\r\n  async function UpdateCreateProfile(Func:(accessor:string, entry:IEntry) => Promise<void>) { \r\n    await Func(activeCollection.accessor, activeEntry); \r\n    if(state.ready && state.success) \r\n      setPatientProfile(activeEntry); \r\n  } \r\n\r\n  return <div> \r\n    <h1>Patient profile</h1> \r\n    <FeedBack/> \r\n    {activeMode} \r\n    <Objx {...{value:activeEntry, ifields:cols}} > \r\n      <Field {...{ifield:ramqField}} /> \r\n      <Fields><div><FieldLabel/><FieldEditor/></div></Fields> \r\n    </Objx> \r\n    {activeMode === 'update' && <button onClick={() => UpdateCreateProfile(Update)}>Update patient profile</button>} \r\n    {activeMode === 'create' && <button onClick={() => UpdateCreateProfile(Create)}>Create new patient profile</button>} \r\n  </div> \r\n}\r\n\r\n\r\nfunction IdPatientProfile () {\r\n  const {activeEntry, setActiveEntry, SetActiveMode, activeCollection} = useContext(DaoContext); \r\n  const {entries, ifields} = activeCollection; \r\n  const ramqField = ifields.find(f => f.accessor==='ramq') as IField; \r\n  const [value, setValue] = useState(''); \r\n  \r\n  function IdentifyPatient(ramq:string) { \r\n    const found = entries.find( e => { \r\n      const e_ramq = (e['ramq'] as string); \r\n      return e_ramq.toLowerCase() === ramq.toLowerCase(); \r\n    }); \r\n    if(found) { \r\n      setActiveEntry(found); \r\n      SetActiveMode(EActionType.UPDATE); \r\n    } \r\n    else { \r\n      setActiveEntry({...activeEntry, ramq}); \r\n      SetActiveMode(EActionType.CREATE); \r\n    } \r\n  } \r\n\r\n  return <div> \r\n    <h1>Patient identification</h1> \r\n    <div>Ramq: <Editor {...{value, setValue, ifield:ramqField}} /></div> \r\n    <button onClick={() => IdentifyPatient(value)}>Identify</button> \r\n  </div> \r\n}\r\n\r\n\r\n\r\nfunction FieldEditor() { \r\n  const {activeEntry, setActiveEntry} = useContext(DaoContext); \r\n  const {ifield} = useContext(FieldContext); \r\n\r\n  const value = activeEntry[ifield.accessor]; \r\n  const setValue = (newValue:any) => { \r\n    const copy = {...activeEntry}; \r\n    copy[ifield.accessor] = newValue; \r\n    setActiveEntry(copy); \r\n  } \r\n  return <Editor {...{value, setValue, ifield}} /> \r\n} \r\n\r\n\r\n\r\n\r\n\r\n// PATIENT PROFILE ==============================\r\n/*function PatientProfile({ramq}:{ramq:string}) { \r\n  const {activeCollection, activeEntry, Create, Update, GetForeignElements, GetForeignOptions, GetForeignValues} = useContext(DaoContext); \r\n  const {ifields} = activeCollection; \r\n  const cols = ifields.filter(f=> f.label && f.accessor!=='ramq'); \r\n  const ramqField = ifields.find(f=>f.accessor==='ramq') as IField; \r\n  //const renderers = BuildDefaultRenderingFunc(GetForeignElements, GetForeignOptions, GetForeignValues); \r\n\r\n  const value = {...activeEntry, ramq}; \r\n\r\n  return <div> \r\n    <div><Objx {...{value, ifields:cols}}/></div> \r\n    <Objx {...{value, ifields:cols}}> \r\n      <Field {...{ifield:ramqField}} /> \r\n      <Fields> \r\n        <FieldLabel/> <FieldRenderer {...{renderers}} /><br/> \r\n      </Fields> \r\n    </Objx> \r\n    {activeEntry._id ? \r\n      <button onClick={()=> Update(activeCollection.accessor, activeEntry)} >Update</button> : \r\n      <button onClick={()=> Create(activeCollection.accessor, activeEntry)} >Create</button> }\r\n  </div> \r\n}*/","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx",["319","320","321","322","323","324","325","326","327","328"],"import React, {useContext, useState} from 'react'; \r\nimport {PatientProfileContext} from '../patient/patient.page'; \r\nimport {DaoContext, EActionType} from '../../reusable/_dao'; \r\nimport {LoadQuestionnaire} from './components/loadquestionnaire.component'; \r\nimport {IsEmpty} from '../../reusable/_utils'; \r\nimport {Arrx, ArrxContext, Elements, ElementContext} from '../../reusable/_arrx'; \r\nimport {usePage} from '../../reusable/_usepage'; \r\nimport {Paging} from '../../components/paging.component'; \r\n\r\n\r\ninterface IAnswersContext { \r\n  answers: IAnswer[]; \r\n  setAnswers: React.Dispatch<IAnswer[]>; \r\n} \r\nexport const AnswersContext = React.createContext({} as IAnswersContext); \r\n// Questionnaire ================================ \r\nexport function Questionnaire() { \r\n  const {patientProfile} = useContext(PatientProfileContext); \r\n  const [answers, setAnswers] = useState([] as IAnswer[]); \r\n\r\n  const context = {answers, setAnswers}; \r\n  return <AnswersContext.Provider value={context}> \r\n    <h1>Patient questionnaire</h1> \r\n    <div>patient: {JSON.stringify(patientProfile['ramq'])}</div> \r\n    <h2>Questionnaire form ...</h2> \r\n    {IsEmpty(answers) && <LoadQuestionnaire/>} \r\n    {!IsEmpty(answers) && <DisplayQuestions/>} \r\n  </AnswersContext.Provider> \r\n} \r\n\r\n\r\nexport function DisplayQuestions() { \r\n  const {GetCollections} = useContext(DaoContext); \r\n  const {answers, setAnswers} = useContext(AnswersContext); \r\n  const {pageIndex, setPageIndex, pages} = usePage(answers, 5); \r\n  const page = pages[pageIndex]; \r\n  //const {question, instructions, response} = GetQuestionInfos(answer, GetCollections()); \r\n\r\n  \r\n  return <div> \r\n    <FormTitle {...{page}} /> \r\n    <Arrx {...{values:answers}} > \r\n      <Elements {...{indexes:page}}> \r\n        <DisplayQuestion/>\r\n      </Elements> \r\n    </Arrx> \r\n    <Paging {...{pageIndex, setPageIndex, pages}} /> \r\n  </div> \r\n} \r\n\r\n\r\nfunction FormTitle({page}:{page:number[]}) { \r\n  const {GetIFields, GetEntry} = useContext(DaoContext); \r\n  const {answers, setAnswers} = useContext(AnswersContext); \r\n  const [index] = page; \r\n  const answer = answers[index] as IAnswer; \r\n\r\n  const [formField, labelsField] = GetIFields('questions', ['form', 'labels']); \r\n  const [titlesField] = GetIFields('forms', ['titles']); \r\n\r\n  const question = GetEntry('questions', answer.qid) as IQuestion; \r\n  const form = GetEntry('forms', question.form) as IForm; \r\n\r\n  return <h3>{form.titles[0]}</h3> \r\n} \r\n\r\nexport function DisplayQuestion() { \r\n  const {GetIFields, GetEntry} = useContext(DaoContext); \r\n  const {answers, setAnswers} = useContext(AnswersContext); \r\n  const {index} = useContext(ElementContext); \r\n  const answer = answers[index] as IAnswer; \r\n\r\n  const [formField, labelsField] = GetIFields('questions', ['form', 'labels']); \r\n  const [titlesField] = GetIFields('forms', ['titles']); \r\n  const [responseTypeField] = GetIFields('responses', ['responseType']); \r\n\r\n  const question = GetEntry('questions', answer.qid) as IQuestion; \r\n  const form = GetEntry('forms', question.form) as IForm; \r\n  const response = GetEntry('responses', question.responseType) as IResponse; \r\n  \r\n  return <div> \r\n    <div>{titlesField.label}: {form.titles[0]}</div> \r\n    <div>{labelsField.label} {question.labels[0]}</div> \r\n    <div>{responseTypeField.label} {JSON.stringify(response.responseType)}</div> \r\n  </div> \r\n} \r\n\r\n\r\n\r\n/*\r\n\r\n\r\n\r\nfunction GetQuestionInfos({qid}:IAnswer, collections:ICollection[]) { \r\n  const {entries:qEntries, ifields:qFields} = collections.find( c => c.accessor==='questions') as ICollection; \r\n  const {entries:fEntries, ifields:fFields} = collections.find( c => c.accessor==='forms') as ICollection; \r\n  const {entries:iEntries, ifields:iFields} = collections.find( c => c.accessor==='instructions') as ICollection; \r\n  const {entries:rEntries, ifields:rFields} = collections.find( c => c.accessor==='responses') as ICollection; \r\n  \r\n  const question = qEntries.find(q => q._id === qid) as IQuestion; \r\n  const form = fEntries.find(f => f._id === question?.form) as IForm; \r\n  const instructions = iEntries.filter(i => question?.instructions?.includes(i._id) ) as IInstruction[]; \r\n  const response = rEntries.find(r => question?.responseType === r._id ) as IResponse; \r\n  return {question, qFields, form, fFields, instructions, iFields, response, rFields}; \r\n} \r\n_id: Schema.Types.ObjectId, \r\npatientid: { \r\n  type: Schema.Types.ObjectId, \r\n  ref: 'patients', \r\n  label: 'Patient', \r\n}, \r\nquestionid: { \r\n  type: Schema.Types.ObjectId, \r\n  ref: 'questions', \r\n  label: 'Question', \r\n}, \r\nanswer: { \r\n  type: Number, \r\n  label: 'Answer', \r\n} \r\n*/\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\loadpatient.component.tsx",["329","330"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {DaoContext} from '../../../reusable/_dao'; \r\nimport {FeedBack} from '../../../components/feedback/feedback.component'; \r\n\r\n\r\n\r\n// LOAD PATIENTS ================================\r\nexport function LoadPatients() { \r\n  const {setActiveCollection, Collections, GetCollections} = useContext(DaoContext); \r\n\r\n  async function GetPatient() { \r\n    await Collections(['patients']); \r\n    const collection = GetCollections().find( c => c.accessor==='patients'); \r\n    if(collection) \r\n      setActiveCollection(collection); \r\n  } \r\n  \r\n  useEffect(() => { \r\n    GetPatient(); \r\n  }, []); \r\n\r\n  return <div> \r\n    <FeedBack/> \r\n  </div> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\loadquestionnaire.component.tsx",["331"],"import React, {useContext, useEffect} from 'react'; \r\nimport {DaoContext} from '../../../reusable/_dao'; \r\nimport {FeedBack} from '../../../components/feedback/feedback.component'; \r\nimport {PatientProfileContext} from '../../patient/patient.page'; \r\nimport {AnswersContext} from '../questionnaire.page'; \r\n\r\n\r\n\r\n// LOAD PATIENTS ================================\r\nexport function LoadQuestionnaire() { \r\n  const {Collections, GetCollections} = useContext(DaoContext); \r\n  const {patientProfile} = useContext(PatientProfileContext); \r\n  const {setAnswers} = useContext(AnswersContext); \r\n\r\n  async function GetQuestionnaire() { \r\n    await Collections(['questions', 'forms', 'responses', 'answers', 'instructions']); \r\n    BuildBlankForm(); \r\n  }\r\n\r\n  function BuildBlankForm() { \r\n    const questions = GetCollections().find( c => c.accessor==='questions'); \r\n    if(!questions) \r\n      return [] as IAnswer[]; \r\n    const _answers = questions.entries.map(q=> { \r\n      return {_id:'', answer:-1, pid:patientProfile._id, qid:q._id} as IAnswer; \r\n    }); \r\n    console.log(_answers); \r\n    setAnswers(_answers); \r\n  }\r\n\r\n  useEffect(() => { \r\n    GetQuestionnaire(); \r\n  }, []); \r\n\r\n  return <div> \r\n    <FeedBack/> \r\n  </div> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx",[],{"ruleId":"332","replacedBy":"333"},{"ruleId":"334","replacedBy":"335"},{"ruleId":"336","severity":1,"message":"337","line":1,"column":16,"nodeType":"338","messageId":"339","endLine":1,"endColumn":24},{"ruleId":"336","severity":1,"message":"340","line":1,"column":26,"nodeType":"338","messageId":"339","endLine":1,"endColumn":35},{"ruleId":"336","severity":1,"message":"341","line":1,"column":37,"nodeType":"338","messageId":"339","endLine":1,"endColumn":43},{"ruleId":"336","severity":1,"message":"342","line":3,"column":9,"nodeType":"338","messageId":"339","endLine":3,"endColumn":16},{"ruleId":"336","severity":1,"message":"343","line":4,"column":9,"nodeType":"338","messageId":"339","endLine":4,"endColumn":14},{"ruleId":"336","severity":1,"message":"344","line":6,"column":9,"nodeType":"338","messageId":"339","endLine":6,"endColumn":19},{"ruleId":"336","severity":1,"message":"345","line":7,"column":9,"nodeType":"338","messageId":"339","endLine":7,"endColumn":19},{"ruleId":"336","severity":1,"message":"346","line":7,"column":21,"nodeType":"338","messageId":"339","endLine":7,"endColumn":32},{"ruleId":"347","severity":1,"message":"348","line":22,"column":6,"nodeType":"349","endLine":22,"endColumn":8,"suggestions":"350"},{"ruleId":"332","replacedBy":"333"},{"ruleId":"334","replacedBy":"335"},{"ruleId":"332","replacedBy":"351"},{"ruleId":"334","replacedBy":"352"},{"ruleId":"353","severity":1,"message":"354","line":65,"column":37,"nodeType":"355","messageId":"356","endLine":65,"endColumn":47},{"ruleId":"357","severity":1,"message":"358","line":4,"column":9,"nodeType":"338","messageId":"339","endLine":4,"endColumn":15},{"ruleId":"359","severity":1,"message":"360","line":34,"column":22,"nodeType":"361","messageId":"362","endLine":34,"endColumn":24},{"ruleId":"359","severity":1,"message":"360","line":34,"column":47,"nodeType":"361","messageId":"362","endLine":34,"endColumn":49},{"ruleId":"357","severity":1,"message":"363","line":1,"column":16,"nodeType":"338","messageId":"339","endLine":1,"endColumn":26},{"ruleId":"359","severity":1,"message":"360","line":28,"column":20,"nodeType":"361","messageId":"362","endLine":28,"endColumn":22},{"ruleId":"359","severity":1,"message":"360","line":28,"column":36,"nodeType":"361","messageId":"362","endLine":28,"endColumn":38},{"ruleId":"364","severity":1,"message":"365","line":14,"column":40,"nodeType":"338","messageId":"366","endLine":14,"endColumn":51},{"ruleId":"347","severity":1,"message":"367","line":65,"column":34,"nodeType":"349","endLine":65,"endColumn":36,"suggestions":"368"},{"ruleId":"347","severity":1,"message":"369","line":89,"column":6,"nodeType":"349","endLine":89,"endColumn":24,"suggestions":"370"},{"ruleId":"332","replacedBy":"371"},{"ruleId":"334","replacedBy":"372"},{"ruleId":"332","replacedBy":"373"},{"ruleId":"334","replacedBy":"374"},{"ruleId":"357","severity":1,"message":"375","line":3,"column":43,"nodeType":"338","messageId":"339","endLine":3,"endColumn":51},{"ruleId":"357","severity":1,"message":"376","line":2,"column":15,"nodeType":"338","messageId":"339","endLine":2,"endColumn":26},{"ruleId":"357","severity":1,"message":"377","line":2,"column":38,"nodeType":"338","messageId":"339","endLine":2,"endColumn":45},{"ruleId":"357","severity":1,"message":"378","line":2,"column":63,"nodeType":"338","messageId":"339","endLine":2,"endColumn":75},{"ruleId":"357","severity":1,"message":"379","line":2,"column":77,"nodeType":"338","messageId":"339","endLine":2,"endColumn":89},{"ruleId":"347","severity":1,"message":"380","line":44,"column":6,"nodeType":"349","endLine":44,"endColumn":37,"suggestions":"381"},{"ruleId":"347","severity":1,"message":"382","line":44,"column":7,"nodeType":"383","endLine":44,"endColumn":36},{"ruleId":"332","replacedBy":"384"},{"ruleId":"334","replacedBy":"385"},{"ruleId":"357","severity":1,"message":"386","line":1,"column":21,"nodeType":"338","messageId":"339","endLine":1,"endColumn":28},{"ruleId":"357","severity":1,"message":"387","line":16,"column":16,"nodeType":"338","messageId":"339","endLine":16,"endColumn":23},{"ruleId":"347","severity":1,"message":"388","line":24,"column":6,"nodeType":"349","endLine":24,"endColumn":35,"suggestions":"389"},{"ruleId":"347","severity":1,"message":"382","line":24,"column":7,"nodeType":"383","endLine":24,"endColumn":34},{"ruleId":"357","severity":1,"message":"390","line":27,"column":9,"nodeType":"338","messageId":"339","endLine":27,"endColumn":19},{"ruleId":"347","severity":1,"message":"391","line":39,"column":6,"nodeType":"349","endLine":39,"endColumn":29,"suggestions":"392"},{"ruleId":"347","severity":1,"message":"382","line":39,"column":7,"nodeType":"383","endLine":39,"endColumn":28},{"ruleId":"347","severity":1,"message":"393","line":12,"column":6,"nodeType":"349","endLine":12,"endColumn":34,"suggestions":"394"},{"ruleId":"347","severity":1,"message":"382","line":12,"column":7,"nodeType":"383","endLine":12,"endColumn":33},{"ruleId":"357","severity":1,"message":"363","line":1,"column":16,"nodeType":"338","messageId":"339","endLine":1,"endColumn":26},{"ruleId":"357","severity":1,"message":"340","line":1,"column":28,"nodeType":"338","messageId":"339","endLine":1,"endColumn":37},{"ruleId":"357","severity":1,"message":"395","line":2,"column":56,"nodeType":"338","messageId":"339","endLine":2,"endColumn":66},{"ruleId":"347","severity":1,"message":"396","line":24,"column":6,"nodeType":"349","endLine":24,"endColumn":13,"suggestions":"397"},{"ruleId":"357","severity":1,"message":"398","line":23,"column":31,"nodeType":"338","messageId":"339","endLine":23,"endColumn":35},{"ruleId":"357","severity":1,"message":"399","line":4,"column":20,"nodeType":"338","messageId":"339","endLine":4,"endColumn":30},{"ruleId":"357","severity":1,"message":"400","line":4,"column":45,"nodeType":"338","messageId":"339","endLine":4,"endColumn":56},{"ruleId":"401","severity":1,"message":"402","line":49,"column":10,"nodeType":"338","messageId":"403","endLine":49,"endColumn":17},{"ruleId":"357","severity":1,"message":"341","line":1,"column":38,"nodeType":"338","messageId":"339","endLine":1,"endColumn":44},{"ruleId":"357","severity":1,"message":"404","line":6,"column":15,"nodeType":"338","messageId":"339","endLine":6,"endColumn":26},{"ruleId":"357","severity":1,"message":"405","line":7,"column":29,"nodeType":"338","messageId":"339","endLine":7,"endColumn":39},{"ruleId":"357","severity":1,"message":"406","line":8,"column":9,"nodeType":"338","messageId":"339","endLine":8,"endColumn":15},{"ruleId":"357","severity":1,"message":"407","line":3,"column":21,"nodeType":"338","messageId":"339","endLine":3,"endColumn":32},{"ruleId":"357","severity":1,"message":"376","line":6,"column":15,"nodeType":"338","messageId":"339","endLine":6,"endColumn":26},{"ruleId":"357","severity":1,"message":"408","line":33,"column":10,"nodeType":"338","messageId":"339","endLine":33,"endColumn":24},{"ruleId":"357","severity":1,"message":"409","line":34,"column":19,"nodeType":"338","messageId":"339","endLine":34,"endColumn":29},{"ruleId":"357","severity":1,"message":"409","line":54,"column":19,"nodeType":"338","messageId":"339","endLine":54,"endColumn":29},{"ruleId":"357","severity":1,"message":"410","line":58,"column":10,"nodeType":"338","messageId":"339","endLine":58,"endColumn":19},{"ruleId":"357","severity":1,"message":"411","line":58,"column":21,"nodeType":"338","messageId":"339","endLine":58,"endColumn":32},{"ruleId":"357","severity":1,"message":"412","line":59,"column":10,"nodeType":"338","messageId":"339","endLine":59,"endColumn":21},{"ruleId":"357","severity":1,"message":"409","line":69,"column":19,"nodeType":"338","messageId":"339","endLine":69,"endColumn":29},{"ruleId":"357","severity":1,"message":"410","line":73,"column":10,"nodeType":"338","messageId":"339","endLine":73,"endColumn":19},{"ruleId":"357","severity":1,"message":"337","line":1,"column":39,"nodeType":"338","messageId":"339","endLine":1,"endColumn":47},{"ruleId":"347","severity":1,"message":"413","line":20,"column":6,"nodeType":"349","endLine":20,"endColumn":8,"suggestions":"414"},{"ruleId":"347","severity":1,"message":"415","line":33,"column":6,"nodeType":"349","endLine":33,"endColumn":8,"suggestions":"416"},"no-native-reassign",["417"],"no-negated-in-lhs",["418"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'Patient' is defined but never used.","'Input' is defined but never used.","'TestSelect' is defined but never used.","'TestReader' is defined but never used.","'TestEditors' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Collections'. Either include it or remove the dependency array.","ArrayExpression",["419"],["417"],["418"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","@typescript-eslint/no-unused-vars","'IsNull' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'useContext' is defined but never used.","@typescript-eslint/no-use-before-define","'Collections' was used before it was defined.","noUseBeforeDefine","React Hook useMemo has a missing dependency: 'dao'. Either include it or remove the dependency array.",["420"],"React Hook useEffect has a missing dependency: 'GetEntry'. Either include it or remove the dependency array.",["421"],["417"],["418"],["417"],["418"],"'SetWidth' is defined but never used.","'ArrxContext' is defined but never used.","'Element' is defined but never used.","'ElementIndex' is defined but never used.","'ElementValue' is defined but never used.","React Hook useEffect has missing dependencies: 'index' and 'values'. Either include them or remove the dependency array.",["422"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression",["417"],["418"],"'useMemo' is defined but never used.","'setData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.value'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'props.value', you can also switch to useReducer instead of useState and read 'props.value' in the reducer.",["423"],"'hasChanged' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data', 'ifield.accessor', 'isEdit', and 'value'. Either include them or remove the dependency array.",["424"],"React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["425"],"'DaoContext' is defined but never used.","React Hook useEffect has a missing dependency: '_value'. Either include it or remove the dependency array.",["426"],"'data' is assigned a value but never used.","'RowContext' is defined but never used.","'CellContext' is defined but never used.","@typescript-eslint/no-redeclare","'CrudBtn' is already defined.","redeclared","'ObjxContext' is defined but never used.","'FieldValue' is defined but never used.","'Reader' is defined but never used.","'EActionType' is defined but never used.","'GetCollections' is assigned a value but never used.","'setAnswers' is assigned a value but never used.","'formField' is assigned a value but never used.","'labelsField' is assigned a value but never used.","'titlesField' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetPatient'. Either include it or remove the dependency array.",["427"],"React Hook useEffect has a missing dependency: 'GetQuestionnaire'. Either include it or remove the dependency array.",["428"],"no-global-assign","no-unsafe-negation",{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},"Update the dependencies array to be: [Collections]",{"range":"449","text":"450"},"Update the dependencies array to be: [dao]",{"range":"451","text":"452"},"Update the dependencies array to be: [GetEntry, activeCollection]",{"range":"453","text":"454"},"Update the dependencies array to be: [index, values]",{"range":"455","text":"456"},"Update the dependencies array to be: [props.value]",{"range":"457","text":"458"},"Update the dependencies array to be: [data, ifield.accessor, isEdit, value]",{"range":"459","text":"460"},"Update the dependencies array to be: [callback]",{"range":"461","text":"462"},"Update the dependencies array to be: [_value, value]",{"range":"463","text":"464"},"Update the dependencies array to be: [GetPatient]",{"range":"465","text":"466"},"Update the dependencies array to be: [GetQuestionnaire]",{"range":"467","text":"468"},[909,911],"[Collections]",[2107,2109],"[dao]",[3158,3176],"[GetEntry, activeCollection]",[1560,1591],"[index, values]",[639,668],"[props.value]",[1108,1131],"[data, ifield.accessor, isEdit, value]",[304,332],"[callback]",[762,769],"[_value, value]",[645,647],"[GetPatient]",[1173,1175],"[GetQuestionnaire]"]