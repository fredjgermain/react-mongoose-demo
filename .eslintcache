[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback.component.tsx":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_rendering.ts":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\valuerenderer.component.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\crudbtn.component.tsx":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\cellrenderer.component.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\collectionselector.component.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admintablr.component.tsx":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\paging.component.tsx":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\linecrud.component.tsx":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\identitication.component.tsx":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx":"57"},{"size":600,"mtime":1609529670659,"results":"58","hashOfConfig":"59"},{"size":567,"mtime":1611534358259,"results":"60","hashOfConfig":"59"},{"size":362,"mtime":499162500000,"results":"61","hashOfConfig":"59"},{"size":225,"mtime":1609475507334,"results":"62","hashOfConfig":"59"},{"size":1056,"mtime":1611357381302,"results":"63","hashOfConfig":"59"},{"size":117,"mtime":1609476049273,"results":"64","hashOfConfig":"59"},{"size":496,"mtime":1609883323259,"results":"65","hashOfConfig":"59"},{"size":1433,"mtime":1611265724512,"results":"66","hashOfConfig":"59"},{"size":3330,"mtime":1611094858686,"results":"67","hashOfConfig":"59"},{"size":2003,"mtime":1611094858767,"results":"68","hashOfConfig":"59"},{"size":2205,"mtime":1611094858599,"results":"69","hashOfConfig":"59"},{"size":2309,"mtime":1611354518934,"results":"70","hashOfConfig":"59"},{"size":1780,"mtime":1611276492206,"results":"71","hashOfConfig":"59"},{"size":2274,"mtime":1611360455578,"results":"72","hashOfConfig":"59"},{"size":1473,"mtime":1611094858490,"results":"73","hashOfConfig":"59"},{"size":462,"mtime":1611094858513,"results":"74","hashOfConfig":"59"},{"size":1042,"mtime":1611094858511,"results":"75","hashOfConfig":"59"},{"size":982,"mtime":1611094858504,"results":"76","hashOfConfig":"59"},{"size":6897,"mtime":1611355540831,"results":"77","hashOfConfig":"59"},{"size":3768,"mtime":1611181708970,"results":"78","hashOfConfig":"59"},{"size":425,"mtime":1611094858586,"results":"79","hashOfConfig":"59"},{"size":1231,"mtime":1611276763976,"results":"80","hashOfConfig":"59"},{"size":313,"mtime":1611186041859,"results":"81","hashOfConfig":"59"},{"size":336,"mtime":1611094858220,"results":"82","hashOfConfig":"59"},{"size":775,"mtime":1611094858280,"results":"83","hashOfConfig":"59"},{"size":112,"mtime":1611094858253,"results":"84","hashOfConfig":"59"},{"size":1301,"mtime":1611094858561,"results":"85","hashOfConfig":"59"},{"size":688,"mtime":1611105433287,"results":"86","hashOfConfig":"59"},{"size":1330,"mtime":1611105734495,"results":"87","hashOfConfig":"59"},{"size":124,"mtime":1611105257047,"results":"88","hashOfConfig":"59"},{"size":233,"mtime":1611094858166,"results":"89","hashOfConfig":"59"},{"size":3111,"mtime":1611261423772,"results":"90","hashOfConfig":"59"},{"size":1241,"mtime":1611175973024,"results":"91","hashOfConfig":"59"},{"size":510,"mtime":1611452000844,"results":"92","hashOfConfig":"59"},{"size":1532,"mtime":1611265998385,"results":"93","hashOfConfig":"59"},{"size":2116,"mtime":1611102160553,"results":"94","hashOfConfig":"59"},{"size":943,"mtime":1611094858392,"results":"95","hashOfConfig":"59"},{"size":447,"mtime":1611094858232,"results":"96","hashOfConfig":"59"},{"size":292,"mtime":1611360883457,"results":"97","hashOfConfig":"59"},{"size":4285,"mtime":1611356030017,"results":"98","hashOfConfig":"59"},{"size":1373,"mtime":1611177659474,"results":"99","hashOfConfig":"59"},{"size":2544,"mtime":1611187421165,"results":"100","hashOfConfig":"59"},{"size":3134,"mtime":1611535927943,"results":"101","hashOfConfig":"59"},{"size":500,"mtime":1611182248863,"results":"102","hashOfConfig":"59"},{"size":1572,"mtime":1611357276578,"results":"103","hashOfConfig":"59"},{"size":107,"mtime":1611094858263,"results":"104","hashOfConfig":"59"},{"size":2751,"mtime":1611357393940,"results":"105","hashOfConfig":"59"},{"size":79,"mtime":1611192421523,"results":"106","hashOfConfig":"59"},{"size":338,"mtime":1611192348931,"results":"107","hashOfConfig":"59"},{"size":739,"mtime":1611357345252,"results":"108","hashOfConfig":"59"},{"size":1175,"mtime":1611535292106,"results":"109","hashOfConfig":"59"},{"size":1101,"mtime":1611358929436,"results":"110","hashOfConfig":"59"},{"size":3745,"mtime":1611363551097,"results":"111","hashOfConfig":"59"},{"size":231,"mtime":1611094858225,"results":"112","hashOfConfig":"59"},{"size":1927,"mtime":1611534878890,"results":"113","hashOfConfig":"59"},{"size":1598,"mtime":1611522375233,"results":"114","hashOfConfig":"59"},{"size":3429,"mtime":1611522023225,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"ke513i",{"filePath":"119","messages":"120","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"128"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"128"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"128"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"128"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"128"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"128"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"128"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"128"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"128"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"128"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"128"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"235","messages":"236","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"128"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"128"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"128"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["250","251"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",["252","253","254","255","256","257","258","259"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",["260"],"import React, {useEffect} from 'react'; \r\nimport {useDao, DaoContexter, ICrud, DataAccessObject} from '../../reusable/_dao'; \r\nimport {CrudMongoose} from '../../reusable/_mongooseparser'; \r\nimport {FeedBack} from '../../components/feedback.component'; \r\nimport {IsEmpty} from '../../reusable/_utils'; \r\n\r\nimport {CollectionSelector} from './collectionselector.component'; \r\nimport {AdminTablr} from './admintablr.component'; \r\n\r\nimport '../../css/table.css'; \r\n\r\nconst crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n\r\nexport function Admin() { \r\n  const UseDao = useDao( new DataAccessObject(crud as ICrud) ); \r\n  const {state, activeCollection, Collections} = UseDao; \r\n\r\n  useEffect(() => { \r\n    Collections(['questions','responses', 'forms', 'instructions', 'patients', 'answers']); \r\n  }, []); \r\n\r\n  return <DaoContexter {...{UseDao}} > \r\n    <h1>Admin</h1> \r\n    <FeedBack/> \r\n    {state.ready && state.success && <CollectionSelector /> } \r\n    {!IsEmpty(activeCollection) && <AdminTablr/>} \r\n  </DaoContexter> \r\n}\r\n\r\n\r\n",["261","262"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx",[],["263","264"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",["265"],"import React from 'react'; \r\nimport {IsNull} from '../_utils'; \r\n\r\n// IEvent #####################################\r\nexport interface IEvent extends React.ChangeEvent<HTMLInputElement> { \r\n  code?:any, \r\n  [key:string]:any, \r\n} \r\n\r\nexport function OnEnter(event:any, Func:any) { \r\n  if(IsPressEnter( (event as IEvent).code ) ) \r\n    Func(); \r\n} \r\n\r\n\r\n\r\n// Get Value From Input -------------------------\r\nexport function GetValueFromInput(event:IEvent) { \r\n  const target = event.target; \r\n  const type = target.type; \r\n  if(type === 'number') \r\n    return target.valueAsNumber as number; \r\n  if(type === 'date') \r\n    return target.valueAsDate; \r\n  if(type === 'checkbox') \r\n    return target.checked as boolean; \r\n  return target.value; \r\n} \r\n\r\n\r\n// GetInputType ---------------------------------\r\nexport function GetInputType(type:string) { \r\n  if(type === 'number') \r\n    return 'number'; \r\n  if(type === 'boolean') \r\n    return 'checkbox'; \r\n  if(type === 'string') \r\n    return 'text'; \r\n  return 'text'; \r\n}\r\n\r\n\r\n// If Code is pressEnter\r\nexport function IsPressEnter(code:string = ''):boolean { \r\n  return code === 'Enter' || code === 'NumpadEnter'; \r\n} \r\n\r\n\r\n// TAG UTILS ###################################\r\nexport function SetWidth(value:number):{width:any} {\r\n  return {width:`${SetSize(value)+2}ch`}; \r\n}\r\n\r\nexport function SetSize(value:any):number { \r\n  const w = String(value).length; \r\n  return w < 2 ? 2 : w; \r\n} \r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["266"],"export interface IMongooseCollection { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    enum?: any[]; \r\n    abbrev?: boolean; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\n//async function ParseFields() \r\nexport function ParseField(field:IMongooseField):IField { \r\n  \r\n  const {path, instance, options, $embeddedSchemaType} = field; \r\n  /*if(path==='fId')\r\n    console.log(field); \r\n\r\n  if(path==='titles')\r\n    console.log(field); */\r\n\r\n  const ifield:IField = {} as IField; \r\n\r\n  ifield.accessor = path ?? ''; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.options = options ?? {}; \r\n  ifield.type = options?.ref ?? $embeddedSchemaType?.instance ?? field.instance.toLowerCase(); \r\n  ifield.isMixed = instance.toLowerCase() === 'mixed'; \r\n  ifield.isEnum = !!options?.enum; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = !!options?.ref; \r\n  ifield.isAbbrev = !!options?.abbrev; \r\n\r\n  ifield.enums = options.enum ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, ifield.options); \r\n  \r\n  //ifield.validators = \r\n  return ifield; \r\n} \r\n\r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["267","268","269"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull, GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield) => { \r\n      return <Cell key={ifield.accessor} {...{ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const data = datas[row]; \r\n  const value = IsEmpty(data) ? GetDefaultValueFromIField(ifield): datas[row][ifield.accessor]; \r\n  const context = {value, row, ifield} as ICellContext; \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["270","271","272"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts",["273"],"import {IsEmpty} from '../_utils'; \r\n\r\nexport interface ICrud { \r\n  Collection:(accessor:string) => Promise<IResponse>; \r\n  Create: (accessor:string, toCreate?:IEntry|IEntry[]) => Promise<IResponse>; \r\n  Read: (accessor:string, id?:string[]) => Promise<IResponse>; \r\n  Update: (accessor:string, toUpdate:IEntry|IEntry[]) => Promise<IResponse>; \r\n  Delete: (accessor:string, toDelete?:IEntry|IEntry[]) => Promise<IResponse>; \r\n} \r\n\r\n// DataAcessObject ==============================\r\nexport class DataAccessObject { \r\n  public collections:Collections = new Collections(); \r\n\r\n  private crud:ICrud = {} as ICrud; \r\n  \r\n  constructor(crud:ICrud) { \r\n    this.crud = crud; \r\n  } \r\n\r\n  /*public GetCollections(accessors?:string[]):ICollection[] { \r\n    return this.collections.GetCollections(accessors); \r\n  } */\r\n\r\n  // COLLECTION .................................\r\n  public async Collections(accessors:string[]):Promise<IResponse[]> { \r\n    const responses = [] as IResponse[]; \r\n    for(let i=0; i<accessors.length; i++) { \r\n      const response = await this.Collection(accessors[i]); \r\n      responses.push(response); \r\n    } \r\n    return responses; \r\n  } \r\n\r\n  public async Collection(accessors:string):Promise<IResponse> { \r\n    const response = await this.crud.Collection(accessors); \r\n    if(response.success) \r\n      this.collections.collections.push(response.data); \r\n    return response; \r\n  }\r\n\r\n  // CREATE .....................................  \r\n  public async Create(accessor:string, entry:IEntry):Promise<IResponse> { \r\n    const [response] = (await this.crud.Create(accessor, entry)).data as IResponse[]; \r\n    if(response.success) { \r\n      console.log(response.data); \r\n      this.collections.Create(accessor, response.data); \r\n    }\r\n    return response; \r\n  } \r\n\r\n  // READ .......................................\r\n  public async Read(accessor:string, entry?:string[]):Promise<IEntry[]> { \r\n    //const results = (await crud.Read(accessor, [entry])).data as IResponse[]; \r\n    //const selectedCollection = this.GetCollection(accessor); \r\n    /*if(selectedCollection) \r\n      selectedCollection.Create(response.data); */ \r\n    return [] as IEntry[]; \r\n  } \r\n\r\n  // UPDATE .....................................\r\n  public async Update(accessor:string, entry:IEntry):Promise<IResponse> { \r\n    const [response] = (await this.crud.Update(accessor, [entry])).data as IResponse[]; \r\n    if(response.success) {\r\n      console.log(response.data); \r\n      this.collections.Update(accessor, response.data); \r\n    }\r\n    return response; \r\n  } \r\n\r\n  // DELETE .....................................\r\n  public async Delete(accessor:string, entry?:IEntry):Promise<IResponse> { \r\n    const [response] = (await this.crud.Delete(accessor, entry)).data as IResponse[]; \r\n    if(response.success) {\r\n      console.log(response.data); \r\n      this.collections.Delete(accessor, response.data); \r\n    }\r\n    return response; \r\n  } \r\n\r\n  // GET FOREIGN ELEMENTS -----------------------------\r\n  public GetForeignElements(ifield:IField) \r\n    : {foreignCollection:ICollection|undefined, abbrevField:IField|undefined} \r\n  { \r\n    return this.collections.GetForeignElements(ifield); \r\n  } \r\n\r\n  public GetForeignOptions(ifield:IField) : IOption[] { \r\n    const {foreignCollection, abbrevField} = this.GetForeignElements(ifield);\r\n    if(!foreignCollection || !abbrevField)\r\n      return [] as IOption[]; \r\n    return foreignCollection.entries?.map( e => { \r\n      return {value:e._id, label:e[abbrevField.accessor]} as IOption; \r\n    }); \r\n  } \r\n\r\n  public GetForeignValues(ifield:IField, ids:string[]):any[] { \r\n    const {foreignCollection, abbrevField} = this.GetForeignElements(ifield); \r\n    if(!ids || IsEmpty(ids)) \r\n      return []; \r\n    if(!foreignCollection || !abbrevField) \r\n      return [] as IOption[]; \r\n    return foreignCollection.entries\r\n      ?.filter(e => {\r\n        /*if(ifield.accessor === 'responseType')\r\n          console.log([ifield.accessor, ids]);*/\r\n        /*try{\r\n          ids.includes(e._id)\r\n        }catch(e){\r\n          \r\n        }*/\r\n        return ids.includes(e._id)\r\n      } )\r\n      ?.map( e => e[abbrevField.accessor] );\r\n  } \r\n} \r\n\r\n\r\n\r\n\r\n// Collections ===================================\r\nclass Collections { \r\n  public collections:ICollection[] = [] as ICollection[]; \r\n\r\n  public Create(accessor:string, entry:IEntry) { \r\n    const collection = new Collection(this.collections.find(c=> c.accessor===accessor)); \r\n    return collection.Create(entry);  \r\n  } \r\n\r\n  public Update(accessor:string, entry:IEntry) { \r\n    const collection = new Collection(this.collections.find(c=> c.accessor===accessor)); \r\n    return collection.Update(entry); \r\n  } \r\n\r\n  public Delete(accessor:string, entry:IEntry) {\r\n    const collection = new Collection(this.collections.find(c=> c.accessor===accessor)); \r\n    return collection.Delete(entry); \r\n  }\r\n  \r\n  // GET FOREIGN INFO -----------------------------\r\n  public GetForeignElements(ifield:IField) \r\n      :{foreignCollection:ICollection|undefined, abbrevField:IField|undefined} { \r\n    const foreignCollection = this.collections.find(c => c.accessor === ifield.type); \r\n    const abbrevField = new Collection(foreignCollection).GetAbbrevField(); \r\n    return {foreignCollection, abbrevField}; \r\n  }\r\n}\r\n\r\n\r\n\r\n// COLLECTION ===================================\r\nclass Collection { \r\n  public collection:ICollection|undefined; \r\n\r\n  constructor(collection:ICollection|undefined) { \r\n    if(collection) \r\n      this.collection = collection; \r\n  }\r\n\r\n  // Create -------------------------------------\r\n  public Create(entry:IEntry) { \r\n    if(!this.collection?.entries) \r\n      return false; \r\n    this.collection.entries.push(entry); \r\n    return true;\r\n  }\r\n\r\n  // Read ---------------------------------------\r\n  public Read(ids?:string[]) { \r\n    if(!this.collection?.entries) \r\n      return [];\r\n    if(IsEmpty(ids) ) \r\n      return this.collection.entries; \r\n    return this.collection.entries.filter(e => ids?.includes(e._id) ); \r\n  }\r\n\r\n  // Update \r\n  public Update(entry:IEntry) { \r\n    if(!this.collection?.entries) \r\n      return false; \r\n    const index = this.collection.entries?.findIndex( e => e._id === entry._id ); \r\n    if(index < 0) \r\n      return false; \r\n    this.collection.entries[index] = {...entry}; \r\n    return true; \r\n  }\r\n\r\n  // Delete\r\n  public Delete(entry:IEntry) {\r\n    if(!this.collection?.entries) \r\n      return false;\r\n    const index = this.collection?.entries.findIndex( e => e._id === entry._id ); \r\n    if(index < 0) \r\n      return false; \r\n    this.collection?.entries.splice(index, 1); \r\n    return true; \r\n  }\r\n\r\n  public GetAbbrevField():IField|undefined { \r\n    const abbrevField = this.collection?.ifields.find( f => f.isAbbrev) \r\n      ?? this.collection?.ifields.find( f => (f.type === 'string' || f.type === 'number') && !f.isArray); \r\n    return abbrevField; \r\n  } \r\n}\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts",["274","275"],"import {useEffect, useMemo, useState} from 'react'; \r\nimport {useLoader, IState} from '../_useloader'; \r\nimport {DataAccessObject as IDao} from './dao.class'; \r\nimport {IsEmpty, GetDefaultValueFromIField} from '../_utils'; \r\n\r\n\r\n\r\nexport enum EActionType { \r\n  CREATE = 'create', \r\n  READ = 'read', \r\n  UPDATE = 'update', \r\n  DELETE = 'delete', \r\n}\r\n\r\n\r\nexport interface IUseDao{ \r\n  state:IState; \r\n\r\n  // Active Collection\r\n  activeCollection:ICollection; \r\n  setActiveCollection:React.Dispatch<ICollection>; \r\n\r\n  // Active Entry. \r\n  activeEntry:IEntry; \r\n  setActiveEntry:React.Dispatch<React.SetStateAction<IEntry>>; \r\n\r\n  // Active mode. \r\n  activeMode:EActionType; \r\n  SetActiveMode:(mode?:EActionType) => void; \r\n\r\n  // Get Entry id or return default entry\r\n  GetEntry:(id?:string) => IEntry; \r\n\r\n  // return local collections. \r\n  collections:() => ICollection[]; \r\n\r\n  // load remote collections. \r\n  Collections:(accessors:string[]) => Promise<void>; \r\n\r\n  // Crud functionalities. \r\n  Create: (accessor:string, toCreate:IEntry) => Promise<void>; \r\n  Read: (accessor:string, id?:string[]) => Promise<void>; \r\n  Update: (accessor:string, toUpdate:IEntry) => Promise<void>; \r\n  Delete: (accessor:string, toDelete?:IEntry) => Promise<void>; \r\n\r\n  // Get foreign elements, options and values. \r\n  GetForeignElements: (ifield:IField) => {foreignCollection:ICollection|undefined, abbrevField:IField|undefined}, \r\n  GetForeignOptions: (ifield:IField) => IOption[]; \r\n  GetForeignValues: (ifield:IField, value:any[]) => any[]; \r\n} \r\n\r\n\r\n//EActionType.\r\n\r\n\r\n// USE DAO ======================================\r\nexport function useDao(dao:IDao):IUseDao { \r\n  // Hooks \r\n  const Dao = useMemo(() => dao, []); \r\n  const {state, Load} = useLoader(); \r\n  const [activeCollection, setActiveCollection] = useState({} as ICollection); \r\n  const [activeEntry, setActiveEntry] = useState(InitActiveEntry()); \r\n  const [activeMode, setActiveMode] = useState(EActionType.READ); \r\n\r\n  const collections = () => Dao.collections.collections; \r\n  const Collections = async (accessors:string[]) => Load(() => Dao.Collections(accessors)); \r\n\r\n  // Crud functionalities\r\n  const Create = async (accessor:string, toCreate:IEntry) => Load(() => Dao.Create(accessor, toCreate)); \r\n  const Read = async (accessor:string, ids?:string[]) => Load(() => Dao.Read(accessor, ids)); \r\n  const Update = async (accessor:string, toUpdate:IEntry) => Load(() => Dao.Update(accessor, toUpdate)); \r\n  const Delete = async (accessor:string, toDelete?:IEntry) => Load(() => Dao.Delete(accessor, toDelete)); \r\n\r\n  const GetForeignElements = (ifield:IField) => Dao.GetForeignElements(ifield); \r\n  const GetForeignOptions = (ifield:IField) => Dao.GetForeignOptions(ifield); \r\n  const GetForeignValues = (ifield:IField, ids:any[]) => Dao.GetForeignValues(ifield, ids); \r\n\r\n  useEffect(() => { \r\n    setActiveEntry(InitActiveEntry()); \r\n    SetActiveMode(); \r\n  }, [activeCollection]); \r\n\r\n  function InitActiveEntry():IEntry { \r\n    if(IsEmpty(activeCollection)) \r\n      return {} as IEntry; \r\n    const {ifields} = activeCollection; \r\n    let entry = {} as IEntry; \r\n    ifields?.forEach( f => { \r\n      entry[f.accessor] = GetDefaultValueFromIField(f); \r\n    }); \r\n    return entry; \r\n  }\r\n\r\n  function GetEntry(id?:string) { \r\n    return activeCollection.entries.find( e => e._id === id) ?? InitActiveEntry(); \r\n  } \r\n\r\n  function SetActiveMode(mode?:EActionType) { \r\n    setActiveMode(mode?? EActionType.READ); \r\n  } \r\n\r\n  return {state, \r\n    activeCollection, setActiveCollection, \r\n    activeEntry, setActiveEntry, \r\n    activeMode, SetActiveMode, \r\n    GetEntry, \r\n    collections, Collections, \r\n    Create, Read, Update, Delete, \r\n    GetForeignElements, GetForeignOptions, GetForeignValues}; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback.component.tsx",["276"],"import React, {useContext} from 'react'; \r\nimport {DaoContext} from '../reusable/_dao'; \r\nimport {Arrx} from '../reusable/_arrx'; \r\n\r\nimport '../css/feedback.css'; \r\n\r\n// Feedback =====================================\r\nexport function FeedBack() { \r\n  const {state} = useContext(DaoContext); \r\n\r\n  return <div> \r\n    {!state.ready && <span>LOADING ... </span>} \r\n    {state.ready && <span>Ready </span>} \r\n    {state.ready && state.success && <CrudFeedBack />}\r\n    {state.ready && !state.success && 'an errors occured'} \r\n  </div> \r\n} \r\n\r\nfunction CrudFeedBack() { \r\n  const {state} = useContext(DaoContext); \r\n  // assumes state is ready and successful\r\n  const {actionType, success, data, err} = state.response as IResponse; \r\n  \r\n  const successMsg:any = { \r\n    create:'Creation succeed', \r\n    update:'Update succeed', \r\n    delete:'Deletion succeed', \r\n  } \r\n  const errorMsg:any = { \r\n    create:'Creation failed ', \r\n    update:'Update failed', \r\n    delete:'Deletion failed', \r\n  } \r\n\r\n  const className = success ? 'success' : 'failure'; \r\n\r\n  return <div className={className}> \r\n    <div>{success ? successMsg[actionType] : errorMsg[actionType]}</div> \r\n    {!success && <Arrx {...{values:(err)}} />} \r\n    </div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx",[],["277","278"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts",[],["279","280"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx",["281"],"import React from 'react'; \r\n//import CSS from ''\r\nimport {IEvent, IsNull, OnEnter, SetSize, SetWidth, \r\n  GetDefaultValueByType, GetTypeByValue, GetInputType, GetValueFromInput} from '../../_utils'; \r\n\r\n\r\n// INPUT ========================================\r\nexport interface IInput extends React.HTMLAttributes<HTMLInputElement> { \r\n  value:any; \r\n  setValue:any; \r\n  type?:string; \r\n  defaultValue?:any; \r\n  inputType?:string; \r\n  onEnterUp?:() => void; \r\n  width?: number; \r\n  [key:string]:any; \r\n} \r\nexport function Input(\r\n  {\r\n    value, setValue, \r\n    type=GetTypeByValue(value??''), \r\n    defaultValue=GetDefaultValueByType(type??'string'), \r\n    inputType=GetInputType(type??''), \r\n    onEnterUp=() => {}, \r\n    ...props\r\n  }:IInput) \r\n{ \r\n  const onChange = (event:IEvent) => setValue(GetInputValueOrDefault(event, defaultValue)); \r\n  const Value = IsNull(value) ? defaultValue: value; \r\n  const onKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => OnEnter(event, onEnterUp); \r\n\r\n  const width = props.width ?? SetSize(value); \r\n  const style = {width: `${width+2}ch`}; \r\n\r\n  if(type === 'boolean') \r\n    return <input {...{type:inputType, checked:Value, onChange, onKeyUp,  ...props}} /> \r\n  return <input {...{type:inputType, value:Value, onChange, onKeyUp, ...props}} style={style} /> \r\n} \r\n\r\n\r\n// GetValue --------------------------------------\r\nfunction GetInputValueOrDefault (event:IEvent, defaultValue:any) { \r\n  const value = GetValueFromInput(event); \r\n  return IsNull(value) ? defaultValue: value; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx",["282","283","284","285","286","287"],"import React, { useContext, useEffect, useState } from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex, ElementValue} from '../../_arrx'; \r\nimport {Input} from '../../_input'; \r\nimport {IInputArray, IUseInputArray, useInputArray} from './inputarray.hook'; \r\n\r\n\r\nexport const InputArrayContext = React.createContext({} as IUseInputArray); \r\nexport function InputArray({...props}:React.PropsWithChildren<IInputArray>) { \r\n  const context = useInputArray(props); \r\n  const {values} = props; \r\n  \r\n  return <InputArrayContext.Provider value={context} > \r\n    <Arrx {...{values}} > \r\n      <Elements> \r\n        <UpdateElement/> <DeleteBtn/>\r\n        <br/> \r\n      </Elements> \r\n      <CreateElement/>\r\n    </Arrx> \r\n  </InputArrayContext.Provider> \r\n} \r\n\r\n\r\n// Create element =======================================\r\nfunction CreateElement() { \r\n  const {type, defaultValue, Create} = useContext(InputArrayContext); \r\n  const [value, setValue] = useState(defaultValue); \r\n\r\n  const onEnterUp = () => {\r\n    Create(value); \r\n    setValue(() => defaultValue); // reset input to defaultValue after creation. \r\n  }; \r\n  return <Input {...{value, setValue, defaultValue, type, onEnterUp}}  /> \r\n} \r\n\r\n// Update element =======================================\r\nfunction UpdateElement() { \r\n  const {values, type, defaultValue, Update} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n\r\n  const [value, setValue] = useState(values[index]); \r\n  useEffect(() => { \r\n    setValue(values[index]); \r\n  }, [JSON.stringify(values[index])]); \r\n\r\n  const onEnterUp = () => Update(index, value); \r\n  return <Input {...{value, setValue, type, defaultValue, onEnterUp}} />\r\n}\r\n\r\n// Delete Btn ===================================\r\nexport function DeleteBtn({children, ...props}:React.PropsWithChildren<React.ButtonHTMLAttributes<HTMLButtonElement>>) { \r\n  const {Delete} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  return <button onClick={() => Delete(index)} {...props}> \r\n    {!children ? 'x' : children} \r\n  </button> \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_rendering.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\valuerenderer.component.tsx",["288","289","290","291","292","293","294"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\crudbtn.component.tsx",["295"],"import React, {useContext} from 'react'; \r\nimport {RowContext, TablrContext} from '../../reusable/_tablr'; \r\nimport {DaoContext, EActionType} from '../../reusable/_dao'; \r\n\r\n\r\n\r\n// Create .......................................\r\nexport function CreateBtn() { \r\n  const {activeCollection:{accessor}, Create} = useContext(DaoContext); \r\n  const action = (entry:any) => Create(accessor, entry); \r\n\r\n  const mode = EActionType.CREATE; \r\n  const labels = {affirm:'Create', confirm:'Confirm creation', cancel:'Cancel creation'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Update .......................................\r\nexport function UpdateBtn() { \r\n  const {activeCollection:{accessor}, Update} = useContext(DaoContext);\r\n  const action = (entry:any) => Update(accessor, entry); \r\n\r\n  const mode = EActionType.UPDATE; \r\n  const labels = {affirm:'Update', confirm:'Confirm update', cancel:'Cancel update'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Delete .......................................\r\nexport function DeleteBtn() { \r\n  const {activeCollection:{accessor}, Delete} = useContext(DaoContext);\r\n  const action = (entry:any) => Delete(accessor, entry); \r\n\r\n  const mode = EActionType.DELETE; \r\n  const labels = {affirm:'Delete', confirm:'Confirm deletion', cancel:'Cancel deletion'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n\r\n\r\n// CRUD BTN =====================================\r\ninterface CrudBtn { \r\n  mode: EActionType; \r\n  labels:{ \r\n    affirm:string, \r\n    confirm:string, \r\n    cancel:string, \r\n  }; \r\n  action:(entry:any)=>Promise<void>; \r\n} \r\nfunction CrudBtn ({mode, labels, action}:CrudBtn) { \r\n  const {activeEntry, setActiveEntry, activeMode, GetEntry, SetActiveMode} = useContext(DaoContext); \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n  const id = datas[row] ? datas[row]._id: ''; \r\n\r\n  const isId = activeEntry._id === id; \r\n  const isMode = activeMode === mode; \r\n\r\n  const Affirm = () => { \r\n    setActiveEntry(GetEntry(id)); \r\n    SetActiveMode(mode); \r\n  }\r\n  const Cancel = () => {\r\n    setActiveEntry(GetEntry()); \r\n    SetActiveMode(); \r\n  }; \r\n  const Confirm = async () => { \r\n    await action(activeEntry); \r\n    Cancel(); \r\n  } \r\n  \r\n  return <span> \r\n    {isId && isMode && <button onClick={Confirm}>{labels.confirm}</button>} \r\n    {isId && isMode && <button onClick={Cancel}>{labels.cancel}</button>} \r\n    {(id ==='' || !isId) && !isMode && <button onClick={Affirm}>{labels.affirm}</button>} \r\n  </span> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\cellrenderer.component.tsx",["296","297","298","299","300"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\collectionselector.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admintablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx",["301","302"],"import {useEffect, useRef} from 'react'; \r\n\r\nexport function useUpdate(callback:() => void, changeling:any) { \r\n  const flagFirstRender = useRef(true); \r\n  \r\n  useEffect(() => { \r\n    if(flagFirstRender.current) { \r\n      flagFirstRender.current = false; \r\n      return; \r\n    } \r\n    callback(); \r\n  }, [JSON.stringify(changeling)]); \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\paging.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\linecrud.component.tsx",["303","304"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",["305","306","307"],"import React, {useEffect} from 'react'; \r\nimport {useDao, DaoContexter, ICrud, DataAccessObject} from '../../reusable/_dao'; \r\nimport {CrudMongoose} from '../../reusable/_mongooseparser'; \r\nimport {FeedBack} from '../../components/feedback.component'; \r\nimport {IsEmpty} from '../../reusable/_utils'; \r\n\r\nimport {RamqIdentification} from './identitication.component';\r\n\r\nconst crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n\r\nexport function Patient() {\r\n  const UseDao = useDao( new DataAccessObject(crud as ICrud) ); \r\n  const {state, activeCollection, setActiveCollection, Collections, collections} = UseDao; \r\n\r\n  async function GetPatient() { \r\n    await Collections(['patients']); \r\n    const collection = collections().find( c => c.accessor==='patients'); \r\n    if(collection) \r\n      setActiveCollection(collection); \r\n  } \r\n\r\n  useEffect(() => { \r\n    GetPatient(); \r\n  }, []); \r\n\r\n  return <DaoContexter {...{UseDao}} > \r\n    <h1>Patient identification</h1> \r\n    <FeedBack/> \r\n    {state.ready && state.success && <RamqIdentification/>} \r\n  </DaoContexter> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\identitication.component.tsx",["308","309","310","311"],"import React, {useContext, useState, useEffect} from 'react'; \r\nimport { Arrx } from '../../reusable/_arrx';\r\nimport {DaoContext} from '../../reusable/_dao'; \r\nimport {Input} from '../../reusable/_input'; \r\nimport {Objx, ObjxContext, Fields, Field, FieldContext, FieldLabel } from '../../reusable/_objx';\r\n//import { IsEmpty } from '../../reusable/_utils';\r\nimport {BuildDefaultRenderingFunc, IRenderers, IFieldToHandler} from '../../reusable/_rendering'; \r\nimport {useUpdate} from '../../reusable/_useupdate'; \r\n\r\n\r\n// RAMQ IDENTIFICATION ==========================\r\nexport function RamqIdentification() { \r\n  const {activeEntry, setActiveEntry, activeCollection} = useContext(DaoContext); \r\n  const {entries, ifields} = activeCollection; \r\n  const [value, setValue] = useState(''); \r\n  const [ided, setIded] = useState(false); \r\n\r\n  function IdentifyPatient(ramq:string) { \r\n    // test if Ramq respect RegEx \r\n    const found = entries.find( e => { \r\n      const e_ramq = (e['ramq'] as string);\r\n      return e_ramq.toLowerCase() === ramq.toLowerCase(); \r\n    }); \r\n    if(found) \r\n      setActiveEntry(found); \r\n    setIded(true); \r\n  } \r\n\r\n  const onEnterUp = () => { \r\n    IdentifyPatient(value); \r\n  }; \r\n  \r\n  return <div> \r\n    <Arrx {...{values:entries}} /> \r\n    <br/>\r\n    {!ided && <div> Ramq : <Input {...{value, setValue, onEnterUp}} /></div> } \r\n    {ided && <PatientProfile {...{ramq:value}}/> } \r\n  </div> \r\n} \r\n\r\n\r\n// PATIENT PROFILE ==============================\r\nfunction PatientProfile({ramq}:{ramq:string}) { \r\n  const {activeCollection, activeEntry, Create, Update, GetForeignElements, GetForeignOptions, GetForeignValues} = useContext(DaoContext); \r\n  const {ifields} = activeCollection; \r\n  const cols = ifields.filter(f=> f.label && f.accessor!=='ramq'); \r\n  const ramqField = ifields.find(f=>f.accessor==='ramq') as IField; \r\n  const renderers = BuildDefaultRenderingFunc(GetForeignElements, GetForeignOptions, GetForeignValues); \r\n\r\n  const value = {...activeEntry, ramq}; \r\n\r\n  return <div> \r\n    <div><Objx {...{value, ifields:cols}}/></div> \r\n    <Objx {...{value, ifields:cols}}> \r\n      <Field {...{ifield:ramqField}} /> \r\n      <Fields> \r\n        <FieldLabel/> <FieldRenderer {...{renderers}} /><br/> \r\n      </Fields> \r\n    </Objx> \r\n    {activeEntry._id ? \r\n      <button onClick={()=> Update(activeCollection.accessor, activeEntry)} >Update</button> : \r\n      <button onClick={()=> Create(activeCollection.accessor, activeEntry)} >Create</button> }\r\n  </div> \r\n} \r\n\r\n\r\n// FIELD RENDERER ===============================\r\nexport function FieldRenderer ({renderers}:{renderers:IRenderers}) { \r\n  const {activeEntry} = useContext(DaoContext); \r\n  const {ifield} = useContext(FieldContext); \r\n  const value = activeEntry[ifield.accessor]; \r\n\r\n  const handler = `${IFieldToHandler(ifield)}${'Edit'}`; \r\n  const renderer = (renderers[handler] ?? renderers['Default'])(ifield); \r\n  return <ValueRenderer {...{value, ifield, renderer}} /> \r\n} \r\n\r\n\r\n// Value Renderer =================================\r\nfunction ValueRenderer({...props}:{value:any, ifield:IField, renderer:(value: any, setValue: any) => JSX.Element}) { \r\n  const {setActiveEntry} = useContext(DaoContext); \r\n  const ifield = props.ifield; \r\n  const [value, setValue] = useState(props.value); \r\n\r\n  // synchronize hook with \"parent value\". \r\n  useEffect(() => { \r\n    if(props.value !== value) \r\n      setValue(props.value) \r\n  }, [props.value]); \r\n\r\n  // synchronize activeEntry with any changes made to value. \r\n  useUpdate(() => {\r\n    setActiveEntry((prev:any) => { \r\n      const copy = {...prev}; \r\n      copy[ifield.accessor] = value; \r\n      return copy; \r\n    })\r\n  }, value); \r\n  \r\n  return <span>{props.renderer(value, setValue)}</span> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx",["312"],"import React, { useEffect, useState } from 'react'; \r\nimport {Input, InputArray, Select} from '../../_input'; \r\nimport {GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\nimport {useUpdate} from '../../_useupdate'; \r\n\r\n\r\n\r\n// Reader =======================================\r\ninterface IEditor{ \r\n  ifield:IField; \r\n  value:any; \r\n  setValue:React.Dispatch<any>; \r\n  options?:IOption[]; \r\n} \r\nexport function Editor({ ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) { \r\n  const {defaultValue, type} = ifield; \r\n  const _options = options ?? [] as IOption[]; \r\n  const [_value, _setValue] = useState(value); \r\n\r\n  // synchronize from parent value\r\n  useEffect(() => { \r\n    if(value !== _value) \r\n      _setValue(value); \r\n  }, [value]); \r\n\r\n  // synchronize to parent value \r\n  useUpdate(() => {setValue(_value)},_value); \r\n\r\n  // Edit Many\r\n  if(ifield.isArray) {\r\n    if(IsEmpty(options)) \r\n      return <InputArray {...{defaultValue, type, values:_value, setValues:_setValue}} /> \r\n    return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:true}} /> \r\n  }\r\n  // Edit Mixed\r\n  if(ifield.isMixed) \r\n    return <EditMixed {...{ifield, value, setValue}} /> \r\n\r\n  // Edit One\r\n  if(IsEmpty(options)) \r\n    return <Input {...{value:_value, setValue:_setValue, type, defaultValue}} /> \r\n  return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:false}} /> \r\n} \r\n\r\n\r\nfunction EditMixed ({ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) {\r\n  return <span>{JSON.stringify(value)}</span>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx",[],{"ruleId":"313","replacedBy":"314"},{"ruleId":"315","replacedBy":"316"},{"ruleId":"317","severity":1,"message":"318","line":1,"column":16,"nodeType":"319","messageId":"320","endLine":1,"endColumn":24},{"ruleId":"317","severity":1,"message":"321","line":1,"column":26,"nodeType":"319","messageId":"320","endLine":1,"endColumn":35},{"ruleId":"317","severity":1,"message":"322","line":1,"column":37,"nodeType":"319","messageId":"320","endLine":1,"endColumn":43},{"ruleId":"317","severity":1,"message":"323","line":3,"column":9,"nodeType":"319","messageId":"320","endLine":3,"endColumn":16},{"ruleId":"317","severity":1,"message":"324","line":4,"column":9,"nodeType":"319","messageId":"320","endLine":4,"endColumn":14},{"ruleId":"317","severity":1,"message":"325","line":6,"column":9,"nodeType":"319","messageId":"320","endLine":6,"endColumn":19},{"ruleId":"317","severity":1,"message":"326","line":7,"column":9,"nodeType":"319","messageId":"320","endLine":7,"endColumn":19},{"ruleId":"317","severity":1,"message":"327","line":7,"column":21,"nodeType":"319","messageId":"320","endLine":7,"endColumn":32},{"ruleId":"328","severity":1,"message":"329","line":20,"column":6,"nodeType":"330","endLine":20,"endColumn":8,"suggestions":"331"},{"ruleId":"313","replacedBy":"314"},{"ruleId":"315","replacedBy":"316"},{"ruleId":"313","replacedBy":"332"},{"ruleId":"315","replacedBy":"333"},{"ruleId":"334","severity":1,"message":"335","line":2,"column":9,"nodeType":"319","messageId":"320","endLine":2,"endColumn":15},{"ruleId":"336","severity":1,"message":"337","line":65,"column":37,"nodeType":"338","messageId":"339","endLine":65,"endColumn":47},{"ruleId":"334","severity":1,"message":"335","line":4,"column":9,"nodeType":"319","messageId":"320","endLine":4,"endColumn":15},{"ruleId":"340","severity":1,"message":"341","line":34,"column":22,"nodeType":"342","messageId":"343","endLine":34,"endColumn":24},{"ruleId":"340","severity":1,"message":"341","line":34,"column":47,"nodeType":"342","messageId":"343","endLine":34,"endColumn":49},{"ruleId":"334","severity":1,"message":"344","line":1,"column":16,"nodeType":"319","messageId":"320","endLine":1,"endColumn":26},{"ruleId":"340","severity":1,"message":"341","line":28,"column":20,"nodeType":"342","messageId":"343","endLine":28,"endColumn":22},{"ruleId":"340","severity":1,"message":"341","line":28,"column":36,"nodeType":"342","messageId":"343","endLine":28,"endColumn":38},{"ruleId":"345","severity":1,"message":"346","line":13,"column":40,"nodeType":"319","messageId":"347","endLine":13,"endColumn":51},{"ruleId":"328","severity":1,"message":"348","line":59,"column":34,"nodeType":"330","endLine":59,"endColumn":36,"suggestions":"349"},{"ruleId":"328","severity":1,"message":"350","line":81,"column":6,"nodeType":"330","endLine":81,"endColumn":24,"suggestions":"351"},{"ruleId":"334","severity":1,"message":"352","line":22,"column":31,"nodeType":"319","messageId":"320","endLine":22,"endColumn":35},{"ruleId":"313","replacedBy":"353"},{"ruleId":"315","replacedBy":"354"},{"ruleId":"313","replacedBy":"355"},{"ruleId":"315","replacedBy":"356"},{"ruleId":"334","severity":1,"message":"357","line":3,"column":43,"nodeType":"319","messageId":"320","endLine":3,"endColumn":51},{"ruleId":"334","severity":1,"message":"358","line":2,"column":15,"nodeType":"319","messageId":"320","endLine":2,"endColumn":26},{"ruleId":"334","severity":1,"message":"359","line":2,"column":38,"nodeType":"319","messageId":"320","endLine":2,"endColumn":45},{"ruleId":"334","severity":1,"message":"360","line":2,"column":63,"nodeType":"319","messageId":"320","endLine":2,"endColumn":75},{"ruleId":"334","severity":1,"message":"361","line":2,"column":77,"nodeType":"319","messageId":"320","endLine":2,"endColumn":89},{"ruleId":"328","severity":1,"message":"362","line":44,"column":6,"nodeType":"330","endLine":44,"endColumn":37,"suggestions":"363"},{"ruleId":"328","severity":1,"message":"364","line":44,"column":7,"nodeType":"365","endLine":44,"endColumn":36},{"ruleId":"334","severity":1,"message":"366","line":1,"column":21,"nodeType":"319","messageId":"320","endLine":1,"endColumn":28},{"ruleId":"334","severity":1,"message":"367","line":16,"column":16,"nodeType":"319","messageId":"320","endLine":16,"endColumn":23},{"ruleId":"328","severity":1,"message":"368","line":24,"column":6,"nodeType":"330","endLine":24,"endColumn":35,"suggestions":"369"},{"ruleId":"328","severity":1,"message":"364","line":24,"column":7,"nodeType":"365","endLine":24,"endColumn":34},{"ruleId":"334","severity":1,"message":"370","line":27,"column":9,"nodeType":"319","messageId":"320","endLine":27,"endColumn":19},{"ruleId":"328","severity":1,"message":"371","line":39,"column":6,"nodeType":"330","endLine":39,"endColumn":29,"suggestions":"372"},{"ruleId":"328","severity":1,"message":"364","line":39,"column":7,"nodeType":"365","endLine":39,"endColumn":28},{"ruleId":"373","severity":1,"message":"374","line":49,"column":10,"nodeType":"319","messageId":"375","endLine":49,"endColumn":17},{"ruleId":"334","severity":1,"message":"318","line":1,"column":9,"nodeType":"319","messageId":"320","endLine":1,"endColumn":17},{"ruleId":"334","severity":1,"message":"321","line":1,"column":19,"nodeType":"319","messageId":"320","endLine":1,"endColumn":28},{"ruleId":"334","severity":1,"message":"376","line":5,"column":9,"nodeType":"319","messageId":"320","endLine":5,"endColumn":19},{"ruleId":"334","severity":1,"message":"377","line":5,"column":21,"nodeType":"319","messageId":"320","endLine":5,"endColumn":36},{"ruleId":"334","severity":1,"message":"378","line":6,"column":9,"nodeType":"319","messageId":"320","endLine":6,"endColumn":18},{"ruleId":"328","severity":1,"message":"379","line":12,"column":6,"nodeType":"330","endLine":12,"endColumn":34,"suggestions":"380"},{"ruleId":"328","severity":1,"message":"364","line":12,"column":7,"nodeType":"365","endLine":12,"endColumn":33},{"ruleId":"334","severity":1,"message":"381","line":4,"column":20,"nodeType":"319","messageId":"320","endLine":4,"endColumn":30},{"ruleId":"334","severity":1,"message":"382","line":4,"column":45,"nodeType":"319","messageId":"320","endLine":4,"endColumn":56},{"ruleId":"334","severity":1,"message":"383","line":5,"column":9,"nodeType":"319","messageId":"320","endLine":5,"endColumn":16},{"ruleId":"334","severity":1,"message":"384","line":13,"column":17,"nodeType":"319","messageId":"320","endLine":13,"endColumn":33},{"ruleId":"328","severity":1,"message":"385","line":24,"column":6,"nodeType":"330","endLine":24,"endColumn":8,"suggestions":"386"},{"ruleId":"334","severity":1,"message":"387","line":5,"column":15,"nodeType":"319","messageId":"320","endLine":5,"endColumn":26},{"ruleId":"334","severity":1,"message":"388","line":13,"column":10,"nodeType":"319","messageId":"320","endLine":13,"endColumn":21},{"ruleId":"334","severity":1,"message":"389","line":14,"column":19,"nodeType":"319","messageId":"320","endLine":14,"endColumn":26},{"ruleId":"328","severity":1,"message":"390","line":89,"column":6,"nodeType":"330","endLine":89,"endColumn":19,"suggestions":"391"},{"ruleId":"328","severity":1,"message":"392","line":24,"column":6,"nodeType":"330","endLine":24,"endColumn":13,"suggestions":"393"},"no-native-reassign",["394"],"no-negated-in-lhs",["395"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'Patient' is defined but never used.","'Input' is defined but never used.","'TestSelect' is defined but never used.","'TestReader' is defined but never used.","'TestEditors' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Collections'. Either include it or remove the dependency array.","ArrayExpression",["396"],["394"],["395"],"@typescript-eslint/no-unused-vars","'IsNull' is defined but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'useContext' is defined but never used.","@typescript-eslint/no-use-before-define","'Collections' was used before it was defined.","noUseBeforeDefine","React Hook useMemo has a missing dependency: 'dao'. Either include it or remove the dependency array.",["397"],"React Hook useEffect has a missing dependency: 'InitActiveEntry'. Either include it or remove the dependency array.",["398"],"'data' is assigned a value but never used.",["394"],["395"],["394"],["395"],"'SetWidth' is defined but never used.","'ArrxContext' is defined but never used.","'Element' is defined but never used.","'ElementIndex' is defined but never used.","'ElementValue' is defined but never used.","React Hook useEffect has missing dependencies: 'index' and 'values'. Either include them or remove the dependency array.",["399"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'useMemo' is defined but never used.","'setData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.value'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'props.value', you can also switch to useReducer instead of useState and read 'props.value' in the reducer.",["400"],"'hasChanged' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data', 'ifield.accessor', 'isEdit', and 'value'. Either include them or remove the dependency array.",["401"],"@typescript-eslint/no-redeclare","'CrudBtn' is already defined.","redeclared","'IRenderers' is defined but never used.","'IFieldToHandler' is defined but never used.","'useUpdate' is defined but never used.","React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["402"],"'RowContext' is defined but never used.","'CellContext' is defined but never used.","'IsEmpty' is defined but never used.","'activeCollection' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetPatient'. Either include it or remove the dependency array.",["403"],"'ObjxContext' is defined but never used.","'activeEntry' is assigned a value but never used.","'ifields' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["404"],"React Hook useEffect has a missing dependency: '_value'. Either include it or remove the dependency array.",["405"],"no-global-assign","no-unsafe-negation",{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},{"desc":"410","fix":"411"},{"desc":"412","fix":"413"},{"desc":"414","fix":"415"},{"desc":"416","fix":"417"},{"desc":"418","fix":"419"},{"desc":"420","fix":"421"},{"desc":"422","fix":"423"},{"desc":"424","fix":"425"},"Update the dependencies array to be: [Collections]",{"range":"426","text":"427"},"Update the dependencies array to be: [dao]",{"range":"428","text":"429"},"Update the dependencies array to be: [InitActiveEntry, activeCollection]",{"range":"430","text":"431"},"Update the dependencies array to be: [index, values]",{"range":"432","text":"433"},"Update the dependencies array to be: [props.value]",{"range":"434","text":"435"},"Update the dependencies array to be: [data, ifield.accessor, isEdit, value]",{"range":"436","text":"437"},"Update the dependencies array to be: [callback]",{"range":"438","text":"439"},"Update the dependencies array to be: [GetPatient]",{"range":"440","text":"441"},"Update the dependencies array to be: [props.value, value]",{"range":"442","text":"443"},"Update the dependencies array to be: [_value, value]",{"range":"444","text":"445"},[824,826],"[Collections]",[1703,1705],"[dao]",[2922,2940],"[InitActiveEntry, activeCollection]",[1560,1591],"[index, values]",[639,668],"[props.value]",[1108,1131],"[data, ifield.accessor, isEdit, value]",[304,332],"[callback]",[912,914],"[GetPatient]",[3426,3439],"[props.value, value]",[762,769],"[_value, value]"]