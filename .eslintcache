[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\displayquestion.component.tsx":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaire.utils.tsx":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\paging.component.tsx":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudmongoose.class.ts":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testcrud\\testcrud.experiment.tsx":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_crud.ts":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\crud\\useactive.hook.tsx":"59","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx":"60","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\testrender.tsx":"61","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testarray\\testarrayutils.experiment.tsx":"62","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\value.utils.ts":"63","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrayutils.ts":"64","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\editor.component.tsx":"65","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\reader.component.tsx":"66","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testLoader\\testLoader.tsx":"67","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientid.component.tsx":"68","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\preloader.component.tsx":"69","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\usepatient.hook.tsx":"70","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\session\\session.class.ts":"71","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_session.ts":"72","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\session\\usesession.hook.ts":"73","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usegetset.ts":"74","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useGetSet.hook.tsx":"75"},{"size":621,"mtime":1612141670677,"results":"76","hashOfConfig":"77"},{"size":1814,"mtime":1613681813132,"results":"78","hashOfConfig":"77"},{"size":362,"mtime":499162500000,"results":"79","hashOfConfig":"77"},{"size":893,"mtime":1613689064978,"results":"80","hashOfConfig":"77"},{"size":496,"mtime":1613082465022,"results":"81","hashOfConfig":"77"},{"size":1495,"mtime":1612141671254,"results":"82","hashOfConfig":"77"},{"size":4190,"mtime":1612988986064,"results":"83","hashOfConfig":"77"},{"size":1373,"mtime":1612989292948,"results":"84","hashOfConfig":"77"},{"size":1900,"mtime":1612141671217,"results":"85","hashOfConfig":"77"},{"size":3091,"mtime":1612141671217,"results":"86","hashOfConfig":"77"},{"size":1780,"mtime":1612141670967,"results":"87","hashOfConfig":"77"},{"size":2274,"mtime":1612141671117,"results":"88","hashOfConfig":"77"},{"size":1473,"mtime":1612141671140,"results":"89","hashOfConfig":"77"},{"size":462,"mtime":1612141671142,"results":"90","hashOfConfig":"77"},{"size":1042,"mtime":1612141671142,"results":"91","hashOfConfig":"77"},{"size":982,"mtime":1612141671141,"results":"92","hashOfConfig":"77"},{"size":6054,"mtime":1613246331383,"results":"93","hashOfConfig":"77"},{"size":289,"mtime":1613246066105,"results":"94","hashOfConfig":"77"},{"size":331,"mtime":1613681678872,"results":"95","hashOfConfig":"77"},{"size":623,"mtime":1612989263592,"results":"96","hashOfConfig":"77"},{"size":112,"mtime":1612141670932,"results":"97","hashOfConfig":"77"},{"size":1557,"mtime":1613074200319,"results":"98","hashOfConfig":"77"},{"size":688,"mtime":1611105433287,"results":"99","hashOfConfig":"77"},{"size":1330,"mtime":1612141671143,"results":"100","hashOfConfig":"77"},{"size":124,"mtime":1612141670933,"results":"101","hashOfConfig":"77"},{"size":233,"mtime":1612141670928,"results":"102","hashOfConfig":"77"},{"size":2945,"mtime":1613002403902,"results":"103","hashOfConfig":"77"},{"size":1542,"mtime":1613002404053,"results":"104","hashOfConfig":"77"},{"size":492,"mtime":1612990386088,"results":"105","hashOfConfig":"77"},{"size":1604,"mtime":1612987615302,"results":"106","hashOfConfig":"77"},{"size":2138,"mtime":1612987585877,"results":"107","hashOfConfig":"77"},{"size":1183,"mtime":1612987585982,"results":"108","hashOfConfig":"77"},{"size":447,"mtime":1612141670931,"results":"109","hashOfConfig":"77"},{"size":107,"mtime":1612141670933,"results":"110","hashOfConfig":"77"},{"size":2804,"mtime":1613267100359,"results":"111","hashOfConfig":"77"},{"size":79,"mtime":1612141670934,"results":"112","hashOfConfig":"77"},{"size":338,"mtime":1612141671148,"results":"113","hashOfConfig":"77"},{"size":1556,"mtime":1613699454688,"results":"114","hashOfConfig":"77"},{"size":231,"mtime":1612141670930,"results":"115","hashOfConfig":"77"},{"size":4408,"mtime":1612141670676,"results":"116","hashOfConfig":"77"},{"size":653,"mtime":1613689076109,"results":"117","hashOfConfig":"77"},{"size":1426,"mtime":1612469986798,"results":"118","hashOfConfig":"77"},{"size":1302,"mtime":1613079530314,"results":"119","hashOfConfig":"77"},{"size":1100,"mtime":1613246204527,"results":"120","hashOfConfig":"77"},{"size":2519,"mtime":1613246196460,"results":"121","hashOfConfig":"77"},{"size":1769,"mtime":1613246188083,"results":"122","hashOfConfig":"77"},{"size":1613,"mtime":1613266122925,"results":"123","hashOfConfig":"77"},{"size":1243,"mtime":1613267824670,"results":"124","hashOfConfig":"77"},{"size":736,"mtime":1612141670564,"results":"125","hashOfConfig":"77"},{"size":2663,"mtime":1613264636428,"results":"126","hashOfConfig":"77"},{"size":1392,"mtime":1613264564090,"results":"127","hashOfConfig":"77"},{"size":2802,"mtime":1613263114381,"results":"128","hashOfConfig":"77"},{"size":2690,"mtime":1612394054258,"results":"129","hashOfConfig":"77"},{"size":3175,"mtime":1613245945678,"results":"130","hashOfConfig":"77"},{"size":431,"mtime":1612382505474,"results":"131","hashOfConfig":"77"},{"size":2664,"mtime":1613681662052,"results":"132","hashOfConfig":"77"},{"size":2238,"mtime":1612394941169,"results":"133","hashOfConfig":"77"},{"size":137,"mtime":1612397882586,"results":"134","hashOfConfig":"77"},{"size":2302,"mtime":1613681691290,"results":"135","hashOfConfig":"77"},{"size":129,"mtime":1612482242441,"results":"136","hashOfConfig":"77"},{"size":6470,"mtime":1612996434149,"results":"137","hashOfConfig":"77"},{"size":4673,"mtime":1612988586773,"results":"138","hashOfConfig":"77"},{"size":1916,"mtime":1613699215979,"results":"139","hashOfConfig":"77"},{"size":263,"mtime":1612988954380,"results":"140","hashOfConfig":"77"},{"size":4014,"mtime":1613259995738,"results":"141","hashOfConfig":"77"},{"size":3489,"mtime":1612996705145,"results":"142","hashOfConfig":"77"},{"size":758,"mtime":1613681678874,"results":"143","hashOfConfig":"77"},{"size":852,"mtime":1613248680933,"results":"144","hashOfConfig":"77"},{"size":879,"mtime":1613166097505,"results":"145","hashOfConfig":"77"},{"size":4241,"mtime":1613689630177,"results":"146","hashOfConfig":"77"},{"size":2866,"mtime":1613698493047,"results":"147","hashOfConfig":"77"},{"size":140,"mtime":1613696750813,"results":"148","hashOfConfig":"77"},{"size":1000,"mtime":1613699441207,"results":"149","hashOfConfig":"77"},{"size":79,"mtime":1613692163736,"results":"150","hashOfConfig":"77"},{"size":935,"mtime":1613697435483,"results":"151","hashOfConfig":"77"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},"ke513i",{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"163"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"163"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"163"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"163"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"205"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"163"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"163"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"163"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"163"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"172"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"163"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"163"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"163"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"163"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"163"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"163"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"163"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"295"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"295"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"163"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"163"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"163"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"326","messages":"327","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["328","329"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",["330","331"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",["332","333"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],["334","335"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],["336","337"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["338"],"import {IsEmpty, IsInRange} from '../_utils';\r\n\r\nexport interface IMongooseCollection { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    enum?: any[]; \r\n    abbrev?: boolean; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\n// Parser functions =============================\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\nexport function ParseField(field:IMongooseField):IField { \r\n  const {path, instance, options, $embeddedSchemaType} = field; \r\n  const ifield:IField = {} as IField; \r\n\r\n  ifield.accessor = path ?? ''; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.type = options?.ref ?? $embeddedSchemaType?.instance ?? field.instance.toLowerCase(); \r\n  ifield.isMixed = instance.toLowerCase() === 'mixed'; \r\n  ifield.isEnum = !!options?.enum; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = !!options?.ref; \r\n  ifield.isAbbrev = !!options?.abbrev; \r\n  ifield.validators = GetValidators(field); \r\n  ifield.isRequired = field.options['required'] ?? false; \r\n  ifield.regex = field.options['regex']? field.options['regex']: undefined; \r\n\r\n  ifield.enums = options.enum ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, field.options); \r\n\r\n  return ifield; \r\n} \r\n\r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} \r\n\r\n\r\nfunction GetValidators(field:IMongooseField):IValidator[] { \r\n  const required = (value:any) => { \r\n    return !IsEmpty(value); \r\n  }; \r\n\r\n  const regex = (value:any) => { \r\n    if(field.options['regex']) \r\n      return new RegExp(field.options['regex']).test(value); \r\n    return true; \r\n  } \r\n\r\n  const range = (value:any) => { \r\n    return IsInRange(value, field.options['min'], field.options['max']); \r\n  } \r\n\r\n  let validators:IValidator[] = []; \r\n  if(field.options['required']) \r\n    validators.push(required); \r\n  if(field.options['regex']) \r\n    validators.push(regex); \r\n  if(field.options['min'] || field.options['max']) \r\n    validators.push(range); \r\n  return validators; \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["339","340","341"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull, GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield) => { \r\n      return <Cell key={ifield.accessor} {...{ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const data = datas[row]; \r\n  const value = IsEmpty(data) ? GetDefaultValueFromIField(ifield): datas[row][ifield.accessor]; \r\n  const context = {value, row, ifield} as ICellContext; \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["342","343","344"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts",["345"],"import {Pick} from '../_arrayutils'; \r\nimport {Collection} from './collection.class'; \r\n\r\nexport interface ICrud { \r\n  Collections:(accessors?:string[]) => Promise<ICrudResponse[]>; \r\n  Create: (accessor:string, toCreate:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Read: (accessor:string, id?:string[]) => Promise<ICrudResponse[]>; \r\n  Update: (accessor:string, toUpdate:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Delete: (accessor:string, toDelete:IEntry[]) => Promise<ICrudResponse[]>; \r\n} \r\n\r\n\r\n// DAO #############################################\r\nexport class DAO { \r\n  public collections:ICollection[] = [] as ICollection[]; \r\n\r\n  private crud:ICrud = {} as ICrud; \r\n\r\n  constructor(crud:ICrud) { \r\n    this.crud = crud; \r\n  } \r\n\r\n  // Get ICollections ----------------------------- \r\n  public GetICollections(accessors?:string[]):ICollection[] { \r\n    if(!accessors) \r\n      return this.collections; \r\n    const compare = (t:ICollection, accessor:string) => {return t.accessor === accessor}; \r\n    return Pick(this.collections, accessors, compare); \r\n  } \r\n\r\n  // Get IFields -----------------------------------\r\n  public GetIFields(accessor:string, fields?:string[]):IField[] { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    if(!fields) \r\n      return collection?.ifields ?? []; \r\n    const compare = (f:IField, accessor:string) => {return f.accessor === accessor}; \r\n    return Pick(collection?.ifields, fields, compare); \r\n  }\r\n\r\n  // Get Entries --------------------------------------\r\n  public GetIEntries(accessor:string, ids?:string[]):IEntry[] { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    if(!ids)\r\n      return collection?.entries ?? []; \r\n    const compare = (e:IEntry, id:string) => {return e._id === id}; \r\n    return Pick(collection?.entries, ids, compare); \r\n  }\r\n\r\n  // Get Default IEntry ----------------------------------\r\n  public GetDefaultIEntry(accessor:string):IEntry { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    return new Collection(collection).GetDefaultIEntry(); \r\n  } \r\n  \r\n  // GET FOREIGN ELEMENTS -----------------------------\r\n  public GetForeignElements(ifield:IField) \r\n    : {foreignCollection:ICollection|undefined, abbrevField:IField|undefined} \r\n  { \r\n    const foreignCollection = this.collections.find(c => c.accessor === ifield.type); \r\n    const abbrevField = foreignCollection?.ifields.find(f=>f.isAbbrev); \r\n    return {foreignCollection, abbrevField}; \r\n  } \r\n\r\n  // Get Options ----------------------------------------\r\n  public GetIOptions(ifield:IField):IOption[] { \r\n    if(ifield.isEnum)\r\n      return ifield.enums?.map(e => {return {value:e, label:e}}) ?? [] as IOption[];  \r\n    if(!ifield.isModel) \r\n      return [] as IOption[]; \r\n    const {foreignCollection, abbrevField} = this.GetForeignElements(ifield); \r\n    if(!foreignCollection || !abbrevField) \r\n      return [] as IOption[]; \r\n    return foreignCollection.entries?.map( e => { \r\n      return {value:e._id, label:e[abbrevField.accessor]} as IOption; \r\n    }); \r\n  } \r\n\r\n  // COLLECTIONS -------------------------------------------\r\n  public async Collections(accessors?:string[]):Promise<ICrudResponse[]> { \r\n    const responses = (await this.crud.Collections(accessors)) as ICrudResponse[]; \r\n    const icollections = responses.filter(r => r.success).map(r => r.data as ICollection); \r\n    this.PushUpdateCollection(icollections); \r\n    return responses; \r\n  } \r\n\r\n  private PushUpdateCollection(icollections:ICollection[]) { \r\n    icollections.forEach( newCol => { \r\n      const index = this.collections.findIndex(col => col.accessor === newCol.accessor); \r\n      if(index >=0) \r\n        this.collections[index] = newCol; \r\n      else \r\n        this.collections.push(newCol); \r\n    }) \r\n  } \r\n\r\n  /* Create -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Create(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Create(accessor, entries)) as ICrudResponse[]; \r\n    const created = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Create(created); \r\n    return responses; \r\n  } \r\n\r\n  /* Read -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  Create/Update read data to local. \r\n  */\r\n  public async Read(accessor:string, ids?:string[]):Promise<IEntry[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Read(accessor, ids)) as ICrudResponse[]; \r\n    const read = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    return read; \r\n  } \r\n\r\n  /* Update -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Update(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Update(accessor, entries)) as ICrudResponse[]; \r\n    const updated = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Update(updated); \r\n    return responses; \r\n  } \r\n\r\n  /* Delete -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Delete(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Delete(accessor, entries)) as ICrudResponse[]; \r\n    const deleted = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Delete(deleted); \r\n    return responses; \r\n  } \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx",[],["346","347"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx",["348"],"import React, { useContext, useState } from 'react'; \r\nimport {IsEmpty} from '../../_utils'; \r\nimport {useSelect, IUseSelect} from './select.hook'; \r\nimport {IEditor} from '../../_input'; \r\nimport {useToggle, IUseToggle} from '../../_usetoggle'; \r\n\r\n\r\nimport './select.style.css'; \r\n\r\nexport function TestSelect() { \r\n  const options:IOption[] = [\r\n    {value:0, label:'valeur 0'}, \r\n    {value:1, label:'valeur 1'}, \r\n    {value:2, label:'valeur 2'}, \r\n    {value:3, label:'valeur 3'}, \r\n  ] \r\n\r\n  const ifield = {accessor:'', label:'', defaultValue:'', type:'string'} as IField; \r\n  const [value, setValue] = useState(0); \r\n\r\n\r\n\r\n  return <div> \r\n    <span>{JSON.stringify(value)}</span> \r\n    <span>Label:</span> \r\n    <Select {...{ifield, value, setValue, options}} /> \r\n    <span>asdasdasdsa:</span> \r\n  </div> \r\n} \r\n\r\n\r\nexport const SelectContext = React.createContext({} as IUseSelect); \r\nexport function Select({ifield, value, setValue, options}:IEditor) { \r\n  const context = useSelect({ifield, value, setValue, options}); \r\n\r\n  const {toggle, ToggleBtnAction, toggleTarget, Toggle} = useToggle<HTMLDivElement>(true); \r\n\r\n  const CloseToggle = () => { \r\n    if(!context.multiple) \r\n      Toggle(); \r\n  }\r\n\r\n  return <SelectContext.Provider value={context}> \r\n    <div className={'select-main'} > \r\n      <div  {...ToggleBtnAction()} > \r\n        <Selection/> \r\n      </div> \r\n      <div tabIndex={0} ref={toggleTarget} hidden={toggle} onClick={CloseToggle}> \r\n        <Options /> \r\n      </div> \r\n    </div> \r\n  </SelectContext.Provider> \r\n}\r\n\r\n\r\nfunction Selection() {\r\n  const {SelectValue, GetSelection} = useContext(SelectContext); \r\n  const selection = GetSelection(); \r\n\r\n  return <div className={'select-header'}> \r\n\r\n    {IsEmpty(selection) && <span className={'select-placeholder'}> --- Empty --- </span>} \r\n\r\n    {selection.map( (option, i) => { \r\n      const key = JSON.stringify(option.value); \r\n      const onClick = () => SelectValue(option?.value); \r\n      const className = 'select-option'; \r\n      return <span key={key} {...{onClick, className}}> \r\n        {option?.label}{(i < selection.length-1) ? ', ':''}\r\n      </span> \r\n    })} \r\n  </div> \r\n}\r\n\r\n\r\n\r\nfunction Options() { \r\n  const {options, SelectValue, GetSelection} = useContext(SelectContext); \r\n  const selection = GetSelection(); \r\n  const IsSelected = (option:IOption) => selection.some(o => o?.value === option?.value); \r\n\r\n  /*const style: CSS.Properties = { \r\n    display: 'none', \r\n    position: 'absolute', \r\n    width: '100%', \r\n    zIndex: 1, \r\n  }*/\r\n\r\n  return <div className={'select-options'}  > \r\n    {options.map( option => { \r\n      const key = JSON.stringify(option.value); \r\n      const onClick = () => SelectValue(option.value); \r\n      const className = IsSelected(option) ? 'select-option-selected': 'select-option'; \r\n      return <div key={key} {...{onClick, className}} > \r\n        {option.label} \r\n      </div> \r\n    })}\r\n  </div>\r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx",["349"],"import {ToArray, Filter, Union} from '../../_arrayutils'; \r\nimport {IsEmpty} from '../../_utils'; \r\n//import {useToggle, IUseToggle} from '../../_usetoggle'; \r\n\r\n// USE SELECT ====================================\r\nexport interface IUseSelect { \r\n  value:any; \r\n  setValue:React.Dispatch<React.SetStateAction<any>>; \r\n  options:IOption[]; \r\n  GetSelection: () => IOption[]; \r\n  placeholder:string; \r\n  multiple:boolean; \r\n  \r\n  SelectValue:(newValue:any) => void; \r\n} \r\nexport function useSelect(value:any, setValue:any, options:IOption[], placeholder:string, multiple:boolean):IUseSelect { \r\n  // SelectValue ................................\r\n  function SelectValue (newValue:any) { \r\n    const {inclusion, exclusion} = Filter(ToArray(value), e => e === newValue); \r\n    if(IsEmpty(inclusion) && multiple) \r\n      exclusion.push(newValue); \r\n    if(IsEmpty(inclusion) && !multiple) \r\n      exclusion[0] = newValue; \r\n    const selection = multiple ? exclusion: exclusion.shift(); \r\n    setValue(selection); \r\n  } \r\n\r\n  function GetSelection() { \r\n    const selection = [] as IOption[]; \r\n    if(IsEmpty(value)) \r\n      return selection; \r\n    const values = ToArray(value); \r\n    values.forEach(v => { \r\n      const option = options.find(o => o.value === v); \r\n      if(option) \r\n        selection.push(option); \r\n    }); \r\n    return selection; \r\n  }\r\n\r\n  return {value, setValue, options, GetSelection, placeholder, multiple, SelectValue}; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx",["350","351","352","353","354","355"],"import React, { useContext, useEffect, useState } from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex, ElementValue} from '../../../reusable/_arrx'; \r\nimport {Input} from '../input/input.component'; \r\nimport {IInputArray, IUseInputArray, useInputArray} from './inputarray.hook'; \r\n\r\n\r\nexport const InputArrayContext = React.createContext({} as IUseInputArray); \r\nexport function InputArray({...props}:React.PropsWithChildren<IInputArray>) { \r\n  const context = useInputArray(props); \r\n  const {values} = props; \r\n  \r\n  return <InputArrayContext.Provider value={context} > \r\n    <Arrx {...{values}} > \r\n      <Elements> \r\n        <UpdateElement/> <DeleteBtn/>\r\n        <br/> \r\n      </Elements> \r\n      <CreateElement/>\r\n    </Arrx> \r\n  </InputArrayContext.Provider> \r\n} \r\n\r\n\r\n// Create element =======================================\r\nfunction CreateElement() { \r\n  const {ifield, Create} = useContext(InputArrayContext); \r\n  const {defaultValue} = ifield; \r\n  const [value, setValue] = useState(defaultValue); \r\n\r\n  const onPressEnter = () => { \r\n    Create(value); \r\n    setValue(defaultValue); // reset input to defaultValue after creation. \r\n  }; \r\n  return <Input {...{value, setValue, ifield, onPressEnter}}  /> \r\n} \r\n\r\n// Update element =======================================\r\nfunction UpdateElement() { \r\n  const {values, ifield, Update} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  const [value, setValue] = useState(values[index]); \r\n  \r\n  useEffect(() => { \r\n    setValue(values[index]); \r\n  }, [JSON.stringify(values[index])]); \r\n\r\n  const onPressEnter = () => Update(index, value); \r\n  return <Input {...{value, setValue, ifield, onPressEnter}}  /> \r\n}\r\n\r\n// Delete Btn ===================================\r\nexport function DeleteBtn({children, ...props}:React.PropsWithChildren<React.ButtonHTMLAttributes<HTMLButtonElement>>) { \r\n  const {Delete} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  return <button onClick={() => Delete(index)} {...props}> \r\n    {!children ? 'x' : children} \r\n  </button> \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx",["356","357"],"import {useEffect, useRef} from 'react'; \r\n\r\nexport function useUpdate(callback:() => void, changeling:any) { \r\n  const flagFirstRender = useRef(true); \r\n  \r\n  useEffect(() => { \r\n    if(flagFirstRender.current) { \r\n      flagFirstRender.current = false; \r\n      return; \r\n    } \r\n    callback(); \r\n  }, [JSON.stringify(changeling)]); \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",["358","359","360","361","362","363","364"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx",["365","366"],"import React, { useState } from 'react'; \r\nimport {Reader, Editor, Select} from '../reusable/_input'; \r\nimport {GetValueAt, SetValueAt} from '../reusable/_utils'; \r\n\r\n\r\nconst numField:IField = {accessor:'num', label:'Accessor', type:'number', defaultValue:0, options:{}} as IField; \r\nconst strField:IField = {accessor:'str', label:'Accessor', type:'string', defaultValue:'', options:{}} as IField; \r\nconst boolField:IField = {accessor:'bool', label:'Accessor', type:'boolean', defaultValue:false, options:{}} as IField; \r\n\r\nconst numOptions:IOption[] = [ \r\n  {value: 0, label:'value 0'}, \r\n  {value: 1, label:'value 1'}, \r\n  {value: 2, label:'value 2'}, \r\n  {value: 3, label:'value 3'}, \r\n] \r\n\r\nconst strOptions:IOption[] = [ \r\n  {value: 'a', label:'value a'}, \r\n  {value: 'b', label:'value b'}, \r\n  {value: 'c', label:'value c'}, \r\n  {value: 'd', label:'value d'}, \r\n] \r\n\r\nconst boolOptions:IOption[] = [ \r\n  {value: false, label:'female'}, \r\n  {value: true, label:'male'}, \r\n] \r\n\r\nconst testRead:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n  {value: 12, ifield: {...numField}}, \r\n  {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n  {value: 'bababa', ifield:{...strField} }, \r\n  {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n  {value: false, ifield:{...boolField} }, \r\n  {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n  // options\r\n  {value: 2, ifield:{...numField}, options:numOptions }, \r\n  {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n  {value: 'b', ifield:{...strField}, options:strOptions}, \r\n  {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n  {value: false, ifield:{...boolField}, options:strOptions}, \r\n  {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n] \r\n\r\n  /*const testEditor:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n    {value: 12, ifield: {...numField}}, \r\n    {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n    {value: 'bababa', ifield:{...strField} }, \r\n    {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n    {value: false, ifield:{...boolField} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n    // options\r\n    {value: 2, ifield:{...numField}, options:numOptions }, \r\n    {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n    {value: 'b', ifield:{...strField}, options:strOptions}, \r\n    {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n    {value: false, ifield:{...boolField, options:strOptions} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n  ] */\r\n\r\n/*\r\nfunction useStateAt(_value:any) { \r\n  const [value, setValue] = useState(_value); \r\n  const ValueAt = (keys?:any[], newValue?:any) => { \r\n    if(newValue && JSON.stringify(ValueAt(keys)) !== newValue) \r\n      return SetValueAt(value, newValue, keys); \r\n    return GetValueAt(value, keys); \r\n  } \r\n  return ValueAt; \r\n} \r\n  \r\nexport function TestValueAt() { \r\n  const VALUE = {a:[15,46], b:[96,45]} \r\n  const valueAt = useStateAt(VALUE); \r\n  const value = valueAt(['a',0]); \r\n  const setValue = valueAt(['a',0]); \r\n\r\n  return <div> \r\n    <Editor {...{value}} /> \r\n  </div> \r\n} */\r\n\r\n\r\n// Test select when value is not in the avaible options */ \r\nexport function TestSelect () { \r\n  const [value, setValue] = useState(['-1']); \r\n  const options = [ \r\n    {value:'0', label:'option 0'}, \r\n    {value:'1', label:'option 1'}, \r\n    {value:'2', label:'option 2'}, \r\n    {value:'3', label:'option 3'} \r\n  ] \r\n\r\n  return <Select {...{value, setValue, options, multiple:true}} /> \r\n} \r\n\r\nexport function TestEditors() {\r\n  \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <TestEditor {...e} /></div> \r\n    })} \r\n    <br/>\r\n    asdsadsadas\r\n    <br/>\r\n  </div> \r\n}\r\n\r\n\r\nexport function TestEditor({ifield, options, ...props}:{value:any, ifield:IField, options?:IOption[]}) { \r\n  const [value, setValue] = useState(props.value); \r\n  return <div> \r\n    <div>{JSON.stringify(value)}</div> \r\n    <Editor {...{ifield, value, setValue, options}} /> \r\n    <br/>\r\n  </div>\r\n}\r\n\r\n\r\nexport function TestReader() { \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <Reader {...e} /></div> \r\n    })} \r\n  </div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx",["367"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx",["368","369"],"import React, {useContext} from 'react'; \r\nimport {CrudContext} from '../../reusable/_crud'; \r\nimport {Arrx} from '../../reusable/_arrx'; \r\n\r\nimport '../../css/feedback.css'; \r\n\r\n\r\n// Feedback =====================================\r\nexport function FeedBack() { \r\n  const {state} = useContext(CrudContext); \r\n\r\n  return <div> \r\n    {state.busy && <span>LOADING ... </span>} \r\n    {!state.busy && <span>Ready </span>} \r\n    {!state.busy && !state.success && 'an errors occured'} \r\n  </div> \r\n} \r\n\r\nfunction CrudFeedBack() { \r\n  const {state} = useContext(CrudContext); \r\n  // assumes state is ready and successful \r\n  const responses = state.response as ICrudResponse[]; // ICrudResponse[] \r\n  \r\n  return <div> \r\n    #Responses : {responses.length} \r\n  </div> \r\n  /*{actionType, success, data, err} \r\n  \r\n  const successMsg:any = { \r\n    create:'Creation succeed', \r\n    update:'Update succeed', \r\n    delete:'Deletion succeed', \r\n  } \r\n  const errorMsg:any = { \r\n    create:'Creation failed ', \r\n    update:'Update failed', \r\n    delete:'Deletion failed', \r\n  } \r\n\r\n  const className = success ? 'success' : 'failure'; \r\n\r\n  return <div className={className}> \r\n    <div>{success ? successMsg[actionType] : errorMsg[actionType]}</div> \r\n    {!success && <Arrx {...{values:(err)}} />} \r\n    </div> */\r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx",["370","371"],"import React, {useContext} from 'react'; \r\nimport {CrudContext} from '../../../reusable/_crud'; \r\n\r\nimport {Rows, Row, RowContext, Cells, Cell, CellContext} from '../../../reusable/_tablr'; \r\nimport {CreateBtn, DeleteBtn, UpdateBtn} from './crudbtn.component'; \r\nimport {CellRender} from './cellrenderer.component';\r\nimport { EActionType } from '../../../reusable/_dao';\r\n\r\n\r\n\r\nexport function InlineUpdateDelete({page, cols, colBtn}:{page:number[], cols:IField[], colBtn:IField}) { \r\n  return <Rows {...{rows:page}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <CellRender/> \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <UpdateBtn/><DeleteBtn/> \r\n    </Cell> \r\n  </Rows> \r\n} \r\n\r\nexport function InlineCreate({cols, colBtn}:{cols:IField[], colBtn:IField}) { \r\n  const {activeMode} = useContext(CrudContext); \r\n  const isCreate = activeMode === EActionType.CREATE; \r\n\r\n  return <Row {...{row:-1}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <span></span>\r\n      {isCreate && <CellRender/> } \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <CreateBtn/> \r\n    </Cell> \r\n  </Row> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx",["372"],"import React, {useContext} from 'react'; \r\nimport {RowContext, TablrContext} from '../../../reusable/_tablr'; \r\nimport {CrudContext} from '../../../reusable/_crud'; \r\nimport { EActionType } from '../../../reusable/_dao';\r\n\r\n\r\n// Create .......................................\r\nexport function CreateBtn() { \r\n  const {activeCollection:{accessor}, Create} = useContext(CrudContext); \r\n  const action = (entries:IEntry[]) => Create(accessor, entries); \r\n\r\n  const mode = EActionType.CREATE; \r\n  const labels = {affirm:'Create', confirm:'Confirm creation', cancel:'Cancel creation'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Update .......................................\r\nexport function UpdateBtn() { \r\n  const {activeCollection:{accessor}, Update} = useContext(CrudContext);\r\n  const action = (entries:IEntry[]) => Update(accessor, entries); \r\n\r\n  const mode = EActionType.UPDATE; \r\n  const labels = {affirm:'Update', confirm:'Confirm update', cancel:'Cancel update'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Delete .......................................\r\nexport function DeleteBtn() { \r\n  const {activeCollection:{accessor}, Delete} = useContext(CrudContext); \r\n  const action = (entries:IEntry[]) => Delete(accessor, entries); \r\n\r\n  const mode = EActionType.DELETE; \r\n  const labels = {affirm:'Delete', confirm:'Confirm deletion', cancel:'Cancel deletion'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n\r\n\r\n// CRUD BTN =====================================\r\ninterface CrudBtn { \r\n  mode: EActionType; \r\n  labels:{ \r\n    affirm:string, \r\n    confirm:string, \r\n    cancel:string, \r\n  }; \r\n  action:(entries:IEntry[])=>Promise<void>; \r\n} \r\nfunction CrudBtn ({mode, labels, action}:CrudBtn) { \r\n  const {activeEntry, activeMode, SetActive, ResetActive, IsActive} = useContext(CrudContext); \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n  const id = datas[row] ? datas[row]?._id: ''; \r\n\r\n  const isMode = activeMode === mode; \r\n\r\n  const Affirm = () => { \r\n    SetActive(mode, {_id:id}); \r\n  } \r\n  const Cancel = () => { \r\n    ResetActive(); \r\n  }; \r\n  const Confirm = async () => { \r\n    await action([activeEntry]); \r\n    Cancel(); \r\n  } \r\n\r\n  return <span> \r\n    {IsActive(id) && isMode && <button onClick={Confirm}>{labels.confirm}</button>} \r\n    {IsActive(id) && isMode && <button onClick={Cancel}>{labels.cancel}</button>} \r\n    {!IsActive(id) && <button onClick={Affirm}>{labels.affirm}</button>} \r\n  </span> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx",["373","374"],"import React, {useContext, useState} from 'react'; \r\nimport {CrudContext} from '../../../reusable/_crud'; \r\n//import {Pick} from '../../../reusable/_arrayutils';\r\n\r\nimport {Objx, Fields, Field, FieldContext, FieldLabel} \r\n  from '../../../reusable/_objx'; \r\nimport {Reader, Editor} from '../../../reusable/_input'; \r\n//import {Questionnaire} from '../../questionnaire/questionnaire.page'; \r\nimport {PatientContext} from '../patient.page'; \r\n\r\n\r\n\r\n// Patient profile ============================== \r\nexport function PatientProfile() { \r\n  const {activeEntry, activeMode, GetIFields} = useContext(CrudContext); \r\n  const {UpdateCreatePatientProfile} = useContext(PatientContext); \r\n  const [ramqfield, ...ifields] = GetIFields('patients', ['ramq', 'firstName', 'lastName']); \r\n  \r\n  const btnLabel = activeMode === 'update' ? 'Update patient profile': 'Create new patient profile';\r\n\r\n  return <div> \r\n    <h2>Patient profile</h2> \r\n    <Objx {...{value:activeEntry, ifields}} > \r\n      <Field {...{ifield:ramqfield}} /> \r\n      <Fields><div><FieldLabel/><FieldEditor/></div></Fields> \r\n    </Objx> \r\n    <button onClick={UpdateCreatePatientProfile}> \r\n      {btnLabel} \r\n    </button> \r\n  </div> \r\n} \r\n\r\n\r\n\r\n\r\nfunction FieldEditor() { \r\n  const {activeEntry, setActiveEntry} = useContext(CrudContext); \r\n  const {ifield} = useContext(FieldContext); \r\n\r\n  const value = activeEntry[ifield.accessor]; \r\n  const setValue = (newValue:any) => { \r\n    const copy = {...activeEntry}; \r\n    copy[ifield.accessor] = newValue; \r\n    setActiveEntry(copy); \r\n  } \r\n  return <Editor {...{value, setValue, ifield}} /> \r\n} \r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx",["375","376","377"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {PatientContext} from '../patient/patient.page'; \r\nimport {DisplayFormTitle, DisplayInstructions, \r\n  DisplayQuestionLabel, DisplayResponseField} \r\n  from './components/displayquestion.component'; \r\n  import {Arrx, Elements, ElementContext} from '../../reusable/_arrx'; \r\n\r\nimport {usePage} from '../../reusable/_usepage'; \r\nimport {PageBreaker, Paging} from './components/paging.component'; \r\n\r\n// Questionnaire ================================ \r\nexport function Questionnaire() { \r\n  const {questionnaire, patientProfile} = useContext(PatientContext); \r\n  const {pageIndex, setPageIndex, pages} = usePage(questionnaire, PageBreaker()); \r\n  const page = pages[pageIndex] ?? []; \r\n\r\n  return <div> \r\n    <h2>Patient questionnaire</h2> \r\n    <div>patient: {JSON.stringify(patientProfile['ramq'])}</div> \r\n    <h3>Questionnaire form ...</h3> \r\n    <DisplayFormTitle {...{page}} /> \r\n    <DisplayInstructions {...{page}} /> \r\n    <Arrx {...{values:questionnaire}} > \r\n      <Elements {...{indexes:page}}> \r\n        <DisplayQuestionLabel/> <DisplayResponseField/><br/> \r\n      </Elements> \r\n    </Arrx> \r\n    <Paging {...{pageIndex, setPageIndex, pages}} />\r\n  </div> \r\n} \r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\displayquestion.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaire.utils.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\paging.component.tsx",["378","379"],"import {useContext} from 'react'; \r\nimport { CrudContext } from '../../../reusable/_crud';\r\nimport {PatientContext} from '../../patient/patient.page'; \r\nimport {IPageHook} from '../../../reusable/_usepage'; \r\n\r\n\r\n// PAGE BREAKER ==================================\r\nexport function PageBreaker() { \r\n  //const {questionnaire} = useContext(PatientContext); \r\n  const {GetIEntries} = useContext(CrudContext); \r\n\r\n  function PageBreak(accumulator:Array<any>, value?:any, index?:number):boolean { \r\n    const [prevAnswer] = accumulator as IAnswer[]; \r\n    const answer = value as IAnswer; \r\n    const [prevQuestion] = GetIEntries('questions', [prevAnswer.qid]) as IQuestion[]; \r\n    const [question] = GetIEntries('questions', [answer.qid]) as IQuestion[]; \r\n    //const prevQuestion = prevAnswer ? GetIEntries('questions', [answer.qid]) as IQuestion[]; : question; \r\n\r\n    if(accumulator.length >= 4) \r\n      return true; \r\n    if(question.form !== prevQuestion.form) \r\n      return true; \r\n    if(JSON.stringify(question.instructions) !== JSON.stringify(prevQuestion.instructions)) \r\n      return true; \r\n    return false; \r\n  } \r\n  return PageBreak; \r\n} \r\n\r\n\r\n// PAGING =======================================\r\nexport function Paging({pageIndex, setPageIndex, pages}:IPageHook) { \r\n  const {activeCollection:{accessor}, Create} = useContext(CrudContext); \r\n  const page = pages[pageIndex] ?? []; \r\n  const isComplete = IsComplete(page); \r\n  const allComplete = IsComplete(); \r\n  const [from, to] = [ [...page].shift(), [...page].pop()]; \r\n  const [first, last] = [pages.flat().shift(), pages.flat().pop()]; \r\n\r\n  const onClickNext = () => {setPageIndex(pageIndex+1)}; \r\n  const onClickSubmit = () => {console.log('submit answers')}; \r\n  //const onClickSubmit = () => {Create(accessor, )}; \r\n\r\n  return <div>\r\n    <span>page : {pageIndex+1} of {pages.length}</span>\r\n    <div>{(from??0) +1} - {(to??0)+1} of {(first??0)+1} - {(last??0)+1}</div>\r\n    {pages.map( (p:number[], i:number) => { \r\n      const onClick = () => {setPageIndex(i)} \r\n      const disabled = pageIndex === i; \r\n      return <button key={i} {...{onClick, disabled}} >{i+1}</button> \r\n    })} \r\n    <button {...{onClick:onClickNext, disabled:isComplete}} >Next</button> \r\n    <button {...{onClick:onClickSubmit, disabled:allComplete}} >Submit</button> \r\n  </div> \r\n} \r\n\r\n\r\nexport function IsComplete(page?:number[]) { \r\n  const {questionnaire} = useContext(PatientContext); \r\n  const {GetIEntries} = useContext(CrudContext); \r\n\r\n  const indexes = page ? page : questionnaire.map( (e,i) => i); \r\n  const isIncomplete = indexes.some( i => { \r\n    const answer = questionnaire[i]; \r\n    const [question] = GetIEntries('questions', [answer.qid]); \r\n    return answer.answer < 0 && !question.optional; \r\n  }); \r\n  return isIncomplete; \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts",["380"],"import {useMemo} from 'react'; \r\nimport {useLoader, IState} from '../_useloader'; \r\nimport {DAO} from './dao.class'; \r\n\r\n/*\r\nexport enum EActionType { \r\n  CREATE = 'create', \r\n  READ = 'read', \r\n  UPDATE = 'update', \r\n  DELETE = 'delete', \r\n}*/\r\n\r\n\r\n\r\n// USE DAO ======================================\r\nexport interface IUseDao{ \r\n  state:IState; \r\n\r\n  // Get collections, entry, fields data \r\n  GetICollections:(accessors?:string[]) => ICollection[]; \r\n  GetIFields:(accessor:string, fields?:string[]) => IField[]; \r\n  GetIEntries:(accessor:string, ids?:string[]) => IEntry[]; \r\n  GetDefaultIEntry:(accessor:string) => IEntry; \r\n  \r\n  // Get foreign elements\r\n  GetForeignElements: (ifield:IField) => {foreignCollection:ICollection|undefined, abbrevField:IField|undefined}, \r\n\r\n  // Get options \r\n  GetIOptions: (ifield:IField) => IOption[]; \r\n\r\n  // load remote collections. \r\n  Collections:(accessors:string[]) => Promise<void>; \r\n\r\n  // Crud functionalities. \r\n  Create: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n  Read: (accessor:string, id?:string[]) => Promise<void>; \r\n  Update: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n  Delete: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n\r\n  // Validate \r\n  Validate: (collectionAccessor:string, ifieldAccessor:string, value:any) => boolean; \r\n} \r\n\r\n\r\n\r\n// USE DAO ======================================\r\nexport function useDao(dao:DAO):IUseDao { \r\n  // Hooks \r\n  const Dao = useMemo(() => dao, []); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const GetICollections = (accessors?:string[]) => Dao.GetICollections(accessors); \r\n  const GetIFields = (accessor:string, fields?:string[]) => Dao.GetIFields(accessor, fields); \r\n  const GetIEntries = (accessor:string, ids?:string[]) => Dao.GetIEntries(accessor, ids); \r\n  const GetDefaultIEntry = (accessor:string) => Dao.GetDefaultIEntry(accessor); \r\n  // Get foreign elements\r\n  const GetForeignElements = (ifield:IField) => Dao.GetForeignElements(ifield); \r\n  // Get options \r\n  const GetIOptions = (ifield:IField) => Dao.GetIOptions(ifield); \r\n\r\n  // Collections \r\n  const Collections = async (accessors:string[]) => \r\n    Load(() => Dao.Collections(accessors)); \r\n\r\n  // Crud functionalities \r\n  // async Validate ... \r\n  // async Ids ... \r\n  const Create = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Create(accessor, entries)); \r\n  const Read = async (accessor:string, ids?:string[]) => \r\n    Load(() => Dao.Read(accessor, ids)); \r\n  const Update = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Update(accessor, entries)); \r\n  const Delete = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Delete(accessor, entries)); \r\n\r\n  // Validate\r\n  const Validate = (collectionAccessor:string, ifieldAccessor:string, value:any) => { \r\n    const [ifield] = GetIFields(collectionAccessor, [ifieldAccessor]); \r\n    return ifield?.validators?.every( valid => valid(value) ) ?? false; \r\n  }; \r\n\r\n  return { \r\n    state, \r\n    GetICollections, GetIFields, GetIEntries, GetDefaultIEntry, \r\n    GetForeignElements, GetIOptions, \r\n    Collections, Create, Read, Update, Delete, \r\n    Validate\r\n  }; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudmongoose.class.ts",["381"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testcrud\\testcrud.experiment.tsx",["382"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_crud.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\crud\\useactive.hook.tsx",["383","384"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\testrender.tsx",["385","386"],"import {useState} from 'react'; \r\nimport {Reader, IReader, Editor, IEditor} from '../../reusable/_input'; \r\n\r\n\r\nconst stringField = {accessor:'', label:'', defaultValue:'', type:'string'} as IField; \r\nconst numField = {accessor:'', label:'', defaultValue:0, type:'number'} as IField; \r\nconst boolField = {accessor:'', label:'', defaultValue:false, type:'boolean'} as IField; \r\n\r\n// Options\r\nconst stringOptions = [ \r\n  {value:'a', label:'option 0'}, \r\n  {value:'b', label:'option 1'}, \r\n  {value:'c', label:'option 2'} \r\n] as IOption[]; \r\n\r\nconst numOptions = [ \r\n  {value:0, label:'option 0'}, \r\n  {value:1, label:'option 1'}, \r\n  {value:2, label:'option 2'} \r\n] as IOption[]; \r\n\r\n\r\n\r\n// One String \r\nconst strOne:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined string', args:{ifield: stringField, value:undefined}}, // undefined string \r\n  {label: 'Empty string', args:{ifield: stringField, value:''}}, // empty string \r\n  {label: 'Correct string', args:{ifield: stringField, value:'baba'}}, // none empty string \r\n]\r\n\r\n// One option String\r\nconst strOneOptions:{label:string, args:IReader}[] = [\r\n  \r\n  {label: 'Undefined string option', args:{ifield: stringField, value:undefined, options:stringOptions}}, // undefined string \r\n  {label: 'Empty string option', args:{ifield: stringField, value:''}}, // empty string \r\n  {label: 'a string option', args:{ifield: stringField, value:'a', options:stringOptions}}, // some string\r\n  {label: 'b string option', args:{ifield: stringField, value:'b', options:stringOptions}}, // some string\r\n]\r\n\r\n\r\n// Many String \r\nconst strMany:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined string[]', args:{ifield:{...stringField, isArray:true}, value:undefined}},  // undefined string[] \r\n  {label: 'Empty string[]', args:{ifield:{...stringField, isArray:true}, value:[]}},  // empty string[] \r\n  {label: 'Single string[]', args:{ifield:{...stringField, isArray:true}, value:['dada']}},  // one correct string[] \r\n  {label: 'Many string[]', args:{ifield:{...stringField, isArray:true}, value:['dada', 'fafa', 'gaga']}},  // many correct string[] \r\n]\r\n\r\n  // Many options String \r\nconst strManyOptions:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined option string[]', args:{ifield:{...stringField, isArray:true}, value:undefined, options:stringOptions}},  // undefined string[] \r\n  {label: 'Empty option string[]', args:{ifield:{...stringField, isArray:true}, value:[], options:stringOptions}},  // empty string[] \r\n  {label: 'One string[]', args:{ifield:{...stringField, isArray:true}, value:['a'], options:stringOptions}},  // one correct string[] \r\n  {label: 'Incorrect option string[]', args:{ifield:{...stringField, isArray:true}, value:['babaa'], options:stringOptions}},  // one incorrect string[] \r\n  {label: 'Many options string[]', args:{ifield:{...stringField, isArray:true}, value:['c', 'b', 'a'], options:stringOptions}},  // many correct string[] \r\n]\r\n\r\nconst numOne:{label:string, args:IReader}[] = [\r\n  // One Number \r\n  {label: 'Undefined number', args:{ifield: numField, value:undefined}}, // undefined number \r\n  {label: 'Number zero', args:{ifield: numField, value:0}}, // zero number \r\n  {label: 'Number 12', args:{ifield: numField, value:12}}, // some number \r\n]\r\n\r\n// One options number \r\nconst numOneOptions:{label:string, args:IReader}[] = [  \r\n  {label: 'Undefined number[] option', args:{ifield: numField, value:undefined, options:numOptions}}, // undefined number \r\n  {label: 'Zero options string[] option', args:{ifield: numField, value:0, options:numOptions}}, // zero number \r\n  {label: 'Correct string[] option', args:{ifield: numField, value:2, options:numOptions}}, // zero number \r\n  {label: 'Incorrect string[] option', args:{ifield: numField, value:12, options:numOptions}}, // incorrect options value\r\n]\r\n\r\n// Many Number\r\nconst numMany:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined number[]', args:{ifield:{...numField, isArray:true}, value:undefined}},  // undefined number[] \r\n  {label: 'Empty number[]', args:{ifield:{...numField, isArray:true}, value:[]}},  // empty number[] \r\n  {label: 'Single number[]', args:{ifield:{...numField, isArray:true}, value:[2]}},  // single correct number[] \r\n  {label: 'Many number[]', args:{ifield:{...numField, isArray:true}, value:[1, 2, 0]}},  // many correct number[] \r\n]\r\n  // Many options Number\r\nconst numManyOptions:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined option number[]', args:{ifield:{...numField, isArray:true}, value:undefined, options:numOptions}},  // undefined number[] \r\n  {label: 'Empty option number[]', args:{ifield:{...numField, isArray:true}, value:[], options:numOptions}},  // empty number[] \r\n  {label: 'Single option number[]', args:{ifield:{...numField, isArray:true}, value:[2], options:numOptions}},  // single correct number[] \r\n  {label: 'Many option number[]', args:{ifield:{...numField, isArray:true}, value:[1, 2, 0], options:numOptions}},  // many correct number[] \r\n  {label: 'Single incorrect number[]', args:{ifield:{...numField, isArray:true}, value:[12], options:numOptions}},  // incorrect number[] \r\n]\r\n\r\n\r\nexport function ReaderFuncSpecial({ifield, value}:IReader) { \r\n  return <div>SPECIAL :{JSON.stringify(value)}</div> \r\n} \r\n\r\nexport function TestReader() { \r\n  const strs = [...strOne, ...strOneOptions, ...strMany, ...strManyOptions]; \r\n  const nums = [...numOne, ...numOneOptions, ...numMany, ...numManyOptions]; \r\n\r\n  return <div> \r\n    <h3>Strings</h3> \r\n    {strs.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <Reader {...{...args}} /><br/></div> \r\n    })} \r\n\r\n    <h3>Numbers </h3>\r\n    {nums.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <Reader {...args} /><br/></div> \r\n    })} \r\n    </div> \r\n} \r\n\r\n\r\nexport function TestEditors() { \r\n  return <div>\r\n    <h3>Strings </h3>\r\n    {strOne.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <TestEditor {...args} /><br/></div>\r\n    })} \r\n\r\n    <h3>Numbers </h3>\r\n    {numOne.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <TestEditor {...args} /><br/></div>\r\n    })} \r\n    </div> \r\n} \r\n\r\n\r\nexport function TestEditor({...args}:IReader) { \r\n  const [value, setValue] = useState(args.value); \r\n  const {ifield, options} = args; \r\n  return <div>\r\n    {value} :\r\n    <Editor {...{value, setValue, ifield, options}} /> \r\n  </div>\r\n} ",["387","388"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testarray\\testarrayutils.experiment.tsx",["389","390","391","392"],"import React from 'react'; \r\nimport {Comparator, Predicate, ToArray, Filter, Indexes, Union, Sort, Duplicates} from '../../reusable/_arrayutils'; \r\nimport {IsEmpty, IsNull} from '../../reusable/_utils'; \r\n\r\n\r\n// Test Util ====================================\r\nexport function TestArrayUtil() { \r\n  const values:any[] = [\r\n    undefined, \r\n    '', \r\n    0, \r\n    [] as any[], \r\n    {}, \r\n    null, \r\n  ] \r\n\r\n  const testArgs = [ \r\n    {array:[12,56,4,9,7,5,566], predicate: v => v > 10}, \r\n    {array:[12,56,4,9,7,5,566], predicate: (v,i) => i < 5} \r\n  ] as { array:any[], predicate:Predicate<any> } []; \r\n  \r\n\r\n  return <div> \r\n    <TestDuplicates /> <br/>\r\n    <TestPicker /> <br/>\r\n    <TestUnion  /> <br/>\r\n    <TestFilter {...{testArgs}} /> <br/> \r\n    <TestIndexes {...{testArgs}} /> <br/> \r\n    <TestSort /> \r\n  </div> \r\n\r\n\r\n  return <div> \r\n    <h1>ArrayTest</h1> \r\n    <h3>test 'IsNull'</h3> \r\n    <Tester {...{values, func:IsNull}} /> \r\n    <br/> \r\n    <h3>test 'IsEmpty'</h3> \r\n    <Tester {...{values, func:IsEmpty}} /> \r\n  </div> \r\n} \r\n\r\n\r\n\r\n\r\n// DUPLICATES =========================================\r\nfunction TestDuplicates() { \r\n  const ts = [{id:'b'}, {id:'b'}, {id:'a'}, {id:'d'}, {id:'a'}, {id:'c'}]; \r\n  const {duplicates, unics} = Duplicates(ts, (t,u) => t.id === u.id); \r\n\r\n  return <div> \r\n    <div>Duplicates / Unics</div> \r\n    {JSON.stringify([ts])} : \r\n      <br/> -- duplicates: {JSON.stringify(duplicates)} \r\n      <br/> -- unics: {JSON.stringify(unics)} \r\n  </div> \r\n} \r\n\r\n\r\n\r\n// GROUP ===============================================\r\nfunction TestPicker() { \r\n  type T = {id:string}; \r\n  const array = [{id:'b'}, {id:'b'}, {id:'a'}, {id:'d'}, {id:'a'}, {id:'c'}]; \r\n  //const comparator = (t:T,u:string) => t.id === (u as string); \r\n  const pickingOrder = ['a', 'c']; \r\n\r\n  const predicate = (t:T) => pickingOrder.includes(t.id); \r\n\r\n  const sorter = (t:T,pivot:T) => { \r\n    const pivotIndex = pickingOrder.indexOf(pivot.id); \r\n    const index = pickingOrder.indexOf(t.id); \r\n    return index >= 0 && index >= pivotIndex; \r\n  }; \r\n\r\n  //const grouped = Group<T, string>(array,  comparator); \r\n  const {inclusion, exclusion} = Filter(array, predicate); \r\n  const picked = Sort<T>(inclusion,  sorter); \r\n\r\n  return <div> \r\n    <div>Picker</div> \r\n    {JSON.stringify([array])} : \r\n      <br/> -- picked: {JSON.stringify(picked)} \r\n  </div> \r\n} \r\n\r\n// SORT =================================================\r\nfunction TestSort() { \r\n  const array = [{id:11}, {id:2}, {id:1}, {id:5}, {id:4}, {id:7}]; \r\n  const sorted = Sort(array, (t, pivot) => t.id > pivot.id); \r\n\r\n  const sort1 = <div><br/> {JSON.stringify(array)} : \r\n    <br/> -- sorted: {JSON.stringify(sorted)} \r\n  </div>\r\n\r\n\r\n  const array2 = [{id:'b'}, {id:'b'}, {id:'a'}, {id:'d'}, {id:'a'}, {id:'c'}]; \r\n  const sorted2 = Sort(array2, (t, pivot) => t.id > pivot.id); \r\n\r\n  const sort2 = <div><br/> {JSON.stringify(array2)} : \r\n  <br/> -- sorted: {JSON.stringify(sorted2)} </div>\r\n  \r\n  return <div> \r\n    <div>Sort</div> \r\n      {sort1}\r\n      {sort2}\r\n  </div> \r\n} \r\n\r\n\r\n// Test Union ============================================= \r\nfunction TestUnion() { \r\n  const A = [12, 56, 4, 9, 7, 5, 566]; \r\n  const B = [15, 99, 54, 68]; \r\n  const predicate = (v:any) => v > 10; \r\n\r\n  return <div> \r\n    <div>Union</div> \r\n    {JSON.stringify(A)} : \r\n    {JSON.stringify(B)} : \r\n    {JSON.stringify(Union(A, B, predicate))} \r\n  </div> \r\n} \r\n\r\n// Test Indexes =========================================== \r\nfunction TestIndexes({testArgs}:{testArgs:{array:any[], predicate:Predicate<any>} []}) { \r\n  return <div> \r\n    <span>Indexes</span>\r\n    {testArgs.map( ({array, predicate},i) => { \r\n      return <div key={i}> \r\n        {JSON.stringify(array)} : \r\n        {JSON.stringify(predicate)} : \r\n        {JSON.stringify(Indexes(array, predicate))} \r\n      </div> \r\n    })} \r\n  </div> \r\n} \r\n\r\n// Test Filter ============================================ \r\nfunction TestFilter({testArgs}:{testArgs:{array:any[], predicate:Predicate<any>} []}) { \r\n  return <div> \r\n    <span>Filter</span>\r\n    {testArgs.map( ({array, predicate},i) => { \r\n      return <div key={i}> \r\n        {JSON.stringify(array)} : \r\n        {JSON.stringify(predicate)} : \r\n        {JSON.stringify(Filter(array, predicate))} \r\n      </div> \r\n    })} \r\n  </div> \r\n} \r\n\r\n// Tester ================================================= \r\nfunction Tester({values, func}:{values:any[], func:(value:any)=>any}) { \r\n  return <div> \r\n    {values.map( (value,i) => { \r\n      return <div key={i}> \r\n        {JSON.stringify(value)} : \r\n        {func.name} : \r\n        {JSON.stringify(func(value))} \r\n      </div> \r\n    })} \r\n  </div> \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\value.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrayutils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\editor.component.tsx",["393","394"],"import React, {useEffect, useState} from 'react'; \r\nimport {GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\nimport {ToArray, Pick} from '../../_arrayutils'; \r\nimport {Input, InputArray} from '../../_input'; \r\nimport {Select} from '../../_input'; \r\n\r\nimport {IReader} from './reader.component'; \r\nimport { useUpdate } from '../../_useupdate'; \r\n\r\n\r\n\r\nexport interface IEditor extends IReader { \r\n  setValue: React.Dispatch<React.SetStateAction<any>>; \r\n} \r\n\r\ntype EditorFunc = ({...props}:IEditor) => JSX.Element; \r\n\r\ninterface IEditorComponent extends IEditor { \r\n  CustomEditDefault?:EditorFunc; \r\n\r\n  CustomEditOne?:EditorFunc; \r\n  CustomEditMany?:EditorFunc; \r\n\r\n  CustomEditOneOptions?:EditorFunc; \r\n  CustomEditManyOptions?:EditorFunc; \r\n\r\n  CustomEditMixed?:EditorFunc; \r\n} \r\n\r\n/* EDITOR ===========================================================\r\n- ifield      // gives info about the type and default values to be displayed. \r\n- value       // will be assigned to its appropriate default values if undefined. \r\n- options     // if not empty, the label matching the value will be displayed. \r\n- setValue    // hooks with parent component value. \r\n\r\n- CustomEditDefault : if defined this function will be used display value. \r\n\r\n- CustomEditOne : if defined is used to display value, otherwise uses 'EditOne' (Input) \r\n\r\n- CustomEditMany : if defined is used to display value, otherwise uses 'EditMany' (Input array) \r\n\r\n- CustomEditOneOptions : if defined is used to display value, otherwise uses 'EditOneOptions' (Select with multiple:false) \r\n\r\n- CustomEditOneOptions : if defined is used to display value, otherwise uses 'EditManyOptions' (Select with multiple:true) \r\n\r\n- CustomEditMixed : if defined is use to display value, otherwise uses 'EditMixed' (EditMixed) \r\n*/ \r\nexport function Editor({ifield, options, ...props}:IEditorComponent) { \r\n  const _value = IsEmpty(options) ? \r\n    props.value ?? GetDefaultValueFromIField(ifield): \r\n    GetSelection(props.value).map(o => o.value); \r\n  \r\n  const [value, setValue] = useState(_value); \r\n  \r\n  // synchronize from parent value\r\n  useEffect(() => { \r\n    if(value !== _value) \r\n      props.setValue(value); \r\n  }, [value]); \r\n\r\n  // synchronize to parent value \r\n  //useUpdate(() => {props.setValue(_value)},_value); \r\n\r\n  function GetSelection (value:any) { \r\n    return Pick(options, ToArray(props.value), (o,u) => o.value === u); \r\n  } \r\n\r\n  const args = {ifield, value, setValue, options}; \r\n  const hasOptions = !IsEmpty(options); \r\n\r\n  // Edit Default\r\n  let editfunc = props.CustomEditDefault ?? undefined; \r\n\r\n  // Edit Many options\r\n  if(!editfunc && ifield.isArray && hasOptions) \r\n    editfunc = props.CustomEditManyOptions ?? EditManyOptions; \r\n\r\n  // Edit Many\r\n  if(!editfunc && ifield.isArray && !hasOptions) \r\n    editfunc = props.CustomEditMany ?? EditMany; \r\n\r\n  // Edit Mixed\r\n  if(!editfunc && ifield.isMixed) \r\n    editfunc = props.CustomEditMixed ?? EditMixed; \r\n\r\n  // Edit One option\r\n  if(!editfunc && hasOptions) \r\n    editfunc = props.CustomEditOneOptions ?? EditOneOptions; \r\n  // Edit One\r\n  editfunc = editfunc ?? props.CustomEditOne ?? EditOne; \r\n\r\n  return <EditFunc {...{editfunc, args}} /> \r\n} \r\n\r\n\r\nfunction EditFunc({...props}:{editfunc:EditorFunc, args:IEditor}) { \r\n  return <props.editfunc {...props.args} />; \r\n} \r\n\r\n\r\nfunction EditOne({...args}:IEditor) { \r\n  return <Input {...args} /> \r\n}\r\n\r\nfunction EditMany({value, setValue, ifield}:IEditor) { \r\n  return <InputArray {...{ifield, values:value, setValues:setValue}} /> \r\n}\r\n\r\nfunction EditOneOptions({ifield, value, setValue, ...props}:IEditor) { \r\n  const options = props.options ?? [] as IOption[]; \r\n  return <Select {...{ifield, value, setValue, options}  } /> \r\n} \r\n\r\nfunction EditManyOptions({...props}:IEditor) { \r\n  const options = props.options ?? [] as IOption[]; \r\n  return <Select {...{...props, options} } /> \r\n} \r\n\r\nfunction EditMixed({ifield, value, options, setValue}:IEditor) {\r\n  return <div>{JSON.stringify(value)}</div> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\reader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testLoader\\testLoader.tsx",["395"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientid.component.tsx",["396"],"import React, {useContext, useState} from 'react'; \r\nimport {CrudContext} from '../../../reusable/_crud'; \r\nimport {Reader, Editor} from '../../../reusable/_input'; \r\nimport {PatientContext} from '../patient.page'; \r\n\r\n\r\n// PATIENT ID ============================================= \r\nexport function PatientId () { \r\n  const {GetIFields} = useContext(CrudContext); \r\n  const {IdentifyPatient, RamqIsValid} = useContext(PatientContext); \r\n  const [ramqField] = GetIFields('patients', ['ramq']); \r\n  const [value, setValue] = useState(''); \r\n  \r\n  return <div> \r\n    <h2>Patient identification</h2> \r\n    <div> \r\n      <span>Ramq: </span> \r\n      <Editor {...{value, setValue, ifield:ramqField}} /> \r\n      <span>{RamqIsValid(value) ? '✓' : 'x'}</span> \r\n    </div> \r\n    <button onClick={() => IdentifyPatient(value)}>Identify</button> \r\n  </div> \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\preloader.component.tsx",["397","398"],"import {useContext, useEffect} from 'react'; \r\nimport {CrudContext} from '../reusable/_crud'; \r\n\r\n\r\n// Preloader ==============================================\r\nexport function useCollectionLoader(accessors:string[]) { \r\n  const {state, Collections, GetICollections} = useContext(CrudContext); \r\n  const collections = GetICollections(accessors); \r\n  const mustFetch = collections.length !== accessors.length; \r\n\r\n  useEffect(() => { \r\n    Collections(accessors); \r\n  }, [mustFetch && !state.busy]); \r\n\r\n  return !mustFetch; \r\n} \r\n\r\n\r\n// Pre-loader ==============================================\r\nexport function PreLoader() { \r\n  const accessors = ['questions','responses', 'forms', 'instructions']; \r\n  const ready = useCollectionLoader(accessors); \r\n\r\n  return <div> \r\n    <span>Pre-loading:</span> \r\n    {!ready && ' loading ...'} \r\n    {ready && ' ready !'} \r\n  </div> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\usepatient.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\session\\session.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_session.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\session\\usesession.hook.ts",["399"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usegetset.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useGetSet.hook.tsx",["400","401","402","403"],{"ruleId":"404","replacedBy":"405"},{"ruleId":"406","replacedBy":"407"},{"ruleId":"408","severity":1,"message":"409","line":3,"column":9,"nodeType":"410","messageId":"411","endLine":3,"endColumn":16},{"ruleId":"408","severity":1,"message":"412","line":4,"column":9,"nodeType":"410","messageId":"411","endLine":4,"endColumn":19},{"ruleId":"413","severity":1,"message":"414","line":3,"column":9,"nodeType":"410","messageId":"411","endLine":3,"endColumn":17},{"ruleId":"415","severity":1,"message":"416","line":20,"column":6,"nodeType":"417","endLine":20,"endColumn":8,"suggestions":"418"},{"ruleId":"404","replacedBy":"405"},{"ruleId":"406","replacedBy":"407"},{"ruleId":"404","replacedBy":"419"},{"ruleId":"406","replacedBy":"420"},{"ruleId":"421","severity":1,"message":"422","line":62,"column":37,"nodeType":"423","messageId":"424","endLine":62,"endColumn":47},{"ruleId":"413","severity":1,"message":"425","line":4,"column":9,"nodeType":"410","messageId":"411","endLine":4,"endColumn":15},{"ruleId":"426","severity":1,"message":"427","line":34,"column":22,"nodeType":"428","messageId":"429","endLine":34,"endColumn":24},{"ruleId":"426","severity":1,"message":"427","line":34,"column":47,"nodeType":"428","messageId":"429","endLine":34,"endColumn":49},{"ruleId":"413","severity":1,"message":"430","line":1,"column":16,"nodeType":"410","messageId":"411","endLine":1,"endColumn":26},{"ruleId":"426","severity":1,"message":"427","line":28,"column":20,"nodeType":"428","messageId":"429","endLine":28,"endColumn":22},{"ruleId":"426","severity":1,"message":"427","line":28,"column":36,"nodeType":"428","messageId":"429","endLine":28,"endColumn":38},{"ruleId":"413","severity":1,"message":"431","line":113,"column":12,"nodeType":"410","messageId":"411","endLine":113,"endColumn":22},{"ruleId":"404","replacedBy":"432"},{"ruleId":"406","replacedBy":"433"},{"ruleId":"413","severity":1,"message":"434","line":5,"column":20,"nodeType":"410","messageId":"411","endLine":5,"endColumn":30},{"ruleId":"413","severity":1,"message":"435","line":1,"column":26,"nodeType":"410","messageId":"411","endLine":1,"endColumn":31},{"ruleId":"413","severity":1,"message":"436","line":2,"column":15,"nodeType":"410","messageId":"411","endLine":2,"endColumn":26},{"ruleId":"413","severity":1,"message":"437","line":2,"column":38,"nodeType":"410","messageId":"411","endLine":2,"endColumn":45},{"ruleId":"413","severity":1,"message":"438","line":2,"column":63,"nodeType":"410","messageId":"411","endLine":2,"endColumn":75},{"ruleId":"413","severity":1,"message":"439","line":2,"column":77,"nodeType":"410","messageId":"411","endLine":2,"endColumn":89},{"ruleId":"415","severity":1,"message":"440","line":45,"column":6,"nodeType":"417","endLine":45,"endColumn":37,"suggestions":"441"},{"ruleId":"415","severity":1,"message":"442","line":45,"column":7,"nodeType":"443","endLine":45,"endColumn":36},{"ruleId":"415","severity":1,"message":"444","line":12,"column":6,"nodeType":"417","endLine":12,"endColumn":34,"suggestions":"445"},{"ruleId":"415","severity":1,"message":"442","line":12,"column":7,"nodeType":"443","endLine":12,"endColumn":33},{"ruleId":"413","severity":1,"message":"446","line":1,"column":17,"nodeType":"410","messageId":"411","endLine":1,"endColumn":26},{"ruleId":"413","severity":1,"message":"447","line":1,"column":28,"nodeType":"410","messageId":"411","endLine":1,"endColumn":36},{"ruleId":"413","severity":1,"message":"448","line":8,"column":10,"nodeType":"410","messageId":"411","endLine":8,"endColumn":20},{"ruleId":"413","severity":1,"message":"449","line":8,"column":22,"nodeType":"410","messageId":"411","endLine":8,"endColumn":32},{"ruleId":"413","severity":1,"message":"450","line":9,"column":10,"nodeType":"410","messageId":"411","endLine":9,"endColumn":16},{"ruleId":"413","severity":1,"message":"451","line":18,"column":20,"nodeType":"410","messageId":"411","endLine":18,"endColumn":23},{"ruleId":"452","severity":1,"message":"453","line":21,"column":3,"nodeType":"454","messageId":"455","endLine":21,"endColumn":77},{"ruleId":"413","severity":1,"message":"448","line":3,"column":9,"nodeType":"410","messageId":"411","endLine":3,"endColumn":19},{"ruleId":"413","severity":1,"message":"449","line":3,"column":21,"nodeType":"410","messageId":"411","endLine":3,"endColumn":31},{"ruleId":"413","severity":1,"message":"447","line":1,"column":28,"nodeType":"410","messageId":"411","endLine":1,"endColumn":36},{"ruleId":"413","severity":1,"message":"456","line":3,"column":9,"nodeType":"410","messageId":"411","endLine":3,"endColumn":13},{"ruleId":"413","severity":1,"message":"457","line":19,"column":10,"nodeType":"410","messageId":"411","endLine":19,"endColumn":22},{"ruleId":"413","severity":1,"message":"458","line":4,"column":20,"nodeType":"410","messageId":"411","endLine":4,"endColumn":30},{"ruleId":"413","severity":1,"message":"459","line":4,"column":45,"nodeType":"410","messageId":"411","endLine":4,"endColumn":56},{"ruleId":"460","severity":1,"message":"461","line":49,"column":10,"nodeType":"410","messageId":"462","endLine":49,"endColumn":17},{"ruleId":"413","severity":1,"message":"447","line":1,"column":28,"nodeType":"410","messageId":"411","endLine":1,"endColumn":36},{"ruleId":"413","severity":1,"message":"463","line":7,"column":9,"nodeType":"410","messageId":"411","endLine":7,"endColumn":15},{"ruleId":"413","severity":1,"message":"446","line":1,"column":28,"nodeType":"410","messageId":"411","endLine":1,"endColumn":37},{"ruleId":"413","severity":1,"message":"447","line":1,"column":39,"nodeType":"410","messageId":"411","endLine":1,"endColumn":47},{"ruleId":"413","severity":1,"message":"464","line":6,"column":27,"nodeType":"410","messageId":"411","endLine":6,"endColumn":41},{"ruleId":"413","severity":1,"message":"465","line":33,"column":28,"nodeType":"410","messageId":"411","endLine":33,"endColumn":36},{"ruleId":"413","severity":1,"message":"466","line":33,"column":39,"nodeType":"410","messageId":"411","endLine":33,"endColumn":45},{"ruleId":"415","severity":1,"message":"467","line":49,"column":34,"nodeType":"417","endLine":49,"endColumn":36,"suggestions":"468"},{"ruleId":"413","severity":1,"message":"469","line":70,"column":22,"nodeType":"410","messageId":"411","endLine":70,"endColumn":26},{"ruleId":"415","severity":1,"message":"470","line":18,"column":6,"nodeType":"417","endLine":18,"endColumn":8,"suggestions":"471"},{"ruleId":"413","severity":1,"message":"430","line":1,"column":16,"nodeType":"410","messageId":"411","endLine":1,"endColumn":26},{"ruleId":"413","severity":1,"message":"472","line":2,"column":38,"nodeType":"410","messageId":"411","endLine":2,"endColumn":48},{"ruleId":"413","severity":1,"message":"473","line":2,"column":34,"nodeType":"410","messageId":"411","endLine":2,"endColumn":41},{"ruleId":"413","severity":1,"message":"474","line":7,"column":7,"nodeType":"410","messageId":"411","endLine":7,"endColumn":16},{"ruleId":"404","replacedBy":"475"},{"ruleId":"406","replacedBy":"476"},{"ruleId":"413","severity":1,"message":"477","line":2,"column":9,"nodeType":"410","messageId":"411","endLine":2,"endColumn":19},{"ruleId":"413","severity":1,"message":"478","line":2,"column":32,"nodeType":"410","messageId":"411","endLine":2,"endColumn":39},{"ruleId":"479","severity":1,"message":"480","line":33,"column":3,"nodeType":"481","messageId":"482","endLine":40,"endColumn":9},{"ruleId":"413","severity":1,"message":"483","line":77,"column":21,"nodeType":"410","messageId":"411","endLine":77,"endColumn":30},{"ruleId":"413","severity":1,"message":"484","line":8,"column":10,"nodeType":"410","messageId":"411","endLine":8,"endColumn":19},{"ruleId":"415","severity":1,"message":"485","line":59,"column":6,"nodeType":"417","endLine":59,"endColumn":13,"suggestions":"486"},{"ruleId":"415","severity":1,"message":"487","line":21,"column":6,"nodeType":"417","endLine":21,"endColumn":8,"suggestions":"488"},{"ruleId":"413","severity":1,"message":"463","line":3,"column":9,"nodeType":"410","messageId":"411","endLine":3,"endColumn":15},{"ruleId":"415","severity":1,"message":"489","line":13,"column":6,"nodeType":"417","endLine":13,"endColumn":32,"suggestions":"490"},{"ruleId":"415","severity":1,"message":"442","line":13,"column":7,"nodeType":"428","endLine":13,"endColumn":31},{"ruleId":"413","severity":1,"message":"446","line":1,"column":10,"nodeType":"410","messageId":"411","endLine":1,"endColumn":19},{"ruleId":"415","severity":1,"message":"491","line":15,"column":6,"nodeType":"417","endLine":15,"endColumn":30,"suggestions":"492"},{"ruleId":"415","severity":1,"message":"442","line":15,"column":7,"nodeType":"443","endLine":15,"endColumn":29},{"ruleId":"415","severity":1,"message":"493","line":21,"column":6,"nodeType":"417","endLine":21,"endColumn":29,"suggestions":"494"},{"ruleId":"415","severity":1,"message":"442","line":21,"column":7,"nodeType":"443","endLine":21,"endColumn":28},"no-native-reassign",["495"],"no-negated-in-lhs",["496"],"no-unused-vars","'Session' is defined but never used.","Identifier","unusedVar","'TestLoader' is defined but never used.","@typescript-eslint/no-unused-vars","'FeedBack' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setActiveCollection'. Either include it or remove the dependency array.","ArrayExpression",["497"],["495"],["496"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'IsNull' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'useContext' is defined but never used.","'collection' is assigned a value but never used.",["495"],["496"],"'IUseToggle' is defined but never used.","'Union' is defined but never used.","'ArrxContext' is defined but never used.","'Element' is defined but never used.","'ElementIndex' is defined but never used.","'ElementValue' is defined but never used.","React Hook useEffect has missing dependencies: 'index' and 'values'. Either include them or remove the dependency array.",["498"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["499"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'GetValueAt' is defined but never used.","'SetValueAt' is defined but never used.","'Editor' is defined but never used.","'End' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'Arrx' is defined but never used.","'CrudFeedBack' is defined but never used.","'RowContext' is defined but never used.","'CellContext' is defined but never used.","@typescript-eslint/no-redeclare","'CrudBtn' is already defined.","redeclared","'Reader' is defined but never used.","'ElementContext' is defined but never used.","'accessor' is assigned a value but never used.","'Create' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'dao'. Either include it or remove the dependency array.",["500"],"'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'Collections'. Either include it or remove the dependency array.",["501"],"'DaoContext' is defined but never used.","'IEditor' is defined but never used.","'boolField' is assigned a value but never used.",["495"],["496"],"'Comparator' is defined but never used.","'ToArray' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'exclusion' is assigned a value but never used.","'useUpdate' is defined but never used.","React Hook useEffect has missing dependencies: '_value' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["502"],"React Hook useEffect has a missing dependency: 'Load'. Either include it or remove the dependency array.",["503"],"React Hook useEffect has missing dependencies: 'Collections' and 'accessors'. Either include them or remove the dependency array.",["504"],"React Hook useEffect has missing dependencies: 'syncIn' and 'value'. Either include them or remove the dependency array. If 'setValue' needs the current value of 'syncIn', you can also switch to useReducer instead of useState and read 'syncIn' in the reducer.",["505"],"React Hook useEffect has missing dependencies: 'syncOut' and 'value'. Either include them or remove the dependency array. If 'syncOut' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["506"],"no-global-assign","no-unsafe-negation",{"desc":"507","fix":"508"},{"desc":"509","fix":"510"},{"desc":"511","fix":"512"},{"desc":"513","fix":"514"},{"desc":"515","fix":"516"},{"desc":"517","fix":"518"},{"desc":"519","fix":"520"},{"desc":"521","fix":"522"},{"desc":"523","fix":"524"},{"desc":"525","fix":"526"},"Update the dependencies array to be: [setActiveCollection]",{"range":"527","text":"528"},"Update the dependencies array to be: [index, values]",{"range":"529","text":"530"},"Update the dependencies array to be: [callback]",{"range":"531","text":"532"},"Update the dependencies array to be: [dao]",{"range":"533","text":"534"},"Update the dependencies array to be: [Collections]",{"range":"535","text":"536"},"Update the dependencies array to be: [_value, props, value]",{"range":"537","text":"538"},"Update the dependencies array to be: [Load]",{"range":"539","text":"540"},"Update the dependencies array to be: [Collections, accessors]",{"range":"541","text":"542"},"Update the dependencies array to be: [syncIn, value]",{"range":"543","text":"544"},"Update the dependencies array to be: [syncOut, value]",{"range":"545","text":"546"},[663,665],"[setActiveCollection]",[1586,1617],"[index, values]",[304,332],"[callback]",[1476,1478],"[dao]",[618,620],"[Collections]",[2190,2197],"[_value, props, value]",[580,582],"[Load]",[470,496],"[Collections, accessors]",[469,493],"[syncIn, value]",[642,665],"[syncOut, value]"]