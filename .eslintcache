[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\_utils.ts":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\field\\field.class.ts":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\_mongooseparser.ts":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudaxios.ts":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientheader.component.tsx":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentifier.component.tsx":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientinfos.component.tsx":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientsloader.component.tsx":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireloader.component.tsx":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireforms.component.tsx":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnairepage.page.tsx":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\_input.ts":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\_useloader.ts":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\_arrx.ts":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\_objx.ts":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\useloader.hook.tsx":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input\\input.component.tsx":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.component.tsx":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.component.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\options.component.tsx":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\selectheader.component.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.hook.tsx":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\RemovableItems.component.tsx":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\_tablr.ts":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\usepage\\usePage.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionedit.component.tsx":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\useblankform.ts":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\_useactive.ts":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\_rendering.ts":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\_dao.ts":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.hook.tsx":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\displayactivedata.component.tsx":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\rendering\\valuerenderer.component.tsx":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\rendering\\renderers.utils.tsx":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\adminsection.page.tsx":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback.component.tsx":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\useactive.hook.ts":"59","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx":"60","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx":"61","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\loadselectcollection.component.tsx":"62","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudtablr.component.tsx":"63","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testkey.experiment.tsx":"64","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testrenderer.experiment.tsx":"65"},{"size":600,"mtime":1609529670659,"results":"66","hashOfConfig":"67"},{"size":609,"mtime":1610851640987,"results":"68","hashOfConfig":"67"},{"size":362,"mtime":499162500000,"results":"69","hashOfConfig":"67"},{"size":225,"mtime":1609475507334,"results":"70","hashOfConfig":"67"},{"size":1542,"mtime":1610660783236,"results":"71","hashOfConfig":"67"},{"size":117,"mtime":1609476049273,"results":"72","hashOfConfig":"67"},{"size":496,"mtime":1609883323259,"results":"73","hashOfConfig":"67"},{"size":747,"mtime":1610832828364,"results":"74","hashOfConfig":"67"},{"size":1432,"mtime":1610133369532,"results":"75","hashOfConfig":"67"},{"size":3330,"mtime":1609805687249,"results":"76","hashOfConfig":"67"},{"size":2003,"mtime":1610834606367,"results":"77","hashOfConfig":"67"},{"size":2351,"mtime":1609452679027,"results":"78","hashOfConfig":"67"},{"size":278,"mtime":1610227362484,"results":"79","hashOfConfig":"67"},{"size":2205,"mtime":1610681474583,"results":"80","hashOfConfig":"67"},{"size":1608,"mtime":1609452679069,"results":"81","hashOfConfig":"67"},{"size":2199,"mtime":1610578479558,"results":"82","hashOfConfig":"67"},{"size":2239,"mtime":1609979770974,"results":"83","hashOfConfig":"67"},{"size":222,"mtime":1609965015785,"results":"84","hashOfConfig":"67"},{"size":919,"mtime":1610159021625,"results":"85","hashOfConfig":"67"},{"size":1559,"mtime":1610228176480,"results":"86","hashOfConfig":"67"},{"size":1389,"mtime":1610159021729,"results":"87","hashOfConfig":"67"},{"size":1834,"mtime":1610230147763,"results":"88","hashOfConfig":"67"},{"size":5686,"mtime":1610389196830,"results":"89","hashOfConfig":"67"},{"size":1188,"mtime":1610230172532,"results":"90","hashOfConfig":"67"},{"size":358,"mtime":1610658185749,"results":"91","hashOfConfig":"67"},{"size":98,"mtime":1609788148795,"results":"92","hashOfConfig":"67"},{"size":217,"mtime":1610226352798,"results":"93","hashOfConfig":"67"},{"size":213,"mtime":1610756614202,"results":"94","hashOfConfig":"67"},{"size":1301,"mtime":1609804782791,"results":"95","hashOfConfig":"67"},{"size":1778,"mtime":1610159021625,"results":"96","hashOfConfig":"67"},{"size":2127,"mtime":1610658098556,"results":"97","hashOfConfig":"67"},{"size":1410,"mtime":1610311943278,"results":"98","hashOfConfig":"67"},{"size":1025,"mtime":1609790418274,"results":"99","hashOfConfig":"67"},{"size":1723,"mtime":1610749840771,"results":"100","hashOfConfig":"67"},{"size":2188,"mtime":1610833076747,"results":"101","hashOfConfig":"67"},{"size":977,"mtime":1610068539668,"results":"102","hashOfConfig":"67"},{"size":2177,"mtime":1610159021627,"results":"103","hashOfConfig":"67"},{"size":497,"mtime":1609787735852,"results":"104","hashOfConfig":"67"},{"size":379,"mtime":1610223339809,"results":"105","hashOfConfig":"67"},{"size":1499,"mtime":1610838964076,"results":"106","hashOfConfig":"67"},{"size":462,"mtime":1610223305599,"results":"107","hashOfConfig":"67"},{"size":1092,"mtime":1610838893442,"results":"108","hashOfConfig":"67"},{"size":982,"mtime":1610224559674,"results":"109","hashOfConfig":"67"},{"size":1708,"mtime":1610226535467,"results":"110","hashOfConfig":"67"},{"size":1664,"mtime":1610318540525,"results":"111","hashOfConfig":"67"},{"size":1486,"mtime":1610311931655,"results":"112","hashOfConfig":"67"},{"size":107,"mtime":1610755508565,"results":"113","hashOfConfig":"67"},{"size":31,"mtime":1610488467872,"results":"114","hashOfConfig":"67"},{"size":275,"mtime":1610748002292,"results":"115","hashOfConfig":"67"},{"size":6684,"mtime":1610850245126,"results":"116","hashOfConfig":"67"},{"size":2177,"mtime":1610576181564,"results":"117","hashOfConfig":"67"},{"size":943,"mtime":1610658077622,"results":"118","hashOfConfig":"67"},{"size":534,"mtime":1610658871984,"results":"119","hashOfConfig":"67"},{"size":1368,"mtime":1610839199129,"results":"120","hashOfConfig":"67"},{"size":4367,"mtime":1610849006284,"results":"121","hashOfConfig":"67"},{"size":706,"mtime":1610748046314,"results":"122","hashOfConfig":"67"},{"size":1080,"mtime":1610848143560,"results":"123","hashOfConfig":"67"},{"size":1143,"mtime":1610826916408,"results":"124","hashOfConfig":"67"},{"size":2507,"mtime":1610832914125,"results":"125","hashOfConfig":"67"},{"size":921,"mtime":1610839187407,"results":"126","hashOfConfig":"67"},{"size":2265,"mtime":1610831044483,"results":"127","hashOfConfig":"67"},{"size":1111,"mtime":1610757727161,"results":"128","hashOfConfig":"67"},{"size":2800,"mtime":1610846140229,"results":"129","hashOfConfig":"67"},{"size":749,"mtime":1610848173866,"results":"130","hashOfConfig":"67"},{"size":4092,"mtime":1610852871141,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},"ke513i",{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"153"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"153"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"153"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"147"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"147"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"147"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"153"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"153"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"153"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"153"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"236"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"147"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"153"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"144"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"153"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"153"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"153"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"153"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"153"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["287","288"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",["289"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",["290","291","292"],"import React, { useEffect, useState, useContext } from 'react'; \r\nimport {DataAccessObject, ICrud, IUseDao, useDao} from '../../reusable/dao/_dao'; \r\nimport {CrudMongoose} from '../../reusable/mongooseparser/mongooseaxios'; \r\nimport {IsEmpty, IsNull} from '../../reusable/utils/_utils'; \r\n\r\nimport {SelectCollection} from './components/selectcollection.component'; \r\nimport {AdminTablr} from './components/admintablr.component'; \r\n\r\nconst crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n\r\n\r\n\r\n// Test DAO ===================================== \r\nexport const DaoContext = React.createContext({} as IUseDao); \r\nexport default function Admin() { \r\n  const context = useDao(new DataAccessObject(crud as ICrud)); \r\n  const {state, activeCollection, Collections} = context; \r\n\r\n  useEffect(() => { \r\n    Collections(['questions', 'responses', 'forms', 'instructions', 'patients', 'answers']); \r\n  }, []); \r\n\r\n  // Render -------------------------------------\r\n  return <div> \r\n    <h1>ADMIN PAGE</h1> \r\n    <div> \r\n    <DaoContext.Provider value={context} > \r\n      <FeedBack /> \r\n      {state.ready && <SelectCollection />} \r\n      {!IsEmpty(activeCollection) && <AdminTablr />} \r\n    </DaoContext.Provider> \r\n    </div> \r\n  </div> \r\n}\r\n\r\n\r\nfunction FeedBack() { \r\n  const {state} = useContext(DaoContext); \r\n\r\n  return <div> \r\n    {!state.ready && 'Loading'} \r\n    {state.ready && 'Ready'} \r\n    {state.success && JSON.stringify(state.response['success'])} \r\n    {!state.success && 'an errors occured'} \r\n  </div> \r\n}",["293","294"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx",[],["295","296"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\_utils.ts",["297","298","299"],"import {Filter, Remove, ToArray, Union, Combine, Duplicates, Order, CommonPredicates} from './arrays.utils'; \r\nimport {SetSize, SetWidth, IEvent, IsPressEnter, OnEnter, GetInputType, GetValueFromInput} from './htmlelement.utils'; \r\nimport {Copy, Edit, Read, IsEmpty, IsNull, GetDefaultValueByType, GetTypeByValue} from './valuetypetesting.utils'; \r\nimport {Field} from './field/field.class'; \r\n\r\n\r\nexport {Filter, Remove, ToArray, Union, Combine, Duplicates, Order, CommonPredicates} \r\nexport {SetSize, SetWidth, IsPressEnter, OnEnter, GetInputType, GetValueFromInput} \r\nexport type {IEvent} \r\nexport {Copy, Edit, Read, IsEmpty, IsNull, GetDefaultValueByType, GetTypeByValue} \r\nexport {Field} ",["300","301"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",["302"],"import React from 'react'; \r\nimport {IsNull} from './_utils'; \r\n\r\n// IEvent #####################################\r\nexport interface IEvent extends React.ChangeEvent<HTMLInputElement> { \r\n  code?:any, \r\n  [key:string]:any, \r\n} \r\n\r\nexport function OnEnter(event:any, Func:any) { \r\n  if(IsPressEnter( (event as IEvent).code ) ) \r\n    Func(); \r\n} \r\n\r\n\r\n\r\n// Get Value From Input -------------------------\r\nexport function GetValueFromInput(event:IEvent) { \r\n  const target = event.target; \r\n  const type = target.type; \r\n  if(type === 'number') \r\n    return target.valueAsNumber as number; \r\n  if(type === 'date') \r\n    return target.valueAsDate; \r\n  if(type === 'checkbox') \r\n    return target.checked as boolean; \r\n  return target.value; \r\n} \r\n\r\n\r\n// GetInputType ---------------------------------\r\nexport function GetInputType(type:string) { \r\n  if(type === 'number') \r\n    return 'number'; \r\n  if(type === 'boolean') \r\n    return 'checkbox'; \r\n  if(type === 'string') \r\n    return 'text'; \r\n  return 'text'; \r\n}\r\n\r\n\r\n// If Code is pressEnter\r\nexport function IsPressEnter(code:string = ''):boolean { \r\n  return code === 'Enter' || code === 'NumpadEnter'; \r\n} \r\n\r\n\r\n// TAG UTILS ###################################\r\nexport function SetWidth(value:number):{width:any} {\r\n  return {width:`${SetSize(value)+2}ch`}; \r\n}\r\n\r\nexport function SetSize(value:any):number { \r\n  const w = String(value).length; \r\n  return w < 5 ? 5 : w; \r\n} \r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\field\\field.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudaxios.ts",[],["303","304"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["305"],"export interface IMongooseModel { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    enum?: any[]; \r\n    abbrev?: boolean; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\n//async function ParseFields() \r\nexport function ParseField(field:IMongooseField):IField {   \r\n  const {path, instance, options, $embeddedSchemaType} = field; \r\n  const ifield:IField = {} as IField; \r\n\r\n  ifield.accessor = path ?? ''; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.options = options ?? {}; \r\n  ifield.type = options?.ref ?? $embeddedSchemaType?.instance ?? field.instance.toLowerCase(); \r\n  ifield.isMixed = instance.toLowerCase() === 'mixed'; \r\n  ifield.isEnum = !!options?.enum; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = !!options?.ref; \r\n  ifield.isAbbrev = !!options?.abbrev; \r\n\r\n  ifield.enums = options.enum ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, ifield.options); \r\n  \r\n  //ifield.validators = \r\n  return ifield; \r\n} \r\n\r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",["306"],"import React, {useState} from 'react'; \r\nimport {CrudMongoose} from '../../reusable/mongooseparser/_mongooseparser'; \r\nimport {IsNull, IsEmpty} from '../../reusable/utils/_utils'; \r\n\r\nimport {PatientHeader} from './components/patientheader.component'; \r\nimport {PatientsLoader} from './components/patientsloader.component'; \r\nimport {PatientIdentifier} from './components/patientidentifier.component'; \r\nimport {PatientInfos} from './components/patientinfos.component'; \r\nimport QuestionnairePage from '../questionnaire/questionnairepage.page';\r\n\r\n/*import {QuestionnaireLoader} from './components/questionnaireloader.component'; \r\nimport {Questionnaire} from './components/questionnaire.component'; */\r\n\r\ninterface IPatientContext { \r\n  patients:ICollection; \r\n  setPatients:any; \r\n\r\n  patient:IEntry; \r\n  setPatient:any; \r\n\r\n  patientUpdated:boolean; \r\n  setPatientUpdated:any; \r\n} \r\n// PATIENT ======================================\r\nexport const PatientContext = React.createContext({} as IPatientContext); \r\nexport const CrudContext = React.createContext({} as {crud:CrudMongoose});\r\n\r\nexport default function Patient() { \r\n  const crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n  const [patient, setPatient] = useState<IEntry>({} as IEntry); \r\n  const [patientUpdated, setPatientUpdated] = useState(false); \r\n  const [patients, setPatients] = useState({} as ICollection); \r\n  \r\n  const context = {crud, patients, setPatients, \r\n    patient, setPatient, \r\n    patientUpdated, setPatientUpdated} as IPatientContext; \r\n\r\n  if(!patientUpdated) \r\n    return <div> \r\n      <CrudContext.Provider value={{crud}} >\r\n        <PatientContext.Provider value={context} > \r\n          <PatientHeader /> \r\n          {IsEmpty(patients) && <PatientsLoader/>} \r\n          {!IsEmpty(patients) && IsEmpty(patient) && <PatientIdentifier/>} \r\n          {!IsEmpty(patients) && !IsEmpty(patient) && <PatientInfos/>} \r\n        </PatientContext.Provider> \r\n      </CrudContext.Provider>\r\n    </div> \r\n\r\n  return <div> \r\n    <CrudContext.Provider value={{crud}} >\r\n      <PatientContext.Provider value={context} > \r\n        <QuestionnairePage/> \r\n      </PatientContext.Provider> \r\n    </CrudContext.Provider>\r\n  </div>  \r\n} \r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientheader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentifier.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientinfos.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientsloader.component.tsx",["307"],"import {useContext, useEffect} from 'react'; \r\nimport {useLoader} from '../../../reusable/hooks/useloader/_useloader'; \r\n\r\nimport {CrudContext, PatientContext} from '../patient.page'; \r\n\r\n\r\n// PatientsCollectionLoader ===================== \r\nexport function PatientsLoader() { \r\n  const {crud} = useContext(CrudContext); \r\n  const {setPatients} = useContext(PatientContext); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const loadfunc = async () => { \r\n    const response:IResponse = await crud.Collection('patients'); \r\n    if(response.success) \r\n      setPatients(() => response.data as ICollection); \r\n  }; \r\n\r\n  useEffect(() => {Load(loadfunc)}, []); \r\n\r\n\r\n  /* ?????? TO ADD IN USELOADER ??????\r\n  function Component(props) {\r\n    const [fetched, setFetched] = React.useState(false);\r\n    React.useEffect(() => {\r\n      const ac = new AbortController();\r\n      Promise.all([\r\n        fetch('http://placekitten.com/1000/1000', {signal: ac.signal}),\r\n        fetch('http://placekitten.com/2000/2000', {signal: ac.signal})\r\n      ]).then(() => setFetched(true))\r\n        .catch(ex => console.error(ex));\r\n      return () => ac.abort(); // Abort both fetches on unmount\r\n    }, []);\r\n    return fetched;\r\n  }\r\n  */\r\n\r\n  if(!state.ready) \r\n    return <div> Loading ... </div> \r\n  if(state.ready && !state.success) \r\n    return <div> Oh no! An error occured ... </div> \r\n  return null; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireloader.component.tsx",["308","309"],"import {useEffect, useContext} from 'react'; \r\nimport {useLoader} from '../../../reusable/hooks/useloader/_useloader'; \r\nimport {CrudContext} from '../../patient/patient.page';\r\nimport {QuestionnaireContext} from '../questionnairepage.page';\r\n\r\n\r\n\r\n// PatientsCollectionLoader ===================== \r\nexport function QuestionnaireLoader() { \r\n  const {crud} = useContext(CrudContext); \r\n\r\n  const {setQuestions, setResponses, setAnswers} = useContext(QuestionnaireContext); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const loadfunc = async () => { \r\n    const questions:IResponse = await crud.Collection('questions'); \r\n    if(questions.success) \r\n      setQuestions(() => questions.data as ICollection); \r\n    console.log(questions);\r\n\r\n    const responses:IResponse = await crud.Collection('responses'); \r\n    if(responses.success) \r\n      setResponses(() => responses.data as ICollection); \r\n\r\n    /*const answers:IResponse = await crud.Collection('answers'); \r\n    if(answers.success) \r\n      setAnswers(() => answers.data as ICollection); */\r\n  }; \r\n\r\n  useEffect(() => {Load(loadfunc)}, []); \r\n\r\n\r\n  /* ?????? TO ADD IN USELOADER ??????\r\n  function Component(props) {\r\n    const [fetched, setFetched] = React.useState(false);\r\n    React.useEffect(() => {\r\n      const ac = new AbortController();\r\n      Promise.all([\r\n        fetch('http://placekitten.com/1000/1000', {signal: ac.signal}),\r\n        fetch('http://placekitten.com/2000/2000', {signal: ac.signal})\r\n      ]).then(() => setFetched(true))\r\n        .catch(ex => console.error(ex));\r\n      return () => ac.abort(); // Abort both fetches on unmount\r\n    }, []);\r\n    return fetched;\r\n  }\r\n  */\r\n\r\n  if(!state.ready) \r\n    return <div> Loading ... </div> \r\n  if(state.ready && !state.success) \r\n    return <div> Oh no! An error occured ... </div> \r\n  return null; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireforms.component.tsx",["310","311"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnairepage.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\_useloader.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input\\input.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.component.tsx",["312","313","314","315","316","317"],"import React, { useContext, useEffect, useState } from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex, ElementValue} from '../../arrx/_arrx'; \r\nimport {Input} from '../_input'; \r\nimport {IInputArray, IUseInputArray, useInputArray} from './inputarray.hook';\r\n\r\n\r\nexport const InputArrayContext = React.createContext({} as IUseInputArray); \r\nexport function InputArray({children, ...props}:React.PropsWithChildren<IInputArray>) { \r\n  const context = useInputArray(props); \r\n  const {values} = props; \r\n  \r\n  return <InputArrayContext.Provider value={context} > \r\n    <Arrx {...{values}} > \r\n      <Elements> \r\n        <UpdateElement/> <DeleteBtn/>\r\n        <br/> \r\n      </Elements> \r\n      <CreateElement/>\r\n    </Arrx> \r\n  </InputArrayContext.Provider> \r\n} \r\n\r\n\r\n// Create element =======================================\r\nfunction CreateElement() { \r\n  const {type, defaultValue, Create} = useContext(InputArrayContext); \r\n  const [value, setValue] = useState(defaultValue); \r\n\r\n  const onEnterUp = () => {\r\n    Create(value); \r\n    setValue(() => defaultValue); // reset input to defaultValue after creation. \r\n  }; \r\n  return <Input {...{value, setValue, defaultValue, type, onEnterUp}}  /> \r\n} \r\n\r\n// Update element =======================================\r\nfunction UpdateElement() { \r\n  const {values, type, defaultValue, Update} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n\r\n  const [value, setValue] = useState(values[index]); \r\n  useEffect(() => { \r\n    setValue(values[index]); \r\n  }, [JSON.stringify(values[index])]); \r\n\r\n  const onEnterUp = () => Update(index, value); \r\n  return <Input {...{value, setValue, type, defaultValue, onEnterUp}} />\r\n}\r\n\r\n// Delete Btn ===================================\r\nexport function DeleteBtn({children, ...props}:React.PropsWithChildren<React.ButtonHTMLAttributes<HTMLButtonElement>>) { \r\n  const {Delete} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  return <button onClick={() => Delete(index)} {...props}> \r\n    {!children ? 'x' : children} \r\n  </button> \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\options.component.tsx",["318"],"import React, {useContext, useEffect} from 'react'; \r\n//import {IOption} from '../../reusable/_input'; \r\nimport {SelectContext} from './select.component'; \r\n\r\n\r\n// OPTIONS ======================================\r\ninterface IOptions { \r\n  label?:string; // defines a optgroup with a label \r\n  options:IOption[]; \r\n  [key:string]:any; \r\n} \r\n//const OptionsContext = React.createContext({}); \r\nexport function Options({label, options}:IOptions) { \r\n  const {setOptions} = useContext(SelectContext); \r\n  \r\n  useEffect(() => { \r\n    setOptions( (prev:any) => [...prev, ...options] ); \r\n  }, []); \r\n\r\n  return <div > \r\n    {label ? (<div className={'select_body_label'}>{label}</div>) : null} \r\n    {options.map( (option,i) => { \r\n      return <Option key={i} option={option} /> \r\n    })} \r\n  </div> \r\n} \r\n\r\nfunction Option({option}:{option:IOption}) { \r\n  const {SelectValue} = useContext(SelectContext); \r\n  return <div className={'select_body_option'} onClick={() => SelectValue(option.value)}> \r\n    {option.label} \r\n  </div>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\selectheader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\RemovableItems.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["319","320","321"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull, GetDefaultValueFromIField, IsEmpty} from '../../utils/_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield) => { \r\n      const key = ifield.accessor; \r\n      return <Cell {...{key, ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const data = datas[row]; \r\n  const value = IsEmpty(data) ? GetDefaultValueFromIField(ifield): datas[row][ifield.accessor]; \r\n  const context = {value, row, ifield} as ICellContext; \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["322","323","324"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\usepage\\usePage.tsx",[],["325","326"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionedit.component.tsx",["327","328","329","330","331"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {Arrx, Elements, ArrxContext, ElementContext, ElementIndex} from '../../../reusable/components/arrx/_arrx'; \r\nimport {Input, Select, Options, InputArray} from '../../../reusable/components/input/_input'; \r\nimport {AnswersAreComplete, IAnswer} from './useblankform'; \r\n\r\n\r\n\r\n// QUESTION EDIT ================================\r\nexport function QuestionEdit({setValues}:{setValues:any}) { \r\n  const {values} = useContext(ArrxContext); \r\n  const {index} = useContext(ElementContext); \r\n  const Answer = (values[index] as IAnswer); \r\n  const {labels, optional, answer, responseType} = Answer; \r\n  \r\n  const [value, setValue] = useState(answer); \r\n  const {type, defaultValue} = {type:'number', defaultValue:0}; \r\n\r\n  const UpdateAnswers = () => setValues((prev:any) => { \r\n    const editedAnswers:IAnswer[] = [...prev]; \r\n    const editedAnswer:IAnswer = editedAnswers[index]; \r\n    editedAnswer.answer = value; \r\n    return editedAnswers; \r\n  }); \r\n\r\n  useEffect(() => {UpdateAnswers()},[value]); \r\n\r\n  const options:IOption[] = responseType.enum ? \r\n    responseType.enum.map( (v,i) => { return {value:i, label:v} }) : [] ; \r\n\r\n  const input = <Input {...{value, setValue, type, defaultValue}} />\r\n  const select = <span>\r\n    <Select {...{value, setValue, type, defaultValue}} >\r\n      <Options {...{options}} />\r\n    </Select>\r\n  </span>\r\n\r\n\r\n  return <div> \r\n    [<ElementIndex /><span>{labels[0]}: </span>] \r\n    {AnswersAreComplete([{...Answer, answer:value}]) ? \r\n      <span>&#10003;</span> : \r\n      <span>X</span>}\r\n    <span>{!responseType.enum ? input : select}</span> \r\n  </div> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\useblankform.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\_useactive.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\_rendering.ts",["332"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts",["333"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts",["334"],"import {useMemo, useState} from 'react'; \r\nimport {useLoader, IState} from '../hooks/useloader/_useloader'; \r\nimport {DataAccessObject as IDao} from './dao.class'; \r\n\r\n\r\nexport interface IUseDao{ \r\n  state:IState; \r\n  activeCollection:ICollection; \r\n  setActiveCollection:React.Dispatch<ICollection>; \r\n  collections:() => ICollection[]; \r\n\r\n  Collections:(accessors:string[]) => Promise<void>; \r\n  Create: (accessor:string, toCreate:IEntry) => Promise<void>; \r\n  Read: (accessor:string, id?:string[]) => Promise<void>; \r\n  Update: (accessor:string, toUpdate:IEntry) => Promise<void>; \r\n  Delete: (accessor:string, toDelete?:IEntry) => Promise<void>; \r\n\r\n  GetForeignElements: (ifield:IField) => {foreignCollection:ICollection|undefined, abbrevField:IField|undefined}, \r\n  GetForeignOptions: (ifield:IField) => IOption[]; \r\n  GetForeignValues: (ifield:IField, value:any[]) => any[]; \r\n} \r\n\r\n\r\n\r\n// USE DAO ======================================\r\nexport function useDao(dao:IDao):IUseDao { \r\n  const Dao = useMemo(() => dao, []); \r\n  const {state, Load} = useLoader(); \r\n  const [activeCollection, setActiveCollection] = useState({} as ICollection); \r\n\r\n  const collections = () => Dao.collections.collections; \r\n  const Collections = async (accessors:string[]) => Load(() => Dao.Collections(accessors)); \r\n  const Create = async (accessor:string, toCreate:IEntry) => Load(() => Dao.Create(accessor, toCreate)); \r\n  const Read = async (accessor:string, ids?:string[]) => Load(() => Dao.Read(accessor, ids)); \r\n  const Update = async (accessor:string, toUpdate:IEntry) => Load(() => Dao.Update(accessor, toUpdate)); \r\n  const Delete = async (accessor:string, toDelete?:IEntry) => Load(() => Dao.Delete(accessor, toDelete)); \r\n\r\n  const GetForeignElements = (ifield:IField) => Dao.GetForeignElements(ifield); \r\n  const GetForeignOptions = (ifield:IField) => Dao.GetForeignOptions(ifield); \r\n  const GetForeignValues = (ifield:IField, ids:any[]) => Dao.GetForeignValues(ifield, ids); \r\n\r\n  return {state, activeCollection, setActiveCollection, \r\n    collections, Collections, \r\n    Create, Read, Update, Delete, \r\n    GetForeignElements, GetForeignOptions, GetForeignValues}; \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\displayactivedata.component.tsx",["335","336","337","338"],"import {useContext} from 'react'; \r\nimport {ActiveContext} from './admintablr.component'; \r\n\r\nimport {Objx, ObjxContext, Fields, Field, FieldContext, FieldLabel, FieldValue} from '../../../reusable/components/objx/_objx'; \r\n\r\n\r\n\r\nexport function DisplayActiveData({cols}:{cols:IField[]}) { \r\n  const activeContext = useContext(ActiveContext); \r\n\r\n  return \r\n    <Objx {...{value:activeContext.active.data, ifields:cols}}> \r\n      <Fields>\r\n        <FieldLabel/> \r\n        <FieldValue/> \r\n        <br/>\r\n      </Fields>\r\n    </Objx>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\rendering\\valuerenderer.component.tsx",["339","340","341","342","343","344","345"],"import { useEffect, useMemo, useState } from 'react'; \r\nimport {IFieldToHandler, IRenderers} from './renderers.utils'; \r\n\r\n\r\n\r\n// DATA RENDERER ================================\r\ninterface IValueRenderer { \r\n  value:any; \r\n  data:any; \r\n  setData:any; \r\n  isEdit:boolean; \r\n  ifield:IField; \r\n  renderers:IRenderers; \r\n} \r\nexport function ValueRenderer({...props}:IValueRenderer) { \r\n  const {data, setData, ifield, isEdit, renderers} = props; \r\n  const [value, setValue] = useState(props.value); \r\n\r\n  //console.log([props.data, value]); \r\n\r\n  // update value if data changes \r\n  useEffect(() => { \r\n    setValue(props.value); \r\n  }, [JSON.stringify(props.value)]) \r\n\r\n  // update data when value is changed \r\n  const hasChanged = JSON.stringify(props.value) !== JSON.stringify(value) \r\n  /*if(hasChanged) \r\n    console.log([ifield.accessor, value, props.value]); */\r\n\r\n  useEffect(() => { \r\n    if(!isEdit) \r\n      return; \r\n    const newData = {...data}; \r\n    newData[ifield.accessor] = value; \r\n    /*if(ifield.accessor === 'titles') \r\n      console.log(newData); */\r\n    //setData(newData); \r\n  }, [JSON.stringify(value)]); \r\n\r\n  const handler = `${IFieldToHandler(ifield)}${isEdit?'Edit':'Read'}`; \r\n  const renderer = renderers[handler] ?? renderers['Default']; \r\n\r\n  \r\n  return <span>{renderer(ifield)(value, setValue)}</span> \r\n  //return <span>Dada</span>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\rendering\\renderers.utils.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\adminsection.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback.component.tsx",["346","347"],"import React, {useContext} from 'react'; \r\nimport {DaoContext} from '../reusable/dao/_dao'; \r\n\r\n\r\n// Feedback =====================================\r\nexport function FeedBack() { \r\n  const {state} = useContext(DaoContext); \r\n\r\n  return <div> \r\n    {!state.ready && <span>LOADING ... </span>} \r\n    {state.ready && <span>Ready </span>} \r\n    {state.ready && state.success && state.response['actionType'] === 'update'} \r\n    {state.ready && !state.success && 'an errors occured'} \r\n  </div> \r\n} \r\n\r\nfunction CrudFeedBack({response}:{response:IResponse}) { \r\n  const {actionType, success, data, err} = response; \r\n\r\n  if(success) { \r\n    return <span> \r\n      {actionType === 'create' && <span>Successful creation</span>} \r\n      {actionType === 'update' && <span>Successful update</span>} \r\n      {actionType === 'delete' && <span>Successful deletion</span>} \r\n    </span> \r\n  } \r\n\r\n  return <span> \r\n    {actionType === 'create' && <span>Failed creation</span>} \r\n    {actionType === 'update' && <span>Failed update</span>} \r\n    {actionType === 'delete' && <span>Failed deletion</span>} \r\n    {<div>{JSON.stringify(err)}</div>} \r\n  </span> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\useactive.hook.ts",["348","349","350"],"import React, {useState, useEffect} from 'react'; \r\nimport {GetDefaultValueFromIField} from '../../utils/_utils';\r\n\r\nexport interface IUseActive { \r\n  active :IActive; \r\n  ResetActive: () => void; \r\n  SetActive: (row:number, mode:string) => void; \r\n  SetData: (data:any) => void; \r\n  /*GetActive: () => IActive; \r\n  IsActive: (row:number) => boolean; \r\n  GetMode: (row:number) => string; \r\n  GetData: (row:number) => any; */ \r\n} \r\ninterface IActive { \r\n  data:any; \r\n  row?:number; \r\n  mode?:string; \r\n} \r\n\r\n// UseActive ====================================\r\nexport function useActive(datas:any[], ifields:IField[]):IUseActive { \r\n  //const [active, setActive] = useState({data:FetchData(datas, ifields)} as IActive); \r\n  const [active, setActive] = useState(InitActive()); \r\n\r\n  function InitActive() {\r\n    return {data:FetchData(datas, ifields), row:-1, mode:'read'} as IActive; \r\n  }\r\n\r\n  useEffect(() => { \r\n    ResetActive(); \r\n  }, [JSON.stringify(ifields)]); \r\n\r\n  function ResetActive() { \r\n    if(JSON.stringify(active) !== JSON.stringify(InitActive())) \r\n      setActive(() => InitActive()); \r\n  } \r\n  \r\n  //const GetActive = ():IActive => active; \r\n  function SetActive (row:number, mode:string) { \r\n    setActive((prev:any) => { \r\n      const data = FetchData(datas, ifields, row); \r\n      console.log(['SetActive', data]); \r\n      return {...prev, data:FetchData(datas, ifields, row), row, mode} \r\n      //return {data:FetchData(datas, ifields, row), row, mode}\r\n    }); \r\n  } \r\n  //const IsActive = (row?:number):boolean => row !== undefined && active.row === row; \r\n  //const GetMode = (row:number):string => IsActive(row) ? active.mode ?? '' : ''; \r\n\r\n  // returns data with default values if not defined \r\n  /*const GetData = (row?:number):any => { \r\n    return IsActive(row) ? active.data : FetchData(datas, ifields, row); \r\n  } */\r\n  function SetData (data:any):void { \r\n    setActive((prev:any) => { \r\n      //const data = FetchData(datas, ifields); \r\n      console.log(['SetData', data]); \r\n      return {...prev, data} \r\n    }); \r\n  } \r\n  return {active, ResetActive, SetActive, SetData}; \r\n} \r\n\r\n\r\n// FetchData from datas if it can find it and complete undefined data with their defaultvalue. \r\nfunction FetchData(datas:any, ifields:IField[],  row?:number) { \r\n  let data:any = (row !== undefined && row >= 0) ? datas[row]: {}; \r\n  ifields.forEach( f => { \r\n    if(data[f.accessor] === undefined) \r\n      data[f.accessor] = GetDefaultValueFromIField(f); \r\n  }); \r\n  return data; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx",["351"],"import React, { useContext } from 'react'; \r\nimport {RowContext} from '../../../reusable/components/tablr/_tablr'; \r\nimport {DaoContext} from '../../../reusable/dao/_dao'; \r\nimport {ActiveContext} from './crudtablr.component'; \r\n\r\n// CRUD BTN -------------------------------------\r\nexport function CreateBtn() { \r\n  const {activeCollection:{accessor}, Create} = useContext(DaoContext);\r\n  const action = (entry:any) => Create(accessor, entry); \r\n\r\n  const handle = 'create'; \r\n  const labels = {affirm:'Create', confirm:'Confirm creation', cancel:'Cancel creation'}; \r\n  return <CrudBtn {...{handle, labels, action}} /> \r\n} \r\n\r\nexport function UpdateBtn() { \r\n  const {activeCollection:{accessor}, Update} = useContext(DaoContext);\r\n  const action = (entry:any) => Update(accessor, entry); \r\n\r\n  const handle = 'update'; \r\n  const labels = {affirm:'Update', confirm:'Confirm update', cancel:'Cancel update'}; \r\n  return <CrudBtn {...{handle, labels, action}} /> \r\n} \r\n\r\nexport function DeleteBtn() { \r\n  const {activeCollection:{accessor}, Delete} = useContext(DaoContext);\r\n  const action = (entry:any) => Delete(accessor, entry); \r\n\r\n  const handle = 'delete'; \r\n  const labels = {affirm:'Delete', confirm:'Confirm deletion', cancel:'Cancel deletion'}; \r\n  return <CrudBtn {...{handle, labels, action}} /> \r\n} \r\n\r\n\r\ninterface CrudBtn { \r\n  handle: string; \r\n  labels:{ \r\n    affirm:string, \r\n    confirm:string, \r\n    cancel:string, \r\n  }; \r\n  action:(entry:any)=>Promise<void>; \r\n} \r\nfunction CrudBtn ({handle, labels, action}:CrudBtn) { \r\n  const {row} = useContext(RowContext); \r\n  const {active, ResetActive, SetActive} = useContext(ActiveContext); \r\n  const isActive = active.row === row; \r\n  const isHandled = active.mode === handle; \r\n\r\n  const Affirm = () => SetActive(row, handle); // replace with setActive. \r\n  const Cancel = () => ResetActive(); // replace with with reset. \r\n  const Confirm = async () => { \r\n    await action(active.data); \r\n    ResetActive(); \r\n  } \r\n\r\n  return <span> \r\n    {isActive && isHandled && <button onClick={Confirm}>{labels.confirm}</button>} \r\n    {isActive && isHandled && <button onClick={Cancel}>{labels.cancel}</button>} \r\n    {active.row !== row && <button onClick={Affirm}>{labels.affirm}</button>} \r\n  </span> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\loadselectcollection.component.tsx",["352"],"import { useContext, useEffect } from 'react'; \r\nimport { Select, Options } from '../../../reusable/components/input/_input'; \r\nimport { DaoContext } from '../../../reusable/dao/_dao'; \r\nimport { FeedBack } from '../../../components/feedback.component'; \r\nimport { CrudTablr } from './crudtablr.component';\r\nimport { IsEmpty } from '../../../reusable/utils/_utils';\r\n\r\n\r\n// SELECT COLLECTION ============================\r\nexport function LoadSelectionCollection () { \r\n  const {state, activeCollection, setActiveCollection, collections, Collections} = useContext(DaoContext); \r\n  const options:IOption[] = collections().map( ic => { return {value:ic, label:ic.label} }); \r\n\r\n  useEffect(() => { \r\n    Collections(['questions','responses', 'forms', 'instructions', 'patients', 'answers']); \r\n  }, []); \r\n  \r\n  return <div> \r\n    <FeedBack/> \r\n    {state.ready && state.success && \r\n      <Select {...{value:activeCollection, setValue:setActiveCollection}} > \r\n        <Options {...{options}} /> \r\n      </Select> }\r\n    {state.ready && state.success && !IsEmpty(activeCollection) && <CrudTablr/> } \r\n  </div>\r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudtablr.component.tsx",["353","354","355","356"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testkey.experiment.tsx",["357","358"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testrenderer.experiment.tsx",["359","360","361","362"],{"ruleId":"363","replacedBy":"364"},{"ruleId":"365","replacedBy":"366"},{"ruleId":"367","severity":1,"message":"368","line":6,"column":9,"nodeType":"369","messageId":"370","endLine":6,"endColumn":21},{"ruleId":"371","severity":1,"message":"372","line":1,"column":28,"nodeType":"369","messageId":"370","endLine":1,"endColumn":36},{"ruleId":"371","severity":1,"message":"373","line":4,"column":18,"nodeType":"369","messageId":"370","endLine":4,"endColumn":24},{"ruleId":"374","severity":1,"message":"375","line":21,"column":6,"nodeType":"376","endLine":21,"endColumn":8,"suggestions":"377"},{"ruleId":"363","replacedBy":"378"},{"ruleId":"365","replacedBy":"379"},{"ruleId":"363","replacedBy":"380"},{"ruleId":"365","replacedBy":"381"},{"ruleId":"371","severity":1,"message":"382","line":3,"column":9,"nodeType":"369","messageId":"370","endLine":3,"endColumn":13},{"ruleId":"371","severity":1,"message":"383","line":3,"column":15,"nodeType":"369","messageId":"370","endLine":3,"endColumn":19},{"ruleId":"371","severity":1,"message":"384","line":3,"column":21,"nodeType":"369","messageId":"370","endLine":3,"endColumn":25},{"ruleId":"363","replacedBy":"364"},{"ruleId":"365","replacedBy":"366"},{"ruleId":"371","severity":1,"message":"373","line":2,"column":9,"nodeType":"369","messageId":"370","endLine":2,"endColumn":15},{"ruleId":"363","replacedBy":"385"},{"ruleId":"365","replacedBy":"386"},{"ruleId":"387","severity":1,"message":"388","line":58,"column":37,"nodeType":"389","messageId":"390","endLine":58,"endColumn":47},{"ruleId":"371","severity":1,"message":"373","line":3,"column":9,"nodeType":"369","messageId":"370","endLine":3,"endColumn":15},{"ruleId":"374","severity":1,"message":"391","line":19,"column":37,"nodeType":"376","endLine":19,"endColumn":39,"suggestions":"392"},{"ruleId":"371","severity":1,"message":"393","line":12,"column":38,"nodeType":"369","messageId":"370","endLine":12,"endColumn":48},{"ruleId":"374","severity":1,"message":"391","line":30,"column":37,"nodeType":"376","endLine":30,"endColumn":39,"suggestions":"394"},{"ruleId":"371","severity":1,"message":"372","line":1,"column":28,"nodeType":"369","messageId":"370","endLine":1,"endColumn":36},{"ruleId":"371","severity":1,"message":"395","line":2,"column":68,"nodeType":"369","messageId":"370","endLine":2,"endColumn":80},{"ruleId":"371","severity":1,"message":"396","line":2,"column":15,"nodeType":"369","messageId":"370","endLine":2,"endColumn":26},{"ruleId":"371","severity":1,"message":"397","line":2,"column":38,"nodeType":"369","messageId":"370","endLine":2,"endColumn":45},{"ruleId":"371","severity":1,"message":"398","line":2,"column":63,"nodeType":"369","messageId":"370","endLine":2,"endColumn":75},{"ruleId":"371","severity":1,"message":"395","line":2,"column":77,"nodeType":"369","messageId":"370","endLine":2,"endColumn":89},{"ruleId":"374","severity":1,"message":"399","line":44,"column":6,"nodeType":"376","endLine":44,"endColumn":37,"suggestions":"400"},{"ruleId":"374","severity":1,"message":"401","line":44,"column":7,"nodeType":"402","endLine":44,"endColumn":36},{"ruleId":"374","severity":1,"message":"403","line":18,"column":6,"nodeType":"376","endLine":18,"endColumn":8,"suggestions":"404"},{"ruleId":"371","severity":1,"message":"373","line":4,"column":9,"nodeType":"369","messageId":"370","endLine":4,"endColumn":15},{"ruleId":"405","severity":1,"message":"406","line":35,"column":22,"nodeType":"407","messageId":"408","endLine":35,"endColumn":24},{"ruleId":"405","severity":1,"message":"406","line":35,"column":47,"nodeType":"407","messageId":"408","endLine":35,"endColumn":49},{"ruleId":"371","severity":1,"message":"409","line":1,"column":16,"nodeType":"369","messageId":"370","endLine":1,"endColumn":26},{"ruleId":"405","severity":1,"message":"406","line":28,"column":20,"nodeType":"407","messageId":"408","endLine":28,"endColumn":22},{"ruleId":"405","severity":1,"message":"406","line":28,"column":36,"nodeType":"407","messageId":"408","endLine":28,"endColumn":38},{"ruleId":"363","replacedBy":"410"},{"ruleId":"365","replacedBy":"411"},{"ruleId":"371","severity":1,"message":"412","line":2,"column":9,"nodeType":"369","messageId":"370","endLine":2,"endColumn":13},{"ruleId":"371","severity":1,"message":"413","line":2,"column":15,"nodeType":"369","messageId":"370","endLine":2,"endColumn":23},{"ruleId":"371","severity":1,"message":"414","line":3,"column":33,"nodeType":"369","messageId":"370","endLine":3,"endColumn":43},{"ruleId":"371","severity":1,"message":"415","line":13,"column":18,"nodeType":"369","messageId":"370","endLine":13,"endColumn":26},{"ruleId":"374","severity":1,"message":"416","line":25,"column":37,"nodeType":"376","endLine":25,"endColumn":44,"suggestions":"417"},{"ruleId":"371","severity":1,"message":"418","line":1,"column":8,"nodeType":"369","messageId":"370","endLine":1,"endColumn":13},{"ruleId":"419","severity":1,"message":"420","line":13,"column":40,"nodeType":"369","messageId":"421","endLine":13,"endColumn":51},{"ruleId":"374","severity":1,"message":"422","line":27,"column":34,"nodeType":"376","endLine":27,"endColumn":36,"suggestions":"423"},{"ruleId":"371","severity":1,"message":"424","line":4,"column":15,"nodeType":"369","messageId":"370","endLine":4,"endColumn":26},{"ruleId":"371","severity":1,"message":"425","line":4,"column":36,"nodeType":"369","messageId":"370","endLine":4,"endColumn":41},{"ruleId":"371","severity":1,"message":"426","line":4,"column":43,"nodeType":"369","messageId":"370","endLine":4,"endColumn":55},{"ruleId":"427","severity":1,"message":"428","line":12,"column":5,"nodeType":"429","messageId":"430","endLine":18,"endColumn":12},{"ruleId":"371","severity":1,"message":"431","line":1,"column":21,"nodeType":"369","messageId":"370","endLine":1,"endColumn":28},{"ruleId":"371","severity":1,"message":"432","line":16,"column":16,"nodeType":"369","messageId":"370","endLine":16,"endColumn":23},{"ruleId":"374","severity":1,"message":"433","line":24,"column":6,"nodeType":"376","endLine":24,"endColumn":35,"suggestions":"434"},{"ruleId":"374","severity":1,"message":"401","line":24,"column":7,"nodeType":"402","endLine":24,"endColumn":34},{"ruleId":"371","severity":1,"message":"435","line":27,"column":9,"nodeType":"369","messageId":"370","endLine":27,"endColumn":19},{"ruleId":"374","severity":1,"message":"436","line":39,"column":6,"nodeType":"376","endLine":39,"endColumn":29,"suggestions":"437"},{"ruleId":"374","severity":1,"message":"401","line":39,"column":7,"nodeType":"402","endLine":39,"endColumn":28},{"ruleId":"371","severity":1,"message":"438","line":17,"column":10,"nodeType":"369","messageId":"370","endLine":17,"endColumn":22},{"ruleId":"371","severity":1,"message":"439","line":18,"column":31,"nodeType":"369","messageId":"370","endLine":18,"endColumn":35},{"ruleId":"371","severity":1,"message":"418","line":1,"column":8,"nodeType":"369","messageId":"370","endLine":1,"endColumn":13},{"ruleId":"374","severity":1,"message":"440","line":31,"column":6,"nodeType":"376","endLine":31,"endColumn":31,"suggestions":"441"},{"ruleId":"374","severity":1,"message":"401","line":31,"column":7,"nodeType":"402","endLine":31,"endColumn":30},{"ruleId":"442","severity":1,"message":"443","line":44,"column":10,"nodeType":"369","messageId":"444","endLine":44,"endColumn":17},{"ruleId":"374","severity":1,"message":"375","line":16,"column":6,"nodeType":"376","endLine":16,"endColumn":8,"suggestions":"445"},{"ruleId":"371","severity":1,"message":"446","line":2,"column":9,"nodeType":"369","messageId":"370","endLine":2,"endColumn":21},{"ruleId":"371","severity":1,"message":"447","line":5,"column":27,"nodeType":"369","messageId":"370","endLine":5,"endColumn":37},{"ruleId":"371","severity":1,"message":"448","line":5,"column":46,"nodeType":"369","messageId":"370","endLine":5,"endColumn":57},{"ruleId":"374","severity":1,"message":"449","line":26,"column":6,"nodeType":"376","endLine":26,"endColumn":33,"suggestions":"450"},{"ruleId":"371","severity":1,"message":"451","line":17,"column":9,"nodeType":"369","messageId":"370","endLine":17,"endColumn":12},{"ruleId":"371","severity":1,"message":"452","line":29,"column":17,"nodeType":"369","messageId":"370","endLine":29,"endColumn":25},{"ruleId":"371","severity":1,"message":"453","line":71,"column":9,"nodeType":"369","messageId":"370","endLine":71,"endColumn":18},{"ruleId":"371","severity":1,"message":"454","line":73,"column":10,"nodeType":"369","messageId":"370","endLine":73,"endColumn":18},{"ruleId":"371","severity":1,"message":"455","line":74,"column":10,"nodeType":"369","messageId":"370","endLine":74,"endColumn":15},{"ruleId":"371","severity":1,"message":"456","line":74,"column":17,"nodeType":"369","messageId":"370","endLine":74,"endColumn":25},"no-native-reassign",["457"],"no-negated-in-lhs",["458"],"no-unused-vars","'AdminSection' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-unused-vars","'useState' is defined but never used.","'IsNull' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Collections'. Either include it or remove the dependency array.","ArrayExpression",["459"],["457"],["458"],["457"],["458"],"'Copy' is defined but never used.","'Edit' is defined but never used.","'Read' is defined but never used.",["457"],["458"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","React Hook useEffect has missing dependencies: 'Load' and 'loadfunc'. Either include them or remove the dependency array.",["460"],"'setAnswers' is assigned a value but never used.",["461"],"'ElementValue' is defined but never used.","'ArrxContext' is defined but never used.","'Element' is defined but never used.","'ElementIndex' is defined but never used.","React Hook useEffect has missing dependencies: 'index' and 'values'. Either include them or remove the dependency array.",["462"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has missing dependencies: 'options' and 'setOptions'. Either include them or remove the dependency array.",["463"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'useContext' is defined but never used.",["457"],["458"],"'Arrx' is defined but never used.","'Elements' is defined but never used.","'InputArray' is defined but never used.","'optional' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'UpdateAnswers'. Either include it or remove the dependency array.",["464"],"'React' is defined but never used.","@typescript-eslint/no-use-before-define","'Collections' was used before it was defined.","noUseBeforeDefine","React Hook useMemo has a missing dependency: 'dao'. Either include it or remove the dependency array.",["465"],"'ObjxContext' is defined but never used.","'Field' is defined but never used.","'FieldContext' is defined but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'useMemo' is defined but never used.","'setData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.value'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'props.value', you can also switch to useReducer instead of useState and read 'props.value' in the reducer.",["466"],"'hasChanged' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data', 'ifield.accessor', 'isEdit', and 'value'. Either include them or remove the dependency array.",["467"],"'CrudFeedBack' is defined but never used.","'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'ResetActive'. Either include it or remove the dependency array.",["468"],"@typescript-eslint/no-redeclare","'CrudBtn' is already defined.","redeclared",["469"],"'DaoContexter' is defined but never used.","'RowContext' is defined but never used.","'CellContext' is defined but never used.","React Hook useEffect has a missing dependency: 'activeContext'. Either include it or remove the dependency array.",["470"],"'key' is assigned a value but never used.","'setValue' is assigned a value but never used.","'renderers' is assigned a value but never used.","'accessor' is assigned a value but never used.","'entry' is assigned a value but never used.","'setEntry' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"473","fix":"475"},{"desc":"476","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"471","fix":"490"},{"desc":"491","fix":"492"},"Update the dependencies array to be: [Collections]",{"range":"493","text":"494"},"Update the dependencies array to be: [Load, loadfunc]",{"range":"495","text":"496"},{"range":"497","text":"496"},"Update the dependencies array to be: [index, values]",{"range":"498","text":"499"},"Update the dependencies array to be: [options, setOptions]",{"range":"500","text":"501"},"Update the dependencies array to be: [UpdateAnswers, value]",{"range":"502","text":"503"},"Update the dependencies array to be: [dao]",{"range":"504","text":"505"},"Update the dependencies array to be: [props.value]",{"range":"506","text":"507"},"Update the dependencies array to be: [data, ifield.accessor, isEdit, value]",{"range":"508","text":"509"},"Update the dependencies array to be: [ResetActive]",{"range":"510","text":"511"},{"range":"512","text":"494"},"Update the dependencies array to be: [activeCollection.accessor, activeContext]",{"range":"513","text":"514"},[923,925],"[Collections]",[650,652],"[Load, loadfunc]",[1095,1097],[1571,1602],"[index, values]",[585,587],"[options, setOptions]",[1053,1060],"[UpdateAnswers, value]",[1024,1026],"[dao]",[634,663],"[props.value]",[1103,1126],"[data, ifield.accessor, isEdit, value]",[939,964],"[ResetActive]",[796,798],[1233,1260],"[activeCollection.accessor, activeContext]"]