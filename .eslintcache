[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\valuerenderer.component.tsx":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\loadpatient.component.tsx":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\loadquestionnaire.component.tsx":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx":"59"},{"size":600,"mtime":1609529670659,"results":"60","hashOfConfig":"61"},{"size":590,"mtime":1611787196542,"results":"62","hashOfConfig":"61"},{"size":362,"mtime":499162500000,"results":"63","hashOfConfig":"61"},{"size":225,"mtime":1609475507334,"results":"64","hashOfConfig":"61"},{"size":1141,"mtime":1611607453355,"results":"65","hashOfConfig":"61"},{"size":117,"mtime":1609476049273,"results":"66","hashOfConfig":"61"},{"size":496,"mtime":1609883323259,"results":"67","hashOfConfig":"61"},{"size":1493,"mtime":1611613395214,"results":"68","hashOfConfig":"61"},{"size":3330,"mtime":1611094858686,"results":"69","hashOfConfig":"61"},{"size":2003,"mtime":1611094858767,"results":"70","hashOfConfig":"61"},{"size":2253,"mtime":1611776071422,"results":"71","hashOfConfig":"61"},{"size":2309,"mtime":1611354518934,"results":"72","hashOfConfig":"61"},{"size":1780,"mtime":1611276492206,"results":"73","hashOfConfig":"61"},{"size":2274,"mtime":1611360455578,"results":"74","hashOfConfig":"61"},{"size":1473,"mtime":1611094858490,"results":"75","hashOfConfig":"61"},{"size":462,"mtime":1611094858513,"results":"76","hashOfConfig":"61"},{"size":1042,"mtime":1611094858511,"results":"77","hashOfConfig":"61"},{"size":982,"mtime":1611094858504,"results":"78","hashOfConfig":"61"},{"size":8129,"mtime":1611784756022,"results":"79","hashOfConfig":"61"},{"size":3604,"mtime":1611783266472,"results":"80","hashOfConfig":"61"},{"size":425,"mtime":1611094858586,"results":"81","hashOfConfig":"61"},{"size":313,"mtime":1611186041859,"results":"82","hashOfConfig":"61"},{"size":336,"mtime":1611094858220,"results":"83","hashOfConfig":"61"},{"size":811,"mtime":1611613379299,"results":"84","hashOfConfig":"61"},{"size":112,"mtime":1611094858253,"results":"85","hashOfConfig":"61"},{"size":1301,"mtime":1611094858561,"results":"86","hashOfConfig":"61"},{"size":688,"mtime":1611105433287,"results":"87","hashOfConfig":"61"},{"size":1330,"mtime":1611105734495,"results":"88","hashOfConfig":"61"},{"size":124,"mtime":1611105257047,"results":"89","hashOfConfig":"61"},{"size":233,"mtime":1611094858166,"results":"90","hashOfConfig":"61"},{"size":3111,"mtime":1611261423772,"results":"91","hashOfConfig":"61"},{"size":1241,"mtime":1611175973024,"results":"92","hashOfConfig":"61"},{"size":510,"mtime":1611452000844,"results":"93","hashOfConfig":"61"},{"size":1532,"mtime":1611265998385,"results":"94","hashOfConfig":"61"},{"size":2116,"mtime":1611102160553,"results":"95","hashOfConfig":"61"},{"size":943,"mtime":1611094858392,"results":"96","hashOfConfig":"61"},{"size":447,"mtime":1611094858232,"results":"97","hashOfConfig":"61"},{"size":4285,"mtime":1611356030017,"results":"98","hashOfConfig":"61"},{"size":1373,"mtime":1611177659474,"results":"99","hashOfConfig":"61"},{"size":107,"mtime":1611094858263,"results":"100","hashOfConfig":"61"},{"size":2751,"mtime":1611357393940,"results":"101","hashOfConfig":"61"},{"size":79,"mtime":1611192421523,"results":"102","hashOfConfig":"61"},{"size":338,"mtime":1611192348931,"results":"103","hashOfConfig":"61"},{"size":1535,"mtime":1611776191785,"results":"104","hashOfConfig":"61"},{"size":231,"mtime":1611094858225,"results":"105","hashOfConfig":"61"},{"size":1927,"mtime":1611534878890,"results":"106","hashOfConfig":"61"},{"size":1598,"mtime":1611522375233,"results":"107","hashOfConfig":"61"},{"size":3429,"mtime":1611522023225,"results":"108","hashOfConfig":"61"},{"size":512,"mtime":1611777771531,"results":"109","hashOfConfig":"61"},{"size":1421,"mtime":1611785745919,"results":"110","hashOfConfig":"61"},{"size":1246,"mtime":1611776071424,"results":"111","hashOfConfig":"61"},{"size":1055,"mtime":1611604553824,"results":"112","hashOfConfig":"61"},{"size":2627,"mtime":1611782531154,"results":"113","hashOfConfig":"61"},{"size":2968,"mtime":1611779065227,"results":"114","hashOfConfig":"61"},{"size":4449,"mtime":1611692562224,"results":"115","hashOfConfig":"61"},{"size":4618,"mtime":1611787164693,"results":"116","hashOfConfig":"61"},{"size":701,"mtime":1611777860845,"results":"117","hashOfConfig":"61"},{"size":1229,"mtime":1611783304558,"results":"118","hashOfConfig":"61"},{"size":736,"mtime":1611785745918,"results":"119","hashOfConfig":"61"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},"ke513i",{"filePath":"123","messages":"124","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"132"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"132"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"132"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"132"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"187"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"132"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"132"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"132"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"132"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"132"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"132"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"132"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"132"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["257","258"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",["259","260","261","262","263","264","265","266"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",["267"],"import React, {useEffect} from 'react'; \r\nimport {useDao, DaoContexter, ICrud, DataAccessObject} from '../../reusable/_dao'; \r\nimport {CrudMongoose} from '../../reusable/_mongooseparser'; \r\nimport {FeedBack} from '../../components/feedback/feedback.component'; \r\nimport {IsEmpty} from '../../reusable/_utils'; \r\n\r\nimport {CollectionSelector} from './components/collectionselector.component'; \r\nimport {AdminTablr} from './components/admintablr.component'; \r\n\r\nimport '../../css/table.css'; \r\n\r\nconst crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n\r\n\r\n// ADMIN PAGE ====================================\r\nexport function Admin() { \r\n  const UseDao = useDao( new DataAccessObject(crud as ICrud) ); \r\n  const {state, activeCollection, Collections} = UseDao; \r\n\r\n  useEffect(() => { \r\n    Collections(['questions','responses', 'forms', 'instructions', 'patients', 'answers']); \r\n  }, []); \r\n\r\n  return <DaoContexter {...{UseDao}} > \r\n    <h1>Admin</h1> \r\n    <FeedBack/> \r\n    {state.ready && state.success && <CollectionSelector /> } \r\n    {!IsEmpty(activeCollection) && <AdminTablr/>} \r\n  </DaoContexter> \r\n}\r\n\r\n\r\n",["268","269"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx",[],["270","271"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["272"],"export interface IMongooseCollection { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    enum?: any[]; \r\n    abbrev?: boolean; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\n//async function ParseFields() \r\nexport function ParseField(field:IMongooseField):IField { \r\n  \r\n  const {path, instance, options, $embeddedSchemaType} = field; \r\n  /*if(path==='fId')\r\n    console.log(field); \r\n\r\n  if(path==='titles')\r\n    console.log(field); */\r\n\r\n  const ifield:IField = {} as IField; \r\n\r\n  ifield.accessor = path ?? ''; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.options = options ?? {}; \r\n  ifield.type = options?.ref ?? $embeddedSchemaType?.instance ?? field.instance.toLowerCase(); \r\n  ifield.isMixed = instance.toLowerCase() === 'mixed'; \r\n  ifield.isEnum = !!options?.enum; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = !!options?.ref; \r\n  ifield.isAbbrev = !!options?.abbrev; \r\n\r\n  ifield.enums = options.enum ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, ifield.options); \r\n  \r\n  //ifield.validators = \r\n  return ifield; \r\n} \r\n\r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["273","274","275"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull, GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield) => { \r\n      return <Cell key={ifield.accessor} {...{ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const data = datas[row]; \r\n  const value = IsEmpty(data) ? GetDefaultValueFromIField(ifield): datas[row][ifield.accessor]; \r\n  const context = {value, row, ifield} as ICellContext; \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["276","277","278"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts",["279"],"import {IsEmpty, GetDefaultValueFromIField} from '../_utils'; \r\n\r\n\r\nexport interface ICrud { \r\n  Collection:(accessor:string) => Promise<ICrudResponse>; \r\n  Create: (accessor:string, toCreate?:IEntry|IEntry[]) => Promise<ICrudResponse>; \r\n  Read: (accessor:string, id?:string[]) => Promise<ICrudResponse>; \r\n  Update: (accessor:string, toUpdate:IEntry|IEntry[]) => Promise<ICrudResponse>; \r\n  Delete: (accessor:string, toDelete?:IEntry|IEntry[]) => Promise<ICrudResponse>; \r\n} \r\n\r\n// DataAcessObject ==============================\r\nexport class DataAccessObject { \r\n  public collections:Collections = new Collections(); \r\n\r\n  private crud:ICrud = {} as ICrud; \r\n  \r\n  constructor(crud:ICrud) { \r\n    this.crud = crud; \r\n  } \r\n\r\n  public GetCollections(accessors?:string[]):ICollection[] { \r\n    return this.collections.GetCollections(accessors); \r\n  } \r\n\r\n  public GetEntry(accessor:string, id?:string) { \r\n    return this.collections.GetEntry(accessor, id); \r\n  }\r\n\r\n  public GetIFields(accessor:string, ifieldAccessors?:string[]):IField[] { \r\n    return this.collections.GetIFields(accessor, ifieldAccessors); \r\n  }\r\n\r\n\r\n  // COLLECTION .................................\r\n  public async Collections(accessors:string[]):Promise<ICrudResponse[]> { \r\n    const responses = [] as ICrudResponse[]; \r\n    for(let i=0; i<accessors.length; i++) { \r\n      const response = await this.Collection(accessors[i]); \r\n      responses.push(response); \r\n    } \r\n    return responses; \r\n  } \r\n\r\n  public async Collection(accessors:string):Promise<ICrudResponse> { \r\n    const response = await this.crud.Collection(accessors); \r\n    if(response.success) \r\n      this.collections.collections.push(response.data); \r\n    return response; \r\n  }\r\n\r\n  // CREATE .....................................  \r\n  public async Create(accessor:string, entry:IEntry):Promise<ICrudResponse> { \r\n    const [response] = (await this.crud.Create(accessor, entry)).data as ICrudResponse[]; \r\n    if(response.success) { \r\n      this.collections.Create(accessor, response.data); \r\n    }\r\n    return response; \r\n  } \r\n\r\n  // READ .......................................\r\n  public async Read(accessor:string, entry?:string[]):Promise<IEntry[]> { \r\n    //const results = (await crud.Read(accessor, [entry])).data as IResponse[]; \r\n    //const selectedCollection = this.GetCollection(accessor); \r\n    /*if(selectedCollection) \r\n      selectedCollection.Create(response.data); */ \r\n    return [] as IEntry[]; \r\n  } \r\n\r\n  // UPDATE .....................................\r\n  public async Update(accessor:string, entry:IEntry):Promise<ICrudResponse> { \r\n    const [response] = (await this.crud.Update(accessor, [entry])).data as ICrudResponse[]; \r\n    if(response.success) {\r\n      this.collections.Update(accessor, response.data); \r\n    }\r\n    return response; \r\n  } \r\n\r\n  // DELETE .....................................\r\n  public async Delete(accessor:string, entry?:IEntry):Promise<ICrudResponse> { \r\n    const [response] = (await this.crud.Delete(accessor, entry)).data as ICrudResponse[]; \r\n    if(response.success) {\r\n      this.collections.Delete(accessor, response.data); \r\n    }\r\n    return response; \r\n  } \r\n\r\n  // GET FOREIGN ELEMENTS -----------------------------\r\n  public GetForeignElements(ifield:IField) \r\n    : {foreignCollection:ICollection|undefined, abbrevField:IField|undefined} \r\n  { \r\n    return this.collections.GetForeignElements(ifield); \r\n  } \r\n\r\n  public GetForeignOptions(ifield:IField) : IOption[] { \r\n    const {foreignCollection, abbrevField} = this.GetForeignElements(ifield);\r\n    if(!foreignCollection || !abbrevField)\r\n      return [] as IOption[]; \r\n    return foreignCollection.entries?.map( e => { \r\n      return {value:e._id, label:e[abbrevField.accessor]} as IOption; \r\n    }); \r\n  } \r\n} \r\n\r\n\r\n\r\n\r\n// Collections ===================================\r\nclass Collections { \r\n  public collections:ICollection[] = [] as ICollection[]; \r\n\r\n  public GetEntry(accessor:string, id?:string):IEntry { \r\n    const [collection] = this.GetCollections([accessor]).map(c=>new Collection(c)); \r\n    return collection?.GetEntry(id) ?? {} as IEntry; \r\n  }\r\n\r\n  public GetIFields(accessor:string, ifieldAccessors?:string[]) { \r\n    const [collection] = this.GetCollections([accessor]).map(c=>new Collection(c)); \r\n    return collection.GetIFields(ifieldAccessors); \r\n  }\r\n\r\n  public GetCollections(accessors?:string[]) { \r\n    if(!accessors) \r\n      return this.collections; \r\n    return this.collections.filter(c=> accessors.includes(c.accessor)) ?? []; \r\n  } \r\n\r\n  public Create(accessor:string, entry:IEntry) { \r\n    const collection = new Collection(this.collections.find(c=> c.accessor===accessor)); \r\n    return collection.Create(entry); \r\n  } \r\n\r\n  public Read(accessor:string, ids?:string[]) { \r\n    const collection = new Collection(this.collections.find(c=> c.accessor===accessor)); \r\n    return collection.Read(ids); \r\n  } \r\n\r\n  public Update(accessor:string, entry:IEntry) { \r\n    const collection = new Collection(this.collections.find(c=> c.accessor===accessor)); \r\n    return collection.Update(entry); \r\n  } \r\n\r\n  public Delete(accessor:string, entry:IEntry) {\r\n    const collection = new Collection(this.collections.find(c=> c.accessor===accessor)); \r\n    return collection.Delete(entry); \r\n  }\r\n  \r\n  // GET FOREIGN INFO -----------------------------\r\n  public GetForeignElements(ifield:IField) \r\n      :{foreignCollection:ICollection|undefined, abbrevField:IField|undefined} { \r\n    const foreignCollection = this.collections.find(c => c.accessor === ifield.type); \r\n    const abbrevField = new Collection(foreignCollection).GetAbbrevField(); \r\n    return {foreignCollection, abbrevField}; \r\n  }\r\n}\r\n\r\n\r\n\r\n// COLLECTION ===================================\r\nclass Collection { \r\n  public collection:ICollection|undefined; \r\n\r\n  constructor(collection:ICollection|undefined) { \r\n    if(collection) \r\n      this.collection = collection; \r\n  }\r\n\r\n  public GetIFields(ifieldAccessors?:string[]):IField[] { \r\n    if(!ifieldAccessors) \r\n      return this.collection?.ifields ?? [] as IField[]; \r\n    const ifields = [] as IField[]; \r\n    ifieldAccessors.forEach(accessor => { \r\n      const ifield = this.collection?.ifields.find(f=>f.accessor===accessor); \r\n      if(ifield) \r\n        ifields.push(ifield); \r\n    })\r\n    return ifields; \r\n  } \r\n\r\n  public GetEmptyEntry() { \r\n    const ifields = this.collection?.ifields; \r\n    let entry = {} as IEntry; \r\n    ifields?.forEach( f => { \r\n      entry[f.accessor] = GetDefaultValueFromIField(f); \r\n    }); \r\n    return entry; \r\n  }\r\n\r\n  public GetEntry(id?:string):IEntry { \r\n    if(!this.collection?.entries) \r\n      return {} as IEntry; \r\n    return this.collection?.entries.find(e=>e._id === id) ?? {} as IEntry; \r\n  } \r\n\r\n  // Create -------------------------------------\r\n  public Create(entry:IEntry) { \r\n    if(!this.collection?.entries) \r\n      return false; \r\n    this.collection.entries.push(entry); \r\n    return true;\r\n  }\r\n\r\n  // Read ---------------------------------------\r\n  public Read(ids?:string[]) { \r\n    if(!this.collection?.entries) \r\n      return []; \r\n    if(IsEmpty(ids) ) \r\n      return this.collection.entries; \r\n    return this.collection.entries.filter(e => ids?.includes(e._id) ); \r\n  }\r\n\r\n  // Update \r\n  public Update(entry:IEntry) { \r\n    if(!this.collection?.entries) \r\n      return false; \r\n    const index = this.collection.entries?.findIndex( e => e._id === entry._id ); \r\n    if(index < 0) \r\n      return false; \r\n    this.collection.entries[index] = {...entry}; \r\n    return true; \r\n  }\r\n\r\n  // Delete\r\n  public Delete(entry:IEntry) {\r\n    if(!this.collection?.entries) \r\n      return false;\r\n    const index = this.collection?.entries.findIndex( e => e._id === entry._id ); \r\n    if(index < 0) \r\n      return false; \r\n    this.collection?.entries.splice(index, 1); \r\n    return true; \r\n  }\r\n\r\n  public GetAbbrevField():IField|undefined { \r\n    const abbrevField = this.collection?.ifields.find( f => f.isAbbrev) \r\n      ?? this.collection?.ifields.find( f => (f.type === 'string' || f.type === 'number') && !f.isArray); \r\n    return abbrevField; \r\n  } \r\n}\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts",["280","281","282","283","284"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx",[],["285","286"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts",[],["287","288"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx",["289"],"import React from 'react'; \r\n//import CSS from ''\r\nimport {IEvent, IsNull, OnEnter, SetSize, SetWidth, \r\n  GetDefaultValueByType, GetTypeByValue, GetInputType, GetValueFromInput} from '../../_utils'; \r\n\r\n\r\n// INPUT ========================================\r\nexport interface IInput extends React.HTMLAttributes<HTMLInputElement> { \r\n  value:any; \r\n  setValue:any; \r\n  type?:string; \r\n  defaultValue?:any; \r\n  inputType?:string; \r\n  onEnterUp?:() => void; \r\n  width?: number; \r\n  [key:string]:any; \r\n} \r\nexport function Input(\r\n  {\r\n    value, setValue, \r\n    type=GetTypeByValue(value??''), \r\n    defaultValue=GetDefaultValueByType(type??'string'), \r\n    inputType=GetInputType(type??''), \r\n    onEnterUp=() => {}, \r\n    ...props\r\n  }:IInput) \r\n{ \r\n  const onChange = (event:IEvent) => setValue(GetInputValueOrDefault(event, defaultValue)); \r\n  const Value = IsNull(value) ? defaultValue: value; \r\n  const onKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => OnEnter(event, onEnterUp); \r\n\r\n  const width = props.width ?? SetSize(value); \r\n  const style = {width: `${width+2}ch`}; \r\n\r\n  if(type === 'boolean') \r\n    return <input {...{type:inputType, checked:Value, onChange, onKeyUp,  ...props}} /> \r\n  return <input {...{type:inputType, value:Value, onChange, onKeyUp, ...props}} style={style} /> \r\n} \r\n\r\n\r\n// GetValue --------------------------------------\r\nfunction GetInputValueOrDefault (event:IEvent, defaultValue:any) { \r\n  const value = GetValueFromInput(event); \r\n  return IsNull(value) ? defaultValue: value; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx",["290","291","292","293","294","295"],"import React, { useContext, useEffect, useState } from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex, ElementValue} from '../../_arrx'; \r\nimport {Input} from '../../_input'; \r\nimport {IInputArray, IUseInputArray, useInputArray} from './inputarray.hook'; \r\n\r\n\r\nexport const InputArrayContext = React.createContext({} as IUseInputArray); \r\nexport function InputArray({...props}:React.PropsWithChildren<IInputArray>) { \r\n  const context = useInputArray(props); \r\n  const {values} = props; \r\n  \r\n  return <InputArrayContext.Provider value={context} > \r\n    <Arrx {...{values}} > \r\n      <Elements> \r\n        <UpdateElement/> <DeleteBtn/>\r\n        <br/> \r\n      </Elements> \r\n      <CreateElement/>\r\n    </Arrx> \r\n  </InputArrayContext.Provider> \r\n} \r\n\r\n\r\n// Create element =======================================\r\nfunction CreateElement() { \r\n  const {type, defaultValue, Create} = useContext(InputArrayContext); \r\n  const [value, setValue] = useState(defaultValue); \r\n\r\n  const onEnterUp = () => {\r\n    Create(value); \r\n    setValue(() => defaultValue); // reset input to defaultValue after creation. \r\n  }; \r\n  return <Input {...{value, setValue, defaultValue, type, onEnterUp}}  /> \r\n} \r\n\r\n// Update element =======================================\r\nfunction UpdateElement() { \r\n  const {values, type, defaultValue, Update} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n\r\n  const [value, setValue] = useState(values[index]); \r\n  useEffect(() => { \r\n    setValue(values[index]); \r\n  }, [JSON.stringify(values[index])]); \r\n\r\n  const onEnterUp = () => Update(index, value); \r\n  return <Input {...{value, setValue, type, defaultValue, onEnterUp}} />\r\n}\r\n\r\n// Delete Btn ===================================\r\nexport function DeleteBtn({children, ...props}:React.PropsWithChildren<React.ButtonHTMLAttributes<HTMLButtonElement>>) { \r\n  const {Delete} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  return <button onClick={() => Delete(index)} {...props}> \r\n    {!children ? 'x' : children} \r\n  </button> \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx",[],["296","297"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\valuerenderer.component.tsx",["298","299","300","301","302","303","304"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx",["305","306"],"import {useEffect, useRef} from 'react'; \r\n\r\nexport function useUpdate(callback:() => void, changeling:any) { \r\n  const flagFirstRender = useRef(true); \r\n  \r\n  useEffect(() => { \r\n    if(flagFirstRender.current) { \r\n      flagFirstRender.current = false; \r\n      return; \r\n    } \r\n    callback(); \r\n  }, [JSON.stringify(changeling)]); \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",["307","308","309"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx",["310"],"import React, { useEffect, useState } from 'react'; \r\nimport {Input, InputArray, Select} from '../../_input'; \r\nimport {GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\nimport {useUpdate} from '../../_useupdate'; \r\n\r\n\r\n\r\n// Reader =======================================\r\ninterface IEditor{ \r\n  ifield:IField; \r\n  value:any; \r\n  setValue:React.Dispatch<any>; \r\n  options?:IOption[]; \r\n} \r\nexport function Editor({ ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) { \r\n  const {defaultValue, type} = ifield; \r\n  const _options = options ?? [] as IOption[]; \r\n  const [_value, _setValue] = useState(value); \r\n\r\n  // synchronize from parent value\r\n  useEffect(() => { \r\n    if(value !== _value) \r\n      _setValue(value); \r\n  }, [value]); \r\n\r\n  // synchronize to parent value \r\n  useUpdate(() => {setValue(_value)},_value); \r\n\r\n  // Edit Many\r\n  if(ifield.isArray) {\r\n    if(IsEmpty(options)) \r\n      return <InputArray {...{defaultValue, type, values:_value, setValues:_setValue}} /> \r\n    return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:true}} /> \r\n  }\r\n  // Edit Mixed\r\n  if(ifield.isMixed) \r\n    return <EditMixed {...{ifield, value, setValue}} /> \r\n\r\n  // Edit One\r\n  if(IsEmpty(options)) \r\n    return <Input {...{value:_value, setValue:_setValue, type, defaultValue}} /> \r\n  return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:false}} /> \r\n} \r\n\r\n\r\nfunction EditMixed ({ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) {\r\n  return <span>{JSON.stringify(value)}</span>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx",["311"],"import React, {useContext} from 'react'; \r\nimport {DaoContext} from '../../reusable/_dao'; \r\nimport {Arrx} from '../../reusable/_arrx'; \r\n\r\nimport '../../css/feedback.css'; \r\n\r\n\r\n// Feedback =====================================\r\nexport function FeedBack() { \r\n  const {state} = useContext(DaoContext); \r\n\r\n  return <div> \r\n    {!state.ready && <span>LOADING ... </span>} \r\n    {state.ready && <span>Ready </span>} \r\n    {state.ready && state.success && <CrudFeedBack />}\r\n    {state.ready && !state.success && 'an errors occured'} \r\n  </div> \r\n} \r\n\r\nfunction CrudFeedBack() { \r\n  const {state} = useContext(DaoContext); \r\n  // assumes state is ready and successful\r\n  const {actionType, success, data, err} = state.response as ICrudResponse; \r\n  \r\n  const successMsg:any = { \r\n    create:'Creation succeed', \r\n    update:'Update succeed', \r\n    delete:'Deletion succeed', \r\n  } \r\n  const errorMsg:any = { \r\n    create:'Creation failed ', \r\n    update:'Update failed', \r\n    delete:'Deletion failed', \r\n  } \r\n\r\n  const className = success ? 'success' : 'failure'; \r\n\r\n  return <div className={className}> \r\n    <div>{success ? successMsg[actionType] : errorMsg[actionType]}</div> \r\n    {!success && <Arrx {...{values:(err)}} />} \r\n    </div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx",["312","313"],"import React, {useContext} from 'react'; \r\nimport {DaoContext, EActionType} from '../../../reusable/_dao'; \r\n\r\nimport {Rows, Row, RowContext, Cells, Cell, CellContext} from '../../../reusable/_tablr'; \r\nimport {CreateBtn, DeleteBtn, UpdateBtn} from './crudbtn.component'; \r\nimport {CellRender} from './cellrenderer.component';\r\n\r\n\r\n\r\nexport function InlineUpdateDelete({page, cols, colBtn}:{page:number[], cols:IField[], colBtn:IField}) { \r\n  return <Rows {...{rows:page}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <CellRender/> \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <UpdateBtn/><DeleteBtn/> \r\n    </Cell> \r\n  </Rows> \r\n} \r\n\r\nexport function InlineCreate({cols, colBtn}:{cols:IField[], colBtn:IField}) { \r\n  const {activeMode} = useContext(DaoContext); \r\n  const isCreate = activeMode === EActionType.CREATE; \r\n\r\n  return <Row {...{row:-1}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <span></span>\r\n      {isCreate && <CellRender/> } \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <CreateBtn/> \r\n    </Cell> \r\n  </Row> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx",["314","315","316","317"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx",["318","319","320","321"],"import React, {useContext, useState, useRef} from 'react'; \r\nimport {DaoContext, EActionType} from '../../../reusable/_dao'; \r\nimport {IsEmpty} from '../../../reusable/_utils'; \r\nimport {FeedBack} from '../../../components/feedback/feedback.component'; \r\n\r\nimport {Objx, ObjxContext, Fields, Field, \r\n  FieldContext, FieldLabel, FieldValue} from '../../../reusable/_objx'; \r\nimport {Reader, Editor} from '../../../reusable/_input'; \r\n//import {Questionnaire} from '../../questionnaire/questionnaire.page'; \r\nimport {PatientProfileContext} from '../patient.page'; \r\n\r\n\r\n// Patient profile ============================== \r\nexport function PatientProfile() { \r\n  const {activeEntry} = useContext(DaoContext); \r\n\r\n  return <div> \r\n    {IsEmpty(activeEntry['ramq']) ? \r\n      <IdPatientProfile />: \r\n      <UpdateCreatePatientProfile />} \r\n  </div> \r\n} \r\n\r\nfunction UpdateCreatePatientProfile() {\r\n  const {state, activeEntry, activeMode, activeCollection, Create, Update} = useContext(DaoContext); \r\n  const {ifields} = activeCollection; \r\n  const ramqField = ifields.find(f => f.accessor==='ramq') as IField; \r\n  const cols = ifields.filter(f => ['firstName', 'lastName'].includes(f.accessor) ); \r\n\r\n  const {setPatientProfile} = useContext(PatientProfileContext); \r\n\r\n  async function UpdateCreateProfile(Func:(accessor:string, entry:IEntry) => Promise<void>) { \r\n    await Func(activeCollection.accessor, activeEntry); \r\n    if(state.ready && state.success) \r\n      setPatientProfile(activeEntry); \r\n  } \r\n\r\n  return <div> \r\n    <h1>Patient profile</h1> \r\n    <FeedBack/> \r\n    {activeMode} \r\n    <Objx {...{value:activeEntry, ifields:cols}} > \r\n      <Field {...{ifield:ramqField}} /> \r\n      <Fields><div><FieldLabel/><FieldEditor/></div></Fields> \r\n    </Objx> \r\n    {activeMode === 'update' && <button onClick={() => UpdateCreateProfile(Update)}>Update patient profile</button>} \r\n    {activeMode === 'create' && <button onClick={() => UpdateCreateProfile(Create)}>Create new patient profile</button>} \r\n  </div> \r\n}\r\n\r\n\r\nfunction IdPatientProfile () {\r\n  const {activeEntry, setActiveEntry, SetActiveMode, activeCollection} = useContext(DaoContext); \r\n  const {entries, ifields} = activeCollection; \r\n  const ramqField = ifields.find(f => f.accessor==='ramq') as IField; \r\n  const [value, setValue] = useState(''); \r\n  \r\n  function IdentifyPatient(ramq:string) { \r\n    const found = entries.find( e => { \r\n      const e_ramq = (e['ramq'] as string); \r\n      return e_ramq.toLowerCase() === ramq.toLowerCase(); \r\n    }); \r\n    if(found) { \r\n      setActiveEntry(found); \r\n      SetActiveMode(EActionType.UPDATE); \r\n    } \r\n    else { \r\n      setActiveEntry({...activeEntry, ramq}); \r\n      SetActiveMode(EActionType.CREATE); \r\n    } \r\n  } \r\n\r\n  return <div> \r\n    <h1>Patient identification</h1> \r\n    <div>Ramq: <Editor {...{value, setValue, ifield:ramqField}} /></div> \r\n    <button onClick={() => IdentifyPatient(value)}>Identify</button> \r\n  </div> \r\n}\r\n\r\n\r\n\r\nfunction FieldEditor() { \r\n  const {activeEntry, setActiveEntry} = useContext(DaoContext); \r\n  const {ifield} = useContext(FieldContext); \r\n\r\n  const value = activeEntry[ifield.accessor]; \r\n  const setValue = (newValue:any) => { \r\n    const copy = {...activeEntry}; \r\n    copy[ifield.accessor] = newValue; \r\n    setActiveEntry(copy); \r\n  } \r\n  return <Editor {...{value, setValue, ifield}} /> \r\n} \r\n\r\n\r\n\r\n\r\n\r\n// PATIENT PROFILE ==============================\r\n/*function PatientProfile({ramq}:{ramq:string}) { \r\n  const {activeCollection, activeEntry, Create, Update, GetForeignElements, GetForeignOptions, GetForeignValues} = useContext(DaoContext); \r\n  const {ifields} = activeCollection; \r\n  const cols = ifields.filter(f=> f.label && f.accessor!=='ramq'); \r\n  const ramqField = ifields.find(f=>f.accessor==='ramq') as IField; \r\n  //const renderers = BuildDefaultRenderingFunc(GetForeignElements, GetForeignOptions, GetForeignValues); \r\n\r\n  const value = {...activeEntry, ramq}; \r\n\r\n  return <div> \r\n    <div><Objx {...{value, ifields:cols}}/></div> \r\n    <Objx {...{value, ifields:cols}}> \r\n      <Field {...{ifield:ramqField}} /> \r\n      <Fields> \r\n        <FieldLabel/> <FieldRenderer {...{renderers}} /><br/> \r\n      </Fields> \r\n    </Objx> \r\n    {activeEntry._id ? \r\n      <button onClick={()=> Update(activeCollection.accessor, activeEntry)} >Update</button> : \r\n      <button onClick={()=> Create(activeCollection.accessor, activeEntry)} >Create</button> }\r\n  </div> \r\n}*/","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx",["322","323","324","325","326","327","328","329","330","331"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\loadpatient.component.tsx",["332","333"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\loadquestionnaire.component.tsx",["334"],"import React, {useContext, useEffect} from 'react'; \r\nimport {DaoContext} from '../../../reusable/_dao'; \r\nimport {FeedBack} from '../../../components/feedback/feedback.component'; \r\nimport {PatientProfileContext} from '../../patient/patient.page'; \r\nimport {AnswersContext} from '../questionnaire.page'; \r\n\r\n\r\n\r\n// LOAD PATIENTS ================================\r\nexport function LoadQuestionnaire() { \r\n  const {Collections, GetCollections} = useContext(DaoContext); \r\n  const {patientProfile} = useContext(PatientProfileContext); \r\n  const {setAnswers} = useContext(AnswersContext); \r\n\r\n  async function GetQuestionnaire() { \r\n    await Collections(['questions', 'forms', 'responses', 'answers', 'instructions']); \r\n    BuildBlankForm(); \r\n  }\r\n\r\n  function BuildBlankForm() { \r\n    const questions = GetCollections().find( c => c.accessor==='questions'); \r\n    if(!questions) \r\n      return [] as IAnswer[]; \r\n    const _answers = questions.entries.map(q=> { \r\n      return {_id:'', answer:-1, pid:patientProfile._id, qid:q._id} as IAnswer; \r\n    }); \r\n    console.log(_answers); \r\n    setAnswers(_answers); \r\n  }\r\n\r\n  useEffect(() => { \r\n    GetQuestionnaire(); \r\n  }, []); \r\n\r\n  return <div> \r\n    <FeedBack/> \r\n  </div> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx",[],{"ruleId":"335","replacedBy":"336"},{"ruleId":"337","replacedBy":"338"},{"ruleId":"339","severity":1,"message":"340","line":1,"column":16,"nodeType":"341","messageId":"342","endLine":1,"endColumn":24},{"ruleId":"339","severity":1,"message":"343","line":1,"column":26,"nodeType":"341","messageId":"342","endLine":1,"endColumn":35},{"ruleId":"339","severity":1,"message":"344","line":1,"column":37,"nodeType":"341","messageId":"342","endLine":1,"endColumn":43},{"ruleId":"339","severity":1,"message":"345","line":3,"column":9,"nodeType":"341","messageId":"342","endLine":3,"endColumn":16},{"ruleId":"339","severity":1,"message":"346","line":4,"column":9,"nodeType":"341","messageId":"342","endLine":4,"endColumn":14},{"ruleId":"339","severity":1,"message":"347","line":6,"column":9,"nodeType":"341","messageId":"342","endLine":6,"endColumn":19},{"ruleId":"339","severity":1,"message":"348","line":7,"column":9,"nodeType":"341","messageId":"342","endLine":7,"endColumn":19},{"ruleId":"339","severity":1,"message":"349","line":7,"column":21,"nodeType":"341","messageId":"342","endLine":7,"endColumn":32},{"ruleId":"350","severity":1,"message":"351","line":22,"column":6,"nodeType":"352","endLine":22,"endColumn":8,"suggestions":"353"},{"ruleId":"335","replacedBy":"336"},{"ruleId":"337","replacedBy":"338"},{"ruleId":"335","replacedBy":"354"},{"ruleId":"337","replacedBy":"355"},{"ruleId":"356","severity":1,"message":"357","line":65,"column":37,"nodeType":"358","messageId":"359","endLine":65,"endColumn":47},{"ruleId":"360","severity":1,"message":"361","line":4,"column":9,"nodeType":"341","messageId":"342","endLine":4,"endColumn":15},{"ruleId":"362","severity":1,"message":"363","line":34,"column":22,"nodeType":"364","messageId":"365","endLine":34,"endColumn":24},{"ruleId":"362","severity":1,"message":"363","line":34,"column":47,"nodeType":"364","messageId":"365","endLine":34,"endColumn":49},{"ruleId":"360","severity":1,"message":"366","line":1,"column":16,"nodeType":"341","messageId":"342","endLine":1,"endColumn":26},{"ruleId":"362","severity":1,"message":"363","line":28,"column":20,"nodeType":"364","messageId":"365","endLine":28,"endColumn":22},{"ruleId":"362","severity":1,"message":"363","line":28,"column":36,"nodeType":"364","messageId":"365","endLine":28,"endColumn":38},{"ruleId":"367","severity":1,"message":"368","line":14,"column":40,"nodeType":"341","messageId":"369","endLine":14,"endColumn":51},{"ruleId":"360","severity":1,"message":"370","line":4,"column":9,"nodeType":"341","messageId":"342","endLine":4,"endColumn":16},{"ruleId":"360","severity":1,"message":"371","line":4,"column":18,"nodeType":"341","messageId":"342","endLine":4,"endColumn":43},{"ruleId":"360","severity":1,"message":"372","line":5,"column":10,"nodeType":"341","messageId":"342","endLine":5,"endColumn":16},{"ruleId":"350","severity":1,"message":"373","line":72,"column":34,"nodeType":"352","endLine":72,"endColumn":36,"suggestions":"374"},{"ruleId":"350","severity":1,"message":"375","line":94,"column":6,"nodeType":"352","endLine":94,"endColumn":24,"suggestions":"376"},{"ruleId":"335","replacedBy":"377"},{"ruleId":"337","replacedBy":"378"},{"ruleId":"335","replacedBy":"379"},{"ruleId":"337","replacedBy":"380"},{"ruleId":"360","severity":1,"message":"381","line":3,"column":43,"nodeType":"341","messageId":"342","endLine":3,"endColumn":51},{"ruleId":"360","severity":1,"message":"382","line":2,"column":15,"nodeType":"341","messageId":"342","endLine":2,"endColumn":26},{"ruleId":"360","severity":1,"message":"383","line":2,"column":38,"nodeType":"341","messageId":"342","endLine":2,"endColumn":45},{"ruleId":"360","severity":1,"message":"384","line":2,"column":63,"nodeType":"341","messageId":"342","endLine":2,"endColumn":75},{"ruleId":"360","severity":1,"message":"385","line":2,"column":77,"nodeType":"341","messageId":"342","endLine":2,"endColumn":89},{"ruleId":"350","severity":1,"message":"386","line":44,"column":6,"nodeType":"352","endLine":44,"endColumn":37,"suggestions":"387"},{"ruleId":"350","severity":1,"message":"388","line":44,"column":7,"nodeType":"389","endLine":44,"endColumn":36},{"ruleId":"335","replacedBy":"390"},{"ruleId":"337","replacedBy":"391"},{"ruleId":"360","severity":1,"message":"392","line":1,"column":21,"nodeType":"341","messageId":"342","endLine":1,"endColumn":28},{"ruleId":"360","severity":1,"message":"393","line":16,"column":16,"nodeType":"341","messageId":"342","endLine":16,"endColumn":23},{"ruleId":"350","severity":1,"message":"394","line":24,"column":6,"nodeType":"352","endLine":24,"endColumn":35,"suggestions":"395"},{"ruleId":"350","severity":1,"message":"388","line":24,"column":7,"nodeType":"389","endLine":24,"endColumn":34},{"ruleId":"360","severity":1,"message":"396","line":27,"column":9,"nodeType":"341","messageId":"342","endLine":27,"endColumn":19},{"ruleId":"350","severity":1,"message":"397","line":39,"column":6,"nodeType":"352","endLine":39,"endColumn":29,"suggestions":"398"},{"ruleId":"350","severity":1,"message":"388","line":39,"column":7,"nodeType":"389","endLine":39,"endColumn":28},{"ruleId":"350","severity":1,"message":"399","line":12,"column":6,"nodeType":"352","endLine":12,"endColumn":34,"suggestions":"400"},{"ruleId":"350","severity":1,"message":"388","line":12,"column":7,"nodeType":"389","endLine":12,"endColumn":33},{"ruleId":"360","severity":1,"message":"366","line":1,"column":16,"nodeType":"341","messageId":"342","endLine":1,"endColumn":26},{"ruleId":"360","severity":1,"message":"343","line":1,"column":28,"nodeType":"341","messageId":"342","endLine":1,"endColumn":37},{"ruleId":"360","severity":1,"message":"401","line":2,"column":56,"nodeType":"341","messageId":"342","endLine":2,"endColumn":66},{"ruleId":"350","severity":1,"message":"402","line":24,"column":6,"nodeType":"352","endLine":24,"endColumn":13,"suggestions":"403"},{"ruleId":"360","severity":1,"message":"404","line":23,"column":31,"nodeType":"341","messageId":"342","endLine":23,"endColumn":35},{"ruleId":"360","severity":1,"message":"405","line":4,"column":20,"nodeType":"341","messageId":"342","endLine":4,"endColumn":30},{"ruleId":"360","severity":1,"message":"406","line":4,"column":45,"nodeType":"341","messageId":"342","endLine":4,"endColumn":56},{"ruleId":"407","severity":1,"message":"408","line":49,"column":10,"nodeType":"341","messageId":"409","endLine":49,"endColumn":17},{"ruleId":"360","severity":1,"message":"410","line":50,"column":10,"nodeType":"341","messageId":"342","endLine":50,"endColumn":26},{"ruleId":"360","severity":1,"message":"411","line":50,"column":41,"nodeType":"341","messageId":"342","endLine":50,"endColumn":55},{"ruleId":"360","severity":1,"message":"412","line":50,"column":69,"nodeType":"341","messageId":"342","endLine":50,"endColumn":77},{"ruleId":"360","severity":1,"message":"344","line":1,"column":38,"nodeType":"341","messageId":"342","endLine":1,"endColumn":44},{"ruleId":"360","severity":1,"message":"413","line":6,"column":15,"nodeType":"341","messageId":"342","endLine":6,"endColumn":26},{"ruleId":"360","severity":1,"message":"414","line":7,"column":29,"nodeType":"341","messageId":"342","endLine":7,"endColumn":39},{"ruleId":"360","severity":1,"message":"415","line":8,"column":9,"nodeType":"341","messageId":"342","endLine":8,"endColumn":15},{"ruleId":"360","severity":1,"message":"416","line":3,"column":21,"nodeType":"341","messageId":"342","endLine":3,"endColumn":32},{"ruleId":"360","severity":1,"message":"382","line":6,"column":15,"nodeType":"341","messageId":"342","endLine":6,"endColumn":26},{"ruleId":"360","severity":1,"message":"417","line":33,"column":10,"nodeType":"341","messageId":"342","endLine":33,"endColumn":24},{"ruleId":"360","severity":1,"message":"418","line":34,"column":19,"nodeType":"341","messageId":"342","endLine":34,"endColumn":29},{"ruleId":"360","severity":1,"message":"418","line":54,"column":19,"nodeType":"341","messageId":"342","endLine":54,"endColumn":29},{"ruleId":"360","severity":1,"message":"419","line":58,"column":10,"nodeType":"341","messageId":"342","endLine":58,"endColumn":19},{"ruleId":"360","severity":1,"message":"420","line":58,"column":21,"nodeType":"341","messageId":"342","endLine":58,"endColumn":32},{"ruleId":"360","severity":1,"message":"421","line":59,"column":10,"nodeType":"341","messageId":"342","endLine":59,"endColumn":21},{"ruleId":"360","severity":1,"message":"418","line":69,"column":19,"nodeType":"341","messageId":"342","endLine":69,"endColumn":29},{"ruleId":"360","severity":1,"message":"419","line":73,"column":10,"nodeType":"341","messageId":"342","endLine":73,"endColumn":19},{"ruleId":"360","severity":1,"message":"340","line":1,"column":39,"nodeType":"341","messageId":"342","endLine":1,"endColumn":47},{"ruleId":"350","severity":1,"message":"422","line":20,"column":6,"nodeType":"352","endLine":20,"endColumn":8,"suggestions":"423"},{"ruleId":"350","severity":1,"message":"424","line":33,"column":6,"nodeType":"352","endLine":33,"endColumn":8,"suggestions":"425"},"no-native-reassign",["426"],"no-negated-in-lhs",["427"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'Patient' is defined but never used.","'Input' is defined but never used.","'TestSelect' is defined but never used.","'TestReader' is defined but never used.","'TestEditors' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Collections'. Either include it or remove the dependency array.","ArrayExpression",["428"],["426"],["427"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","@typescript-eslint/no-unused-vars","'IsNull' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'useContext' is defined but never used.","@typescript-eslint/no-use-before-define","'Collections' was used before it was defined.","noUseBeforeDefine","'IsEmpty' is defined but never used.","'GetDefaultValueFromIField' is defined but never used.","'access' is defined but never used.","React Hook useMemo has a missing dependency: 'dao'. Either include it or remove the dependency array.",["429"],"React Hook useEffect has a missing dependency: 'GetEntry'. Either include it or remove the dependency array.",["430"],["426"],["427"],["426"],["427"],"'SetWidth' is defined but never used.","'ArrxContext' is defined but never used.","'Element' is defined but never used.","'ElementIndex' is defined but never used.","'ElementValue' is defined but never used.","React Hook useEffect has missing dependencies: 'index' and 'values'. Either include them or remove the dependency array.",["431"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression",["426"],["427"],"'useMemo' is defined but never used.","'setData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.value'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'props.value', you can also switch to useReducer instead of useState and read 'props.value' in the reducer.",["432"],"'hasChanged' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data', 'ifield.accessor', 'isEdit', and 'value'. Either include them or remove the dependency array.",["433"],"React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["434"],"'DaoContext' is defined but never used.","React Hook useEffect has a missing dependency: '_value'. Either include it or remove the dependency array.",["435"],"'data' is assigned a value but never used.","'RowContext' is defined but never used.","'CellContext' is defined but never used.","@typescript-eslint/no-redeclare","'CrudBtn' is already defined.","redeclared","'activeCollection' is assigned a value but never used.","'setActiveEntry' is assigned a value but never used.","'GetEntry' is assigned a value but never used.","'ObjxContext' is defined but never used.","'FieldValue' is defined but never used.","'Reader' is defined but never used.","'EActionType' is defined but never used.","'GetCollections' is assigned a value but never used.","'setAnswers' is assigned a value but never used.","'formField' is assigned a value but never used.","'labelsField' is assigned a value but never used.","'titlesField' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetPatient'. Either include it or remove the dependency array.",["436"],"React Hook useEffect has a missing dependency: 'GetQuestionnaire'. Either include it or remove the dependency array.",["437"],"no-global-assign","no-unsafe-negation",{"desc":"438","fix":"439"},{"desc":"440","fix":"441"},{"desc":"442","fix":"443"},{"desc":"444","fix":"445"},{"desc":"446","fix":"447"},{"desc":"448","fix":"449"},{"desc":"450","fix":"451"},{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},"Update the dependencies array to be: [Collections]",{"range":"458","text":"459"},"Update the dependencies array to be: [dao]",{"range":"460","text":"461"},"Update the dependencies array to be: [GetEntry, activeCollection]",{"range":"462","text":"463"},"Update the dependencies array to be: [index, values]",{"range":"464","text":"465"},"Update the dependencies array to be: [props.value]",{"range":"466","text":"467"},"Update the dependencies array to be: [data, ifield.accessor, isEdit, value]",{"range":"468","text":"469"},"Update the dependencies array to be: [callback]",{"range":"470","text":"471"},"Update the dependencies array to be: [_value, value]",{"range":"472","text":"473"},"Update the dependencies array to be: [GetPatient]",{"range":"474","text":"475"},"Update the dependencies array to be: [GetQuestionnaire]",{"range":"476","text":"477"},[909,911],"[Collections]",[2221,2223],"[dao]",[3189,3207],"[GetEntry, activeCollection]",[1560,1591],"[index, values]",[639,668],"[props.value]",[1108,1131],"[data, ifield.accessor, isEdit, value]",[304,332],"[callback]",[762,769],"[_value, value]",[645,647],"[GetPatient]",[1173,1175],"[GetQuestionnaire]"]