[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudmongoose.class.ts":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testcrud\\testcrud.experiment.tsx":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_crud.ts":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\crud\\useactive.hook.tsx":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\testrender.tsx":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testarray\\testarrayutils.experiment.tsx":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\value.utils.ts":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrayutils.ts":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\editor.component.tsx":"59","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\reader.component.tsx":"60","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testLoader\\testLoader.tsx":"61","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\preloader.component.tsx":"62","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\session\\session.class.ts":"63","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_session.ts":"64","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\session\\usesession.hook.ts":"65","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usegetset.ts":"66","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useGetSet.hook.tsx":"67","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\crudTest\\crudTest.page.tsx":"68","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objset\\objset.component.tsx":"69","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao2.ts":"70","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient2\\patient.page.tsx":"71","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao2\\dao.contexter.tsx":"72","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient2\\usepatient.hook.ts":"73","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\field.component.tsx":"74","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient2\\components\\patientprofile.component.tsx":"75","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient2\\components\\patientidentification.component.tsx":"76","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\date.utils.ts":"77","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire2\\usequestionnaire.hook.tsx":"78","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire2\\questionnaire.page.tsx":"79","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback2.component.tsx":"80"},{"size":621,"mtime":1612141670677,"results":"81","hashOfConfig":"82"},{"size":1445,"mtime":1614647832755,"results":"83","hashOfConfig":"82"},{"size":362,"mtime":499162500000,"results":"84","hashOfConfig":"82"},{"size":893,"mtime":1613689064978,"results":"85","hashOfConfig":"82"},{"size":496,"mtime":1613082465022,"results":"86","hashOfConfig":"82"},{"size":1495,"mtime":1612141671254,"results":"87","hashOfConfig":"82"},{"size":4412,"mtime":1614561845904,"results":"88","hashOfConfig":"82"},{"size":1459,"mtime":1614212961331,"results":"89","hashOfConfig":"82"},{"size":1900,"mtime":1612141671217,"results":"90","hashOfConfig":"82"},{"size":3091,"mtime":1612141671217,"results":"91","hashOfConfig":"82"},{"size":1782,"mtime":1614038749839,"results":"92","hashOfConfig":"82"},{"size":1422,"mtime":1614206751965,"results":"93","hashOfConfig":"82"},{"size":1473,"mtime":1612141671140,"results":"94","hashOfConfig":"82"},{"size":462,"mtime":1612141671142,"results":"95","hashOfConfig":"82"},{"size":1042,"mtime":1612141671142,"results":"96","hashOfConfig":"82"},{"size":982,"mtime":1612141671141,"results":"97","hashOfConfig":"82"},{"size":6796,"mtime":1614451251884,"results":"98","hashOfConfig":"82"},{"size":289,"mtime":1613246066105,"results":"99","hashOfConfig":"82"},{"size":331,"mtime":1613681678872,"results":"100","hashOfConfig":"82"},{"size":803,"mtime":1614218344384,"results":"101","hashOfConfig":"82"},{"size":112,"mtime":1612141670932,"results":"102","hashOfConfig":"82"},{"size":1725,"mtime":1613937646786,"results":"103","hashOfConfig":"82"},{"size":688,"mtime":1611105433287,"results":"104","hashOfConfig":"82"},{"size":1330,"mtime":1612141671143,"results":"105","hashOfConfig":"82"},{"size":124,"mtime":1612141670933,"results":"106","hashOfConfig":"82"},{"size":233,"mtime":1612141670928,"results":"107","hashOfConfig":"82"},{"size":2945,"mtime":1613002403902,"results":"108","hashOfConfig":"82"},{"size":1542,"mtime":1614451266453,"results":"109","hashOfConfig":"82"},{"size":564,"mtime":1613957467554,"results":"110","hashOfConfig":"82"},{"size":1604,"mtime":1612987615302,"results":"111","hashOfConfig":"82"},{"size":2138,"mtime":1612987585877,"results":"112","hashOfConfig":"82"},{"size":1183,"mtime":1612987585982,"results":"113","hashOfConfig":"82"},{"size":447,"mtime":1612141670931,"results":"114","hashOfConfig":"82"},{"size":107,"mtime":1612141670933,"results":"115","hashOfConfig":"82"},{"size":2617,"mtime":1614639154454,"results":"116","hashOfConfig":"82"},{"size":79,"mtime":1612141670934,"results":"117","hashOfConfig":"82"},{"size":338,"mtime":1612141671148,"results":"118","hashOfConfig":"82"},{"size":329,"mtime":1614040019055,"results":"119","hashOfConfig":"82"},{"size":4408,"mtime":1612141670676,"results":"120","hashOfConfig":"82"},{"size":653,"mtime":1613689076109,"results":"121","hashOfConfig":"82"},{"size":1426,"mtime":1612469986798,"results":"122","hashOfConfig":"82"},{"size":1302,"mtime":1613079530314,"results":"123","hashOfConfig":"82"},{"size":1100,"mtime":1613246204527,"results":"124","hashOfConfig":"82"},{"size":2519,"mtime":1613246196460,"results":"125","hashOfConfig":"82"},{"size":1769,"mtime":1613246188083,"results":"126","hashOfConfig":"82"},{"size":736,"mtime":1612141670564,"results":"127","hashOfConfig":"82"},{"size":2539,"mtime":1613766518266,"results":"128","hashOfConfig":"82"},{"size":3175,"mtime":1613245945678,"results":"129","hashOfConfig":"82"},{"size":431,"mtime":1612382505474,"results":"130","hashOfConfig":"82"},{"size":2697,"mtime":1613884010314,"results":"131","hashOfConfig":"82"},{"size":2238,"mtime":1612394941169,"results":"132","hashOfConfig":"82"},{"size":137,"mtime":1612397882586,"results":"133","hashOfConfig":"82"},{"size":2302,"mtime":1613681691290,"results":"134","hashOfConfig":"82"},{"size":158,"mtime":1613942103327,"results":"135","hashOfConfig":"82"},{"size":6470,"mtime":1612996434149,"results":"136","hashOfConfig":"82"},{"size":5171,"mtime":1614638406577,"results":"137","hashOfConfig":"82"},{"size":1934,"mtime":1613767512143,"results":"138","hashOfConfig":"82"},{"size":297,"mtime":1614561427522,"results":"139","hashOfConfig":"82"},{"size":4061,"mtime":1613957414671,"results":"140","hashOfConfig":"82"},{"size":3496,"mtime":1613957455901,"results":"141","hashOfConfig":"82"},{"size":758,"mtime":1613681678874,"results":"142","hashOfConfig":"82"},{"size":789,"mtime":1614204627646,"results":"143","hashOfConfig":"82"},{"size":2866,"mtime":1613698493047,"results":"144","hashOfConfig":"82"},{"size":180,"mtime":1613764817457,"results":"145","hashOfConfig":"82"},{"size":1026,"mtime":1613767966053,"results":"146","hashOfConfig":"82"},{"size":103,"mtime":1613953284345,"results":"147","hashOfConfig":"82"},{"size":1287,"mtime":1613953897783,"results":"148","hashOfConfig":"82"},{"size":2056,"mtime":1613942547232,"results":"149","hashOfConfig":"82"},{"size":3295,"mtime":1614047931428,"results":"150","hashOfConfig":"82"},{"size":149,"mtime":1613941885634,"results":"151","hashOfConfig":"82"},{"size":1434,"mtime":1614627266657,"results":"152","hashOfConfig":"82"},{"size":3523,"mtime":1614204510809,"results":"153","hashOfConfig":"82"},{"size":3741,"mtime":1614627239483,"results":"154","hashOfConfig":"82"},{"size":1557,"mtime":1614039997343,"results":"155","hashOfConfig":"82"},{"size":1346,"mtime":1614201061721,"results":"156","hashOfConfig":"82"},{"size":1209,"mtime":1614374382997,"results":"157","hashOfConfig":"82"},{"size":881,"mtime":1614217904889,"results":"158","hashOfConfig":"82"},{"size":4641,"mtime":1614647686491,"results":"159","hashOfConfig":"82"},{"size":3068,"mtime":1614648374332,"results":"160","hashOfConfig":"82"},{"size":468,"mtime":1614374705509,"results":"161","hashOfConfig":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},"ke513i",{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"175"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"172"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"172"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"175"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"175"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"175"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"175"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"172"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"184"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"172"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"263"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"172"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"172"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"175"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"175"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"172"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"172"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"296"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"305","usedDeprecatedRules":"175"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"172"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"175"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"175"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"175"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"172"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"332"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"175"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"175"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"175"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"175"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"175"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"175"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["361","362"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",["363","364","365"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",["366","367"],"import React, {useContext, useEffect} from 'react'; \r\nimport {CrudContext} from '../../reusable/_crud'; \r\nimport {FeedBack} from '../../components/feedback/feedback.component'; \r\nimport {IsEmpty} from '../../reusable/_utils'; \r\n\r\nimport {CollectionSelector} from './components/collectionselector.component'; \r\nimport {AdminTablr} from './components/admintablr.component'; \r\n\r\nimport '../../css/table.css'; \r\n\r\n\r\n\r\n\r\n// ADMIN PAGE ====================================\r\nexport default function Admin() { \r\n  const {state, activeCollection, setActiveCollection} = useContext(CrudContext); \r\n\r\n  useEffect(() => { \r\n    setActiveCollection({} as ICollection); \r\n  }, []); \r\n\r\n  return <div> \r\n    <h2>Admin</h2> \r\n    {state.busy && state.success && <CollectionSelector /> } \r\n    {!IsEmpty(activeCollection) && <AdminTablr/>} \r\n  </div> \r\n}\r\n\r\n//{!IsEmpty(activeCollection) && <AdminTablr/>} \r\n\r\n",["368","369"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],["370","371"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],["372","373"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["374"],"import {IsEmpty, IsInRange} from '../_utils';\r\n\r\nexport interface IMongooseCollection { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    enum?: any[]; \r\n    abbrev?: boolean; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\n// Parser functions =============================\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\nexport function ParseField(field:IMongooseField):IField { \r\n  const {path, instance, options, $embeddedSchemaType} = field; \r\n  const ifield:IField = {} as IField; \r\n\r\n  ifield.accessor = path ?? ''; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.type = options?.ref ?? $embeddedSchemaType?.instance ?? field.instance.toLowerCase(); \r\n  ifield.isMixed = instance.toLowerCase() === 'mixed'; \r\n  ifield.isEnum = !!options?.enum; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = !!options?.ref; \r\n  ifield.isAbbrev = !!options?.abbrev; \r\n  ifield.validators = GetValidators(field); \r\n  ifield.isRequired = field.options['required'] ?? false; \r\n  ifield.regex = field.options['regex']? field.options['regex']: undefined; \r\n\r\n  ifield.enums = options.enum ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, field.options); \r\n\r\n  return ifield; \r\n} \r\n\r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} \r\n\r\n\r\nfunction GetValidators(field:IMongooseField):IValidator[] { \r\n  const required = (value:any) => { \r\n    return !IsEmpty(value); \r\n  }; \r\n\r\n  const regex = (value:any) => { \r\n    if(field.options['regex']) \r\n      return new RegExp(field.options['regex']).test(value); \r\n    return true; \r\n  } \r\n\r\n  const range = (value:any) => { \r\n    return IsInRange(value, field.options['min'], field.options['max']); \r\n  } \r\n\r\n  let validators:IValidator[] = []; \r\n  if(field.options['required']) \r\n    validators.push(required); \r\n  if(field.options['regex']) \r\n    validators.push(regex); \r\n  if(field.options['min'] || field.options['max']) \r\n    validators.push(range); \r\n  return validators; \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["375","376","377"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull, GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield) => { \r\n      return <Cell key={ifield.accessor} {...{ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const data = datas[row]; \r\n  const value = IsEmpty(data) ? GetDefaultValueFromIField(ifield): datas[row][ifield.accessor]; \r\n  const context = {value, row, ifield} as ICellContext; \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["378","379","380"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts",["381","382"],"import {Pick, Filter} from '../_arrayutils'; \r\nimport { IsEmpty } from '../_utils';\r\nimport {Collection} from './collection.class'; \r\n\r\nexport interface ICrud { \r\n  Collections:(accessors?:string[]) => Promise<ICrudResponse[]>; \r\n  Create: (accessor:string, toCreate:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Read: (accessor:string, id?:string[]) => Promise<ICrudResponse[]>; \r\n  Update: (accessor:string, toUpdate:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Delete: (accessor:string, toDelete:IEntry[]) => Promise<ICrudResponse[]>; \r\n} \r\n\r\n\r\n// DAO #############################################\r\nexport class DAO { \r\n  public collections:ICollection[] = [] as ICollection[]; \r\n\r\n  private crud:ICrud = {} as ICrud; \r\n\r\n  constructor(crud:ICrud) { \r\n    this.crud = crud; \r\n  } \r\n\r\n  // Get ICollections ----------------------------- \r\n  public GetICollections(accessors?:string[]):ICollection[] { \r\n    if(!accessors) \r\n      return this.collections; \r\n    const compare = (t:ICollection, accessor:string) => {return t.accessor === accessor}; \r\n    return Pick(this.collections, accessors, compare); \r\n  } \r\n\r\n  // Get IFields -----------------------------------\r\n  public GetIFields(accessor:string, fields?:string[]):IField[] { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    if(!fields) \r\n      return collection?.ifields ?? []; \r\n    const compare = (f:IField, accessor:string) => {return f.accessor === accessor}; \r\n    return Pick(collection?.ifields, fields, compare); \r\n  }\r\n\r\n  // Get Entries --------------------------------------\r\n  public GetIEntries(accessor:string, ids?:string[]):IEntry[] { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    if(!ids)\r\n      return collection?.entries ?? []; \r\n    const compare = (e:IEntry, id:string) => {return e._id === id}; \r\n    return Pick(collection?.entries, ids, compare); \r\n  }\r\n\r\n  // Get Default IEntry ----------------------------------\r\n  public GetDefaultIEntry(accessor:string):IEntry { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    return new Collection(collection).GetDefaultIEntry(); \r\n  } \r\n  \r\n  // GET FOREIGN ELEMENTS -----------------------------\r\n  public GetForeignElements(ifield:IField) \r\n    : {foreignCollection:ICollection|undefined, abbrevField:IField|undefined} \r\n  { \r\n    const foreignCollection = this.collections.find(c => c.accessor === ifield.type); \r\n    const abbrevField = foreignCollection?.ifields.find(f=>f.isAbbrev); \r\n    return {foreignCollection, abbrevField}; \r\n  } \r\n\r\n  // Get Options ----------------------------------------\r\n  public GetIOptions(ifield:IField):IOption[] { \r\n    if(ifield.isEnum)\r\n      return ifield.enums?.map(e => {return {value:e, label:e}}) ?? [] as IOption[];  \r\n    if(!ifield.isModel) \r\n      return [] as IOption[]; \r\n    const {foreignCollection, abbrevField} = this.GetForeignElements(ifield); \r\n    if(!foreignCollection || !abbrevField) \r\n      return [] as IOption[]; \r\n    return foreignCollection.entries?.map( e => { \r\n      return {value:e._id, label:e[abbrevField.accessor]} as IOption; \r\n    }); \r\n  } \r\n\r\n  // COLLECTIONS -------------------------------------------\r\n  public async Collections(accessors?:string[]):Promise<ICrudResponse[]> { \r\n    const responses = (await this.crud.Collections(accessors)) as ICrudResponse[]; \r\n    const icollections = responses.filter(r => r.success).map(r => r.data as ICollection); \r\n    this.PushUpdateCollection(icollections); \r\n    return responses; \r\n  } \r\n\r\n  private PushUpdateCollection(icollections:ICollection[]) { \r\n    icollections.forEach( newCol => { \r\n      const index = this.collections.findIndex(col => col.accessor === newCol.accessor); \r\n      if(index >=0) \r\n        this.collections[index] = newCol; \r\n      else \r\n        this.collections.push(newCol); \r\n    }) \r\n  } \r\n\r\n\r\n  /*Create Or Update ---------------------------------- \r\n  Create entries satisfying a given predicate. \r\n  Or else update entries. \r\n  */\r\n  public async CreateUpdate(accessor:string, entries:IEntry[], predicate?:(entry:IEntry)=>boolean):Promise<ICrudResponse[]> { \r\n    const defaultPredicate = (entry:IEntry):boolean => IsEmpty(entry._id); \r\n    const {inclusion:toCreate, exclusion:toUpdate} = Filter(entries, predicate ?? defaultPredicate); \r\n    const createResponses = !IsEmpty(toCreate) ? await this.Create(accessor, toCreate) : []; \r\n    const updateResponses = !IsEmpty(toUpdate) ? await this.Update(accessor, toUpdate) : []; \r\n    return [...createResponses, ...updateResponses]; \r\n  } \r\n\r\n  /* Create -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Create(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Create(accessor, entries)) as ICrudResponse[]; \r\n    const created = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Create(created); \r\n    return responses; \r\n  } \r\n\r\n  /* Read -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  Create/Update read data to local. \r\n  */\r\n  public async Read(accessor:string, ids?:string[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Read(accessor, ids)) as ICrudResponse[]; \r\n    const read = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    return responses; \r\n  } \r\n\r\n  /* Update -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Update(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Update(accessor, entries)) as ICrudResponse[]; \r\n    const updated = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Update(updated); \r\n    return responses; \r\n  } \r\n\r\n  /* Delete -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Delete(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Delete(accessor, entries)) as ICrudResponse[]; \r\n    const deleted = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Delete(deleted); \r\n    return responses; \r\n  } \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx",[],["383","384"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx",["385"],"import React, { useContext, useState } from 'react'; \r\nimport {IsEmpty} from '../../_utils'; \r\nimport {useSelect, IUseSelect} from './select.hook'; \r\nimport {IEditor} from '../../_input'; \r\nimport {useToggle, IUseToggle} from '../../_usetoggle'; \r\n\r\n\r\nimport './select.style.css'; \r\n\r\nexport function TestSelect() { \r\n  const options:IOption[] = [\r\n    {value:0, label:'valeur 0'}, \r\n    {value:1, label:'valeur 1'}, \r\n    {value:2, label:'valeur 2'}, \r\n    {value:3, label:'valeur 3'}, \r\n  ] \r\n\r\n  const ifield = {accessor:'', label:'', defaultValue:'', type:'string'} as IField; \r\n  const [value, setValue] = useState(0); \r\n\r\n\r\n\r\n  return <div> \r\n    <span>{JSON.stringify(value)}</span> \r\n    <span>Label:</span> \r\n    <Select {...{ifield, value, setValue, options}} /> \r\n    <span>asdasdasdsa:</span> \r\n  </div> \r\n} \r\n\r\n\r\nexport const SelectContext = React.createContext({} as IUseSelect); \r\nexport function Select({ifield, value, setValue, options}:IEditor) { \r\n  const context = useSelect({ifield, value, setValue, options}); \r\n\r\n  const {toggle, ToggleBtnAction, toggleTarget, Toggle} = useToggle<HTMLDivElement>(true); \r\n\r\n  const CloseToggle = () => { \r\n    if(!context.multiple) \r\n      Toggle(); \r\n  }\r\n\r\n  return <SelectContext.Provider value={context}> \r\n    <div className={'select-main'} > \r\n      <div  {...ToggleBtnAction()} > \r\n        <Selection/> \r\n      </div> \r\n      <div tabIndex={0} ref={toggleTarget} hidden={toggle} onClick={CloseToggle}> \r\n        <Options /> \r\n      </div> \r\n    </div> \r\n  </SelectContext.Provider> \r\n}\r\n\r\n\r\nfunction Selection() {\r\n  const {SelectValue, GetSelection} = useContext(SelectContext); \r\n  const selection = GetSelection(); \r\n\r\n  return <div className={'select-header'}> \r\n\r\n    {IsEmpty(selection) && <span className={'select-placeholder'}> --- Empty --- </span>} \r\n\r\n    {selection.map( (option, i) => { \r\n      const key = JSON.stringify(option.value); \r\n      const onClick = () => SelectValue(option?.value); \r\n      const className = 'select-option'; \r\n      return <span key={key} {...{onClick, className}}> \r\n        {option?.label}{(i < selection.length-1) ? ', ':''}\r\n      </span> \r\n    })} \r\n  </div> \r\n}\r\n\r\n\r\n\r\nfunction Options() { \r\n  const {options, SelectValue, GetSelection} = useContext(SelectContext); \r\n  const selection = GetSelection(); \r\n  const IsSelected = (option:IOption) => selection.some(o => o?.value === option?.value); \r\n\r\n  /*const style: CSS.Properties = { \r\n    display: 'none', \r\n    position: 'absolute', \r\n    width: '100%', \r\n    zIndex: 1, \r\n  }*/\r\n\r\n  return <div className={'select-options'}  > \r\n    {options.map( option => { \r\n      const key = JSON.stringify(option.value); \r\n      const onClick = () => SelectValue(option.value); \r\n      const className = IsSelected(option) ? 'select-option-selected': 'select-option'; \r\n      return <div key={key} {...{onClick, className}} > \r\n        {option.label} \r\n      </div> \r\n    })}\r\n  </div>\r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx",["386"],"import {ToArray, Filter, Union} from '../../_arrayutils'; \r\nimport {IsEmpty} from '../../_utils'; \r\n//import {useToggle, IUseToggle} from '../../_usetoggle'; \r\n\r\n// USE SELECT ====================================\r\nexport interface IUseSelect { \r\n  value:any; \r\n  setValue:React.Dispatch<React.SetStateAction<any>>; \r\n  options:IOption[]; \r\n  GetSelection: () => IOption[]; \r\n  placeholder:string; \r\n  multiple:boolean; \r\n  \r\n  SelectValue:(newValue:any) => void; \r\n} \r\nexport function useSelect(value:any, setValue:any, options:IOption[], placeholder:string, multiple:boolean):IUseSelect { \r\n  // SelectValue ................................\r\n  function SelectValue (newValue:any) { \r\n    const {inclusion, exclusion} = Filter(ToArray(value), e => e === newValue); \r\n    if(IsEmpty(inclusion) && multiple) \r\n      exclusion.push(newValue); \r\n    if(IsEmpty(inclusion) && !multiple) \r\n      exclusion[0] = newValue; \r\n    const selection = multiple ? exclusion: exclusion.shift(); \r\n    setValue(selection); \r\n  } \r\n\r\n  function GetSelection() { \r\n    const selection = [] as IOption[]; \r\n    if(IsEmpty(value)) \r\n      return selection; \r\n    const values = ToArray(value); \r\n    values.forEach(v => { \r\n      const option = options.find(o => o.value === v); \r\n      if(option) \r\n        selection.push(option); \r\n    }); \r\n    return selection; \r\n  }\r\n\r\n  return {value, setValue, options, GetSelection, placeholder, multiple, SelectValue}; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx",["387","388","389","390","391","392"],"import React, { useContext, useEffect, useState } from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex, ElementValue} from '../../../reusable/_arrx'; \r\nimport {Input} from '../input/input.component'; \r\nimport {IInputArray, IUseInputArray, useInputArray} from './inputarray.hook'; \r\n\r\n\r\nexport const InputArrayContext = React.createContext({} as IUseInputArray); \r\nexport function InputArray({...props}:React.PropsWithChildren<IInputArray>) { \r\n  const context = useInputArray(props); \r\n  const {values} = props; \r\n  \r\n  return <InputArrayContext.Provider value={context} > \r\n    <Arrx {...{values}} > \r\n      <Elements> \r\n        <UpdateElement/> <DeleteBtn/>\r\n        <br/> \r\n      </Elements> \r\n      <CreateElement/>\r\n    </Arrx> \r\n  </InputArrayContext.Provider> \r\n} \r\n\r\n\r\n// Create element =======================================\r\nfunction CreateElement() { \r\n  const {ifield, Create} = useContext(InputArrayContext); \r\n  const {defaultValue} = ifield; \r\n  const [value, setValue] = useState(defaultValue); \r\n\r\n  const onPressEnter = () => { \r\n    Create(value); \r\n    setValue(defaultValue); // reset input to defaultValue after creation. \r\n  }; \r\n  return <Input {...{value, setValue, ifield, onPressEnter}}  /> \r\n} \r\n\r\n// Update element =======================================\r\nfunction UpdateElement() { \r\n  const {values, ifield, Update} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  const [value, setValue] = useState(values[index]); \r\n  \r\n  useEffect(() => { \r\n    setValue(values[index]); \r\n  }, [JSON.stringify(values[index])]); \r\n\r\n  const onPressEnter = () => Update(index, value); \r\n  return <Input {...{value, setValue, ifield, onPressEnter}}  /> \r\n}\r\n\r\n// Delete Btn ===================================\r\nexport function DeleteBtn({children, ...props}:React.PropsWithChildren<React.ButtonHTMLAttributes<HTMLButtonElement>>) { \r\n  const {Delete} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  return <button onClick={() => Delete(index)} {...props}> \r\n    {!children ? 'x' : children} \r\n  </button> \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx",["393","394"],"import {useEffect, useRef} from 'react'; \r\n\r\nexport function useUpdate(callback:() => void, changeling:any) { \r\n  const flagFirstRender = useRef(true); \r\n  \r\n  useEffect(() => { \r\n    if(flagFirstRender.current) { \r\n      flagFirstRender.current = false; \r\n      return; \r\n    } \r\n    callback(); \r\n  }, [JSON.stringify(changeling)]); \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx",["395","396"],"import React, { useState } from 'react'; \r\nimport {Reader, Editor, Select} from '../reusable/_input'; \r\nimport {GetValueAt, SetValueAt} from '../reusable/_utils'; \r\n\r\n\r\nconst numField:IField = {accessor:'num', label:'Accessor', type:'number', defaultValue:0, options:{}} as IField; \r\nconst strField:IField = {accessor:'str', label:'Accessor', type:'string', defaultValue:'', options:{}} as IField; \r\nconst boolField:IField = {accessor:'bool', label:'Accessor', type:'boolean', defaultValue:false, options:{}} as IField; \r\n\r\nconst numOptions:IOption[] = [ \r\n  {value: 0, label:'value 0'}, \r\n  {value: 1, label:'value 1'}, \r\n  {value: 2, label:'value 2'}, \r\n  {value: 3, label:'value 3'}, \r\n] \r\n\r\nconst strOptions:IOption[] = [ \r\n  {value: 'a', label:'value a'}, \r\n  {value: 'b', label:'value b'}, \r\n  {value: 'c', label:'value c'}, \r\n  {value: 'd', label:'value d'}, \r\n] \r\n\r\nconst boolOptions:IOption[] = [ \r\n  {value: false, label:'female'}, \r\n  {value: true, label:'male'}, \r\n] \r\n\r\nconst testRead:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n  {value: 12, ifield: {...numField}}, \r\n  {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n  {value: 'bababa', ifield:{...strField} }, \r\n  {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n  {value: false, ifield:{...boolField} }, \r\n  {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n  // options\r\n  {value: 2, ifield:{...numField}, options:numOptions }, \r\n  {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n  {value: 'b', ifield:{...strField}, options:strOptions}, \r\n  {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n  {value: false, ifield:{...boolField}, options:strOptions}, \r\n  {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n] \r\n\r\n  /*const testEditor:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n    {value: 12, ifield: {...numField}}, \r\n    {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n    {value: 'bababa', ifield:{...strField} }, \r\n    {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n    {value: false, ifield:{...boolField} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n    // options\r\n    {value: 2, ifield:{...numField}, options:numOptions }, \r\n    {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n    {value: 'b', ifield:{...strField}, options:strOptions}, \r\n    {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n    {value: false, ifield:{...boolField, options:strOptions} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n  ] */\r\n\r\n/*\r\nfunction useStateAt(_value:any) { \r\n  const [value, setValue] = useState(_value); \r\n  const ValueAt = (keys?:any[], newValue?:any) => { \r\n    if(newValue && JSON.stringify(ValueAt(keys)) !== newValue) \r\n      return SetValueAt(value, newValue, keys); \r\n    return GetValueAt(value, keys); \r\n  } \r\n  return ValueAt; \r\n} \r\n  \r\nexport function TestValueAt() { \r\n  const VALUE = {a:[15,46], b:[96,45]} \r\n  const valueAt = useStateAt(VALUE); \r\n  const value = valueAt(['a',0]); \r\n  const setValue = valueAt(['a',0]); \r\n\r\n  return <div> \r\n    <Editor {...{value}} /> \r\n  </div> \r\n} */\r\n\r\n\r\n// Test select when value is not in the avaible options */ \r\nexport function TestSelect () { \r\n  const [value, setValue] = useState(['-1']); \r\n  const options = [ \r\n    {value:'0', label:'option 0'}, \r\n    {value:'1', label:'option 1'}, \r\n    {value:'2', label:'option 2'}, \r\n    {value:'3', label:'option 3'} \r\n  ] \r\n\r\n  return <Select {...{value, setValue, options, multiple:true}} /> \r\n} \r\n\r\nexport function TestEditors() {\r\n  \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <TestEditor {...e} /></div> \r\n    })} \r\n    <br/>\r\n    asdsadsadas\r\n    <br/>\r\n  </div> \r\n}\r\n\r\n\r\nexport function TestEditor({ifield, options, ...props}:{value:any, ifield:IField, options?:IOption[]}) { \r\n  const [value, setValue] = useState(props.value); \r\n  return <div> \r\n    <div>{JSON.stringify(value)}</div> \r\n    <Editor {...{ifield, value, setValue, options}} /> \r\n    <br/>\r\n  </div>\r\n}\r\n\r\n\r\nexport function TestReader() { \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <Reader {...e} /></div> \r\n    })} \r\n  </div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx",["397"],"import React, {useContext, useState} from 'react'; \r\nimport {CrudContext} from '../../../reusable/_crud'; \r\nimport {Select} from '../../../reusable/_input'; \r\n\r\n\r\nexport function CollectionSelector() { \r\n  const {activeCollection:value, setActiveCollection:setValue, GetICollections} = useContext(CrudContext); \r\n\r\n  //const [value, setValue] = useState(activeCollection?.accessor); \r\n  const options:IOption[] = GetICollections().map( ic => { return {value:ic, label:ic.label} }); \r\n  const ifield = {accessor:'', label:'', defaultValue:{}, type:''} as IField; \r\n\r\n  return <div> \r\n    <Select {...{ifield, value, setValue, options}} /> \r\n  </div>\r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx",["398","399"],"import React, {useContext} from 'react'; \r\nimport {CrudContext} from '../../reusable/_crud'; \r\nimport {Arrx} from '../../reusable/_arrx'; \r\n\r\nimport '../../css/feedback.css'; \r\n\r\n\r\n// Feedback =====================================\r\nexport function FeedBack() { \r\n  const {state} = useContext(CrudContext); \r\n\r\n  return <div> \r\n    {state.busy && <span>LOADING ... </span>} \r\n    {!state.busy && <span>Ready </span>} \r\n    {!state.busy && !state.success && 'an errors occured'} \r\n  </div> \r\n} \r\n\r\nfunction CrudFeedBack() { \r\n  const {state} = useContext(CrudContext); \r\n  // assumes state is ready and successful \r\n  const responses = state.response as ICrudResponse[]; // ICrudResponse[] \r\n  \r\n  return <div> \r\n    #Responses : {responses.length} \r\n  </div> \r\n  /*{actionType, success, data, err} \r\n  \r\n  const successMsg:any = { \r\n    create:'Creation succeed', \r\n    update:'Update succeed', \r\n    delete:'Deletion succeed', \r\n  } \r\n  const errorMsg:any = { \r\n    create:'Creation failed ', \r\n    update:'Update failed', \r\n    delete:'Deletion failed', \r\n  } \r\n\r\n  const className = success ? 'success' : 'failure'; \r\n\r\n  return <div className={className}> \r\n    <div>{success ? successMsg[actionType] : errorMsg[actionType]}</div> \r\n    {!success && <Arrx {...{values:(err)}} />} \r\n    </div> */\r\n} ",["400","401"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx",["402","403"],"import React, {useContext} from 'react'; \r\nimport {CrudContext} from '../../../reusable/_crud'; \r\n\r\nimport {Rows, Row, RowContext, Cells, Cell, CellContext} from '../../../reusable/_tablr'; \r\nimport {CreateBtn, DeleteBtn, UpdateBtn} from './crudbtn.component'; \r\nimport {CellRender} from './cellrenderer.component';\r\nimport { EActionType } from '../../../reusable/_dao';\r\n\r\n\r\n\r\nexport function InlineUpdateDelete({page, cols, colBtn}:{page:number[], cols:IField[], colBtn:IField}) { \r\n  return <Rows {...{rows:page}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <CellRender/> \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <UpdateBtn/><DeleteBtn/> \r\n    </Cell> \r\n  </Rows> \r\n} \r\n\r\nexport function InlineCreate({cols, colBtn}:{cols:IField[], colBtn:IField}) { \r\n  const {activeMode} = useContext(CrudContext); \r\n  const isCreate = activeMode === EActionType.CREATE; \r\n\r\n  return <Row {...{row:-1}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <span></span>\r\n      {isCreate && <CellRender/> } \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <CreateBtn/> \r\n    </Cell> \r\n  </Row> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx",["404"],"import React, {useContext} from 'react'; \r\nimport {RowContext, TablrContext} from '../../../reusable/_tablr'; \r\nimport {CrudContext} from '../../../reusable/_crud'; \r\nimport { EActionType } from '../../../reusable/_dao';\r\n\r\n\r\n// Create .......................................\r\nexport function CreateBtn() { \r\n  const {activeCollection:{accessor}, Create} = useContext(CrudContext); \r\n  const action = (entries:IEntry[]) => Create(accessor, entries); \r\n\r\n  const mode = EActionType.CREATE; \r\n  const labels = {affirm:'Create', confirm:'Confirm creation', cancel:'Cancel creation'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Update .......................................\r\nexport function UpdateBtn() { \r\n  const {activeCollection:{accessor}, Update} = useContext(CrudContext);\r\n  const action = (entries:IEntry[]) => Update(accessor, entries); \r\n\r\n  const mode = EActionType.UPDATE; \r\n  const labels = {affirm:'Update', confirm:'Confirm update', cancel:'Cancel update'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Delete .......................................\r\nexport function DeleteBtn() { \r\n  const {activeCollection:{accessor}, Delete} = useContext(CrudContext); \r\n  const action = (entries:IEntry[]) => Delete(accessor, entries); \r\n\r\n  const mode = EActionType.DELETE; \r\n  const labels = {affirm:'Delete', confirm:'Confirm deletion', cancel:'Cancel deletion'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n\r\n\r\n// CRUD BTN =====================================\r\ninterface CrudBtn { \r\n  mode: EActionType; \r\n  labels:{ \r\n    affirm:string, \r\n    confirm:string, \r\n    cancel:string, \r\n  }; \r\n  action:(entries:IEntry[])=>Promise<void>; \r\n} \r\nfunction CrudBtn ({mode, labels, action}:CrudBtn) { \r\n  const {activeEntry, activeMode, SetActive, ResetActive, IsActive} = useContext(CrudContext); \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n  const id = datas[row] ? datas[row]?._id: ''; \r\n\r\n  const isMode = activeMode === mode; \r\n\r\n  const Affirm = () => { \r\n    SetActive(mode, {_id:id}); \r\n  } \r\n  const Cancel = () => { \r\n    ResetActive(); \r\n  }; \r\n  const Confirm = async () => { \r\n    await action([activeEntry]); \r\n    Cancel(); \r\n  } \r\n\r\n  return <span> \r\n    {IsActive(id) && isMode && <button onClick={Confirm}>{labels.confirm}</button>} \r\n    {IsActive(id) && isMode && <button onClick={Cancel}>{labels.cancel}</button>} \r\n    {!IsActive(id) && <button onClick={Affirm}>{labels.affirm}</button>} \r\n  </span> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts",["405"],"import {useMemo} from 'react'; \r\nimport {useLoader, IState} from '../_useloader'; \r\nimport {DAO} from './dao.class'; \r\n\r\n/*\r\nexport enum EActionType { \r\n  CREATE = 'create', \r\n  READ = 'read', \r\n  UPDATE = 'update', \r\n  DELETE = 'delete', \r\n}*/\r\n\r\n\r\n\r\n// USE DAO ======================================\r\nexport interface IUseDao{ \r\n  state:IState; \r\n\r\n  // Get collections, entry, fields data \r\n  GetICollections:(accessors?:string[]) => ICollection[]; \r\n  GetIFields:(accessor:string, fields?:string[]) => IField[]; \r\n  GetIEntries:(accessor:string, ids?:string[]) => IEntry[]; \r\n  GetDefaultIEntry:(accessor:string) => IEntry; \r\n  \r\n  // Get foreign elements\r\n  GetForeignElements: (ifield:IField) => {foreignCollection:ICollection|undefined, abbrevField:IField|undefined}, \r\n\r\n  // Get options \r\n  GetIOptions: (ifield:IField) => IOption[]; \r\n\r\n  // load remote collections. \r\n  Collections:(accessors:string[]) => Promise<void>; \r\n\r\n  // Crud functionalities. \r\n  Create: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n  Read: (accessor:string, id?:string[]) => Promise<void>; \r\n  Update: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n  Delete: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n\r\n  // Validate \r\n  Validate: (collectionAccessor:string, ifieldAccessor:string, value:any) => boolean; \r\n} \r\n\r\n\r\n\r\n// USE DAO ======================================\r\nexport function useDao(dao:DAO):IUseDao { \r\n  // Hooks \r\n  const Dao = useMemo(() => dao, []); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const GetICollections = (accessors?:string[]) => Dao.GetICollections(accessors); \r\n  const GetIFields = (accessor:string, fields?:string[]) => Dao.GetIFields(accessor, fields); \r\n  const GetIEntries = (accessor:string, ids?:string[]) => Dao.GetIEntries(accessor, ids); \r\n  const GetDefaultIEntry = (accessor:string) => Dao.GetDefaultIEntry(accessor); \r\n  // Get foreign elements\r\n  const GetForeignElements = (ifield:IField) => Dao.GetForeignElements(ifield); \r\n  // Get options \r\n  const GetIOptions = (ifield:IField) => Dao.GetIOptions(ifield); \r\n\r\n  // Collections \r\n  const Collections = async (accessors:string[]) => \r\n    Load(() => Dao.Collections(accessors)); \r\n\r\n  // Crud functionalities \r\n  // async Validate ... \r\n  // async Ids ... \r\n  const Create = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Create(accessor, entries)); \r\n  const Read = async (accessor:string, ids?:string[]) => \r\n    Load(() => Dao.Read(accessor, ids)); \r\n  const Update = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Update(accessor, entries)); \r\n  const Delete = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Delete(accessor, entries)); \r\n\r\n  // Validate\r\n  const Validate = (collectionAccessor:string, ifieldAccessor:string, value:any) => { \r\n    const [ifield] = GetIFields(collectionAccessor, [ifieldAccessor]); \r\n    return ifield?.validators?.every( valid => valid(value) ) ?? false; \r\n  }; \r\n\r\n  return { \r\n    state, \r\n    GetICollections, GetIFields, GetIEntries, GetDefaultIEntry, \r\n    GetForeignElements, GetIOptions, \r\n    Collections, Create, Read, Update, Delete, \r\n    Validate\r\n  }; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudmongoose.class.ts",["406"],"import axios from 'axios'; \r\nimport {ParseCollection} from './mongooseparser.utils'; \r\n\r\n\r\n// Crud Mongoose =======================================\r\nexport class Fetcher { \r\n  public baseUrl:string = ''; \r\n\r\n  constructor(baseUrl:string) { \r\n    this.baseUrl = baseUrl; \r\n  }\r\n\r\n  // Access -----------------------------------------------\r\n  public async Access() { \r\n    return await axios.get(this.baseUrl); \r\n  } \r\n\r\n  /* \r\n  PUT ...api/collections \r\n    req.body => accessors:string[] \r\n    res:ICrudResponse[] \r\n  */ \r\n  // Collections ..........................................\r\n  public async Collections(accessors:string[]): Promise<ICrudResponse[]> { \r\n    const axiosResponses = (await axios.put(this.baseUrl+'collections/', accessors)).data as ICrudResponse[]; \r\n    return axiosResponses.map( r => { \r\n      const parsedCollection = ParseCollection(r.data); \r\n      return {...r, data:parsedCollection} as ICrudResponse; \r\n    }); \r\n  } \r\n\r\n  // Validate .............................................\r\n  public async Validate(accessor:string, entries:IEntry[]) { \r\n    return await axios.put(this.baseUrl+'validate/'+accessor, entries); \r\n  } \r\n\r\n  // Ids ..................................................\r\n  public async Ids(accessor:string): Promise<string[]>{ \r\n    return (await axios.get(this.baseUrl+'ids/'+accessor)).data; \r\n  } \r\n\r\n\r\n  //?? public async CreateUpdate ?? \r\n\r\n\r\n  // Create ...............................................\r\n  public async Create(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toCreate = entries.map(e => { \r\n      const {_id, _v, ...data} = e; \r\n      return data; \r\n    }); \r\n    return (await axios.put(this.baseUrl+'create/'+accessor, toCreate)).data; \r\n  } \r\n\r\n  // ICrudResponse ?? or IEntry ??\r\n  // Read .................................................\r\n  public async Read(accessor:string, ids?:string[]): Promise<ICrudResponse[]> {\r\n    const responses = await axios.put(this.baseUrl+'read/'+accessor, ids); \r\n    return responses.data; \r\n  }\r\n\r\n  // Update ...............................................\r\n  public async Update(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    return (await axios.put(this.baseUrl+'update/'+accessor, entries)).data; \r\n  }\r\n\r\n  // Delete ...............................................\r\n  /* Sends an array of objects with the only property being '_id' ... [{_id}] */\r\n  public async Delete(modelName:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toDelete = entries.map(e => { \r\n      const {_id, ...data} = e; \r\n      return {_id}; \r\n    }); \r\n    return (await axios.put(this.baseUrl+'delete/'+modelName, toDelete)).data; \r\n  } \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testcrud\\testcrud.experiment.tsx",["407"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_crud.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\crud\\useactive.hook.tsx",["408","409"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {IUseDao, useDao, ICrud, DAO, DaoContext} from '../_dao'; \r\nimport {Fetcher} from '../_mongooseparser'; \r\n\r\n\r\n\r\n// ICrudContext ------------------------------------------- \r\ninterface ICrudContext extends IUseDao { \r\n  activeCollection: ICollection; \r\n  setActiveCollection: React.Dispatch<React.SetStateAction<ICollection>>; \r\n  activeEntry: IEntry; \r\n  setActiveEntry: React.Dispatch<React.SetStateAction<IEntry>>; \r\n  activeMode: string; \r\n  setActiveMode: React.Dispatch<React.SetStateAction<string>>; \r\n  ResetActive: () => void, \r\n  SetActive: (mode:string, entry:IEntry) => void, \r\n  IsActive: (id:string) => boolean; \r\n} \r\nexport const CrudContext = React.createContext({} as ICrudContext); \r\n\r\n\r\n\r\n// CrudContexter ========================================== \r\nexport function CrudContexter({baseUrl, children}:React.PropsWithChildren<{baseUrl:string}>) { \r\n  const dao = new DAO(new Fetcher(baseUrl) as ICrud); \r\n  const usedao = useDao(dao); \r\n  const useactive = useActive(usedao); \r\n  const context = {...usedao, ...useactive}; \r\n  return <CrudContext.Provider value={context} > \r\n    {children} \r\n  </CrudContext.Provider> \r\n} \r\n\r\n\r\n\r\n// UseCrud ================================================ \r\nexport function useActive(useDao:IUseDao) { \r\n  const [activeCollection, setActiveCollection] = useState({} as ICollection); \r\n  const [activeEntry, setActiveEntry] = useState({} as IEntry); \r\n  const [activeMode, setActiveMode] = useState('read'); \r\n\r\n  useEffect(() => { \r\n    ResetActive(); \r\n  }, [activeCollection]); \r\n\r\n  function ResetActive() { \r\n    setActiveEntry({} as IEntry); \r\n    setActiveMode('read'); \r\n  } \r\n\r\n  function SetActive(mode:string, entry:IEntry = {} as IEntry) { \r\n    const [foundEntry] = useDao.GetIEntries(activeCollection?.accessor, [entry._id]);  \r\n    const defaultEntry = {...useDao.GetDefaultIEntry(activeCollection?.accessor), ...entry}; \r\n    setActiveEntry(foundEntry ?? defaultEntry); \r\n    setActiveMode(mode); \r\n  }\r\n\r\n  function IsActive(id:string):boolean { \r\n    return id === activeEntry?._id; \r\n  } \r\n\r\n  return {activeCollection, setActiveCollection, \r\n    activeEntry, setActiveEntry, \r\n    activeMode, setActiveMode, \r\n    ResetActive, SetActive, IsActive \r\n  }; \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\testrender.tsx",["410","411"],"import {useState} from 'react'; \r\nimport {Reader, IReader, Editor, IEditor} from '../../reusable/_input'; \r\n\r\n\r\nconst stringField = {accessor:'', label:'', defaultValue:'', type:'string'} as IField; \r\nconst numField = {accessor:'', label:'', defaultValue:0, type:'number'} as IField; \r\nconst boolField = {accessor:'', label:'', defaultValue:false, type:'boolean'} as IField; \r\n\r\n// Options\r\nconst stringOptions = [ \r\n  {value:'a', label:'option 0'}, \r\n  {value:'b', label:'option 1'}, \r\n  {value:'c', label:'option 2'} \r\n] as IOption[]; \r\n\r\nconst numOptions = [ \r\n  {value:0, label:'option 0'}, \r\n  {value:1, label:'option 1'}, \r\n  {value:2, label:'option 2'} \r\n] as IOption[]; \r\n\r\n\r\n\r\n// One String \r\nconst strOne:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined string', args:{ifield: stringField, value:undefined}}, // undefined string \r\n  {label: 'Empty string', args:{ifield: stringField, value:''}}, // empty string \r\n  {label: 'Correct string', args:{ifield: stringField, value:'baba'}}, // none empty string \r\n]\r\n\r\n// One option String\r\nconst strOneOptions:{label:string, args:IReader}[] = [\r\n  \r\n  {label: 'Undefined string option', args:{ifield: stringField, value:undefined, options:stringOptions}}, // undefined string \r\n  {label: 'Empty string option', args:{ifield: stringField, value:''}}, // empty string \r\n  {label: 'a string option', args:{ifield: stringField, value:'a', options:stringOptions}}, // some string\r\n  {label: 'b string option', args:{ifield: stringField, value:'b', options:stringOptions}}, // some string\r\n]\r\n\r\n\r\n// Many String \r\nconst strMany:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined string[]', args:{ifield:{...stringField, isArray:true}, value:undefined}},  // undefined string[] \r\n  {label: 'Empty string[]', args:{ifield:{...stringField, isArray:true}, value:[]}},  // empty string[] \r\n  {label: 'Single string[]', args:{ifield:{...stringField, isArray:true}, value:['dada']}},  // one correct string[] \r\n  {label: 'Many string[]', args:{ifield:{...stringField, isArray:true}, value:['dada', 'fafa', 'gaga']}},  // many correct string[] \r\n]\r\n\r\n  // Many options String \r\nconst strManyOptions:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined option string[]', args:{ifield:{...stringField, isArray:true}, value:undefined, options:stringOptions}},  // undefined string[] \r\n  {label: 'Empty option string[]', args:{ifield:{...stringField, isArray:true}, value:[], options:stringOptions}},  // empty string[] \r\n  {label: 'One string[]', args:{ifield:{...stringField, isArray:true}, value:['a'], options:stringOptions}},  // one correct string[] \r\n  {label: 'Incorrect option string[]', args:{ifield:{...stringField, isArray:true}, value:['babaa'], options:stringOptions}},  // one incorrect string[] \r\n  {label: 'Many options string[]', args:{ifield:{...stringField, isArray:true}, value:['c', 'b', 'a'], options:stringOptions}},  // many correct string[] \r\n]\r\n\r\nconst numOne:{label:string, args:IReader}[] = [\r\n  // One Number \r\n  {label: 'Undefined number', args:{ifield: numField, value:undefined}}, // undefined number \r\n  {label: 'Number zero', args:{ifield: numField, value:0}}, // zero number \r\n  {label: 'Number 12', args:{ifield: numField, value:12}}, // some number \r\n]\r\n\r\n// One options number \r\nconst numOneOptions:{label:string, args:IReader}[] = [  \r\n  {label: 'Undefined number[] option', args:{ifield: numField, value:undefined, options:numOptions}}, // undefined number \r\n  {label: 'Zero options string[] option', args:{ifield: numField, value:0, options:numOptions}}, // zero number \r\n  {label: 'Correct string[] option', args:{ifield: numField, value:2, options:numOptions}}, // zero number \r\n  {label: 'Incorrect string[] option', args:{ifield: numField, value:12, options:numOptions}}, // incorrect options value\r\n]\r\n\r\n// Many Number\r\nconst numMany:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined number[]', args:{ifield:{...numField, isArray:true}, value:undefined}},  // undefined number[] \r\n  {label: 'Empty number[]', args:{ifield:{...numField, isArray:true}, value:[]}},  // empty number[] \r\n  {label: 'Single number[]', args:{ifield:{...numField, isArray:true}, value:[2]}},  // single correct number[] \r\n  {label: 'Many number[]', args:{ifield:{...numField, isArray:true}, value:[1, 2, 0]}},  // many correct number[] \r\n]\r\n  // Many options Number\r\nconst numManyOptions:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined option number[]', args:{ifield:{...numField, isArray:true}, value:undefined, options:numOptions}},  // undefined number[] \r\n  {label: 'Empty option number[]', args:{ifield:{...numField, isArray:true}, value:[], options:numOptions}},  // empty number[] \r\n  {label: 'Single option number[]', args:{ifield:{...numField, isArray:true}, value:[2], options:numOptions}},  // single correct number[] \r\n  {label: 'Many option number[]', args:{ifield:{...numField, isArray:true}, value:[1, 2, 0], options:numOptions}},  // many correct number[] \r\n  {label: 'Single incorrect number[]', args:{ifield:{...numField, isArray:true}, value:[12], options:numOptions}},  // incorrect number[] \r\n]\r\n\r\n\r\nexport function ReaderFuncSpecial({ifield, value}:IReader) { \r\n  return <div>SPECIAL :{JSON.stringify(value)}</div> \r\n} \r\n\r\nexport function TestReader() { \r\n  const strs = [...strOne, ...strOneOptions, ...strMany, ...strManyOptions]; \r\n  const nums = [...numOne, ...numOneOptions, ...numMany, ...numManyOptions]; \r\n\r\n  return <div> \r\n    <h3>Strings</h3> \r\n    {strs.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <Reader {...{...args}} /><br/></div> \r\n    })} \r\n\r\n    <h3>Numbers </h3>\r\n    {nums.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <Reader {...args} /><br/></div> \r\n    })} \r\n    </div> \r\n} \r\n\r\n\r\nexport function TestEditors() { \r\n  return <div>\r\n    <h3>Strings </h3>\r\n    {strOne.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <TestEditor {...args} /><br/></div>\r\n    })} \r\n\r\n    <h3>Numbers </h3>\r\n    {numOne.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <TestEditor {...args} /><br/></div>\r\n    })} \r\n    </div> \r\n} \r\n\r\n\r\nexport function TestEditor({...args}:IReader) { \r\n  const [value, setValue] = useState(args.value); \r\n  const {ifield, options} = args; \r\n  return <div>\r\n    {value} :\r\n    <Editor {...{value, setValue, ifield, options}} /> \r\n  </div>\r\n} ",["412","413"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testarray\\testarrayutils.experiment.tsx",["414","415","416","417","418","419","420","421","422","423","424","425","426"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\value.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrayutils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\editor.component.tsx",["427","428"],"import React, {useEffect, useState} from 'react'; \r\nimport {GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\nimport {ToArray, Pick} from '../../_arrayutils'; \r\nimport {Input, InputArray} from '../../_input'; \r\nimport {Select} from '../../_input'; \r\n\r\nimport {IReader} from './reader.component'; \r\nimport { useUpdate } from '../../_useupdate'; \r\n\r\n\r\n\r\nexport interface IEditor extends IReader { \r\n  //setValue: React.Dispatch<React.SetStateAction<any>>; \r\n  setValue: (newValue:any) => void; \r\n} \r\n\r\ntype EditorFunc = ({...props}:IEditor) => JSX.Element; \r\n\r\nexport interface IEditorComponent extends IEditor { \r\n  CustomEditDefault?:EditorFunc; \r\n\r\n  CustomEditOne?:EditorFunc; \r\n  CustomEditMany?:EditorFunc; \r\n\r\n  CustomEditOneOptions?:EditorFunc; \r\n  CustomEditManyOptions?:EditorFunc; \r\n\r\n  CustomEditMixed?:EditorFunc; \r\n} \r\n\r\n/* EDITOR ===========================================================\r\n- ifield      // gives info about the type and default values to be displayed. \r\n- value       // will be assigned to its appropriate default values if undefined. \r\n- options     // if not empty, the label matching the value will be displayed. \r\n- setValue    // hooks with parent component value. \r\n\r\n- CustomEditDefault : if defined this function will be used display value. \r\n\r\n- CustomEditOne : if defined is used to display value, otherwise uses 'EditOne' (Input) \r\n\r\n- CustomEditMany : if defined is used to display value, otherwise uses 'EditMany' (Input array) \r\n\r\n- CustomEditOneOptions : if defined is used to display value, otherwise uses 'EditOneOptions' (Select with multiple:false) \r\n\r\n- CustomEditOneOptions : if defined is used to display value, otherwise uses 'EditManyOptions' (Select with multiple:true) \r\n\r\n- CustomEditMixed : if defined is use to display value, otherwise uses 'EditMixed' (EditMixed) \r\n*/ \r\nexport function Editor({ifield, options, ...props}:IEditorComponent) { \r\n  const _value = IsEmpty(options) ? \r\n    props.value ?? GetDefaultValueFromIField(ifield): \r\n    GetSelection(props.value).map(o => o.value); \r\n  \r\n  const [value, setValue] = useState(_value); \r\n  \r\n  // synchronize from parent value\r\n  useEffect(() => { \r\n    if(value !== _value) \r\n      props.setValue(value); \r\n  }, [value]); \r\n\r\n  // synchronize to parent value \r\n  //useUpdate(() => {props.setValue(_value)},_value); \r\n\r\n  function GetSelection (value:any) { \r\n    return Pick(options, ToArray(props.value), (o,u) => o.value === u); \r\n  } \r\n\r\n  const args = {ifield, value, setValue, options}; \r\n  const hasOptions = !IsEmpty(options); \r\n\r\n  // Edit Default\r\n  let editfunc = props.CustomEditDefault ?? undefined; \r\n\r\n  // Edit Many options\r\n  if(!editfunc && ifield.isArray && hasOptions) \r\n    editfunc = props.CustomEditManyOptions ?? EditManyOptions; \r\n\r\n  // Edit Many\r\n  if(!editfunc && ifield.isArray && !hasOptions) \r\n    editfunc = props.CustomEditMany ?? EditMany; \r\n\r\n  // Edit Mixed\r\n  if(!editfunc && ifield.isMixed) \r\n    editfunc = props.CustomEditMixed ?? EditMixed; \r\n\r\n  // Edit One option\r\n  if(!editfunc && hasOptions) \r\n    editfunc = props.CustomEditOneOptions ?? EditOneOptions; \r\n  // Edit One\r\n  editfunc = editfunc ?? props.CustomEditOne ?? EditOne; \r\n\r\n  return <EditFunc {...{editfunc, args}} /> \r\n} \r\n\r\n\r\nfunction EditFunc({...props}:{editfunc:EditorFunc, args:IEditor}) { \r\n  return <props.editfunc {...props.args} />; \r\n} \r\n\r\n\r\nfunction EditOne({...args}:IEditor) { \r\n  return <Input {...args} /> \r\n}\r\n\r\nfunction EditMany({value, setValue, ifield}:IEditor) { \r\n  return <InputArray {...{ifield, values:value, setValues:setValue}} /> \r\n}\r\n\r\nfunction EditOneOptions({ifield, value, setValue, ...props}:IEditor) { \r\n  const options = props.options ?? [] as IOption[]; \r\n  return <Select {...{ifield, value, setValue, options}  } /> \r\n} \r\n\r\nfunction EditManyOptions({...props}:IEditor) { \r\n  const options = props.options ?? [] as IOption[]; \r\n  return <Select {...{...props, options} } /> \r\n} \r\n\r\nfunction EditMixed({ifield, value, options, setValue}:IEditor) {\r\n  return <div>{JSON.stringify(value)}</div> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\reader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testLoader\\testLoader.tsx",["429"],"import {useEffect} from 'react'; \r\nimport {useLoader} from '../../reusable/customhooks/useloader.hook';\r\nimport {ICrud, DAO} from '../../reusable/_dao'; \r\nimport {Fetcher} from '../../reusable/_mongooseparser'; \r\n\r\nconst baseUrl = `https://fjg-mongoose-heroku.herokuapp.com/api/`; \r\n\r\nconst dao = new DAO(new Fetcher(baseUrl) as ICrud); \r\n\r\n\r\nexport function TestLoader() { \r\n  const {state, Load} = useLoader(); \r\n  \r\n\r\n  async function LoadFunc() { \r\n    await dao.Collections(['patients']) as ICrudResponse[]; \r\n  } \r\n\r\n  useEffect(() => { \r\n    Load(() => LoadFunc()); \r\n  }, []); \r\n\r\n  return <div>\r\n    TestLoader\r\n      <div>State-busy {JSON.stringify(state.busy)}</div> \r\n      <div>State-success {JSON.stringify(state.success)}</div> \r\n    </div>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\preloader.component.tsx",["430"],"import {useContext, useEffect} from 'react'; \r\nimport { DaoContext } from '../reusable/_dao2'; \r\nimport { useLoader } from '../reusable/_useloader'; \r\n\r\n\r\n// Preloader ==============================================\r\nexport function PreloadCollection () { \r\n  const ready = usePreloadCollections(); \r\n  return <div> \r\n    Preloading : {JSON.stringify(ready)} \r\n  </div> \r\n}\r\n\r\n\r\nexport function usePreloadCollections() { \r\n  const {Collections} = useContext(DaoContext); \r\n  const accessors = ['questions','responses', 'answers', 'forms', 'instructions', 'patients', 'appointments']; \r\n  const callback = (res:any) => {}; \r\n  const {state, Load} = useLoader(); \r\n\r\n  useEffect(() => { \r\n    Load( () => Collections(accessors), callback); \r\n  }, []); \r\n\r\n  return state.success; \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\session\\session.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_session.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\session\\usesession.hook.ts",["431"],"import { useEffect, useState } from 'react';\r\nimport { GetValueAt, SetValueAt } from '../_utils';\r\nimport {Session} from './session.class'; \r\n\r\n\r\ntype Keys = any[]; \r\n\r\nexport interface IUseSession { \r\n  Get: (keys?:Keys) => any; \r\n  Set: (newValue: any, keys?:Keys) => void; \r\n  End: () => void; \r\n} \r\n\r\n// UseSession =============================================\r\nexport function useSession(sessionName:string, value?:any):IUseSession { \r\n  const [session, setSession] = useState(value); \r\n\r\n  function Get(keys?:string[]) { \r\n    if(!Session.SessionExists(sessionName)) \r\n      Session.Set(sessionName, session); \r\n    return GetValueAt(session, keys); \r\n  } \r\n\r\n  function Set(newValue:any, keys?:string[]) { \r\n    setSession((prev:any) => { \r\n      const newSession = SetValueAt(prev, newValue, keys); \r\n      Session.Set(sessionName, newSession); \r\n      return newSession; \r\n    }) \r\n  } \r\n\r\n  function End() { \r\n    Session.EndSession(sessionName); \r\n    setSession(undefined) \r\n  } \r\n  \r\n  return {Get, Set, End}; \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usegetset.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useGetSet.hook.tsx",["432","433"],"import {useState, useEffect} from 'react'; \r\nimport {GetValueAt, SetValueAt} from '../_utils'; \r\n\r\n\r\ninterface IUseStateAt { \r\n  getValueAt: (keys:string[]) => any; \r\n  setValueAt: (keys:string[]) => (newValue:any) => any; \r\n}\r\n\r\nexport function useStateAt(Value:any) { \r\n  const [value, setValue] = useState(Value); \r\n\r\n  const getValueAt = (keys?:string[]) => GetValueAt(value, keys); \r\n  \r\n  //type arg = T | ((prevState: T) => T); \r\n  const setValueAt = (keys?:string[]) => { \r\n    return (newValue:any) => { \r\n      setValue((prev:any) => { \r\n        return SetValueAt(prev, newValue, keys); \r\n      }); \r\n    } \r\n  }\r\n  return {getValueAt, setValueAt}; \r\n}\r\n\r\n\r\ninterface IUseGetSet { \r\n  value: any; \r\n  setValue: React.Dispatch<React.SetStateAction<any>>; \r\n  accessor: string; \r\n} \r\n\r\nexport function useGetSet(Value:any, SetValue:React.Dispatch<React.SetStateAction<any>>, accessor:string):IUseGetSet { \r\n  const [value, setValue] = useState(GetValueAt(Value, [accessor])); \r\n\r\n  useEffect(() => { \r\n    const prev = GetValueAt(Value, [accessor]); \r\n    if(JSON.stringify(prev) !== JSON.stringify(value)) { \r\n      SetValue((prev:any) => { \r\n        return SetValueAt(prev, value, [accessor]); \r\n      }); \r\n    } \r\n  }, [value]) \r\n\r\n  return {value, setValue, accessor}; \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\crudTest\\crudTest.page.tsx",["434","435"],"import {useState, useContext, useEffect} from 'react'; \r\nimport {IsEmpty} from '../../reusable/_utils'; \r\nimport {useLoader} from '../../reusable/_useloader'; \r\nimport {DAOContext} from '../home/home.page'; \r\n\r\nexport function CrudTest() { \r\n  const {GetIEntries, Collections, Create, Read, Update, Delete} = useContext(DAOContext); \r\n  \r\n  const [entries, setEntries] = useState([] as IEntry[]); \r\n  const [toUpdate, setToUpdate] = useState({} as IEntry); \r\n  const callback = (res:any) => { \r\n    const entries = (res as ICrudResponse[]).map(r => r.data); \r\n    const toUpdate = !IsEmpty(entries) ? entries[entries.length-1] : {} as IEntry; \r\n    setEntries(entries); \r\n    setToUpdate({...toUpdate, titles:['Title mod', 'Title mod'], fId:'fmod'}); \r\n  }; \r\n  const {state, Load} = useLoader(); \r\n\r\n  //console.log(state); \r\n  \r\n  const toCreate = {titles:['Title x', 'Title x'], _id:'', fId:'fx'} as IEntry; \r\n\r\n  const LoadCollection = () => Load(() => Collections(['forms'])); \r\n  const LoadRead = () => Load(() => Read('forms'), callback); \r\n  const LoadCreate = () => Load(() => Create('forms', [toCreate]), callback); \r\n  const LoadUpdate = () => Load(() => Update('forms', [toUpdate]), callback); \r\n  const LoadDelete = () => Load(() => Delete('forms', [toUpdate]), callback); \r\n\r\n\r\n  return <div> \r\n    <h2>CrudTest</h2> \r\n    <div> \r\n      STATE:\r\n      {JSON.stringify([state.success])} \r\n    </div> \r\n    <div>\r\n      {entries.map((e, i) => { \r\n        const {_id, ...data} = e; \r\n        return <div key={_id}>{i}. {JSON.stringify(data)}</div> \r\n      })} \r\n    </div> \r\n    <br/>  \r\n    <button onClick={LoadCollection}>Collections</button> <br/>\r\n    <button onClick={LoadRead}>Read</button> <br/>\r\n    \r\n    <div>{JSON.stringify(toCreate)}</div>\r\n    <button onClick={LoadCreate}>Create</button> <br/>\r\n\r\n    <div>{JSON.stringify(toUpdate)}</div>\r\n    <button onClick={LoadUpdate} disabled={IsEmpty(toUpdate)}>Update</button> <br/>\r\n    <button onClick={LoadDelete} disabled={IsEmpty(toUpdate)}>Delete</button> <br/>\r\n  </div> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objset\\objset.component.tsx",["436","437","438","439"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport { IsEmpty, SetValueAt } from '../../utils/value.utils';\r\nimport { GetValueAt } from '../../_utils';\r\n\r\n\r\nexport interface IObjx { \r\n  value:any; \r\n} \r\n\r\nexport const ObjxContext = React.createContext({} as IObjx); \r\nexport const KeysContext = React.createContext({} as {keys: IKeys}); \r\nexport const KeyContext = React.createContext({} as {k: number|string}); \r\n\r\n// ARRX =========================================\r\nexport function Objx({value, children}:React.PropsWithChildren<IObjx>) { \r\n  return <ObjxContext.Provider value={{value}} > \r\n    {children} \r\n  </ObjxContext.Provider> \r\n} \r\n\r\ntype IKeys = (number|string)[][]; \r\n\r\nexport function Keys({keys, children}:React.PropsWithChildren<{keys:IKeys}>) { \r\n  const {value} = useContext(ObjxContext); \r\n  const [firstKeys, ...remaining] = keys; \r\n\r\n  if(!IsEmpty(remaining)) { \r\n    return <KeysContext.Provider value={{keys:[firstKeys] as IKeys}}> \r\n      {firstKeys.map( k => { \r\n        const _value = value[k]; \r\n        return <Objx key={k} value={_value}> \r\n          <Keys keys={remaining}>{children}</Keys> \r\n        </Objx> \r\n      })} \r\n    </KeysContext.Provider> \r\n  } \r\n\r\n  return <KeysContext.Provider value={{keys:[firstKeys] as IKeys}}> \r\n    {firstKeys.map( k => {       \r\n      return <KeyContext.Provider key={k} value={{k}}> \r\n        {children} \r\n      </KeyContext.Provider> \r\n    })} \r\n  </KeysContext.Provider> \r\n} \r\n\r\n\r\ninterface IKey { \r\n  k: number|string; \r\n} \r\nexport function Key({k, children}:React.PropsWithChildren<IKey>) { \r\n  return <KeyContext.Provider value={{k}}> \r\n    {children} \r\n  </KeyContext.Provider> \r\n} \r\n\r\nexport function Label() { \r\n  const {k} = useContext(KeyContext); \r\n  return <span>{k}: </span> \r\n} \r\n\r\nexport function Value() { \r\n  const {value} = useContext(ObjxContext); \r\n  const {k} = useContext(KeyContext); \r\n  return <span>{value[k]}</span> \r\n} \r\n\r\nexport function Test() { \r\n  const obj = [ \r\n    {a:12, b:'as'}, \r\n    {a:13, b:'bs'}\r\n  ]\r\n  return <Objx value={obj}> \r\n    <Keys keys={[[0, 1], ['a','b']]} > \r\n      <Label/><Value/> <br/>\r\n    </Keys> \r\n  </Objx> \r\n} \r\n\r\n\r\n/*\r\nexport function ElementEdit({...props}:{setValue:React.Dispatch<React.SetStateAction<any>> }) { \r\n  const {value:_value} = useContext(ObjxContext); \r\n  const {k} = useContext(ElementContext); \r\n  const [value, setValue] = useState(GetValueAt(_value, [k])); \r\n\r\n  useEffect(() => { \r\n    const prev = GetValueAt(_value, [k]); \r\n    if(JSON.stringify(prev) !== JSON.stringify(value)) { \r\n      props.setValue((prev:any) => { \r\n        return SetValueAt(prev, value, [k]); \r\n      }); \r\n    } \r\n  }, [value]) \r\n\r\n  return <TestEditor {...{k, value, setValue}} /> \r\n} \r\n\r\ninterface ITestEditor {\r\n  k:string|number, \r\n  value:any, \r\n  setValue:React.Dispatch<React.SetStateAction<any>>\r\n}\r\n\r\nfunction TestEditor({k, value, setValue}:ITestEditor) { \r\n  return <div>\r\n    {k} : {value} <br/> \r\n    <button onClick={() => setValue((prev:any) => { \r\n      return prev + prev; \r\n    })} >Increment</button> \r\n  </div>\r\n}\r\n\r\n\r\nexport function Test() { \r\n  const obj = {a:12, b:'adas'}; \r\n  const [value, setValue] = useState(obj); \r\n\r\n  return <Objx {...{value, keys:['a', 'b']}} > \r\n    <ElementEdit {...{setValue}}/> \r\n  </Objx> \r\n}\r\n*/",["440","441"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao2.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient2\\patient.page.tsx",["442"],"import React from 'react'; \r\nimport { IsEmpty } from '../../reusable/_utils'; \r\nimport { usePatient, IUsePatient } from './usepatient.hook'; \r\n\r\nimport { PatientIdentification } from './components/patientidentification.component'; \r\nimport { PatientProfile } from './components/patientprofile.component'; \r\nimport { Questionnaire } from '../questionnaire2/questionnaire.page'; \r\nimport { EActionType } from '../../reusable/_dao'; \r\n\r\n\r\n/* \r\nif profile and questionnaire are empty; display patientId page. \r\nif questionnaire is empty; display patientProfile page to createUpdate profile. \r\nif questionnaire is not empty; display questionnaire. \r\n*/ \r\n\r\nexport const PatientContext = React.createContext({} as IUsePatient); \r\nexport default function PatientPage() { \r\n  console.log('patient page'); \r\n  const context = usePatient(); \r\n  const {profile, appointment} = context; \r\n\r\n  const crudResponseTest = [{ \r\n    actionType:EActionType.CREATE, \r\n    success: true, \r\n    data: {}, \r\n    err: [] \r\n  } as ICrudResponse]; \r\n  \r\n  return <PatientContext.Provider value={context}> \r\n    <div>Profile : {JSON.stringify(profile)}</div> \r\n    <div>Appointment : {JSON.stringify(appointment)}</div> \r\n    {IsEmpty(profile) && <PatientIdentification/> } \r\n    {!IsEmpty(profile) && IsEmpty(appointment) && <PatientProfile/> } \r\n    {!IsEmpty(profile) && !IsEmpty(appointment) && <Questionnaire/> } \r\n  </PatientContext.Provider> \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao2\\dao.contexter.tsx",["443"],"import React from 'react'; \r\nimport {useMemo} from 'react'; \r\nimport { DAO, ICrud } from '../_dao'; \r\nimport {Fetcher} from '../_mongooseparser'; \r\n\r\n\r\nexport interface IUseDao { \r\n  // Get collections, entry, fields data \r\n  GetICollections:(accessors?:string[]) => ICollection[]; \r\n  GetIFields:(accessor:string, fields?:string[]) => IField[]; \r\n  GetIEntries:(accessor:string, ids?:string[]) => IEntry[]; \r\n  GetDefaultIEntry:(accessor:string) => IEntry; \r\n  \r\n  // Get foreign elements\r\n  GetForeignElements: (ifield:IField) => {foreignCollection:ICollection|undefined, abbrevField:IField|undefined}, \r\n\r\n  // Get options \r\n  GetIOptions: (ifield:IField) => IOption[]; \r\n\r\n  // load remote collections. \r\n  Collections:(accessors?:string[]) => Promise<ICrudResponse[]>; \r\n\r\n  // Crud functionalities. \r\n  CreateUpdate: (accessor:string, entries:IEntry[], predicate?:(entry:IEntry)=>boolean) => Promise<ICrudResponse[]>; \r\n  Create: (accessor:string, entries:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Read: (accessor:string, id?:string[]) => Promise<ICrudResponse[]>; \r\n  Update: (accessor:string, entries:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Delete: (accessor:string, entries:IEntry[]) => Promise<ICrudResponse[]>; \r\n\r\n  // Validate \r\n  Validate: (collectionAccessor:string, ifieldAccessor:string, value:any) => boolean; \r\n}\r\n\r\nexport function useDao(baseUrl:string):IUseDao { \r\n  const Dao = useMemo(() => new DAO(new Fetcher(baseUrl) as ICrud), []); \r\n\r\n  const GetICollections = (accessors?:string[]) => Dao.GetICollections(accessors); \r\n  const GetIFields = (accessor:string, fields?:string[]) => Dao.GetIFields(accessor, fields); \r\n  const GetIEntries = (accessor:string, ids?:string[]) => Dao.GetIEntries(accessor, ids); \r\n  const GetDefaultIEntry = (accessor:string) => Dao.GetDefaultIEntry(accessor); \r\n  // Get foreign elements\r\n  const GetForeignElements = (ifield:IField) => Dao.GetForeignElements(ifield); \r\n  // Get options \r\n  const GetIOptions = (ifield:IField) => Dao.GetIOptions(ifield); \r\n\r\n  // Collections \r\n  const Collections = async (accessors?:string[]) => Dao.Collections(accessors); \r\n\r\n  // Crud functionalities \r\n  // async Validate ... \r\n  // async Ids ... \r\n  const CreateUpdate = async (accessor:string, entries:IEntry[], predicate?:(entry:IEntry)=>boolean) => \r\n    Dao.CreateUpdate(accessor, entries, predicate); \r\n  const Create = async (accessor:string, entries:IEntry[]) => Dao.Create(accessor, entries); \r\n  const Read = async (accessor:string, ids?:string[]) => Dao.Read(accessor, ids); \r\n  const Update = async (accessor:string, entries:IEntry[]) => Dao.Update(accessor, entries); \r\n  const Delete = async (accessor:string, entries:IEntry[]) => Dao.Delete(accessor, entries); \r\n\r\n  // Validate\r\n  const Validate = (collectionAccessor:string, ifieldAccessor:string, value:any) => { \r\n    const [ifield] = GetIFields(collectionAccessor, [ifieldAccessor]); \r\n    return ifield?.validators?.every( valid => valid(value) ) ?? false; \r\n  }; \r\n\r\n  return { \r\n    GetICollections, GetIFields, GetIEntries, GetDefaultIEntry, \r\n    GetForeignElements, GetIOptions, \r\n    Collections, CreateUpdate, Create, Read, Update, Delete, \r\n    Validate\r\n  }; \r\n} \r\n\r\n\r\nexport const DaoContext = React.createContext({} as IUseDao); \r\n// CrudContexter ========================================== \r\nexport function DaoContexter({baseUrl, children}:React.PropsWithChildren<{baseUrl:string}>) { \r\n  return <DaoContext.Provider value={useDao(baseUrl)}> \r\n    {children} \r\n  </DaoContext.Provider> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient2\\usepatient.hook.ts",["444"],"import { useContext } from 'react'; \r\nimport { DaoContext } from '../../reusable/_dao2'; \r\nimport { useSession, IUseSession } from '../../reusable/_session'; \r\nimport { feedback } from '../../components/feedback/feedback2.component'; \r\n\r\n\r\nexport interface IUsePatient { \r\n  patientSession: IUseSession; \r\n\r\n  profile: IEntry; \r\n  setProfile: (newValue:any, keys:any[]) => void; \r\n\r\n  appointment: IEntry; \r\n  setAppointment: (newValue:any, keys:any[]) => void; \r\n\r\n  IdentifyPatient: (ramq:string) => void; \r\n  RamqIsValid: (value:string) => boolean; \r\n  \r\n  CreateUpdateProfile: (patient: IEntry) => Promise<void>; \r\n  //CreateUpdateAppointment: (patient: IEntry) => Promise<void>; \r\n} \r\n\r\n\r\n// UsePatient ============================================= \r\nexport function usePatient():IUsePatient { \r\n  const {GetDefaultIEntry, GetIEntries, CreateUpdate, Validate} = useContext(DaoContext); \r\n\r\n  // Patient session --------------------------------------\r\n  const sessionInitValue = {profile:{} as IEntry, appointment:{} as IEntry}; \r\n  const patientSession = useSession('patient', sessionInitValue); \r\n  if(!patientSession.Get()) \r\n    patientSession.Set(sessionInitValue) \r\n  \r\n  const profile = patientSession.Get(['profile']); \r\n  const setProfile = (newValue:any, keys:any[] = []) => patientSession.Set(newValue, ['profile', ...keys]); \r\n  const appointment = patientSession.Get(['appointment']); \r\n  const setAppointment = (newValue:any, keys:any[] = []) => patientSession.Set(newValue, ['appointment', ...keys]); \r\n\r\n\r\n  // RamqIsValid ------------------------------------------\r\n  function RamqIsValid(value:string) { \r\n    return Validate('patients', 'ramq', value); \r\n  } \r\n\r\n  // IdentifyPatient --------------------------------------\r\n  function IdentifyPatient(ramq:string) { \r\n    const entries = GetIEntries('patients'); \r\n    const foundProfile = entries.find( e => { \r\n      const e_ramq = (e['ramq'] as string); \r\n      return e_ramq.toLowerCase() === ramq.toLowerCase(); \r\n    });\r\n    const newProfile = {...GetDefaultIEntry('patients'), ramq}; \r\n    setProfile(foundProfile ?? newProfile); \r\n  }\r\n\r\n  // CreateUpdateProfile ----------------------------------\r\n  async function CreateUpdateProfile(patient: IEntry) { \r\n    const [response] = await CreateUpdate('patients', [patient]); \r\n    feedback.setValue([response]); \r\n    if(response.success) { \r\n      await CreateUpdateAppointment(response.data); \r\n      setProfile(response.data); \r\n    } \r\n    else \r\n      console.log(response.err); \r\n  } \r\n\r\n  // CreateUpdateappointment ----------------------------------\r\n  async function CreateUpdateAppointment(patient: IEntry) { \r\n    const appointment = FindAppointment(patient); \r\n    const [response] = await CreateUpdate('appointments', [appointment]); \r\n    if(response.success) { \r\n      //console.log(response.data); \r\n      setAppointment(response.data); \r\n      const date = new Date(response.data['date'] as any); \r\n      //console.log([date.getFullYear(), date.getDate(), date.getMonth()+1]); \r\n    } \r\n    else \r\n      console.log('appointment failed ...'); \r\n  } \r\n\r\n  // FindCurrentSession -----------------------------------\r\n  function FindAppointment(patient: IEntry) { \r\n    const entries = GetIEntries('appointments'); \r\n    const defaultAppointment = {...GetDefaultIEntry('appointments'), patient:patient._id}; \r\n    const foundAppointment = entries.find( e => { \r\n      const e_patient = (e['patient'] as string); \r\n      return e_patient === patient._id; \r\n    }); \r\n    return {...defaultAppointment, ...foundAppointment}; \r\n  } \r\n\r\n  return {patientSession, \r\n    profile, setProfile, \r\n    appointment, setAppointment, \r\n    RamqIsValid, \r\n    IdentifyPatient, \r\n    CreateUpdateProfile\r\n  } \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\field.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient2\\components\\patientprofile.component.tsx",["445"],"import React, { useContext, useState } from 'react'; \r\nimport { Editor, Reader } from '../../../reusable/_input'; \r\nimport { IsEmpty, GetValueAt } from '../../../reusable/_utils'; \r\nimport { PatientContext } from '../patient.page'; \r\n\r\nimport { DaoContext } from '../../../reusable/_dao2'; \r\nimport { Objx, Field, Fields, FieldLabel, FieldReader, FieldEditor} from '../../../reusable/_objx'; \r\n\r\n\r\nexport function PatientProfile() { \r\n  console.log('patient profile'); \r\n  const {GetIFields} = useContext(DaoContext); \r\n  const {profile, CreateUpdateProfile} = useContext(PatientContext); \r\n  const [ramqIField, ...ifields] = GetIFields('patients', ['ramq', 'firstName', 'lastName']); \r\n\r\n  const [value, setValue] = useState(profile); \r\n\r\n  const btnLabel = !IsEmpty(profile._id) ? \r\n    'Update patient profile': \r\n    'Create new patient profile'; \r\n\r\n  return <div> \r\n    <h2>Patient profile</h2> \r\n    {JSON.stringify(value)} \r\n    <Objx {...{value, ifields}} > \r\n      <Field {...{ifield:ramqIField}} >\r\n        <div><FieldLabel/><FieldReader {...{readerFunc:Reader}} /></div>\r\n      </Field> \r\n      <Fields {...{ifields}} > \r\n        <div><FieldLabel/><FieldEditor {...{setValue, editorFunc:Editor}} /></div> \r\n      </Fields> \r\n    </Objx> \r\n    <button onClick={() => CreateUpdateProfile(value)}>{btnLabel}</button>\r\n  </div> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient2\\components\\patientidentification.component.tsx",["446","447"],"import React, { useContext, useState } from 'react'; \r\nimport { Editor, Reader } from '../../../reusable/_input'; \r\nimport { IsEmpty, GetValueAt } from '../../../reusable/_utils'; \r\nimport { PatientContext } from '../patient.page'; \r\n\r\nimport { DaoContext } from '../../../reusable/_dao2'; \r\nimport { Objx, Field, FieldLabel, FieldEditor} from '../../../reusable/_objx'; \r\n\r\n\r\nexport function PatientIdentification() { \r\n  const {GetIFields, GetDefaultIEntry} = useContext(DaoContext); \r\n  const {RamqIsValid, IdentifyPatient} = useContext(PatientContext); \r\n  const [ramqIField] = GetIFields('patients', ['ramq']); \r\n\r\n  const [value, setValue] = useState(GetDefaultIEntry('patients')); \r\n  const ramq = GetValueAt(value, [ramqIField.accessor]); \r\n\r\n  return <div> \r\n    <h2>Patient identification</h2> \r\n    {JSON.stringify(value)} \r\n    <Objx {...{value, ifields:[ramqIField]}} > \r\n      <Field {...{ifield:ramqIField}}> \r\n        <div> \r\n          <FieldLabel/><FieldEditor {...{setValue, editorFunc:Editor}} /> \r\n          <span>{RamqIsValid(ramq) ? '✓' : 'x'}</span> \r\n        </div> \r\n      </Field> \r\n    </Objx> \r\n    <button onClick={() => IdentifyPatient(ramq)}>Identify</button> \r\n  </div> \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\date.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire2\\usequestionnaire.hook.tsx",["448","449","450","451"],"import { useContext, useEffect } from 'react'; \r\nimport { DaoContext } from '../../reusable/_dao2'; \r\nimport { useSession, Session } from '../../reusable/_session'; \r\nimport { IsEmpty, IsToday } from '../../reusable/_utils'; \r\nimport { usePage, IPageHook } from '../../reusable/_usepage'; \r\n\r\n\r\nexport interface IUseQuestionnaire { \r\n  paging: IPageHook<IAnswer>;\r\n  questionnaire: IAnswer[]; \r\n  setQuestionnaire: (newAnswer:number, keys:any[]) => void; \r\n  //GetPages: () => any[][]; \r\n\r\n  LoadQuestionnaire: () => void; \r\n  GetQuestionnaireItem:(answer:IAnswer) => {\r\n    form: undefined|IForm; \r\n    instructions: undefined|IInstruction[]; \r\n    question: undefined|IQuestion; \r\n    response: undefined|IResponse; \r\n  } \r\n  SubmitQuestionnaire: (answers:IEntry[]) => void; \r\n} \r\n\r\n\r\nexport function useQuestionnaire():IUseQuestionnaire { \r\n  const {GetIEntries, CreateUpdate} = useContext(DaoContext); \r\n  const profile = Session.Get( 'patient', ['profile']) as IEntry; \r\n\r\n  const sessionInitValue = {questionnaire:LoadQuestionnaire()}; \r\n  //console.log(sessionInitValue); \r\n  const questionnaireSession = useSession('questionnaire', sessionInitValue); \r\n  if(!questionnaireSession.Get()) \r\n    questionnaireSession.Set(sessionInitValue) \r\n  \r\n  const questionnaire = questionnaireSession.Get(['questionnaire']) as IAnswer[]; \r\n  const setQuestionnaire = (newValue:any, keys:any[] = []) => \r\n    questionnaireSession.Set(newValue, ['questionnaire', ...keys]); \r\n\r\n  //const groupedIndexes = Groups(indexes, [GroupByForm, GroupByInstruction, GroupBy4]); \r\n  //const pages = groupedIndexes.map( group => group.map( i => questionnaire[i]) ); \r\n  //return pages; \r\n  const paging = usePage(questionnaire, PageBreakPredicates()); \r\n\r\n  useEffect(() => { \r\n    SubmitQuestionnaire(); \r\n  }, []); \r\n\r\n  // LoadQuestionnaire -----------------------------------\r\n  function LoadQuestionnaire() { \r\n    const loadQuestionnaire = (GetIEntries('answers') as IAnswer[]).filter( a => { \r\n      return a.patient === profile._id && IsToday(a.date); \r\n    }) \r\n    return IsEmpty(loadQuestionnaire) ? BlankQuestionnaire() : loadQuestionnaire; \r\n  } \r\n\r\n  // BlankQuestionnaire ----------------------------------- \r\n  function BlankQuestionnaire():IAnswer[] { \r\n    const entries = GetIEntries('questions'); \r\n    return entries.map( q => { \r\n      return {_id:'', patient:profile._id, date: new Date(), question:q._id, answer:-1} as IAnswer; \r\n    }); \r\n  } \r\n\r\n  // SubmitQuestionnaire ----------------------------------\r\n  async function SubmitQuestionnaire(answers?:IEntry[]) { \r\n    const toSubmit = answers ?? questionnaire; \r\n    const responses = await CreateUpdate('answers', toSubmit); \r\n    setQuestionnaire(LoadQuestionnaire()); \r\n  } \r\n\r\n\r\n  // return form, instructions, question, response\r\n  function GetQuestionnaireItem(answer:IAnswer) { \r\n    if(!answer) \r\n      return {form:undefined, instructions:undefined, question:undefined, response:undefined}; \r\n    const [question] = GetIEntries('questions', [answer.question]) as IQuestion[]; \r\n    const [form] = GetIEntries('forms', [question?.form]) as IForm[]; \r\n    const instructions = GetIEntries('instructions', question?.instructions) as IInstruction[]; \r\n    const [response] = GetIEntries('responses', [question.responseType]) as IResponse[]; \r\n    return {form, instructions, question, response}; \r\n  } \r\n\r\n\r\n  function PageBreakPredicates() { \r\n    function GetQuestionAndPivot(answer:IAnswer, As:IAnswer[]) { \r\n      const question = GetQuestionnaireItem(answer).question as IQuestion; \r\n      const pivot = GetQuestionnaireItem(As[0])?.question as IQuestion; \r\n      return {question, pivot}; \r\n    } \r\n\r\n    // group by form\r\n    const GroupByForm = (a:IAnswer, i:number, As:IAnswer[], Bs:IAnswer[], Cs:IAnswer[]) => { \r\n      const {question, pivot} = GetQuestionAndPivot(a, As);\r\n      return JSON.stringify(question?.form) === JSON.stringify(pivot?.form) || IsEmpty(As); \r\n    } \r\n\r\n    // group by instructions set\r\n    const GroupByInstruction = (a:IAnswer, i:number, As:IAnswer[], Bs:IAnswer[], Cs:IAnswer[]) => { \r\n      const {question, pivot} = GetQuestionAndPivot(a, As);\r\n      return JSON.stringify(question?.instructions) === JSON.stringify(pivot?.instructions) || IsEmpty(As); \r\n    } \r\n\r\n    // max 4 items\r\n    const GroupBy4 = (a:IAnswer, i:number, As:IAnswer[], Bs:IAnswer[], Cs:IAnswer[]) => { \r\n      return As.length < 4; \r\n    } \r\n\r\n    return [GroupByForm, GroupByInstruction, GroupBy4]; \r\n  } \r\n\r\n\r\n  return { \r\n    paging, \r\n    questionnaire, setQuestionnaire, \r\n    LoadQuestionnaire, \r\n    GetQuestionnaireItem, \r\n    SubmitQuestionnaire \r\n  } \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire2\\questionnaire.page.tsx",["452","453","454","455","456"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback2.component.tsx",[],{"ruleId":"457","replacedBy":"458"},{"ruleId":"459","replacedBy":"460"},{"ruleId":"461","severity":1,"message":"462","line":1,"column":17,"nodeType":"463","messageId":"464","endLine":1,"endColumn":27},{"ruleId":"461","severity":1,"message":"465","line":1,"column":29,"nodeType":"463","messageId":"464","endLine":1,"endColumn":37},{"ruleId":"461","severity":1,"message":"466","line":6,"column":9,"nodeType":"463","messageId":"464","endLine":6,"endColumn":22},{"ruleId":"467","severity":1,"message":"468","line":3,"column":9,"nodeType":"463","messageId":"464","endLine":3,"endColumn":17},{"ruleId":"469","severity":1,"message":"470","line":20,"column":6,"nodeType":"471","endLine":20,"endColumn":8,"suggestions":"472"},{"ruleId":"457","replacedBy":"473"},{"ruleId":"459","replacedBy":"474"},{"ruleId":"457","replacedBy":"458"},{"ruleId":"459","replacedBy":"460"},{"ruleId":"457","replacedBy":"475"},{"ruleId":"459","replacedBy":"476"},{"ruleId":"477","severity":1,"message":"478","line":62,"column":37,"nodeType":"479","messageId":"480","endLine":62,"endColumn":47},{"ruleId":"467","severity":1,"message":"481","line":4,"column":9,"nodeType":"463","messageId":"464","endLine":4,"endColumn":15},{"ruleId":"482","severity":1,"message":"483","line":34,"column":22,"nodeType":"484","messageId":"485","endLine":34,"endColumn":24},{"ruleId":"482","severity":1,"message":"483","line":34,"column":47,"nodeType":"484","messageId":"485","endLine":34,"endColumn":49},{"ruleId":"467","severity":1,"message":"462","line":1,"column":16,"nodeType":"463","messageId":"464","endLine":1,"endColumn":26},{"ruleId":"482","severity":1,"message":"483","line":28,"column":20,"nodeType":"484","messageId":"485","endLine":28,"endColumn":22},{"ruleId":"482","severity":1,"message":"483","line":28,"column":36,"nodeType":"484","messageId":"485","endLine":28,"endColumn":38},{"ruleId":"467","severity":1,"message":"486","line":127,"column":12,"nodeType":"463","messageId":"464","endLine":127,"endColumn":22},{"ruleId":"467","severity":1,"message":"487","line":130,"column":11,"nodeType":"463","messageId":"464","endLine":130,"endColumn":15},{"ruleId":"457","replacedBy":"488"},{"ruleId":"459","replacedBy":"489"},{"ruleId":"467","severity":1,"message":"490","line":5,"column":20,"nodeType":"463","messageId":"464","endLine":5,"endColumn":30},{"ruleId":"467","severity":1,"message":"491","line":1,"column":26,"nodeType":"463","messageId":"464","endLine":1,"endColumn":31},{"ruleId":"467","severity":1,"message":"492","line":2,"column":15,"nodeType":"463","messageId":"464","endLine":2,"endColumn":26},{"ruleId":"467","severity":1,"message":"493","line":2,"column":38,"nodeType":"463","messageId":"464","endLine":2,"endColumn":45},{"ruleId":"467","severity":1,"message":"494","line":2,"column":63,"nodeType":"463","messageId":"464","endLine":2,"endColumn":75},{"ruleId":"467","severity":1,"message":"495","line":2,"column":77,"nodeType":"463","messageId":"464","endLine":2,"endColumn":89},{"ruleId":"469","severity":1,"message":"496","line":45,"column":6,"nodeType":"471","endLine":45,"endColumn":37,"suggestions":"497"},{"ruleId":"469","severity":1,"message":"498","line":45,"column":7,"nodeType":"499","endLine":45,"endColumn":36},{"ruleId":"469","severity":1,"message":"500","line":12,"column":6,"nodeType":"471","endLine":12,"endColumn":34,"suggestions":"501"},{"ruleId":"469","severity":1,"message":"498","line":12,"column":7,"nodeType":"499","endLine":12,"endColumn":33},{"ruleId":"467","severity":1,"message":"502","line":3,"column":9,"nodeType":"463","messageId":"464","endLine":3,"endColumn":19},{"ruleId":"467","severity":1,"message":"503","line":3,"column":21,"nodeType":"463","messageId":"464","endLine":3,"endColumn":31},{"ruleId":"467","severity":1,"message":"465","line":1,"column":28,"nodeType":"463","messageId":"464","endLine":1,"endColumn":36},{"ruleId":"467","severity":1,"message":"504","line":3,"column":9,"nodeType":"463","messageId":"464","endLine":3,"endColumn":13},{"ruleId":"467","severity":1,"message":"505","line":19,"column":10,"nodeType":"463","messageId":"464","endLine":19,"endColumn":22},{"ruleId":"457","replacedBy":"506"},{"ruleId":"459","replacedBy":"507"},{"ruleId":"467","severity":1,"message":"508","line":4,"column":20,"nodeType":"463","messageId":"464","endLine":4,"endColumn":30},{"ruleId":"467","severity":1,"message":"509","line":4,"column":45,"nodeType":"463","messageId":"464","endLine":4,"endColumn":56},{"ruleId":"510","severity":1,"message":"511","line":49,"column":10,"nodeType":"463","messageId":"512","endLine":49,"endColumn":17},{"ruleId":"469","severity":1,"message":"513","line":49,"column":34,"nodeType":"471","endLine":49,"endColumn":36,"suggestions":"514"},{"ruleId":"467","severity":1,"message":"515","line":71,"column":22,"nodeType":"463","messageId":"464","endLine":71,"endColumn":26},{"ruleId":"469","severity":1,"message":"516","line":18,"column":6,"nodeType":"471","endLine":18,"endColumn":8,"suggestions":"517"},{"ruleId":"467","severity":1,"message":"462","line":1,"column":16,"nodeType":"463","messageId":"464","endLine":1,"endColumn":26},{"ruleId":"467","severity":1,"message":"518","line":2,"column":38,"nodeType":"463","messageId":"464","endLine":2,"endColumn":48},{"ruleId":"467","severity":1,"message":"519","line":2,"column":34,"nodeType":"463","messageId":"464","endLine":2,"endColumn":41},{"ruleId":"467","severity":1,"message":"520","line":7,"column":7,"nodeType":"463","messageId":"464","endLine":7,"endColumn":16},{"ruleId":"457","replacedBy":"521"},{"ruleId":"459","replacedBy":"522"},{"ruleId":"467","severity":1,"message":"523","line":2,"column":9,"nodeType":"463","messageId":"464","endLine":2,"endColumn":19},{"ruleId":"467","severity":1,"message":"524","line":2,"column":40,"nodeType":"463","messageId":"464","endLine":2,"endColumn":44},{"ruleId":"467","severity":1,"message":"525","line":2,"column":46,"nodeType":"463","messageId":"464","endLine":2,"endColumn":53},{"ruleId":"467","severity":1,"message":"526","line":2,"column":55,"nodeType":"463","messageId":"464","endLine":2,"endColumn":64},{"ruleId":"467","severity":1,"message":"491","line":2,"column":74,"nodeType":"463","messageId":"464","endLine":2,"endColumn":79},{"ruleId":"467","severity":1,"message":"527","line":2,"column":81,"nodeType":"463","messageId":"464","endLine":2,"endColumn":87},{"ruleId":"467","severity":1,"message":"528","line":8,"column":7,"nodeType":"463","messageId":"464","endLine":8,"endColumn":10},{"ruleId":"467","severity":1,"message":"529","line":9,"column":7,"nodeType":"463","messageId":"464","endLine":9,"endColumn":18},{"ruleId":"467","severity":1,"message":"530","line":26,"column":7,"nodeType":"463","messageId":"464","endLine":26,"endColumn":29},{"ruleId":"467","severity":1,"message":"531","line":57,"column":9,"nodeType":"463","messageId":"464","endLine":57,"endColumn":21},{"ruleId":"467","severity":1,"message":"532","line":62,"column":9,"nodeType":"463","messageId":"464","endLine":62,"endColumn":17},{"ruleId":"467","severity":1,"message":"533","line":104,"column":10,"nodeType":"463","messageId":"464","endLine":104,"endColumn":19},{"ruleId":"467","severity":1,"message":"534","line":135,"column":10,"nodeType":"463","messageId":"464","endLine":135,"endColumn":21},{"ruleId":"467","severity":1,"message":"535","line":8,"column":10,"nodeType":"463","messageId":"464","endLine":8,"endColumn":19},{"ruleId":"469","severity":1,"message":"536","line":60,"column":6,"nodeType":"471","endLine":60,"endColumn":13,"suggestions":"537"},{"ruleId":"469","severity":1,"message":"538","line":21,"column":6,"nodeType":"471","endLine":21,"endColumn":8,"suggestions":"539"},{"ruleId":"469","severity":1,"message":"540","line":23,"column":6,"nodeType":"471","endLine":23,"endColumn":8,"suggestions":"541"},{"ruleId":"467","severity":1,"message":"542","line":1,"column":10,"nodeType":"463","messageId":"464","endLine":1,"endColumn":19},{"ruleId":"467","severity":1,"message":"543","line":5,"column":11,"nodeType":"463","messageId":"464","endLine":5,"endColumn":22},{"ruleId":"469","severity":1,"message":"544","line":43,"column":6,"nodeType":"471","endLine":43,"endColumn":13,"suggestions":"545"},{"ruleId":"467","severity":1,"message":"542","line":1,"column":31,"nodeType":"463","messageId":"464","endLine":1,"endColumn":40},{"ruleId":"467","severity":1,"message":"546","line":7,"column":10,"nodeType":"463","messageId":"464","endLine":7,"endColumn":21},{"ruleId":"467","severity":1,"message":"542","line":1,"column":28,"nodeType":"463","messageId":"464","endLine":1,"endColumn":37},{"ruleId":"467","severity":1,"message":"465","line":1,"column":39,"nodeType":"463","messageId":"464","endLine":1,"endColumn":47},{"ruleId":"467","severity":1,"message":"503","line":2,"column":19,"nodeType":"463","messageId":"464","endLine":2,"endColumn":29},{"ruleId":"467","severity":1,"message":"502","line":3,"column":10,"nodeType":"463","messageId":"464","endLine":3,"endColumn":20},{"ruleId":"457","replacedBy":"547"},{"ruleId":"459","replacedBy":"548"},{"ruleId":"467","severity":1,"message":"549","line":23,"column":9,"nodeType":"463","messageId":"464","endLine":23,"endColumn":25},{"ruleId":"469","severity":1,"message":"550","line":35,"column":69,"nodeType":"471","endLine":35,"endColumn":71,"suggestions":"551"},{"ruleId":"467","severity":1,"message":"552","line":75,"column":13,"nodeType":"463","messageId":"464","endLine":75,"endColumn":17},{"ruleId":"467","severity":1,"message":"502","line":3,"column":19,"nodeType":"463","messageId":"464","endLine":3,"endColumn":29},{"ruleId":"467","severity":1,"message":"553","line":2,"column":18,"nodeType":"463","messageId":"464","endLine":2,"endColumn":24},{"ruleId":"467","severity":1,"message":"554","line":3,"column":10,"nodeType":"463","messageId":"464","endLine":3,"endColumn":17},{"ruleId":"467","severity":1,"message":"555","line":41,"column":10,"nodeType":"463","messageId":"464","endLine":41,"endColumn":19},{"ruleId":"467","severity":1,"message":"556","line":41,"column":21,"nodeType":"463","messageId":"464","endLine":41,"endColumn":33},{"ruleId":"469","severity":1,"message":"557","line":46,"column":6,"nodeType":"471","endLine":46,"endColumn":8,"suggestions":"558"},{"ruleId":"467","severity":1,"message":"559","line":67,"column":11,"nodeType":"463","messageId":"464","endLine":67,"endColumn":20},{"ruleId":"467","severity":1,"message":"493","line":2,"column":26,"nodeType":"463","messageId":"464","endLine":2,"endColumn":33},{"ruleId":"467","severity":1,"message":"560","line":36,"column":30,"nodeType":"463","messageId":"464","endLine":36,"endColumn":38},{"ruleId":"467","severity":1,"message":"561","line":36,"column":40,"nodeType":"463","messageId":"464","endLine":36,"endColumn":48},{"ruleId":"467","severity":1,"message":"562","line":67,"column":10,"nodeType":"463","messageId":"464","endLine":67,"endColumn":20},{"ruleId":"467","severity":1,"message":"563","line":67,"column":22,"nodeType":"463","messageId":"464","endLine":67,"endColumn":33},"no-native-reassign",["564"],"no-negated-in-lhs",["565"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'TestArrayUtil' is defined but never used.","@typescript-eslint/no-unused-vars","'FeedBack' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setActiveCollection'. Either include it or remove the dependency array.","ArrayExpression",["566"],["564"],["565"],["564"],["565"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'IsNull' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'collection' is assigned a value but never used.","'read' is assigned a value but never used.",["564"],["565"],"'IUseToggle' is defined but never used.","'Union' is defined but never used.","'ArrxContext' is defined but never used.","'Element' is defined but never used.","'ElementIndex' is defined but never used.","'ElementValue' is defined but never used.","React Hook useEffect has missing dependencies: 'index' and 'values'. Either include them or remove the dependency array.",["567"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["568"],"'GetValueAt' is defined but never used.","'SetValueAt' is defined but never used.","'Arrx' is defined but never used.","'CrudFeedBack' is defined but never used.",["564"],["565"],"'RowContext' is defined but never used.","'CellContext' is defined but never used.","@typescript-eslint/no-redeclare","'CrudBtn' is already defined.","redeclared","React Hook useMemo has a missing dependency: 'dao'. Either include it or remove the dependency array.",["569"],"'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'Collections'. Either include it or remove the dependency array.",["570"],"'DaoContext' is defined but never used.","'IEditor' is defined but never used.","'boolField' is assigned a value but never used.",["564"],["565"],"'Comparator' is defined but never used.","'Pick' is defined but never used.","'ToArray' is defined but never used.","'Intersect' is defined but never used.","'Groups' is defined but never used.","'nul' is assigned a value but never used.","'empty' is assigned a value but never used.","'objIdVal' is assigned a value but never used.","'stackIndexes' is assigned a value but never used.","'groupOf3' is assigned a value but never used.","'TestSorts' is defined but never used.","'TestFilters' is defined but never used.","'useUpdate' is defined but never used.","React Hook useEffect has missing dependencies: '_value' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["571"],"React Hook useEffect has a missing dependency: 'Load'. Either include it or remove the dependency array.",["572"],"React Hook useEffect has missing dependencies: 'Collections', 'Load', and 'accessors'. Either include them or remove the dependency array.",["573"],"'useEffect' is defined but never used.","'IUseStateAt' is defined but never used.","React Hook useEffect has missing dependencies: 'SetValue', 'Value', and 'accessor'. Either include them or remove the dependency array. If 'SetValue' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["574"],"'GetIEntries' is assigned a value but never used.",["564"],["565"],"'crudResponseTest' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'baseUrl'. Either include it or remove the dependency array.",["575"],"'date' is assigned a value but never used.","'Reader' is defined but never used.","'IsEmpty' is defined but never used.","'pageIndex' is assigned a value but never used.","'setPageIndex' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'SubmitQuestionnaire'. Either include it or remove the dependency array.",["576"],"'responses' is assigned a value but never used.","'question' is assigned a value but never used.","'response' is assigned a value but never used.","'GetIFields' is assigned a value but never used.","'GetIOptions' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},{"desc":"581","fix":"582"},{"desc":"583","fix":"584"},{"desc":"585","fix":"586"},{"desc":"587","fix":"588"},{"desc":"589","fix":"590"},{"desc":"591","fix":"592"},{"desc":"593","fix":"594"},{"desc":"595","fix":"596"},{"desc":"597","fix":"598"},"Update the dependencies array to be: [setActiveCollection]",{"range":"599","text":"600"},"Update the dependencies array to be: [index, values]",{"range":"601","text":"602"},"Update the dependencies array to be: [callback]",{"range":"603","text":"604"},"Update the dependencies array to be: [dao]",{"range":"605","text":"606"},"Update the dependencies array to be: [Collections]",{"range":"607","text":"608"},"Update the dependencies array to be: [_value, props, value]",{"range":"609","text":"610"},"Update the dependencies array to be: [Load]",{"range":"611","text":"612"},"Update the dependencies array to be: [Collections, Load, accessors]",{"range":"613","text":"614"},"Update the dependencies array to be: [SetValue, Value, accessor, value]",{"range":"615","text":"616"},"Update the dependencies array to be: [baseUrl]",{"range":"617","text":"618"},"Update the dependencies array to be: [SubmitQuestionnaire]",{"range":"619","text":"620"},[663,665],"[setActiveCollection]",[1586,1617],"[index, values]",[304,332],"[callback]",[1476,1478],"[dao]",[618,620],"[Collections]",[2237,2244],"[_value, props, value]",[580,582],"[Load]",[744,746],"[Collections, Load, accessors]",[1231,1238],"[SetValue, Value, accessor, value]",[1458,1460],"[baseUrl]",[1798,1800],"[SubmitQuestionnaire]"]