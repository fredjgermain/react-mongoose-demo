[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\_utils.ts":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\field\\field.class.ts":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\_mongooseparser.ts":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudaxios.ts":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientheader.component.tsx":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentifier.component.tsx":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientinfos.component.tsx":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientsloader.component.tsx":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireloader.component.tsx":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireforms.component.tsx":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnairepage.page.tsx":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\_input.ts":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\_useloader.ts":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\_arrx.ts":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\_objx.ts":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\useloader.hook.tsx":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input\\input.component.tsx":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.component.tsx":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.component.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\options.component.tsx":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\selectheader.component.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.hook.tsx":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\RemovableItems.component.tsx":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\_tablr.ts":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\usepage\\usePage.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionedit.component.tsx":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\useblankform.ts":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\_useactive.ts":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\_rendering.ts":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\_dao.ts":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.hook.tsx":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\displayactivedata.component.tsx":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\rendering\\valuerenderer.component.tsx":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\rendering\\renderers.utils.tsx":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\adminsection.page.tsx":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback.component.tsx":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\useactive.hook.ts":"59","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx":"60","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx":"61","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\loadselectcollection.component.tsx":"62","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudtablr.component.tsx":"63"},{"size":600,"mtime":1609529670659,"results":"64","hashOfConfig":"65"},{"size":541,"mtime":1610749429921,"results":"66","hashOfConfig":"65"},{"size":362,"mtime":499162500000,"results":"67","hashOfConfig":"65"},{"size":225,"mtime":1609475507334,"results":"68","hashOfConfig":"65"},{"size":1542,"mtime":1610660783236,"results":"69","hashOfConfig":"65"},{"size":117,"mtime":1609476049273,"results":"70","hashOfConfig":"65"},{"size":496,"mtime":1609883323259,"results":"71","hashOfConfig":"65"},{"size":693,"mtime":1610152063091,"results":"72","hashOfConfig":"65"},{"size":1432,"mtime":1610133369532,"results":"73","hashOfConfig":"65"},{"size":3330,"mtime":1609805687249,"results":"74","hashOfConfig":"65"},{"size":1698,"mtime":1610154963843,"results":"75","hashOfConfig":"65"},{"size":2351,"mtime":1609452679027,"results":"76","hashOfConfig":"65"},{"size":278,"mtime":1610227362484,"results":"77","hashOfConfig":"65"},{"size":2205,"mtime":1610681474583,"results":"78","hashOfConfig":"65"},{"size":1608,"mtime":1609452679069,"results":"79","hashOfConfig":"65"},{"size":2199,"mtime":1610578479558,"results":"80","hashOfConfig":"65"},{"size":2239,"mtime":1609979770974,"results":"81","hashOfConfig":"65"},{"size":222,"mtime":1609965015785,"results":"82","hashOfConfig":"65"},{"size":919,"mtime":1610159021625,"results":"83","hashOfConfig":"65"},{"size":1559,"mtime":1610228176480,"results":"84","hashOfConfig":"65"},{"size":1389,"mtime":1610159021729,"results":"85","hashOfConfig":"65"},{"size":1834,"mtime":1610230147763,"results":"86","hashOfConfig":"65"},{"size":5686,"mtime":1610389196830,"results":"87","hashOfConfig":"65"},{"size":1188,"mtime":1610230172532,"results":"88","hashOfConfig":"65"},{"size":358,"mtime":1610658185749,"results":"89","hashOfConfig":"65"},{"size":98,"mtime":1609788148795,"results":"90","hashOfConfig":"65"},{"size":217,"mtime":1610226352798,"results":"91","hashOfConfig":"65"},{"size":207,"mtime":1610161426383,"results":"92","hashOfConfig":"65"},{"size":1301,"mtime":1609804782791,"results":"93","hashOfConfig":"65"},{"size":1778,"mtime":1610159021625,"results":"94","hashOfConfig":"65"},{"size":2127,"mtime":1610658098556,"results":"95","hashOfConfig":"65"},{"size":1410,"mtime":1610311943278,"results":"96","hashOfConfig":"65"},{"size":1025,"mtime":1609790418274,"results":"97","hashOfConfig":"65"},{"size":1723,"mtime":1610749840771,"results":"98","hashOfConfig":"65"},{"size":2126,"mtime":1610647659794,"results":"99","hashOfConfig":"65"},{"size":977,"mtime":1610068539668,"results":"100","hashOfConfig":"65"},{"size":2177,"mtime":1610159021627,"results":"101","hashOfConfig":"65"},{"size":497,"mtime":1609787735852,"results":"102","hashOfConfig":"65"},{"size":379,"mtime":1610223339809,"results":"103","hashOfConfig":"65"},{"size":1881,"mtime":1610676669331,"results":"104","hashOfConfig":"65"},{"size":462,"mtime":1610223305599,"results":"105","hashOfConfig":"65"},{"size":1040,"mtime":1610223161129,"results":"106","hashOfConfig":"65"},{"size":982,"mtime":1610224559674,"results":"107","hashOfConfig":"65"},{"size":1708,"mtime":1610226535467,"results":"108","hashOfConfig":"65"},{"size":1664,"mtime":1610318540525,"results":"109","hashOfConfig":"65"},{"size":1486,"mtime":1610311931655,"results":"110","hashOfConfig":"65"},{"size":107,"mtime":1610755508565,"results":"111","hashOfConfig":"65"},{"size":31,"mtime":1610488467872,"results":"112","hashOfConfig":"65"},{"size":275,"mtime":1610748002292,"results":"113","hashOfConfig":"65"},{"size":6649,"mtime":1610745789672,"results":"114","hashOfConfig":"65"},{"size":2177,"mtime":1610576181564,"results":"115","hashOfConfig":"65"},{"size":943,"mtime":1610658077622,"results":"116","hashOfConfig":"65"},{"size":534,"mtime":1610658871984,"results":"117","hashOfConfig":"65"},{"size":1074,"mtime":1610747845551,"results":"118","hashOfConfig":"65"},{"size":4369,"mtime":1610747859423,"results":"119","hashOfConfig":"65"},{"size":706,"mtime":1610748046314,"results":"120","hashOfConfig":"65"},{"size":1082,"mtime":1610757580402,"results":"121","hashOfConfig":"65"},{"size":507,"mtime":1610755028527,"results":"122","hashOfConfig":"65"},{"size":1895,"mtime":1610755543076,"results":"123","hashOfConfig":"65"},{"size":875,"mtime":1610757149169,"results":"124","hashOfConfig":"65"},{"size":2248,"mtime":1610757168614,"results":"125","hashOfConfig":"65"},{"size":1111,"mtime":1610757727161,"results":"126","hashOfConfig":"65"},{"size":2363,"mtime":1610757817244,"results":"127","hashOfConfig":"65"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"ke513i",{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"149"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"149"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"143"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"143"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"143"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"149"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"149"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"149"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"149"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"232"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"143"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"149"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"149"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"140"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"149"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"149"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["277","278"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",["279","280","281"],"import React, { useEffect, useState, useContext } from 'react'; \r\nimport {DataAccessObject, ICrud, IUseDao, useDao} from '../../reusable/dao/_dao'; \r\nimport {CrudMongoose} from '../../reusable/mongooseparser/mongooseaxios'; \r\nimport {IsEmpty, IsNull} from '../../reusable/utils/_utils'; \r\n\r\nimport {SelectCollection} from './components/selectcollection.component'; \r\nimport {AdminTablr} from './components/admintablr.component'; \r\n\r\nconst crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n\r\n\r\n\r\n// Test DAO ===================================== \r\nexport const DaoContext = React.createContext({} as IUseDao); \r\nexport default function Admin() { \r\n  const context = useDao(new DataAccessObject(crud as ICrud)); \r\n  const {state, activeCollection, Collections} = context; \r\n\r\n  useEffect(() => { \r\n    Collections(['questions', 'responses', 'forms', 'instructions', 'patients', 'answers']); \r\n  }, []); \r\n\r\n  // Render -------------------------------------\r\n  return <div> \r\n    <h1>ADMIN PAGE</h1> \r\n    <div> \r\n    <DaoContext.Provider value={context} > \r\n      <FeedBack /> \r\n      {state.ready && <SelectCollection />} \r\n      {!IsEmpty(activeCollection) && <AdminTablr />} \r\n    </DaoContext.Provider> \r\n    </div> \r\n  </div> \r\n}\r\n\r\n\r\nfunction FeedBack() { \r\n  const {state} = useContext(DaoContext); \r\n\r\n  return <div> \r\n    {!state.ready && 'Loading'} \r\n    {state.ready && 'Ready'} \r\n    {state.success && JSON.stringify(state.response['success'])} \r\n    {!state.success && 'an errors occured'} \r\n  </div> \r\n}",["282","283"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx",[],["284","285"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\_utils.ts",["286","287","288"],"import {Filter, Remove, ToArray, Union, Combine, Duplicates, Order, CommonPredicates} from './arrays.utils'; \r\nimport {SetSize, SetWidth, IEvent, IsPressEnter, OnEnter, GetInputType, GetValueFromInput} from './htmlelement.utils'; \r\nimport {Copy, Edit, Read, IsEmpty, IsNull, GetDefaultValueByType, GetTypeByValue} from './valuetypetesting.utils'; \r\nimport {Field} from './field/field.class'; \r\n\r\n\r\nexport {Filter, Remove, ToArray, Union, Combine, Duplicates, Order, CommonPredicates} \r\nexport {SetSize, SetWidth, IsPressEnter, OnEnter, GetInputType, GetValueFromInput} \r\nexport type {IEvent} \r\nexport {Copy, Edit, Read, IsEmpty, IsNull, GetDefaultValueByType, GetTypeByValue} \r\nexport {Field} ",["289","290"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",["291"],"import React from 'react'; \r\nimport {IsNull} from './_utils'; \r\n\r\n// IEvent #####################################\r\nexport interface IEvent extends React.ChangeEvent<HTMLInputElement> { \r\n  code?:any, \r\n  [key:string]:any, \r\n} \r\n\r\nexport function OnEnter(event:any, Func:any) { \r\n  if(IsPressEnter( (event as IEvent).code ) ) \r\n    Func(); \r\n} \r\n\r\n\r\n\r\n// Get Value From Input -------------------------\r\nexport function GetValueFromInput(event:IEvent) { \r\n  const target = event.target; \r\n  const type = target.type; \r\n  if(type === 'number') \r\n    return target.valueAsNumber as number; \r\n  if(type === 'date') \r\n    return target.valueAsDate; \r\n  if(type === 'checkbox') \r\n    return target.checked as boolean; \r\n  return target.value; \r\n} \r\n\r\n\r\n// GetInputType ---------------------------------\r\nexport function GetInputType(type:string) { \r\n  if(type === 'number') \r\n    return 'number'; \r\n  if(type === 'boolean') \r\n    return 'checkbox'; \r\n  if(type === 'string') \r\n    return 'text'; \r\n  return 'text'; \r\n}\r\n\r\n\r\n// If Code is pressEnter\r\nexport function IsPressEnter(code:string = ''):boolean { \r\n  return code === 'Enter' || code === 'NumpadEnter'; \r\n} \r\n\r\n\r\n// TAG UTILS ###################################\r\nexport function SetWidth(value:number):{width:any} {\r\n  return {width:`${SetSize(value)+2}ch`}; \r\n}\r\n\r\nexport function SetSize(value:any):number { \r\n  const w = String(value).length; \r\n  return w < 5 ? 5 : w; \r\n} \r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\field\\field.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudaxios.ts",[],["292","293"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["294"],"export interface IMongooseModel { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    enum?: any[]; \r\n    abbrev?: boolean; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\n//async function ParseFields() \r\nexport function ParseField(field:IMongooseField):IField {   \r\n  const {path, instance, options, $embeddedSchemaType} = field; \r\n  const ifield:IField = {} as IField; \r\n\r\n  ifield.accessor = path ?? ''; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.options = options ?? {}; \r\n  ifield.type = options?.ref ?? $embeddedSchemaType?.instance ?? field.instance.toLowerCase(); \r\n  ifield.isMixed = instance.toLowerCase() === 'mixed'; \r\n  ifield.isEnum = !!options?.enum; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = !!options?.ref; \r\n  ifield.isAbbrev = !!options?.abbrev; \r\n\r\n  ifield.enums = options.enum ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, ifield.options); \r\n  \r\n  //ifield.validators = \r\n  return ifield; \r\n} \r\n\r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",["295"],"import React, {useState} from 'react'; \r\nimport {CrudMongoose} from '../../reusable/mongooseparser/_mongooseparser'; \r\nimport {IsNull, IsEmpty} from '../../reusable/utils/_utils'; \r\n\r\nimport {PatientHeader} from './components/patientheader.component'; \r\nimport {PatientsLoader} from './components/patientsloader.component'; \r\nimport {PatientIdentifier} from './components/patientidentifier.component'; \r\nimport {PatientInfos} from './components/patientinfos.component'; \r\nimport QuestionnairePage from '../questionnaire/questionnairepage.page';\r\n\r\n/*import {QuestionnaireLoader} from './components/questionnaireloader.component'; \r\nimport {Questionnaire} from './components/questionnaire.component'; */\r\n\r\ninterface IPatientContext { \r\n  patients:ICollection; \r\n  setPatients:any; \r\n\r\n  patient:IEntry; \r\n  setPatient:any; \r\n\r\n  patientUpdated:boolean; \r\n  setPatientUpdated:any; \r\n} \r\n// PATIENT ======================================\r\nexport const PatientContext = React.createContext({} as IPatientContext); \r\nexport const CrudContext = React.createContext({} as {crud:CrudMongoose});\r\n\r\nexport default function Patient() { \r\n  const crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n  const [patient, setPatient] = useState<IEntry>({} as IEntry); \r\n  const [patientUpdated, setPatientUpdated] = useState(false); \r\n  const [patients, setPatients] = useState({} as ICollection); \r\n  \r\n  const context = {crud, patients, setPatients, \r\n    patient, setPatient, \r\n    patientUpdated, setPatientUpdated} as IPatientContext; \r\n\r\n  if(!patientUpdated) \r\n    return <div> \r\n      <CrudContext.Provider value={{crud}} >\r\n        <PatientContext.Provider value={context} > \r\n          <PatientHeader /> \r\n          {IsEmpty(patients) && <PatientsLoader/>} \r\n          {!IsEmpty(patients) && IsEmpty(patient) && <PatientIdentifier/>} \r\n          {!IsEmpty(patients) && !IsEmpty(patient) && <PatientInfos/>} \r\n        </PatientContext.Provider> \r\n      </CrudContext.Provider>\r\n    </div> \r\n\r\n  return <div> \r\n    <CrudContext.Provider value={{crud}} >\r\n      <PatientContext.Provider value={context} > \r\n        <QuestionnairePage/> \r\n      </PatientContext.Provider> \r\n    </CrudContext.Provider>\r\n  </div>  \r\n} \r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientheader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentifier.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientinfos.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientsloader.component.tsx",["296"],"import {useContext, useEffect} from 'react'; \r\nimport {useLoader} from '../../../reusable/hooks/useloader/_useloader'; \r\n\r\nimport {CrudContext, PatientContext} from '../patient.page'; \r\n\r\n\r\n// PatientsCollectionLoader ===================== \r\nexport function PatientsLoader() { \r\n  const {crud} = useContext(CrudContext); \r\n  const {setPatients} = useContext(PatientContext); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const loadfunc = async () => { \r\n    const response:IResponse = await crud.Collection('patients'); \r\n    if(response.success) \r\n      setPatients(() => response.data as ICollection); \r\n  }; \r\n\r\n  useEffect(() => {Load(loadfunc)}, []); \r\n\r\n\r\n  /* ?????? TO ADD IN USELOADER ??????\r\n  function Component(props) {\r\n    const [fetched, setFetched] = React.useState(false);\r\n    React.useEffect(() => {\r\n      const ac = new AbortController();\r\n      Promise.all([\r\n        fetch('http://placekitten.com/1000/1000', {signal: ac.signal}),\r\n        fetch('http://placekitten.com/2000/2000', {signal: ac.signal})\r\n      ]).then(() => setFetched(true))\r\n        .catch(ex => console.error(ex));\r\n      return () => ac.abort(); // Abort both fetches on unmount\r\n    }, []);\r\n    return fetched;\r\n  }\r\n  */\r\n\r\n  if(!state.ready) \r\n    return <div> Loading ... </div> \r\n  if(state.ready && !state.success) \r\n    return <div> Oh no! An error occured ... </div> \r\n  return null; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireloader.component.tsx",["297","298"],"import {useEffect, useContext} from 'react'; \r\nimport {useLoader} from '../../../reusable/hooks/useloader/_useloader'; \r\nimport {CrudContext} from '../../patient/patient.page';\r\nimport {QuestionnaireContext} from '../questionnairepage.page';\r\n\r\n\r\n\r\n// PatientsCollectionLoader ===================== \r\nexport function QuestionnaireLoader() { \r\n  const {crud} = useContext(CrudContext); \r\n\r\n  const {setQuestions, setResponses, setAnswers} = useContext(QuestionnaireContext); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const loadfunc = async () => { \r\n    const questions:IResponse = await crud.Collection('questions'); \r\n    if(questions.success) \r\n      setQuestions(() => questions.data as ICollection); \r\n    console.log(questions);\r\n\r\n    const responses:IResponse = await crud.Collection('responses'); \r\n    if(responses.success) \r\n      setResponses(() => responses.data as ICollection); \r\n\r\n    /*const answers:IResponse = await crud.Collection('answers'); \r\n    if(answers.success) \r\n      setAnswers(() => answers.data as ICollection); */\r\n  }; \r\n\r\n  useEffect(() => {Load(loadfunc)}, []); \r\n\r\n\r\n  /* ?????? TO ADD IN USELOADER ??????\r\n  function Component(props) {\r\n    const [fetched, setFetched] = React.useState(false);\r\n    React.useEffect(() => {\r\n      const ac = new AbortController();\r\n      Promise.all([\r\n        fetch('http://placekitten.com/1000/1000', {signal: ac.signal}),\r\n        fetch('http://placekitten.com/2000/2000', {signal: ac.signal})\r\n      ]).then(() => setFetched(true))\r\n        .catch(ex => console.error(ex));\r\n      return () => ac.abort(); // Abort both fetches on unmount\r\n    }, []);\r\n    return fetched;\r\n  }\r\n  */\r\n\r\n  if(!state.ready) \r\n    return <div> Loading ... </div> \r\n  if(state.ready && !state.success) \r\n    return <div> Oh no! An error occured ... </div> \r\n  return null; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireforms.component.tsx",["299","300"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnairepage.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\_useloader.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input\\input.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.component.tsx",["301","302","303","304","305","306"],"import React, { useContext, useEffect, useState } from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex, ElementValue} from '../../arrx/_arrx'; \r\nimport {Input} from '../_input'; \r\nimport {IInputArray, IUseInputArray, useInputArray} from './inputarray.hook';\r\n\r\n\r\nexport const InputArrayContext = React.createContext({} as IUseInputArray); \r\nexport function InputArray({children, ...props}:React.PropsWithChildren<IInputArray>) { \r\n  const context = useInputArray(props); \r\n  const {values} = props; \r\n  \r\n  return <InputArrayContext.Provider value={context} > \r\n    <Arrx {...{values}} > \r\n      <Elements> \r\n        <UpdateElement/> <DeleteBtn/>\r\n        <br/> \r\n      </Elements> \r\n      <CreateElement/>\r\n    </Arrx> \r\n  </InputArrayContext.Provider> \r\n} \r\n\r\n\r\n// Create element =======================================\r\nfunction CreateElement() { \r\n  const {type, defaultValue, Create} = useContext(InputArrayContext); \r\n  const [value, setValue] = useState(defaultValue); \r\n\r\n  const onEnterUp = () => {\r\n    Create(value); \r\n    setValue(() => defaultValue); // reset input to defaultValue after creation. \r\n  }; \r\n  return <Input {...{value, setValue, defaultValue, type, onEnterUp}}  /> \r\n} \r\n\r\n// Update element =======================================\r\nfunction UpdateElement() { \r\n  const {values, type, defaultValue, Update} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n\r\n  const [value, setValue] = useState(values[index]); \r\n  useEffect(() => { \r\n    setValue(values[index]); \r\n  }, [JSON.stringify(values[index])]); \r\n\r\n  const onEnterUp = () => Update(index, value); \r\n  return <Input {...{value, setValue, type, defaultValue, onEnterUp}} />\r\n}\r\n\r\n// Delete Btn ===================================\r\nexport function DeleteBtn({children, ...props}:React.PropsWithChildren<React.ButtonHTMLAttributes<HTMLButtonElement>>) { \r\n  const {Delete} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  return <button onClick={() => Delete(index)} {...props}> \r\n    {!children ? 'x' : children} \r\n  </button> \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\options.component.tsx",["307"],"import React, {useContext, useEffect} from 'react'; \r\n//import {IOption} from '../../reusable/_input'; \r\nimport {SelectContext} from './select.component'; \r\n\r\n\r\n// OPTIONS ======================================\r\ninterface IOptions { \r\n  label?:string; // defines a optgroup with a label \r\n  options:IOption[]; \r\n  [key:string]:any; \r\n} \r\n//const OptionsContext = React.createContext({}); \r\nexport function Options({label, options}:IOptions) { \r\n  const {setOptions} = useContext(SelectContext); \r\n  \r\n  useEffect(() => { \r\n    setOptions( (prev:any) => [...prev, ...options] ); \r\n  }, []); \r\n\r\n  return <div > \r\n    {label ? (<div className={'select_body_label'}>{label}</div>) : null} \r\n    {options.map( (option,i) => { \r\n      return <Option key={i} option={option} /> \r\n    })} \r\n  </div> \r\n} \r\n\r\nfunction Option({option}:{option:IOption}) { \r\n  const {SelectValue} = useContext(SelectContext); \r\n  return <div className={'select_body_option'} onClick={() => SelectValue(option.value)}> \r\n    {option.label} \r\n  </div>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\selectheader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\RemovableItems.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["308","309","310","311"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull} from '../../utils/_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield,key) => { \r\n      return <Cell {...{key, ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const value = GetDefaultValue(datas, ifield, row); \r\n  const context = {value, row, ifield} as ICellContext; \r\n  const data = datas[row];\r\n  const _value = row >= 0 ? data[ifield.accessor] : ifield.defaultValue; \r\n  \r\n  if(row >= 0) {\r\n    /*console.log([row, ifield.accessor]); \r\n    console.log(['DATAs', datas]); \r\n    console.log(['DATA', data]); \r\n    console.log(['DATA_field', data[ifield.accessor]]); */\r\n  }\r\n    \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n\r\nfunction GetDefaultValue(datas:any[], ifield:IField, row?:number) { \r\n  const Row = row === undefined ? -1: row; \r\n  const data = datas[Row]; \r\n  return data ? data[ifield.accessor] : ifield.defaultValue; \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["312","313","314"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\usepage\\usePage.tsx",[],["315","316"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionedit.component.tsx",["317","318","319","320","321"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {Arrx, Elements, ArrxContext, ElementContext, ElementIndex} from '../../../reusable/components/arrx/_arrx'; \r\nimport {Input, Select, Options, InputArray} from '../../../reusable/components/input/_input'; \r\nimport {AnswersAreComplete, IAnswer} from './useblankform'; \r\n\r\n\r\n\r\n// QUESTION EDIT ================================\r\nexport function QuestionEdit({setValues}:{setValues:any}) { \r\n  const {values} = useContext(ArrxContext); \r\n  const {index} = useContext(ElementContext); \r\n  const Answer = (values[index] as IAnswer); \r\n  const {labels, optional, answer, responseType} = Answer; \r\n  \r\n  const [value, setValue] = useState(answer); \r\n  const {type, defaultValue} = {type:'number', defaultValue:0}; \r\n\r\n  const UpdateAnswers = () => setValues((prev:any) => { \r\n    const editedAnswers:IAnswer[] = [...prev]; \r\n    const editedAnswer:IAnswer = editedAnswers[index]; \r\n    editedAnswer.answer = value; \r\n    return editedAnswers; \r\n  }); \r\n\r\n  useEffect(() => {UpdateAnswers()},[value]); \r\n\r\n  const options:IOption[] = responseType.enum ? \r\n    responseType.enum.map( (v,i) => { return {value:i, label:v} }) : [] ; \r\n\r\n  const input = <Input {...{value, setValue, type, defaultValue}} />\r\n  const select = <span>\r\n    <Select {...{value, setValue, type, defaultValue}} >\r\n      <Options {...{options}} />\r\n    </Select>\r\n  </span>\r\n\r\n\r\n  return <div> \r\n    [<ElementIndex /><span>{labels[0]}: </span>] \r\n    {AnswersAreComplete([{...Answer, answer:value}]) ? \r\n      <span>&#10003;</span> : \r\n      <span>X</span>}\r\n    <span>{!responseType.enum ? input : select}</span> \r\n  </div> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\useblankform.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\_useactive.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\_rendering.ts",["322"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts",["323"],"import {IsEmpty} from '../utils/_utils'; \r\n\r\nexport interface ICrud { \r\n  Collection:(accessor:string) => Promise<IResponse>; \r\n  Create: (accessor:string, toCreate?:IEntry|IEntry[]) => Promise<IResponse>; \r\n  Read: (accessor:string, id?:string[]) => Promise<IResponse>; \r\n  Update: (accessor:string, toUpdate:IEntry|IEntry[]) => Promise<IResponse>; \r\n  Delete: (accessor:string, toDelete?:IEntry|IEntry[]) => Promise<IResponse>; \r\n} \r\n\r\n// DataAcessObject ==============================\r\nexport class DataAccessObject { \r\n  public collections:Collections = new Collections(); \r\n\r\n  private crud:ICrud = {} as ICrud; \r\n  \r\n  constructor(crud:ICrud) { \r\n    this.crud = crud; \r\n  } \r\n\r\n  /*public GetCollections(accessors?:string[]):ICollection[] { \r\n    return this.collections.GetCollections(accessors); \r\n  } */\r\n\r\n  // COLLECTION .................................\r\n  public async Collections(accessors:string[]):Promise<IResponse[]> { \r\n    const responses = [] as IResponse[]; \r\n    for(let i=0; i<accessors.length; i++) { \r\n      const response = await this.Collection(accessors[i]); \r\n      responses.push(response); \r\n    } \r\n    return responses; \r\n  } \r\n\r\n  public async Collection(accessors:string):Promise<IResponse> { \r\n    const response = await this.crud.Collection(accessors); \r\n    if(response.success) \r\n      this.collections.collections.push(response.data); \r\n    return response; \r\n  }\r\n\r\n  // CREATE .....................................  \r\n  public async Create(accessor:string, entry:IEntry):Promise<IResponse> { \r\n    const [response] = (await this.crud.Create(accessor, entry)).data as IResponse[]; \r\n    if(response.success) { \r\n      console.log(response.data); \r\n      this.collections.Create(accessor, response.data); \r\n    }\r\n    return response; \r\n  } \r\n\r\n  // READ .......................................\r\n  public async Read(accessor:string, entry?:string[]):Promise<IEntry[]> { \r\n    //const results = (await crud.Read(accessor, [entry])).data as IResponse[]; \r\n    //const selectedCollection = this.GetCollection(accessor); \r\n    /*if(selectedCollection) \r\n      selectedCollection.Create(response.data); */ \r\n    return [] as IEntry[]; \r\n  } \r\n\r\n  // UPDATE .....................................\r\n  public async Update(accessor:string, entry:IEntry):Promise<IResponse> { \r\n    const [response] = (await this.crud.Update(accessor, [entry])).data as IResponse[]; \r\n    if(response.success) {\r\n      console.log(response.data); \r\n      this.collections.Update(accessor, response.data); \r\n    }\r\n    return response; \r\n  } \r\n\r\n  // DELETE .....................................\r\n  public async Delete(accessor:string, entry?:IEntry):Promise<IResponse> { \r\n    const [response] = (await this.crud.Delete(accessor, entry)).data as IResponse[]; \r\n    if(response.success) {\r\n      console.log(response.data); \r\n      this.collections.Delete(accessor, response.data); \r\n    }\r\n    return response; \r\n  } \r\n\r\n  // GET FOREIGN ELEMENTS -----------------------------\r\n  public GetForeignElements(ifield:IField) \r\n    : {foreignCollection:ICollection|undefined, abbrevField:IField|undefined} \r\n  { \r\n    return this.collections.GetForeignElements(ifield); \r\n  } \r\n\r\n  public GetForeignOptions(ifield:IField) : IOption[] { \r\n    const {foreignCollection, abbrevField} = this.GetForeignElements(ifield);\r\n    if(!foreignCollection || !abbrevField)\r\n      return [] as IOption[]; \r\n    return foreignCollection.entries?.map( e => { \r\n      return {value:e._id, label:e[abbrevField.accessor]} as IOption; \r\n    }); \r\n  } \r\n\r\n  public GetForeignValues(ifield:IField, ids:string[]):any[] { \r\n    const {foreignCollection, abbrevField} = this.GetForeignElements(ifield); \r\n    if(!foreignCollection || !abbrevField) \r\n      return [] as IOption[]; \r\n    return foreignCollection.entries\r\n      ?.filter(e => !IsEmpty(ids) && ids.includes(e._id) )\r\n      ?.map( e => e[abbrevField.accessor] );\r\n  } \r\n} \r\n\r\n\r\n\r\n// Collections ===================================\r\nclass Collections { \r\n  public collections:ICollection[] = [] as ICollection[]; \r\n\r\n  public Create(accessor:string, entry:IEntry) { \r\n    const collection = new Collection(this.collections.find(c=> c.accessor===accessor)); \r\n    return collection.Create(entry);  \r\n  } \r\n\r\n  public Update(accessor:string, entry:IEntry) { \r\n    const collection = new Collection(this.collections.find(c=> c.accessor===accessor)); \r\n    return collection.Update(entry); \r\n  } \r\n\r\n  public Delete(accessor:string, entry:IEntry) {\r\n    const collection = new Collection(this.collections.find(c=> c.accessor===accessor)); \r\n    return collection.Delete(entry); \r\n  }\r\n  \r\n  // GET FOREIGN INFO -----------------------------\r\n  public GetForeignElements(ifield:IField) \r\n      :{foreignCollection:ICollection|undefined, abbrevField:IField|undefined} { \r\n    const foreignCollection = this.collections.find(c => c.accessor === ifield.type); \r\n    const abbrevField = new Collection(foreignCollection).GetAbbrevField(); \r\n    return {foreignCollection, abbrevField}; \r\n  }\r\n}\r\n\r\n\r\n\r\n// COLLECTION ===================================\r\nclass Collection { \r\n  public collection:ICollection|undefined; \r\n\r\n  constructor(collection:ICollection|undefined) { \r\n    if(collection) \r\n      this.collection = collection; \r\n  }\r\n\r\n  // Create -------------------------------------\r\n  public Create(entry:IEntry) { \r\n    if(!this.collection?.entries) \r\n      return false; \r\n    this.collection.entries.push(entry); \r\n    return true;\r\n  }\r\n\r\n  // Read ---------------------------------------\r\n  public Read(ids?:string[]) { \r\n    if(!this.collection?.entries) \r\n      return [];\r\n    if(IsEmpty(ids) ) \r\n      return this.collection.entries; \r\n    return this.collection.entries.filter(e => ids?.includes(e._id) ); \r\n  }\r\n\r\n  // Update \r\n  public Update(entry:IEntry) { \r\n    if(!this.collection?.entries) \r\n      return false; \r\n    const index = this.collection.entries?.findIndex( e => e._id === entry._id ); \r\n    if(index < 0) \r\n      return false; \r\n    this.collection.entries[index] = {...entry}; \r\n    return true; \r\n  }\r\n\r\n  // Delete\r\n  public Delete(entry:IEntry) {\r\n    if(!this.collection?.entries) \r\n      return false;\r\n    const index = this.collection?.entries.findIndex( e => e._id === entry._id ); \r\n    if(index < 0) \r\n      return false; \r\n    this.collection?.entries.splice(index, 1); \r\n    return true; \r\n  }\r\n\r\n  public GetAbbrevField():IField|undefined { \r\n    const abbrevField = this.collection?.ifields.find( f => f.isAbbrev) \r\n      ?? this.collection?.ifields.find( f => (f.type === 'string' || f.type === 'number') && !f.isArray); \r\n    return abbrevField; \r\n  } \r\n}\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts",["324"],"import {useMemo, useState} from 'react'; \r\nimport {useLoader, IState} from '../hooks/useloader/_useloader'; \r\nimport {DataAccessObject as IDao} from './dao.class'; \r\n\r\n\r\nexport interface IUseDao{ \r\n  state:IState; \r\n  activeCollection:ICollection; \r\n  setActiveCollection:React.Dispatch<ICollection>; \r\n  collections:() => ICollection[]; \r\n\r\n  Collections:(accessors:string[]) => Promise<void>; \r\n  Create: (accessor:string, toCreate:IEntry) => Promise<void>; \r\n  Read: (accessor:string, id?:string[]) => Promise<void>; \r\n  Update: (accessor:string, toUpdate:IEntry) => Promise<void>; \r\n  Delete: (accessor:string, toDelete?:IEntry) => Promise<void>; \r\n\r\n  GetForeignElements: (ifield:IField) => {foreignCollection:ICollection|undefined, abbrevField:IField|undefined}, \r\n  GetForeignOptions: (ifield:IField) => IOption[]; \r\n  GetForeignValues: (ifield:IField, value:any[]) => any[]; \r\n} \r\n\r\n\r\n\r\n// USE DAO ======================================\r\nexport function useDao(dao:IDao):IUseDao { \r\n  const Dao = useMemo(() => dao, []); \r\n  const {state, Load} = useLoader(); \r\n  const [activeCollection, setActiveCollection] = useState({} as ICollection); \r\n\r\n  const collections = () => Dao.collections.collections; \r\n  const Collections = async (accessors:string[]) => Load(() => Dao.Collections(accessors)); \r\n  const Create = async (accessor:string, toCreate:IEntry) => Load(() => Dao.Create(accessor, toCreate)); \r\n  const Read = async (accessor:string, ids?:string[]) => Load(() => Dao.Read(accessor, ids)); \r\n  const Update = async (accessor:string, toUpdate:IEntry) => Load(() => Dao.Update(accessor, toUpdate)); \r\n  const Delete = async (accessor:string, toDelete?:IEntry) => Load(() => Dao.Delete(accessor, toDelete)); \r\n\r\n  const GetForeignElements = (ifield:IField) => Dao.GetForeignElements(ifield); \r\n  const GetForeignOptions = (ifield:IField) => Dao.GetForeignOptions(ifield); \r\n  const GetForeignValues = (ifield:IField, ids:any[]) => Dao.GetForeignValues(ifield, ids); \r\n\r\n  return {state, activeCollection, setActiveCollection, \r\n    collections, Collections, \r\n    Create, Read, Update, Delete, \r\n    GetForeignElements, GetForeignOptions, GetForeignValues}; \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\displayactivedata.component.tsx",["325","326","327","328"],"import {useContext} from 'react'; \r\nimport {ActiveContext} from './admintablr.component'; \r\n\r\nimport {Objx, ObjxContext, Fields, Field, FieldContext, FieldLabel, FieldValue} from '../../../reusable/components/objx/_objx'; \r\n\r\n\r\n\r\nexport function DisplayActiveData({cols}:{cols:IField[]}) { \r\n  const activeContext = useContext(ActiveContext); \r\n\r\n  return \r\n    <Objx {...{value:activeContext.active.data, ifields:cols}}> \r\n      <Fields>\r\n        <FieldLabel/> \r\n        <FieldValue/> \r\n        <br/>\r\n      </Fields>\r\n    </Objx>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\rendering\\valuerenderer.component.tsx",["329","330","331"],"import { useEffect, useState } from 'react'; \r\nimport {IFieldToHandler, IRenderers} from './renderers.utils'; \r\n\r\n\r\n\r\n// DATA RENDERER ================================\r\ninterface IValueRenderer { \r\n  value:any; \r\n  data:any; \r\n  setData:any; \r\n  isEdit:boolean; \r\n  ifield:IField; \r\n  renderers:IRenderers; \r\n} \r\nexport function ValueRenderer({...props}:IValueRenderer) { \r\n  const {data, setData, isEdit, ifield, renderers} = props; \r\n  const [value, setValue] = useState(props.value); \r\n\r\n  //console.log([props.data, value]); \r\n\r\n  // update value if data changes \r\n  useEffect(() => { \r\n    setValue(props.value); \r\n  }, [JSON.stringify(props.value)]) \r\n\r\n  // update data when value is changed \r\n  useEffect(() => { \r\n    const newData = {...data}; \r\n    newData[ifield.accessor] = value; \r\n    setData(newData); \r\n  }, [value]); \r\n\r\n  const handler = `${IFieldToHandler(ifield)}${isEdit?'Edit':'Read'}`; \r\n  const renderer = renderers[handler] ?? renderers['Default']; \r\n\r\n  \r\n  return <span>{renderer(ifield)(value, setValue)}</span> \r\n  //return <span>Dada</span>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\rendering\\renderers.utils.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\adminsection.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\useactive.hook.ts",["332"],"import React, {useState} from 'react'; \r\n\r\nexport interface IUseActive { \r\n  active :IActive; \r\n  SetActive: (row?:number, mode?:string) => void; \r\n  SetData: (data:any) => void; \r\n  /*GetActive: () => IActive; \r\n  IsActive: (row:number) => boolean; \r\n  GetMode: (row:number) => string; \r\n  GetData: (row:number) => any; */ \r\n} \r\ninterface IActive { \r\n  data:any; \r\n  row?:number; \r\n  mode?:string; \r\n} \r\n\r\n// UseActive ====================================\r\nexport function useActive(datas:any[], ifields:IField[]):IUseActive { \r\n  const [active, setActive] = useState({data:FetchData(datas, ifields)} as IActive); \r\n  \r\n  //const GetActive = ():IActive => active; \r\n  const SetActive = (row?:number, mode?:string) => { \r\n    setActive(() => {return {data:FetchData(datas, ifields, row), row, mode}} ); \r\n  } \r\n  //const IsActive = (row?:number):boolean => row !== undefined && active.row === row; \r\n  //const GetMode = (row:number):string => IsActive(row) ? active.mode ?? '' : ''; \r\n\r\n  // returns data with default values if not defined \r\n  /*const GetData = (row?:number):any => { \r\n    return IsActive(row) ? active.data : FetchData(datas, ifields, row); \r\n  } */\r\n  const SetData = (data:any):void => { \r\n    setActive((prev:any) => { \r\n      return {...prev, data}} \r\n    ); \r\n  } \r\n  return {active, SetActive, SetData}; \r\n} \r\n\r\n// FetchData from datas if it can find it and complete undefined data with their defaultvalue. \r\nfunction FetchData(datas:any, ifields:IField[],  row?:number) { \r\n  let data:any = (row !== undefined && row >= 0) ? datas[row]: {}; \r\n  ifields.forEach(f => { \r\n    if(data[f.accessor] === undefined) \r\n      data[f.accessor] = DefaultValue(f); \r\n  }); \r\n  return data; \r\n}\r\n\r\nfunction DefaultValue(ifield:IField) { \r\n  if(ifield.isArray) \r\n    return []; \r\n  if(ifield.isModel) \r\n    return ''; // return an null id value ?? \r\n  return ifield.defaultValue; \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx",["333"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\loadselectcollection.component.tsx",["334"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudtablr.component.tsx",["335","336","337","338","339"],{"ruleId":"340","replacedBy":"341"},{"ruleId":"342","replacedBy":"343"},{"ruleId":"344","severity":1,"message":"345","line":1,"column":28,"nodeType":"346","messageId":"347","endLine":1,"endColumn":36},{"ruleId":"344","severity":1,"message":"348","line":4,"column":18,"nodeType":"346","messageId":"347","endLine":4,"endColumn":24},{"ruleId":"349","severity":1,"message":"350","line":21,"column":6,"nodeType":"351","endLine":21,"endColumn":8,"suggestions":"352"},{"ruleId":"340","replacedBy":"353"},{"ruleId":"342","replacedBy":"354"},{"ruleId":"340","replacedBy":"355"},{"ruleId":"342","replacedBy":"356"},{"ruleId":"344","severity":1,"message":"357","line":3,"column":9,"nodeType":"346","messageId":"347","endLine":3,"endColumn":13},{"ruleId":"344","severity":1,"message":"358","line":3,"column":15,"nodeType":"346","messageId":"347","endLine":3,"endColumn":19},{"ruleId":"344","severity":1,"message":"359","line":3,"column":21,"nodeType":"346","messageId":"347","endLine":3,"endColumn":25},{"ruleId":"340","replacedBy":"341"},{"ruleId":"342","replacedBy":"343"},{"ruleId":"344","severity":1,"message":"348","line":2,"column":9,"nodeType":"346","messageId":"347","endLine":2,"endColumn":15},{"ruleId":"340","replacedBy":"360"},{"ruleId":"342","replacedBy":"361"},{"ruleId":"362","severity":1,"message":"363","line":58,"column":37,"nodeType":"364","messageId":"365","endLine":58,"endColumn":47},{"ruleId":"344","severity":1,"message":"348","line":3,"column":9,"nodeType":"346","messageId":"347","endLine":3,"endColumn":15},{"ruleId":"349","severity":1,"message":"366","line":19,"column":37,"nodeType":"351","endLine":19,"endColumn":39,"suggestions":"367"},{"ruleId":"344","severity":1,"message":"368","line":12,"column":38,"nodeType":"346","messageId":"347","endLine":12,"endColumn":48},{"ruleId":"349","severity":1,"message":"366","line":30,"column":37,"nodeType":"351","endLine":30,"endColumn":39,"suggestions":"369"},{"ruleId":"344","severity":1,"message":"345","line":1,"column":28,"nodeType":"346","messageId":"347","endLine":1,"endColumn":36},{"ruleId":"344","severity":1,"message":"370","line":2,"column":68,"nodeType":"346","messageId":"347","endLine":2,"endColumn":80},{"ruleId":"344","severity":1,"message":"371","line":2,"column":15,"nodeType":"346","messageId":"347","endLine":2,"endColumn":26},{"ruleId":"344","severity":1,"message":"372","line":2,"column":38,"nodeType":"346","messageId":"347","endLine":2,"endColumn":45},{"ruleId":"344","severity":1,"message":"373","line":2,"column":63,"nodeType":"346","messageId":"347","endLine":2,"endColumn":75},{"ruleId":"344","severity":1,"message":"370","line":2,"column":77,"nodeType":"346","messageId":"347","endLine":2,"endColumn":89},{"ruleId":"349","severity":1,"message":"374","line":44,"column":6,"nodeType":"351","endLine":44,"endColumn":37,"suggestions":"375"},{"ruleId":"349","severity":1,"message":"376","line":44,"column":7,"nodeType":"377","endLine":44,"endColumn":36},{"ruleId":"349","severity":1,"message":"378","line":18,"column":6,"nodeType":"351","endLine":18,"endColumn":8,"suggestions":"379"},{"ruleId":"344","severity":1,"message":"348","line":4,"column":9,"nodeType":"346","messageId":"347","endLine":4,"endColumn":15},{"ruleId":"344","severity":1,"message":"380","line":31,"column":9,"nodeType":"346","messageId":"347","endLine":31,"endColumn":15},{"ruleId":"381","severity":1,"message":"382","line":43,"column":22,"nodeType":"383","messageId":"384","endLine":43,"endColumn":24},{"ruleId":"381","severity":1,"message":"382","line":43,"column":47,"nodeType":"383","messageId":"384","endLine":43,"endColumn":49},{"ruleId":"344","severity":1,"message":"385","line":1,"column":16,"nodeType":"346","messageId":"347","endLine":1,"endColumn":26},{"ruleId":"381","severity":1,"message":"382","line":28,"column":20,"nodeType":"383","messageId":"384","endLine":28,"endColumn":22},{"ruleId":"381","severity":1,"message":"382","line":28,"column":36,"nodeType":"383","messageId":"384","endLine":28,"endColumn":38},{"ruleId":"340","replacedBy":"386"},{"ruleId":"342","replacedBy":"387"},{"ruleId":"344","severity":1,"message":"388","line":2,"column":9,"nodeType":"346","messageId":"347","endLine":2,"endColumn":13},{"ruleId":"344","severity":1,"message":"389","line":2,"column":15,"nodeType":"346","messageId":"347","endLine":2,"endColumn":23},{"ruleId":"344","severity":1,"message":"390","line":3,"column":33,"nodeType":"346","messageId":"347","endLine":3,"endColumn":43},{"ruleId":"344","severity":1,"message":"391","line":13,"column":18,"nodeType":"346","messageId":"347","endLine":13,"endColumn":26},{"ruleId":"349","severity":1,"message":"392","line":25,"column":37,"nodeType":"351","endLine":25,"endColumn":44,"suggestions":"393"},{"ruleId":"344","severity":1,"message":"394","line":1,"column":8,"nodeType":"346","messageId":"347","endLine":1,"endColumn":13},{"ruleId":"395","severity":1,"message":"396","line":13,"column":40,"nodeType":"346","messageId":"397","endLine":13,"endColumn":51},{"ruleId":"349","severity":1,"message":"398","line":27,"column":34,"nodeType":"351","endLine":27,"endColumn":36,"suggestions":"399"},{"ruleId":"344","severity":1,"message":"400","line":4,"column":15,"nodeType":"346","messageId":"347","endLine":4,"endColumn":26},{"ruleId":"344","severity":1,"message":"401","line":4,"column":36,"nodeType":"346","messageId":"347","endLine":4,"endColumn":41},{"ruleId":"344","severity":1,"message":"402","line":4,"column":43,"nodeType":"346","messageId":"347","endLine":4,"endColumn":55},{"ruleId":"403","severity":1,"message":"404","line":12,"column":5,"nodeType":"405","messageId":"406","endLine":18,"endColumn":12},{"ruleId":"349","severity":1,"message":"407","line":24,"column":6,"nodeType":"351","endLine":24,"endColumn":35,"suggestions":"408"},{"ruleId":"349","severity":1,"message":"376","line":24,"column":7,"nodeType":"377","endLine":24,"endColumn":34},{"ruleId":"349","severity":1,"message":"409","line":31,"column":6,"nodeType":"351","endLine":31,"endColumn":13,"suggestions":"410"},{"ruleId":"344","severity":1,"message":"394","line":1,"column":8,"nodeType":"346","messageId":"347","endLine":1,"endColumn":13},{"ruleId":"411","severity":1,"message":"412","line":44,"column":10,"nodeType":"346","messageId":"413","endLine":44,"endColumn":17},{"ruleId":"349","severity":1,"message":"350","line":16,"column":6,"nodeType":"351","endLine":16,"endColumn":8,"suggestions":"414"},{"ruleId":"344","severity":1,"message":"415","line":1,"column":28,"nodeType":"346","messageId":"347","endLine":1,"endColumn":37},{"ruleId":"344","severity":1,"message":"416","line":2,"column":9,"nodeType":"346","messageId":"347","endLine":2,"endColumn":21},{"ruleId":"344","severity":1,"message":"417","line":5,"column":27,"nodeType":"346","messageId":"347","endLine":5,"endColumn":37},{"ruleId":"344","severity":1,"message":"418","line":5,"column":46,"nodeType":"346","messageId":"347","endLine":5,"endColumn":57},{"ruleId":"344","severity":1,"message":"419","line":7,"column":9,"nodeType":"346","messageId":"347","endLine":7,"endColumn":20},"no-native-reassign",["420"],"no-negated-in-lhs",["421"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'IsNull' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Collections'. Either include it or remove the dependency array.","ArrayExpression",["422"],["420"],["421"],["420"],["421"],"'Copy' is defined but never used.","'Edit' is defined but never used.","'Read' is defined but never used.",["420"],["421"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","React Hook useEffect has missing dependencies: 'Load' and 'loadfunc'. Either include them or remove the dependency array.",["423"],"'setAnswers' is assigned a value but never used.",["424"],"'ElementValue' is defined but never used.","'ArrxContext' is defined but never used.","'Element' is defined but never used.","'ElementIndex' is defined but never used.","React Hook useEffect has missing dependencies: 'index' and 'values'. Either include them or remove the dependency array.",["425"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has missing dependencies: 'options' and 'setOptions'. Either include them or remove the dependency array.",["426"],"'_value' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'useContext' is defined but never used.",["420"],["421"],"'Arrx' is defined but never used.","'Elements' is defined but never used.","'InputArray' is defined but never used.","'optional' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'UpdateAnswers'. Either include it or remove the dependency array.",["427"],"'React' is defined but never used.","@typescript-eslint/no-use-before-define","'Collections' was used before it was defined.","noUseBeforeDefine","React Hook useMemo has a missing dependency: 'dao'. Either include it or remove the dependency array.",["428"],"'ObjxContext' is defined but never used.","'Field' is defined but never used.","'FieldContext' is defined but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","React Hook useEffect has a missing dependency: 'props.value'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'props.value', you can also switch to useReducer instead of useState and read 'props.value' in the reducer.",["429"],"React Hook useEffect has missing dependencies: 'data', 'ifield.accessor', and 'setData'. Either include them or remove the dependency array.",["430"],"@typescript-eslint/no-redeclare","'CrudBtn' is already defined.","redeclared",["431"],"'useEffect' is defined but never used.","'DaoContexter' is defined but never used.","'RowContext' is defined but never used.","'CellContext' is defined but never used.","'DisplayObjx' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"432","fix":"433"},{"desc":"434","fix":"435"},{"desc":"434","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"desc":"432","fix":"449"},"Update the dependencies array to be: [Collections]",{"range":"450","text":"451"},"Update the dependencies array to be: [Load, loadfunc]",{"range":"452","text":"453"},{"range":"454","text":"453"},"Update the dependencies array to be: [index, values]",{"range":"455","text":"456"},"Update the dependencies array to be: [options, setOptions]",{"range":"457","text":"458"},"Update the dependencies array to be: [UpdateAnswers, value]",{"range":"459","text":"460"},"Update the dependencies array to be: [dao]",{"range":"461","text":"462"},"Update the dependencies array to be: [props.value]",{"range":"463","text":"464"},"Update the dependencies array to be: [data, ifield.accessor, setData, value]",{"range":"465","text":"466"},{"range":"467","text":"451"},[923,925],"[Collections]",[650,652],"[Load, loadfunc]",[1095,1097],[1571,1602],"[index, values]",[585,587],"[options, setOptions]",[1053,1060],"[UpdateAnswers, value]",[1024,1026],"[dao]",[625,654],"[props.value]",[825,832],"[data, ifield.accessor, setData, value]",[796,798]]