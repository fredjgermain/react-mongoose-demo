[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\loadpatient.component.tsx":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\loadquestionnaire.component.tsx":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\displayquestion.component.tsx":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaire.utils.tsx":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\paging.component.tsx":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts":"59","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx":"60","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudmongoose.class.ts":"61","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testcrud\\testcrud.experiment.tsx":"62","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_crud.ts":"63","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\crud\\useactive.hook.tsx":"64","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\predloader.component.tsx":"65","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx":"66"},{"size":621,"mtime":1612141670677,"results":"67","hashOfConfig":"68"},{"size":810,"mtime":1612482249129,"results":"69","hashOfConfig":"68"},{"size":362,"mtime":499162500000,"results":"70","hashOfConfig":"68"},{"size":912,"mtime":1612469327163,"results":"71","hashOfConfig":"68"},{"size":496,"mtime":1612141670563,"results":"72","hashOfConfig":"68"},{"size":1495,"mtime":1612141671254,"results":"73","hashOfConfig":"68"},{"size":3351,"mtime":1612389654486,"results":"74","hashOfConfig":"68"},{"size":2832,"mtime":1612141671255,"results":"75","hashOfConfig":"68"},{"size":1900,"mtime":1612141671217,"results":"76","hashOfConfig":"68"},{"size":3091,"mtime":1612141671217,"results":"77","hashOfConfig":"68"},{"size":1780,"mtime":1612141670967,"results":"78","hashOfConfig":"68"},{"size":2274,"mtime":1612141671117,"results":"79","hashOfConfig":"68"},{"size":1473,"mtime":1612141671140,"results":"80","hashOfConfig":"68"},{"size":462,"mtime":1612141671142,"results":"81","hashOfConfig":"68"},{"size":1042,"mtime":1612141671142,"results":"82","hashOfConfig":"68"},{"size":982,"mtime":1612141671141,"results":"83","hashOfConfig":"68"},{"size":6089,"mtime":1612482932320,"results":"84","hashOfConfig":"68"},{"size":287,"mtime":1612382530122,"results":"85","hashOfConfig":"68"},{"size":341,"mtime":1612382805121,"results":"86","hashOfConfig":"68"},{"size":862,"mtime":1612141670934,"results":"87","hashOfConfig":"68"},{"size":112,"mtime":1612141670932,"results":"88","hashOfConfig":"68"},{"size":1301,"mtime":1612141671147,"results":"89","hashOfConfig":"68"},{"size":688,"mtime":1611105433287,"results":"90","hashOfConfig":"68"},{"size":1330,"mtime":1611105734495,"results":"91","hashOfConfig":"68"},{"size":124,"mtime":1611105257047,"results":"92","hashOfConfig":"68"},{"size":233,"mtime":1612141670928,"results":"93","hashOfConfig":"68"},{"size":3111,"mtime":1612141671125,"results":"94","hashOfConfig":"68"},{"size":1385,"mtime":1612141671125,"results":"95","hashOfConfig":"68"},{"size":510,"mtime":1612141670929,"results":"96","hashOfConfig":"68"},{"size":1532,"mtime":1612141670991,"results":"97","hashOfConfig":"68"},{"size":2116,"mtime":1612141671020,"results":"98","hashOfConfig":"68"},{"size":943,"mtime":1612141671021,"results":"99","hashOfConfig":"68"},{"size":447,"mtime":1612141670931,"results":"100","hashOfConfig":"68"},{"size":4285,"mtime":1611356030017,"results":"101","hashOfConfig":"68"},{"size":107,"mtime":1612141670933,"results":"102","hashOfConfig":"68"},{"size":2743,"mtime":1612141671148,"results":"103","hashOfConfig":"68"},{"size":79,"mtime":1612141670934,"results":"104","hashOfConfig":"68"},{"size":338,"mtime":1612141671148,"results":"105","hashOfConfig":"68"},{"size":1540,"mtime":1612469132190,"results":"106","hashOfConfig":"68"},{"size":231,"mtime":1612141670930,"results":"107","hashOfConfig":"68"},{"size":1927,"mtime":1612141671121,"results":"108","hashOfConfig":"68"},{"size":1598,"mtime":1612141670985,"results":"109","hashOfConfig":"68"},{"size":4408,"mtime":1612141670676,"results":"110","hashOfConfig":"68"},{"size":515,"mtime":1612398095700,"results":"111","hashOfConfig":"68"},{"size":1426,"mtime":1612469986798,"results":"112","hashOfConfig":"68"},{"size":1304,"mtime":1612395256953,"results":"113","hashOfConfig":"68"},{"size":1099,"mtime":1612398310296,"results":"114","hashOfConfig":"68"},{"size":2477,"mtime":1612473852060,"results":"115","hashOfConfig":"68"},{"size":1808,"mtime":1612483113644,"results":"116","hashOfConfig":"68"},{"size":3568,"mtime":1612398748187,"results":"117","hashOfConfig":"68"},{"size":1087,"mtime":1612141670927,"results":"118","hashOfConfig":"68"},{"size":655,"mtime":1612398529932,"results":"119","hashOfConfig":"68"},{"size":1092,"mtime":1612398948278,"results":"120","hashOfConfig":"68"},{"size":736,"mtime":1612141670564,"results":"121","hashOfConfig":"68"},{"size":2673,"mtime":1612141670908,"results":"122","hashOfConfig":"68"},{"size":1364,"mtime":1612399470590,"results":"123","hashOfConfig":"68"},{"size":2585,"mtime":1612399179478,"results":"124","hashOfConfig":"68"},{"size":2690,"mtime":1612394054258,"results":"125","hashOfConfig":"68"},{"size":2800,"mtime":1612387165429,"results":"126","hashOfConfig":"68"},{"size":431,"mtime":1612382505474,"results":"127","hashOfConfig":"68"},{"size":2669,"mtime":1612469768616,"results":"128","hashOfConfig":"68"},{"size":2238,"mtime":1612394941169,"results":"129","hashOfConfig":"68"},{"size":137,"mtime":1612397882586,"results":"130","hashOfConfig":"68"},{"size":2194,"mtime":1612474171413,"results":"131","hashOfConfig":"68"},{"size":663,"mtime":1612482168663,"results":"132","hashOfConfig":"68"},{"size":129,"mtime":1612482242441,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"ke513i",{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"144"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"144"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"144"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"144"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"189"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"144"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"144"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"215"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"144"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"144"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"144"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"156"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"144"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"144"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"144"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"144"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"144"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"144"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["290","291"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",["292"],"import React, {useContext, useEffect} from 'react'; \r\nimport {CrudContext} from '../../reusable/_crud'; \r\nimport {FeedBack} from '../../components/feedback/feedback.component'; \r\nimport {IsEmpty} from '../../reusable/_utils'; \r\n\r\nimport {CollectionSelector} from './components/collectionselector.component'; \r\nimport {AdminTablr} from './components/admintablr.component'; \r\n\r\nimport '../../css/table.css'; \r\n\r\n\r\n\r\n\r\n// ADMIN PAGE ====================================\r\nexport default function Admin() { \r\n  const {state, activeCollection, setActiveCollection} = useContext(CrudContext); \r\n\r\n  useEffect(() => { \r\n    setActiveCollection({} as ICollection); \r\n  }, []); \r\n\r\n  return <div> \r\n    <h2>Admin</h2> \r\n    <FeedBack/> \r\n    {state.ready && state.success && <CollectionSelector /> } \r\n    {!IsEmpty(activeCollection) && <AdminTablr/>} \r\n  </div> \r\n}\r\n\r\n//{!IsEmpty(activeCollection) && <AdminTablr/>} \r\n\r\n",["293","294"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",["295"],"// ARRAY METHODS ################################\r\n\r\n\r\n// Common predicate ----------------------------\r\nconst Compare = (array:any[], comparator:(a:any, b:any) => boolean = () => true) => (b:any, i:number, ar:any[]) => \r\n  array.some(a => comparator(a, b)); \r\n\r\nconst IsDuplicate = (comparator:(a:any, b:any) => boolean = () => true) => (b:any, i:number, ar:any[]) => \r\n  ar.some(a => comparator(a, b) && a!==b); \r\n\r\nconst IsUnic = (comparator:(a:any, b:any) => boolean = () => true) => (b:any, i:number, ar:any[]) => \r\n  !ar.some(a => comparator(a, b) && a!==b); \r\n\r\nconst ByIndexes = (indexes:number[]) => (b:any, i:number, ar:any[]) => \r\n  indexes.includes(i); \r\n\r\nconst Intersect = (array:any[], comparator:(a:any, b:any) => boolean = () => true) => (b:any) => \r\n  array.some(a => comparator(a, b) && a===b); \r\n\r\nconst Exclusion = (array:any[], comparator:(a:any, b:any) => boolean = () => true) => (b:any) => \r\n  !array.some(a => comparator(a, b) && a===b); \r\n\r\nexport const CommonPredicates = {IsDuplicate, IsUnic, ByIndexes, Intersect, Exclusion, Compare}; \r\n\r\n/*=> (b:any, i:number, ar:any[]) => \r\n  indexes.includes(i); */\r\n\r\n// ToArray ======================================\r\nexport function ToArray(toArray:any|any[]):any[] { \r\n  return toArray !== undefined ? [toArray].flat() : []; \r\n} \r\n\r\n\r\n// Remove =======================================\r\nexport function Remove(array:any[], predicate:(e:any, i:number, a:any[])=>boolean ):[any[], any[]] { \r\n  const removed = array.filter(predicate); \r\n  const kept = array.filter( (e,i,a) => !predicate(e,i,a) ); \r\n  return [kept, removed]; \r\n} \r\n\r\n// Union ========================================\r\nexport function Union(array:any[], toUnite:any|any[], predicate:(e:any, i:number, a:any[])=>boolean = () => true):any[] { \r\n  return [...array, ...ToArray(toUnite).filter(predicate)]; \r\n} \r\n\r\n\r\n// Filter =======================================\r\nexport function Filter<T>(array:T[] = [], predicate:(e:T, i:number, a:T[])=>boolean = () => true) \r\n: {selection: T[], indexes: number[]} \r\n{ \r\n  const selection:T[] = []; \r\n  const indexes:number[] = []; \r\n  array.forEach( (e,i,a) => { \r\n    if(predicate(e,i,a)) { \r\n      selection.push(e); \r\n      indexes.push(i); \r\n    } \r\n  }) \r\n  return {selection, indexes}; \r\n} \r\n\r\n// Order ========================================\r\nexport function Order<T>(toOrder:T[], ordering:any[], compare:(a:any, b:any)=>boolean = (a:any, b:any) => a === b ) { \r\n  return Combine(ordering, toOrder, compare).map(combine => { \r\n    const [a, b] = combine; \r\n    return b; \r\n  }); \r\n} \r\n\r\n// DUPLICATES ===================================\r\nexport function Duplicates(array:any[], compare:(a:any, b:any)=>boolean = (a:any, b:any) => a === b ):{duplicates:any[], unics:any[]} { \r\n  const {selection:duplicates} = Filter(array, IsDuplicate(compare)); \r\n  const {selection:unics} = Filter(array, IsUnic(compare)); \r\n  return {duplicates, unics}; \r\n} \r\n\r\n\r\n// COMBINE =========================================\r\nexport function Combine(As:any[], Bs:any[], compare:(a:any, b:any)=>boolean = () => true ) { \r\n  const combines:any[] = []; \r\n  As.forEach( a => { \r\n    Bs.forEach( b => compare(a,b) ? combines.push([a,b]): null)\r\n  }) \r\n  return combines; \r\n} \r\n\r\nexport const ArrayMethods = {}; \r\n//const combine = Combine(ordering, strings, (a,b) => a===b.name).map(([a,b]) => b); ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],["296","297"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["298"],"import {IsEmpty, IsInRange} from '../_utils';\r\n\r\nexport interface IMongooseCollection { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    enum?: any[]; \r\n    abbrev?: boolean; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\n// Parser functions =============================\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\nexport function ParseField(field:IMongooseField):IField { \r\n  const {path, instance, options, $embeddedSchemaType} = field; \r\n  const ifield:IField = {} as IField; \r\n\r\n  ifield.accessor = path ?? ''; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.type = options?.ref ?? $embeddedSchemaType?.instance ?? field.instance.toLowerCase(); \r\n  ifield.isMixed = instance.toLowerCase() === 'mixed'; \r\n  ifield.isEnum = !!options?.enum; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = !!options?.ref; \r\n  ifield.isAbbrev = !!options?.abbrev; \r\n  ifield.validators = GetValidators(field); \r\n  ifield.isRequired = field.options['required'] ?? false; \r\n  ifield.regex = field.options['regex']? field.options['regex']: undefined; \r\n\r\n  ifield.enums = options.enum ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, field.options); \r\n\r\n  return ifield; \r\n} \r\n\r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} \r\n\r\n\r\nfunction GetValidators(field:IMongooseField):IValidator[] { \r\n  const required = (value:any) => { \r\n    return !IsEmpty(value); \r\n  }; \r\n\r\n  const regex = (value:any) => { \r\n    if(field.options['regex']) \r\n      return new RegExp(field.options['regex']).test(value); \r\n    return true; \r\n  } \r\n\r\n  const range = (value:any) => { \r\n    return IsInRange(value, field.options['min'], field.options['max']); \r\n  } \r\n\r\n  let validators:IValidator[] = []; \r\n  if(field.options['required']) \r\n    validators.push(required); \r\n  if(field.options['regex']) \r\n    validators.push(regex); \r\n  if(field.options['min'] || field.options['max']) \r\n    validators.push(range); \r\n  return validators; \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],["299","300"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["301","302","303"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull, GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield) => { \r\n      return <Cell key={ifield.accessor} {...{ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const data = datas[row]; \r\n  const value = IsEmpty(data) ? GetDefaultValueFromIField(ifield): datas[row][ifield.accessor]; \r\n  const context = {value, row, ifield} as ICellContext; \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["304","305","306"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts",["307"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx",[],["308","309"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts",[],["310","311"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx",["312"],"import React from 'react'; \r\n//import CSS from ''\r\nimport {IEvent, IsNull, OnEnter, SetSize, SetWidth, \r\n  GetDefaultValueByType, GetTypeByValue, GetInputType, GetValueFromInput} from '../../_utils'; \r\n\r\n\r\n// INPUT ========================================\r\nexport interface IInput extends React.HTMLAttributes<HTMLInputElement> { \r\n  value:any; \r\n  setValue:any; \r\n  type?:string; \r\n  defaultValue?:any; \r\n  inputType?:string; \r\n  onEnterUp?:() => void; \r\n  width?: number; \r\n  [key:string]:any; \r\n} \r\nexport function Input(\r\n  {\r\n    value, setValue, \r\n    type=GetTypeByValue(value??''), \r\n    defaultValue=GetDefaultValueByType(type??'string'), \r\n    inputType=GetInputType(type??''), \r\n    onEnterUp=() => {}, \r\n    ...props\r\n  }:IInput) \r\n{ \r\n  const onChange = (event:IEvent) => setValue(GetInputValueOrDefault(event, defaultValue)); \r\n  const Value = IsNull(value) ? defaultValue: value; \r\n  const onKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => OnEnter(event, onEnterUp); \r\n\r\n  const width = props.width ?? SetSize(value); \r\n  const style = {width: `${width+2}ch`}; \r\n\r\n  if(type === 'boolean') \r\n    return <input {...{type:inputType, checked:Value, onChange, onKeyUp,  ...props}} /> \r\n  return <input {...{type:inputType, value:Value, onChange, onKeyUp, ...props}} style={style} /> \r\n} \r\n\r\n\r\n// GetValue --------------------------------------\r\nfunction GetInputValueOrDefault (event:IEvent, defaultValue:any) { \r\n  const value = GetValueFromInput(event); \r\n  return IsNull(value) ? defaultValue: value; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx",["313","314","315","316","317","318"],"import React, { useContext, useEffect, useState } from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex, ElementValue} from '../../_arrx'; \r\nimport {Input} from '../../_input'; \r\nimport {IInputArray, IUseInputArray, useInputArray} from './inputarray.hook'; \r\n\r\n\r\nexport const InputArrayContext = React.createContext({} as IUseInputArray); \r\nexport function InputArray({...props}:React.PropsWithChildren<IInputArray>) { \r\n  const context = useInputArray(props); \r\n  const {values} = props; \r\n  \r\n  return <InputArrayContext.Provider value={context} > \r\n    <Arrx {...{values}} > \r\n      <Elements> \r\n        <UpdateElement/> <DeleteBtn/>\r\n        <br/> \r\n      </Elements> \r\n      <CreateElement/>\r\n    </Arrx> \r\n  </InputArrayContext.Provider> \r\n} \r\n\r\n\r\n// Create element =======================================\r\nfunction CreateElement() { \r\n  const {type, defaultValue, Create} = useContext(InputArrayContext); \r\n  const [value, setValue] = useState(defaultValue); \r\n\r\n  const onEnterUp = () => {\r\n    Create(value); \r\n    setValue(() => defaultValue); // reset input to defaultValue after creation. \r\n  }; \r\n  return <Input {...{value, setValue, defaultValue, type, onEnterUp}}  /> \r\n} \r\n\r\n// Update element =======================================\r\nfunction UpdateElement() { \r\n  const {values, type, defaultValue, Update} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n\r\n  const [value, setValue] = useState(values[index]); \r\n  useEffect(() => { \r\n    setValue(values[index]); \r\n  }, [JSON.stringify(values[index])]); \r\n\r\n  const onEnterUp = () => Update(index, value); \r\n  return <Input {...{value, setValue, type, defaultValue, onEnterUp}} />\r\n}\r\n\r\n// Delete Btn ===================================\r\nexport function DeleteBtn({children, ...props}:React.PropsWithChildren<React.ButtonHTMLAttributes<HTMLButtonElement>>) { \r\n  const {Delete} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  return <button onClick={() => Delete(index)} {...props}> \r\n    {!children ? 'x' : children} \r\n  </button> \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx",[],["319","320"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx",["321","322"],"import {useEffect, useRef} from 'react'; \r\n\r\nexport function useUpdate(callback:() => void, changeling:any) { \r\n  const flagFirstRender = useRef(true); \r\n  \r\n  useEffect(() => { \r\n    if(flagFirstRender.current) { \r\n      flagFirstRender.current = false; \r\n      return; \r\n    } \r\n    callback(); \r\n  }, [JSON.stringify(changeling)]); \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",["323","324","325","326","327","328","329"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {IsEmpty, GetValueAt, SetValueAt} from '../../reusable/_utils'; \r\nimport {PatientProfile} from './components/patientprofile.component'; \r\nimport {Questionnaire} from '../questionnaire/questionnaire.page'; \r\nimport {LoadPatients } from './components/loadpatient.component'; \r\nimport { CrudContext } from '../../reusable/_crud';\r\n//import {RamqIdentification} from './components/ramqidentitication.component';\r\n\r\n\r\n\r\n// PATIENT PAGE =================================\r\ninterface IPatientProfileContext { \r\n  patientProfile: IEntry; \r\n  setPatientProfile: React.Dispatch<IEntry>; \r\n} \r\nexport const PatientProfileContext = React.createContext({} as IPatientProfileContext); \r\nexport default function Patient() { \r\n  const {activeCollection, setActiveCollection, GetICollections} = useContext(CrudContext); \r\n  const [patientProfile, setPatientProfile] = useState({} as IEntry); \r\n\r\n\r\n  useEffect(() => {\r\n    if(activeCollection.accessor !== 'patients') { \r\n      const [patients] = GetICollections(['patients']); \r\n      if(patients) \r\n        setActiveCollection(patients); \r\n    } \r\n  }, [activeCollection]); \r\n\r\n  /*useEffect(() => {\r\n    if(activeCollection.accessor !== 'patients') {\r\n\r\n      const [patients] = GetICollections(['patients']); \r\n      if(patients) \r\n        setActiveCollection(patients); \r\n    } \r\n  }, [activeCollection.accessor]) */\r\n  \r\n\r\n  const context = {patientProfile, setPatientProfile}; \r\n  return <PatientProfileContext.Provider value={context} > \r\n    <h2>Patient</h2>\r\n    {activeCollection.accessor}\r\n  </PatientProfileContext.Provider> \r\n} \r\n\r\n/*\r\n{!IsEmpty(activeCollection) && IsEmpty(patientProfile) && <PatientProfile/>} \r\n      {!IsEmpty(patientProfile) && <Questionnaire/>} \r\n*/","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx",["330"],"import React, { useEffect, useState } from 'react'; \r\nimport {Input, InputArray, Select} from '../../_input'; \r\nimport {GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\nimport {useUpdate} from '../../_useupdate'; \r\n\r\n\r\n\r\n// Reader =======================================\r\ninterface IEditor{ \r\n  ifield:IField; \r\n  value:any; \r\n  setValue:React.Dispatch<any>; \r\n  options?:IOption[]; \r\n} \r\nexport function Editor({ ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) { \r\n  const {defaultValue, type} = ifield; \r\n  const _options = options ?? [] as IOption[]; \r\n  const [_value, _setValue] = useState(value); \r\n\r\n  // synchronize from parent value\r\n  useEffect(() => { \r\n    if(value !== _value) \r\n      _setValue(value); \r\n  }, [value]); \r\n\r\n  // synchronize to parent value \r\n  useUpdate(() => {setValue(_value)},_value); \r\n\r\n  // Edit Many\r\n  if(ifield.isArray) {\r\n    if(IsEmpty(options)) \r\n      return <InputArray {...{defaultValue, type, values:_value, setValues:_setValue}} /> \r\n    return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:true}} /> \r\n  }\r\n  // Edit Mixed\r\n  if(ifield.isMixed) \r\n    return <EditMixed {...{ifield, value, setValue}} /> \r\n\r\n  // Edit One\r\n  if(IsEmpty(options)) \r\n    return <Input {...{value:_value, setValue:_setValue, type, defaultValue}} /> \r\n  return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:false}} /> \r\n} \r\n\r\n\r\nfunction EditMixed ({ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) {\r\n  return <span>{JSON.stringify(value)}</span>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx",["331","332"],"import React, { useState } from 'react'; \r\nimport {Reader, Editor, Select} from '../reusable/_input'; \r\nimport {GetValueAt, SetValueAt} from '../reusable/_utils'; \r\n\r\n\r\nconst numField:IField = {accessor:'num', label:'Accessor', type:'number', defaultValue:0, options:{}} as IField; \r\nconst strField:IField = {accessor:'str', label:'Accessor', type:'string', defaultValue:'', options:{}} as IField; \r\nconst boolField:IField = {accessor:'bool', label:'Accessor', type:'boolean', defaultValue:false, options:{}} as IField; \r\n\r\nconst numOptions:IOption[] = [ \r\n  {value: 0, label:'value 0'}, \r\n  {value: 1, label:'value 1'}, \r\n  {value: 2, label:'value 2'}, \r\n  {value: 3, label:'value 3'}, \r\n] \r\n\r\nconst strOptions:IOption[] = [ \r\n  {value: 'a', label:'value a'}, \r\n  {value: 'b', label:'value b'}, \r\n  {value: 'c', label:'value c'}, \r\n  {value: 'd', label:'value d'}, \r\n] \r\n\r\nconst boolOptions:IOption[] = [ \r\n  {value: false, label:'female'}, \r\n  {value: true, label:'male'}, \r\n] \r\n\r\nconst testRead:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n  {value: 12, ifield: {...numField}}, \r\n  {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n  {value: 'bababa', ifield:{...strField} }, \r\n  {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n  {value: false, ifield:{...boolField} }, \r\n  {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n  // options\r\n  {value: 2, ifield:{...numField}, options:numOptions }, \r\n  {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n  {value: 'b', ifield:{...strField}, options:strOptions}, \r\n  {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n  {value: false, ifield:{...boolField}, options:strOptions}, \r\n  {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n] \r\n\r\n  /*const testEditor:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n    {value: 12, ifield: {...numField}}, \r\n    {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n    {value: 'bababa', ifield:{...strField} }, \r\n    {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n    {value: false, ifield:{...boolField} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n    // options\r\n    {value: 2, ifield:{...numField}, options:numOptions }, \r\n    {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n    {value: 'b', ifield:{...strField}, options:strOptions}, \r\n    {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n    {value: false, ifield:{...boolField, options:strOptions} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n  ] */\r\n\r\n/*\r\nfunction useStateAt(_value:any) { \r\n  const [value, setValue] = useState(_value); \r\n  const ValueAt = (keys?:any[], newValue?:any) => { \r\n    if(newValue && JSON.stringify(ValueAt(keys)) !== newValue) \r\n      return SetValueAt(value, newValue, keys); \r\n    return GetValueAt(value, keys); \r\n  } \r\n  return ValueAt; \r\n} \r\n  \r\nexport function TestValueAt() { \r\n  const VALUE = {a:[15,46], b:[96,45]} \r\n  const valueAt = useStateAt(VALUE); \r\n  const value = valueAt(['a',0]); \r\n  const setValue = valueAt(['a',0]); \r\n\r\n  return <div> \r\n    <Editor {...{value}} /> \r\n  </div> \r\n} */\r\n\r\n\r\n// Test select when value is not in the avaible options */ \r\nexport function TestSelect () { \r\n  const [value, setValue] = useState(['-1']); \r\n  const options = [ \r\n    {value:'0', label:'option 0'}, \r\n    {value:'1', label:'option 1'}, \r\n    {value:'2', label:'option 2'}, \r\n    {value:'3', label:'option 3'} \r\n  ] \r\n\r\n  return <Select {...{value, setValue, options, multiple:true}} /> \r\n} \r\n\r\nexport function TestEditors() {\r\n  \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <TestEditor {...e} /></div> \r\n    })} \r\n    <br/>\r\n    asdsadsadas\r\n    <br/>\r\n  </div> \r\n}\r\n\r\n\r\nexport function TestEditor({ifield, options, ...props}:{value:any, ifield:IField, options?:IOption[]}) { \r\n  const [value, setValue] = useState(props.value); \r\n  return <div> \r\n    <div>{JSON.stringify(value)}</div> \r\n    <Editor {...{ifield, value, setValue, options}} /> \r\n    <br/>\r\n  </div>\r\n}\r\n\r\n\r\nexport function TestReader() { \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <Reader {...e} /></div> \r\n    })} \r\n  </div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx",["333","334"],"import React, {useContext} from 'react'; \r\nimport {CrudContext} from '../../reusable/_crud'; \r\nimport {Arrx} from '../../reusable/_arrx'; \r\n\r\nimport '../../css/feedback.css'; \r\n\r\n\r\n// Feedback =====================================\r\nexport function FeedBack() { \r\n  const {state} = useContext(CrudContext); \r\n\r\n  return <div> \r\n    {!state.ready && <span>LOADING ... </span>} \r\n    {state.ready && <span>Ready </span>} \r\n    {state.ready && !state.success && 'an errors occured'} \r\n  </div> \r\n} \r\n\r\nfunction CrudFeedBack() { \r\n  const {state} = useContext(CrudContext); \r\n  // assumes state is ready and successful \r\n  const responses = state.response as ICrudResponse[]; // ICrudResponse[] \r\n  \r\n  return <div> \r\n    #Responses : {responses.length} \r\n  </div> \r\n  /*{actionType, success, data, err} \r\n  \r\n  const successMsg:any = { \r\n    create:'Creation succeed', \r\n    update:'Update succeed', \r\n    delete:'Deletion succeed', \r\n  } \r\n  const errorMsg:any = { \r\n    create:'Creation failed ', \r\n    update:'Update failed', \r\n    delete:'Deletion failed', \r\n  } \r\n\r\n  const className = success ? 'success' : 'failure'; \r\n\r\n  return <div className={className}> \r\n    <div>{success ? successMsg[actionType] : errorMsg[actionType]}</div> \r\n    {!success && <Arrx {...{values:(err)}} />} \r\n    </div> */\r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx",["335","336"],"import React, {useContext} from 'react'; \r\nimport {DaoContext, EActionType} from '../../../reusable/_dao'; \r\n\r\nimport {Rows, Row, RowContext, Cells, Cell, CellContext} from '../../../reusable/_tablr'; \r\nimport {CreateBtn, DeleteBtn, UpdateBtn} from './crudbtn.component'; \r\nimport {CellRender} from './cellrenderer.component';\r\n\r\n\r\n\r\nexport function InlineUpdateDelete({page, cols, colBtn}:{page:number[], cols:IField[], colBtn:IField}) { \r\n  return <Rows {...{rows:page}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <CellRender/> \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <UpdateBtn/><DeleteBtn/> \r\n    </Cell> \r\n  </Rows> \r\n} \r\n\r\nexport function InlineCreate({cols, colBtn}:{cols:IField[], colBtn:IField}) { \r\n  const {activeMode} = useContext(DaoContext); \r\n  const isCreate = activeMode === EActionType.CREATE; \r\n\r\n  return <Row {...{row:-1}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <span></span>\r\n      {isCreate && <CellRender/> } \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <CreateBtn/> \r\n    </Cell> \r\n  </Row> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx",["337"],"import React, {useContext} from 'react'; \r\nimport {RowContext, TablrContext} from '../../../reusable/_tablr'; \r\nimport {CrudContext} from '../../../reusable/_crud'; \r\nimport {EActionType} from '../../../reusable/_dao'; \r\n\r\n\r\n\r\n// Create .......................................\r\nexport function CreateBtn() { \r\n  const {activeCollection:{accessor}, Create} = useContext(CrudContext); \r\n  const action = (entry:any) => Create(accessor, entry); \r\n\r\n  const mode = EActionType.CREATE; \r\n  const labels = {affirm:'Create', confirm:'Confirm creation', cancel:'Cancel creation'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Update .......................................\r\nexport function UpdateBtn() { \r\n  const {activeCollection:{accessor}, Update} = useContext(CrudContext);\r\n  const action = (entry:any) => Update(accessor, entry); \r\n\r\n  const mode = EActionType.UPDATE; \r\n  const labels = {affirm:'Update', confirm:'Confirm update', cancel:'Cancel update'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Delete .......................................\r\nexport function DeleteBtn() { \r\n  const {activeCollection:{accessor}, Delete} = useContext(CrudContext);\r\n  const action = (entry:any) => Delete(accessor, entry); \r\n\r\n  const mode = EActionType.DELETE; \r\n  const labels = {affirm:'Delete', confirm:'Confirm deletion', cancel:'Cancel deletion'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n\r\n\r\n// CRUD BTN =====================================\r\ninterface CrudBtn { \r\n  mode: EActionType; \r\n  labels:{ \r\n    affirm:string, \r\n    confirm:string, \r\n    cancel:string, \r\n  }; \r\n  action:(entry:any)=>Promise<void>; \r\n} \r\nfunction CrudBtn ({mode, labels, action}:CrudBtn) { \r\n  const {activeEntry, activeMode, SetActive, ResetActive, IsActive} = useContext(CrudContext); \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n  const id = datas[row] ? datas[row]?._id: ''; \r\n\r\n  const isMode = activeMode === mode; \r\n\r\n  const Affirm = () => { \r\n    SetActive(id, mode); \r\n  } \r\n  const Cancel = () => { \r\n    ResetActive(); \r\n  }; \r\n  const Confirm = async () => { \r\n    await action(activeEntry); \r\n    Cancel(); \r\n  } \r\n\r\n  return <span> \r\n    {IsActive(id) && isMode && <button onClick={Confirm}>{labels.confirm}</button>} \r\n    {IsActive(id) && isMode && <button onClick={Cancel}>{labels.cancel}</button>} \r\n    {!IsActive(id) && <button onClick={Affirm}>{labels.affirm}</button>} \r\n  </span> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx",["338"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\loadpatient.component.tsx",["339","340"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\loadquestionnaire.component.tsx",["341","342"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\displayquestion.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaire.utils.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\paging.component.tsx",["343","344","345"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts",["346"],"import {useMemo} from 'react'; \r\nimport {useLoader, IState} from '../_useloader'; \r\nimport {DAO} from './dao.class'; \r\n\r\n\r\nexport enum EActionType { \r\n  CREATE = 'create', \r\n  READ = 'read', \r\n  UPDATE = 'update', \r\n  DELETE = 'delete', \r\n}\r\n\r\n\r\n\r\n// USE DAO ======================================\r\nexport interface IUseDao{ \r\n  state:IState; \r\n\r\n  // Get collections, entry, fields data \r\n  GetICollections:(accessors?:string[]) => ICollection[]; \r\n  GetIFields:(accessor:string, fields?:string[]) => IField[]; \r\n  GetIEntries:(accessor:string, ids?:string[]) => IEntry[]; \r\n  GetDefaultIEntry:(accessor:string) => IEntry; \r\n  \r\n  // Get foreign elements\r\n  GetForeignElements: (ifield:IField) => {foreignCollection:ICollection|undefined, abbrevField:IField|undefined}, \r\n\r\n  // Ge options \r\n  GetIOptions: (ifield:IField) => IOption[]; \r\n\r\n  // load remote collections. \r\n  Collections:(accessors:string[]) => Promise<void>; \r\n\r\n  // Crud functionalities. \r\n  Create: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n  Read: (accessor:string, id?:string[]) => Promise<void>; \r\n  Update: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n  Delete: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n} \r\n\r\n\r\n\r\n// USE DAO ======================================\r\nexport function useDao(dao:DAO):IUseDao { \r\n  // Hooks \r\n  const Dao = useMemo(() => dao, []); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const GetICollections = (accessors?:string[]) => Dao.GetICollections(accessors); \r\n  const GetIFields = (accessor:string, fields?:string[]) => Dao.GetIFields(accessor, fields); \r\n  const GetIEntries = (accessor:string, ids?:string[]) => Dao.GetIEntries(accessor, ids); \r\n  const GetDefaultIEntry = (accessor:string) => Dao.GetDefaultIEntry(accessor); \r\n  // Get foreign elements\r\n  const GetForeignElements = (ifield:IField) => Dao.GetForeignElements(ifield); \r\n  // Get options \r\n  const GetIOptions = (ifield:IField) => Dao.GetIOptions(ifield); \r\n\r\n  // Collections \r\n  const Collections = async (accessors:string[]) => \r\n    Load(() => Dao.Collections(accessors)); \r\n\r\n  // Crud functionalities \r\n  // async Validate ... \r\n  // async Ids ... \r\n  const Create = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Create(accessor, entries)); \r\n  const Read = async (accessor:string, ids?:string[]) => \r\n    Load(() => Dao.Read(accessor, ids)); \r\n  const Update = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Update(accessor, entries)); \r\n  const Delete = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Delete(accessor, entries)); \r\n\r\n  return { \r\n    state, \r\n    GetICollections, GetIFields, GetIEntries, GetDefaultIEntry, \r\n    GetForeignElements, GetIOptions, \r\n    Collections, Create, Read, Update, Delete \r\n  }; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudmongoose.class.ts",["347"],"import axios from 'axios'; \r\nimport {ParseCollection} from './mongooseparser.utils'; \r\n\r\n\r\n// Crud Mongoose =======================================\r\nexport class CrudMongoose { \r\n  public baseUrl:string = ''; \r\n\r\n  constructor(baseUrl:string) { \r\n    this.baseUrl = baseUrl; \r\n  }\r\n\r\n  // Access -----------------------------------------------\r\n  public async Access() { \r\n    return await axios.get(this.baseUrl); \r\n  } \r\n\r\n  /* \r\n  PUT ...api/collections \r\n    req.body => accessors:string[] \r\n    res:ICrudResponse[] \r\n  */ \r\n  // Collections ..........................................\r\n  public async Collections(accessors:string[]): Promise<ICrudResponse[]> { \r\n    const axiosResponses = (await axios.put(this.baseUrl+'collections/', accessors)).data as ICrudResponse[]; \r\n    return axiosResponses.map( r => { \r\n      const parsedCollection = ParseCollection(r.data); \r\n      return {...r, data:parsedCollection} as ICrudResponse; \r\n    }); \r\n  } \r\n\r\n  // Validate .............................................\r\n  public async Validate(accessor:string, entries:IEntry[]) { \r\n    return await axios.put(this.baseUrl+'validate/'+accessor, entries); \r\n  } \r\n\r\n  // Ids ..................................................\r\n  public async Ids(accessor:string): Promise<string[]>{ \r\n    return (await axios.get(this.baseUrl+'ids/'+accessor)).data; \r\n  } \r\n\r\n\r\n  //?? public async CreateUpdate ?? \r\n\r\n\r\n  // Create ...............................................\r\n  public async Create(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toCreate = entries.map(e => { \r\n      const {_id, _v, ...data} = e; \r\n      return data; \r\n    }); \r\n    return (await axios.put(this.baseUrl+'create/'+accessor, toCreate)).data; \r\n  } \r\n\r\n  // ICrudResponse ?? or IEntry ??\r\n  // Read .................................................\r\n  public async Read(accessor:string, ids?:string[]): Promise<ICrudResponse[]> {\r\n    return (await axios.put(this.baseUrl+'read/'+accessor, ids)).data; \r\n  }\r\n\r\n  // Update ...............................................\r\n  public async Update(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    return (await axios.put(this.baseUrl+'update/'+accessor, entries)).data; \r\n  }\r\n\r\n  // Delete ...............................................\r\n  /* Sends an array of objects with the only property being '_id' ... [{_id}] */\r\n  public async Delete(modelName:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toDelete = entries.map(e => { \r\n      const {_id, ...data} = e; \r\n      return {_id}; \r\n    }); \r\n    return (await axios.put(this.baseUrl+'delete/'+modelName, toDelete)).data; \r\n  } \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testcrud\\testcrud.experiment.tsx",["348"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_crud.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\crud\\useactive.hook.tsx",["349","350"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {IUseDao, useDao, ICrud, DAO, DaoContext} from '../_dao'; \r\nimport {CrudMongoose} from '../_mongooseparser'; \r\n\r\n\r\n\r\n// ICrudContext ------------------------------------------- \r\ninterface ICrudContext extends IUseDao { \r\n  activeCollection: ICollection; \r\n  setActiveCollection: React.Dispatch<ICollection>; \r\n  activeEntry: IEntry; \r\n  setActiveEntry: React.Dispatch<IEntry>; \r\n  activeMode: string; \r\n  setActiveMode: React.Dispatch<string>; \r\n  ResetActive: () => void, \r\n  SetActive: (id:string, mode:string) => void, \r\n  IsActive: (id:string) => boolean; \r\n} \r\nexport const CrudContext = React.createContext({} as ICrudContext); \r\n\r\n\r\n\r\n// CrudContexter ========================================== \r\nexport function CrudContexter({baseUrl, children}:React.PropsWithChildren<{baseUrl:string}>) { \r\n  const dao = new DAO(new CrudMongoose(baseUrl) as ICrud); \r\n  const usedao = useDao(dao); \r\n  const useactive = useActive(usedao); \r\n  const context = {...usedao, ...useactive}; \r\n  return <CrudContext.Provider value={context} > \r\n    {children} \r\n  </CrudContext.Provider> \r\n} \r\n\r\n\r\n\r\n// UseCrud ================================================ \r\nexport function useActive(useDao:IUseDao) { \r\n  const [activeCollection, setActiveCollection] = useState({} as ICollection); \r\n\r\n  const [activeEntry, setActiveEntry] = useState({} as IEntry); \r\n  const [activeMode, setActiveMode] = useState('read'); \r\n\r\n  useEffect(() => { \r\n    ResetActive(); \r\n  }, [activeCollection]); \r\n\r\n  function ResetActive() { \r\n    setActiveEntry({} as IEntry); \r\n    setActiveMode('read'); \r\n  } \r\n\r\n  function SetActive(id:string, mode:string) { \r\n    const [entry] = useDao.GetIEntries(activeCollection?.accessor, [id]); \r\n    const defaultEntry = useDao.GetDefaultIEntry(activeCollection?.accessor); \r\n    setActiveEntry(entry ?? defaultEntry); \r\n    setActiveMode(mode); \r\n  }\r\n\r\n  function IsActive(id:string):boolean { \r\n    return id === activeEntry?._id; \r\n  } \r\n\r\n  return {activeCollection, setActiveCollection, \r\n    activeEntry, setActiveEntry, \r\n    activeMode, setActiveMode, \r\n    ResetActive, SetActive, IsActive \r\n  }; \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\predloader.component.tsx",["351"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx",[],{"ruleId":"352","replacedBy":"353"},{"ruleId":"354","replacedBy":"355"},{"ruleId":"356","severity":1,"message":"357","line":20,"column":6,"nodeType":"358","endLine":20,"endColumn":8,"suggestions":"359"},{"ruleId":"352","replacedBy":"353"},{"ruleId":"354","replacedBy":"355"},{"ruleId":"360","severity":1,"message":"361","line":65,"column":12,"nodeType":"362","messageId":"363","endLine":65,"endColumn":13},{"ruleId":"352","replacedBy":"364"},{"ruleId":"354","replacedBy":"365"},{"ruleId":"366","severity":1,"message":"367","line":62,"column":37,"nodeType":"368","messageId":"369","endLine":62,"endColumn":47},{"ruleId":"352","replacedBy":"370"},{"ruleId":"354","replacedBy":"371"},{"ruleId":"360","severity":1,"message":"372","line":4,"column":9,"nodeType":"362","messageId":"363","endLine":4,"endColumn":15},{"ruleId":"373","severity":1,"message":"374","line":34,"column":22,"nodeType":"375","messageId":"376","endLine":34,"endColumn":24},{"ruleId":"373","severity":1,"message":"374","line":34,"column":47,"nodeType":"375","messageId":"376","endLine":34,"endColumn":49},{"ruleId":"360","severity":1,"message":"377","line":1,"column":16,"nodeType":"362","messageId":"363","endLine":1,"endColumn":26},{"ruleId":"373","severity":1,"message":"374","line":28,"column":20,"nodeType":"375","messageId":"376","endLine":28,"endColumn":22},{"ruleId":"373","severity":1,"message":"374","line":28,"column":36,"nodeType":"375","messageId":"376","endLine":28,"endColumn":38},{"ruleId":"360","severity":1,"message":"378","line":116,"column":12,"nodeType":"362","messageId":"363","endLine":116,"endColumn":22},{"ruleId":"352","replacedBy":"379"},{"ruleId":"354","replacedBy":"380"},{"ruleId":"352","replacedBy":"381"},{"ruleId":"354","replacedBy":"382"},{"ruleId":"360","severity":1,"message":"383","line":3,"column":43,"nodeType":"362","messageId":"363","endLine":3,"endColumn":51},{"ruleId":"360","severity":1,"message":"384","line":2,"column":15,"nodeType":"362","messageId":"363","endLine":2,"endColumn":26},{"ruleId":"360","severity":1,"message":"385","line":2,"column":38,"nodeType":"362","messageId":"363","endLine":2,"endColumn":45},{"ruleId":"360","severity":1,"message":"386","line":2,"column":63,"nodeType":"362","messageId":"363","endLine":2,"endColumn":75},{"ruleId":"360","severity":1,"message":"387","line":2,"column":77,"nodeType":"362","messageId":"363","endLine":2,"endColumn":89},{"ruleId":"356","severity":1,"message":"388","line":44,"column":6,"nodeType":"358","endLine":44,"endColumn":37,"suggestions":"389"},{"ruleId":"356","severity":1,"message":"390","line":44,"column":7,"nodeType":"391","endLine":44,"endColumn":36},{"ruleId":"352","replacedBy":"392"},{"ruleId":"354","replacedBy":"393"},{"ruleId":"356","severity":1,"message":"394","line":12,"column":6,"nodeType":"358","endLine":12,"endColumn":34,"suggestions":"395"},{"ruleId":"356","severity":1,"message":"390","line":12,"column":7,"nodeType":"391","endLine":12,"endColumn":33},{"ruleId":"360","severity":1,"message":"396","line":2,"column":9,"nodeType":"362","messageId":"363","endLine":2,"endColumn":16},{"ruleId":"360","severity":1,"message":"397","line":2,"column":18,"nodeType":"362","messageId":"363","endLine":2,"endColumn":28},{"ruleId":"360","severity":1,"message":"398","line":2,"column":30,"nodeType":"362","messageId":"363","endLine":2,"endColumn":40},{"ruleId":"360","severity":1,"message":"399","line":3,"column":9,"nodeType":"362","messageId":"363","endLine":3,"endColumn":23},{"ruleId":"360","severity":1,"message":"400","line":4,"column":9,"nodeType":"362","messageId":"363","endLine":4,"endColumn":22},{"ruleId":"360","severity":1,"message":"401","line":5,"column":9,"nodeType":"362","messageId":"363","endLine":5,"endColumn":21},{"ruleId":"356","severity":1,"message":"402","line":28,"column":6,"nodeType":"358","endLine":28,"endColumn":24,"suggestions":"403"},{"ruleId":"356","severity":1,"message":"404","line":24,"column":6,"nodeType":"358","endLine":24,"endColumn":13,"suggestions":"405"},{"ruleId":"360","severity":1,"message":"397","line":3,"column":9,"nodeType":"362","messageId":"363","endLine":3,"endColumn":19},{"ruleId":"360","severity":1,"message":"398","line":3,"column":21,"nodeType":"362","messageId":"363","endLine":3,"endColumn":31},{"ruleId":"360","severity":1,"message":"406","line":3,"column":9,"nodeType":"362","messageId":"363","endLine":3,"endColumn":13},{"ruleId":"360","severity":1,"message":"407","line":19,"column":10,"nodeType":"362","messageId":"363","endLine":19,"endColumn":22},{"ruleId":"360","severity":1,"message":"408","line":4,"column":20,"nodeType":"362","messageId":"363","endLine":4,"endColumn":30},{"ruleId":"360","severity":1,"message":"409","line":4,"column":45,"nodeType":"362","messageId":"363","endLine":4,"endColumn":56},{"ruleId":"410","severity":1,"message":"411","line":50,"column":10,"nodeType":"362","messageId":"412","endLine":50,"endColumn":17},{"ruleId":"360","severity":1,"message":"413","line":9,"column":9,"nodeType":"362","messageId":"363","endLine":9,"endColumn":15},{"ruleId":"360","severity":1,"message":"414","line":3,"column":9,"nodeType":"362","messageId":"363","endLine":3,"endColumn":17},{"ruleId":"356","severity":1,"message":"415","line":20,"column":6,"nodeType":"358","endLine":20,"endColumn":8,"suggestions":"416"},{"ruleId":"360","severity":1,"message":"417","line":11,"column":10,"nodeType":"362","messageId":"363","endLine":11,"endColumn":21},{"ruleId":"356","severity":1,"message":"418","line":31,"column":6,"nodeType":"358","endLine":31,"endColumn":8,"suggestions":"419"},{"ruleId":"360","severity":1,"message":"420","line":9,"column":10,"nodeType":"362","messageId":"363","endLine":9,"endColumn":17},{"ruleId":"360","severity":1,"message":"421","line":33,"column":28,"nodeType":"362","messageId":"363","endLine":33,"endColumn":36},{"ruleId":"360","severity":1,"message":"422","line":33,"column":39,"nodeType":"362","messageId":"363","endLine":33,"endColumn":45},{"ruleId":"356","severity":1,"message":"423","line":46,"column":34,"nodeType":"358","endLine":46,"endColumn":36,"suggestions":"424"},{"ruleId":"360","severity":1,"message":"425","line":70,"column":22,"nodeType":"362","messageId":"363","endLine":70,"endColumn":26},{"ruleId":"356","severity":1,"message":"426","line":18,"column":6,"nodeType":"358","endLine":18,"endColumn":8,"suggestions":"427"},{"ruleId":"360","severity":1,"message":"377","line":1,"column":16,"nodeType":"362","messageId":"363","endLine":1,"endColumn":26},{"ruleId":"360","severity":1,"message":"428","line":2,"column":38,"nodeType":"362","messageId":"363","endLine":2,"endColumn":48},{"ruleId":"356","severity":1,"message":"426","line":11,"column":6,"nodeType":"358","endLine":11,"endColumn":8,"suggestions":"429"},"no-native-reassign",["430"],"no-negated-in-lhs",["431"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setActiveCollection'. Either include it or remove the dependency array.","ArrayExpression",["432"],"@typescript-eslint/no-unused-vars","'a' is assigned a value but never used.","Identifier","unusedVar",["430"],["431"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression",["430"],["431"],"'IsNull' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'useContext' is defined but never used.","'collection' is assigned a value but never used.",["430"],["431"],["430"],["431"],"'SetWidth' is defined but never used.","'ArrxContext' is defined but never used.","'Element' is defined but never used.","'ElementIndex' is defined but never used.","'ElementValue' is defined but never used.","React Hook useEffect has missing dependencies: 'index' and 'values'. Either include them or remove the dependency array.",["433"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression",["430"],["431"],"React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["434"],"'IsEmpty' is defined but never used.","'GetValueAt' is defined but never used.","'SetValueAt' is defined but never used.","'PatientProfile' is defined but never used.","'Questionnaire' is defined but never used.","'LoadPatients' is defined but never used.","React Hook useEffect has missing dependencies: 'GetICollections' and 'setActiveCollection'. Either include them or remove the dependency array.",["435"],"React Hook useEffect has a missing dependency: '_value'. Either include it or remove the dependency array.",["436"],"'Arrx' is defined but never used.","'CrudFeedBack' is defined but never used.","'RowContext' is defined but never used.","'CellContext' is defined but never used.","@typescript-eslint/no-redeclare","'CrudBtn' is already defined.","redeclared","'Reader' is defined but never used.","'FeedBack' is defined but never used.","React Hook useEffect has a missing dependency: 'GetPatient'. Either include it or remove the dependency array.",["437"],"'Collections' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetQuestionnaire'. Either include it or remove the dependency array.",["438"],"'answers' is assigned a value but never used.","'accessor' is assigned a value but never used.","'Create' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'dao'. Either include it or remove the dependency array.",["439"],"'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'Collections'. Either include it or remove the dependency array.",["440"],"'DaoContext' is defined but never used.",["441"],"no-global-assign","no-unsafe-negation",{"desc":"442","fix":"443"},{"desc":"444","fix":"445"},{"desc":"446","fix":"447"},{"desc":"448","fix":"449"},{"desc":"450","fix":"451"},{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},{"desc":"458","fix":"460"},"Update the dependencies array to be: [setActiveCollection]",{"range":"461","text":"462"},"Update the dependencies array to be: [index, values]",{"range":"463","text":"464"},"Update the dependencies array to be: [callback]",{"range":"465","text":"466"},"Update the dependencies array to be: [GetICollections, activeCollection, setActiveCollection]",{"range":"467","text":"468"},"Update the dependencies array to be: [_value, value]",{"range":"469","text":"470"},"Update the dependencies array to be: [GetPatient]",{"range":"471","text":"472"},"Update the dependencies array to be: [GetQuestionnaire]",{"range":"473","text":"474"},"Update the dependencies array to be: [dao]",{"range":"475","text":"476"},"Update the dependencies array to be: [Collections]",{"range":"477","text":"478"},{"range":"479","text":"478"},[663,665],"[setActiveCollection]",[1560,1591],"[index, values]",[304,332],"[callback]",[1158,1176],"[GetICollections, activeCollection, setActiveCollection]",[762,769],"[_value, value]",[594,596],"[GetPatient]",[1036,1038],"[GetQuestionnaire]",[1369,1371],"[dao]",[618,620],"[Collections]",[392,394]]