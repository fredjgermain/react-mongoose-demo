[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\valuerenderer.component.tsx":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\loadpatient.component.tsx":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\loadquestionnaire.component.tsx":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx":"59","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\displayquestion.component.tsx":"60","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaire.utils.tsx":"61","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\paging.component.tsx":"62"},{"size":600,"mtime":1609529670659,"results":"63","hashOfConfig":"64"},{"size":551,"mtime":1612048926240,"results":"65","hashOfConfig":"64"},{"size":362,"mtime":499162500000,"results":"66","hashOfConfig":"64"},{"size":225,"mtime":1609475507334,"results":"67","hashOfConfig":"64"},{"size":1391,"mtime":1611953057920,"results":"68","hashOfConfig":"64"},{"size":117,"mtime":1609476049273,"results":"69","hashOfConfig":"64"},{"size":496,"mtime":1609883323259,"results":"70","hashOfConfig":"64"},{"size":1495,"mtime":1611868499075,"results":"71","hashOfConfig":"64"},{"size":3330,"mtime":1611094858686,"results":"72","hashOfConfig":"64"},{"size":2832,"mtime":1612037836804,"results":"73","hashOfConfig":"64"},{"size":1900,"mtime":1612056279593,"results":"74","hashOfConfig":"64"},{"size":3091,"mtime":1612034793271,"results":"75","hashOfConfig":"64"},{"size":1780,"mtime":1611276492206,"results":"76","hashOfConfig":"64"},{"size":2274,"mtime":1611360455578,"results":"77","hashOfConfig":"64"},{"size":1473,"mtime":1611094858490,"results":"78","hashOfConfig":"64"},{"size":462,"mtime":1611094858513,"results":"79","hashOfConfig":"64"},{"size":1042,"mtime":1611094858511,"results":"80","hashOfConfig":"64"},{"size":982,"mtime":1611094858504,"results":"81","hashOfConfig":"64"},{"size":8182,"mtime":1612045281193,"results":"82","hashOfConfig":"64"},{"size":3573,"mtime":1611862428881,"results":"83","hashOfConfig":"64"},{"size":425,"mtime":1611094858586,"results":"84","hashOfConfig":"64"},{"size":313,"mtime":1611186041859,"results":"85","hashOfConfig":"64"},{"size":336,"mtime":1611094858220,"results":"86","hashOfConfig":"64"},{"size":862,"mtime":1612037300770,"results":"87","hashOfConfig":"64"},{"size":112,"mtime":1611094858253,"results":"88","hashOfConfig":"64"},{"size":1301,"mtime":1611094858561,"results":"89","hashOfConfig":"64"},{"size":688,"mtime":1611105433287,"results":"90","hashOfConfig":"64"},{"size":1330,"mtime":1611105734495,"results":"91","hashOfConfig":"64"},{"size":124,"mtime":1611105257047,"results":"92","hashOfConfig":"64"},{"size":233,"mtime":1611094858166,"results":"93","hashOfConfig":"64"},{"size":3111,"mtime":1612033703810,"results":"94","hashOfConfig":"64"},{"size":1385,"mtime":1611867633558,"results":"95","hashOfConfig":"64"},{"size":510,"mtime":1611452000844,"results":"96","hashOfConfig":"64"},{"size":1532,"mtime":1611265998385,"results":"97","hashOfConfig":"64"},{"size":2116,"mtime":1611102160553,"results":"98","hashOfConfig":"64"},{"size":943,"mtime":1611094858392,"results":"99","hashOfConfig":"64"},{"size":447,"mtime":1611094858232,"results":"100","hashOfConfig":"64"},{"size":4285,"mtime":1611356030017,"results":"101","hashOfConfig":"64"},{"size":1373,"mtime":1611177659474,"results":"102","hashOfConfig":"64"},{"size":107,"mtime":1611094858263,"results":"103","hashOfConfig":"64"},{"size":2743,"mtime":1612048504142,"results":"104","hashOfConfig":"64"},{"size":79,"mtime":1611192421523,"results":"105","hashOfConfig":"64"},{"size":338,"mtime":1611192348931,"results":"106","hashOfConfig":"64"},{"size":1561,"mtime":1612039882452,"results":"107","hashOfConfig":"64"},{"size":231,"mtime":1611094858225,"results":"108","hashOfConfig":"64"},{"size":1927,"mtime":1611534878890,"results":"109","hashOfConfig":"64"},{"size":1598,"mtime":1611522375233,"results":"110","hashOfConfig":"64"},{"size":4408,"mtime":1612040693862,"results":"111","hashOfConfig":"64"},{"size":512,"mtime":1611777771531,"results":"112","hashOfConfig":"64"},{"size":1421,"mtime":1611785745919,"results":"113","hashOfConfig":"64"},{"size":1246,"mtime":1611776071424,"results":"114","hashOfConfig":"64"},{"size":1055,"mtime":1611604553824,"results":"115","hashOfConfig":"64"},{"size":2620,"mtime":1611867980219,"results":"116","hashOfConfig":"64"},{"size":1662,"mtime":1612039062937,"results":"117","hashOfConfig":"64"},{"size":3514,"mtime":1612031037208,"results":"118","hashOfConfig":"64"},{"size":1087,"mtime":1612049795296,"results":"119","hashOfConfig":"64"},{"size":701,"mtime":1611777860845,"results":"120","hashOfConfig":"64"},{"size":1229,"mtime":1611783304558,"results":"121","hashOfConfig":"64"},{"size":736,"mtime":1611785745918,"results":"122","hashOfConfig":"64"},{"size":2673,"mtime":1612053755172,"results":"123","hashOfConfig":"64"},{"size":1292,"mtime":1612049781240,"results":"124","hashOfConfig":"64"},{"size":2462,"mtime":1612054293044,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"ke513i",{"filePath":"129","messages":"130","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"138"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"138"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"138"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"138"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"188"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"193"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"138"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"138"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"214"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"138"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"138"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"138"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"138"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"138"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"138"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"138"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"138"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"138"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"138"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["273","274"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",["275","276","277","278","279","280","281","282"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",["283"],"import React, {useEffect} from 'react'; \r\nimport {useDao, DaoContexter, ICrud, DataAccessObject} from '../../reusable/_dao'; \r\nimport {CrudMongoose} from '../../reusable/_mongooseparser'; \r\nimport {FeedBack} from '../../components/feedback/feedback.component'; \r\nimport {IsEmpty} from '../../reusable/_utils'; \r\n\r\nimport {CollectionSelector} from './components/collectionselector.component'; \r\nimport {AdminTablr} from './components/admintablr.component'; \r\n\r\nimport '../../css/table.css'; \r\n\r\nconst crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n\r\n\r\n// ADMIN PAGE ====================================\r\nexport function Admin() { \r\n  // new RegExp(regex).test(value) \r\n  /*console.log(RegexValidation('', '^[a-zA-Z]{4}[0-9]{8}$')); \r\n  console.log(RegexValidation('caca', '^[a-zA-Z]{4}[0-9]{8}$')); \r\n  console.log(RegexValidation('JEAF23118301', '^[a-zA-Z]{4}[0-9]{8}$')); */\r\n  \r\n  const UseDao = useDao( new DataAccessObject(crud as ICrud) ); \r\n  const {state, activeCollection, Collections} = UseDao; \r\n\r\n  useEffect(() => { \r\n    Collections(['questions','responses', 'forms', 'instructions', 'patients', 'answers']); \r\n  }, []); \r\n\r\n  return <DaoContexter {...{UseDao}} > \r\n    <h1>Admin</h1> \r\n    <FeedBack/> \r\n    {state.ready && state.success && <CollectionSelector /> } \r\n    {!IsEmpty(activeCollection) && <AdminTablr/>} \r\n  </DaoContexter> \r\n}\r\n\r\n\r\n",["284","285"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx",[],["286","287"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["288"],"import {IsEmpty, IsInRange} from '../_utils';\r\n\r\nexport interface IMongooseCollection { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    enum?: any[]; \r\n    abbrev?: boolean; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\n// Parser functions =============================\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\nexport function ParseField(field:IMongooseField):IField { \r\n  const {path, instance, options, $embeddedSchemaType} = field; \r\n  const ifield:IField = {} as IField; \r\n\r\n  ifield.accessor = path ?? ''; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.type = options?.ref ?? $embeddedSchemaType?.instance ?? field.instance.toLowerCase(); \r\n  ifield.isMixed = instance.toLowerCase() === 'mixed'; \r\n  ifield.isEnum = !!options?.enum; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = !!options?.ref; \r\n  ifield.isAbbrev = !!options?.abbrev; \r\n  ifield.validators = GetValidators(field); \r\n  ifield.isRequired = field.options['required'] ?? false; \r\n  ifield.regex = field.options['regex']? field.options['regex']: undefined; \r\n\r\n  ifield.enums = options.enum ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, field.options); \r\n\r\n  return ifield; \r\n} \r\n\r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} \r\n\r\n\r\nfunction GetValidators(field:IMongooseField):IValidator[] { \r\n  const required = (value:any) => { \r\n    return !IsEmpty(value); \r\n  }; \r\n\r\n  const regex = (value:any) => { \r\n    if(field.options['regex']) \r\n      return new RegExp(field.options['regex']).test(value); \r\n    return true; \r\n  } \r\n\r\n  const range = (value:any) => { \r\n    return IsInRange(value, field.options['min'], field.options['max']); \r\n  } \r\n\r\n  let validators:IValidator[] = []; \r\n  if(field.options['required']) \r\n    validators.push(required); \r\n  if(field.options['regex']) \r\n    validators.push(regex); \r\n  if(field.options['min'] || field.options['max']) \r\n    validators.push(range); \r\n  return validators; \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["289","290","291"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull, GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield) => { \r\n      return <Cell key={ifield.accessor} {...{ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const data = datas[row]; \r\n  const value = IsEmpty(data) ? GetDefaultValueFromIField(ifield): datas[row][ifield.accessor]; \r\n  const context = {value, row, ifield} as ICellContext; \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["292","293","294"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts",["295"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts",["296","297"],"import {useEffect, useMemo, useState} from 'react'; \r\nimport {useLoader, IState} from '../_useloader'; \r\nimport {DataAccessObject as IDao} from './dao.class'; \r\n\r\n\r\n\r\nexport enum EActionType { \r\n  CREATE = 'create', \r\n  READ = 'read', \r\n  UPDATE = 'update', \r\n  DELETE = 'delete', \r\n}\r\n\r\n\r\n\r\nexport interface IUseDao{ \r\n  // Get collections, entry, fields data\r\n  GetCollections:(accessors?:string[]) => ICollection[]; \r\n  GetEntry:(accessor:string, id?:string) => IEntry; \r\n  GetIFields:(accessor:string, fieldAccessor?:string[]) => IField[]; \r\n  \r\n  // Get foreign elements, options and values. \r\n  GetForeignElements: (ifield:IField) => {foreignCollection:ICollection|undefined, abbrevField:IField|undefined}, \r\n  GetForeignOptions: (ifield:IField) => IOption[]; \r\n\r\n  state:IState; \r\n\r\n  // Active Collection\r\n  activeCollection:ICollection; \r\n  setActiveCollection:React.Dispatch<ICollection>; \r\n\r\n  // Active Entry. \r\n  activeEntry:IEntry; \r\n  setActiveEntry:React.Dispatch<React.SetStateAction<IEntry>>; \r\n\r\n  // Active mode. \r\n  activeMode:EActionType; \r\n  SetActiveMode:(mode?:EActionType) => void; \r\n\r\n  // load remote collections. \r\n  Collections:(accessors:string[]) => Promise<void>; \r\n\r\n  // Crud functionalities. \r\n  Create: (accessor:string, toCreate:IEntry) => Promise<void>; \r\n  Read: (accessor:string, id?:string[]) => Promise<void>; \r\n  Update: (accessor:string, toUpdate:IEntry) => Promise<void>; \r\n  Delete: (accessor:string, toDelete?:IEntry) => Promise<void>; \r\n} \r\n\r\n// USE DAO ======================================\r\nexport function useDao(dao:IDao):IUseDao { \r\n  const GetCollections = (accessors?:string[]) => \r\n    Dao.GetCollections(accessors); \r\n  \r\n  const GetEntry = (accessor:string, id?:string) => \r\n    Dao.GetEntry(accessor, id); \r\n  \r\n  const GetIFields = (accessor:string, ifieldAccessors?:string[]) => \r\n    Dao.GetIFields(accessor, ifieldAccessors); \r\n  \r\n  const GetForeignElements = (ifield:IField) => Dao.GetForeignElements(ifield); \r\n  const GetForeignOptions = (ifield:IField) => Dao.GetForeignOptions(ifield); \r\n\r\n  // Hooks \r\n  const Dao = useMemo(() => dao, []); \r\n  const {state, Load} = useLoader(); \r\n  const [activeCollection, setActiveCollection] = useState({} as ICollection); \r\n  const [activeEntry, setActiveEntry] = useState(GetEntry(activeCollection.accessor)); \r\n  const [activeMode, setActiveMode] = useState(EActionType.READ); \r\n\r\n  const Collections = async (accessors:string[]) => Load(() => \r\n    Dao.Collections(accessors)); \r\n\r\n  // Crud functionalities\r\n  const Create = async (accessor:string, toCreate:IEntry) => \r\n    Load(() => Dao.Create(accessor, toCreate)); \r\n  const Read = async (accessor:string, ids?:string[]) => \r\n    Load(() => Dao.Read(accessor, ids)); \r\n  const Update = async (accessor:string, toUpdate:IEntry) => \r\n    Load(() => Dao.Update(accessor, toUpdate)); \r\n  const Delete = async (accessor:string, toDelete?:IEntry) => \r\n    Load(() => Dao.Delete(accessor, toDelete)); \r\n\r\n  useEffect(() => { \r\n    const initEntry = GetEntry(activeCollection.accessor); \r\n    //console.log(activeCollection.accessor); \r\n    setActiveEntry(initEntry); \r\n    SetActiveMode(); \r\n  }, [activeCollection]); \r\n\r\n  function SetActiveMode(mode?:EActionType) { \r\n    setActiveMode(mode?? EActionType.READ); \r\n  } \r\n\r\n  return { \r\n    GetEntry, GetCollections, GetIFields, \r\n    GetForeignElements, GetForeignOptions, \r\n    state, \r\n    activeCollection, setActiveCollection, \r\n    activeEntry, setActiveEntry, \r\n    activeMode, SetActiveMode, \r\n    Collections, Create, Read, Update, Delete \r\n  }; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx",[],["298","299"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts",[],["300","301"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx",["302"],"import React from 'react'; \r\n//import CSS from ''\r\nimport {IEvent, IsNull, OnEnter, SetSize, SetWidth, \r\n  GetDefaultValueByType, GetTypeByValue, GetInputType, GetValueFromInput} from '../../_utils'; \r\n\r\n\r\n// INPUT ========================================\r\nexport interface IInput extends React.HTMLAttributes<HTMLInputElement> { \r\n  value:any; \r\n  setValue:any; \r\n  type?:string; \r\n  defaultValue?:any; \r\n  inputType?:string; \r\n  onEnterUp?:() => void; \r\n  width?: number; \r\n  [key:string]:any; \r\n} \r\nexport function Input(\r\n  {\r\n    value, setValue, \r\n    type=GetTypeByValue(value??''), \r\n    defaultValue=GetDefaultValueByType(type??'string'), \r\n    inputType=GetInputType(type??''), \r\n    onEnterUp=() => {}, \r\n    ...props\r\n  }:IInput) \r\n{ \r\n  const onChange = (event:IEvent) => setValue(GetInputValueOrDefault(event, defaultValue)); \r\n  const Value = IsNull(value) ? defaultValue: value; \r\n  const onKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => OnEnter(event, onEnterUp); \r\n\r\n  const width = props.width ?? SetSize(value); \r\n  const style = {width: `${width+2}ch`}; \r\n\r\n  if(type === 'boolean') \r\n    return <input {...{type:inputType, checked:Value, onChange, onKeyUp,  ...props}} /> \r\n  return <input {...{type:inputType, value:Value, onChange, onKeyUp, ...props}} style={style} /> \r\n} \r\n\r\n\r\n// GetValue --------------------------------------\r\nfunction GetInputValueOrDefault (event:IEvent, defaultValue:any) { \r\n  const value = GetValueFromInput(event); \r\n  return IsNull(value) ? defaultValue: value; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx",["303","304","305","306","307","308"],"import React, { useContext, useEffect, useState } from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex, ElementValue} from '../../_arrx'; \r\nimport {Input} from '../../_input'; \r\nimport {IInputArray, IUseInputArray, useInputArray} from './inputarray.hook'; \r\n\r\n\r\nexport const InputArrayContext = React.createContext({} as IUseInputArray); \r\nexport function InputArray({...props}:React.PropsWithChildren<IInputArray>) { \r\n  const context = useInputArray(props); \r\n  const {values} = props; \r\n  \r\n  return <InputArrayContext.Provider value={context} > \r\n    <Arrx {...{values}} > \r\n      <Elements> \r\n        <UpdateElement/> <DeleteBtn/>\r\n        <br/> \r\n      </Elements> \r\n      <CreateElement/>\r\n    </Arrx> \r\n  </InputArrayContext.Provider> \r\n} \r\n\r\n\r\n// Create element =======================================\r\nfunction CreateElement() { \r\n  const {type, defaultValue, Create} = useContext(InputArrayContext); \r\n  const [value, setValue] = useState(defaultValue); \r\n\r\n  const onEnterUp = () => {\r\n    Create(value); \r\n    setValue(() => defaultValue); // reset input to defaultValue after creation. \r\n  }; \r\n  return <Input {...{value, setValue, defaultValue, type, onEnterUp}}  /> \r\n} \r\n\r\n// Update element =======================================\r\nfunction UpdateElement() { \r\n  const {values, type, defaultValue, Update} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n\r\n  const [value, setValue] = useState(values[index]); \r\n  useEffect(() => { \r\n    setValue(values[index]); \r\n  }, [JSON.stringify(values[index])]); \r\n\r\n  const onEnterUp = () => Update(index, value); \r\n  return <Input {...{value, setValue, type, defaultValue, onEnterUp}} />\r\n}\r\n\r\n// Delete Btn ===================================\r\nexport function DeleteBtn({children, ...props}:React.PropsWithChildren<React.ButtonHTMLAttributes<HTMLButtonElement>>) { \r\n  const {Delete} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  return <button onClick={() => Delete(index)} {...props}> \r\n    {!children ? 'x' : children} \r\n  </button> \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx",[],["309","310"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\valuerenderer.component.tsx",["311","312","313","314","315","316","317"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx",["318","319"],"import {useEffect, useRef} from 'react'; \r\n\r\nexport function useUpdate(callback:() => void, changeling:any) { \r\n  const flagFirstRender = useRef(true); \r\n  \r\n  useEffect(() => { \r\n    if(flagFirstRender.current) { \r\n      flagFirstRender.current = false; \r\n      return; \r\n    } \r\n    callback(); \r\n  }, [JSON.stringify(changeling)]); \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",["320","321","322","323","324"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {useDao, DaoContexter, ICrud, DataAccessObject, DaoContext} from '../../reusable/_dao'; \r\nimport {CrudMongoose} from '../../reusable/_mongooseparser'; \r\nimport {IsEmpty, GetValueAt, SetValueAt} from '../../reusable/_utils'; \r\nimport {PatientProfile} from './components/patientprofile.component'; \r\nimport {Questionnaire} from '../questionnaire/questionnaire.page'; \r\nimport {LoadPatients } from './components/loadpatient.component'; \r\n//import {RamqIdentification} from './components/ramqidentitication.component';\r\n\r\nconst crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n\r\n\r\n\r\n\r\n\r\n// PATIENT PAGE =================================\r\ninterface IPatientProfileContext { \r\n  patientProfile: IEntry; \r\n  setPatientProfile: React.Dispatch<IEntry>; \r\n} \r\nexport const PatientProfileContext = React.createContext({} as IPatientProfileContext); \r\nexport function Patient() { \r\n  const UseDao = useDao( new DataAccessObject(crud as ICrud) ); \r\n  const {activeCollection} = UseDao; \r\n  const [patientProfile, setPatientProfile] = useState({} as IEntry); \r\n\r\n  const context = {patientProfile, setPatientProfile}; \r\n  return <DaoContexter {...{UseDao}} > \r\n    <PatientProfileContext.Provider value={context} > \r\n      {IsEmpty(activeCollection) && <LoadPatients/>} \r\n      {!IsEmpty(activeCollection) && IsEmpty(patientProfile) && <PatientProfile/>} \r\n      {!IsEmpty(patientProfile) && <Questionnaire/>} \r\n    </PatientProfileContext.Provider> \r\n  </DaoContexter> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx",["325"],"import React, { useEffect, useState } from 'react'; \r\nimport {Input, InputArray, Select} from '../../_input'; \r\nimport {GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\nimport {useUpdate} from '../../_useupdate'; \r\n\r\n\r\n\r\n// Reader =======================================\r\ninterface IEditor{ \r\n  ifield:IField; \r\n  value:any; \r\n  setValue:React.Dispatch<any>; \r\n  options?:IOption[]; \r\n} \r\nexport function Editor({ ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) { \r\n  const {defaultValue, type} = ifield; \r\n  const _options = options ?? [] as IOption[]; \r\n  const [_value, _setValue] = useState(value); \r\n\r\n  // synchronize from parent value\r\n  useEffect(() => { \r\n    if(value !== _value) \r\n      _setValue(value); \r\n  }, [value]); \r\n\r\n  // synchronize to parent value \r\n  useUpdate(() => {setValue(_value)},_value); \r\n\r\n  // Edit Many\r\n  if(ifield.isArray) {\r\n    if(IsEmpty(options)) \r\n      return <InputArray {...{defaultValue, type, values:_value, setValues:_setValue}} /> \r\n    return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:true}} /> \r\n  }\r\n  // Edit Mixed\r\n  if(ifield.isMixed) \r\n    return <EditMixed {...{ifield, value, setValue}} /> \r\n\r\n  // Edit One\r\n  if(IsEmpty(options)) \r\n    return <Input {...{value:_value, setValue:_setValue, type, defaultValue}} /> \r\n  return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:false}} /> \r\n} \r\n\r\n\r\nfunction EditMixed ({ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) {\r\n  return <span>{JSON.stringify(value)}</span>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx",["326","327"],"import React, { useState } from 'react'; \r\nimport {Reader, Editor, Select} from '../reusable/_input'; \r\nimport {GetValueAt, SetValueAt} from '../reusable/_utils'; \r\n\r\n\r\nconst numField:IField = {accessor:'num', label:'Accessor', type:'number', defaultValue:0, options:{}} as IField; \r\nconst strField:IField = {accessor:'str', label:'Accessor', type:'string', defaultValue:'', options:{}} as IField; \r\nconst boolField:IField = {accessor:'bool', label:'Accessor', type:'boolean', defaultValue:false, options:{}} as IField; \r\n\r\nconst numOptions:IOption[] = [ \r\n  {value: 0, label:'value 0'}, \r\n  {value: 1, label:'value 1'}, \r\n  {value: 2, label:'value 2'}, \r\n  {value: 3, label:'value 3'}, \r\n] \r\n\r\nconst strOptions:IOption[] = [ \r\n  {value: 'a', label:'value a'}, \r\n  {value: 'b', label:'value b'}, \r\n  {value: 'c', label:'value c'}, \r\n  {value: 'd', label:'value d'}, \r\n] \r\n\r\nconst boolOptions:IOption[] = [ \r\n  {value: false, label:'female'}, \r\n  {value: true, label:'male'}, \r\n] \r\n\r\nconst testRead:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n  {value: 12, ifield: {...numField}}, \r\n  {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n  {value: 'bababa', ifield:{...strField} }, \r\n  {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n  {value: false, ifield:{...boolField} }, \r\n  {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n  // options\r\n  {value: 2, ifield:{...numField}, options:numOptions }, \r\n  {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n  {value: 'b', ifield:{...strField}, options:strOptions}, \r\n  {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n  {value: false, ifield:{...boolField}, options:strOptions}, \r\n  {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n] \r\n\r\n  /*const testEditor:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n    {value: 12, ifield: {...numField}}, \r\n    {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n    {value: 'bababa', ifield:{...strField} }, \r\n    {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n    {value: false, ifield:{...boolField} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n    // options\r\n    {value: 2, ifield:{...numField}, options:numOptions }, \r\n    {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n    {value: 'b', ifield:{...strField}, options:strOptions}, \r\n    {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n    {value: false, ifield:{...boolField, options:strOptions} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n  ] */\r\n\r\n/*\r\nfunction useStateAt(_value:any) { \r\n  const [value, setValue] = useState(_value); \r\n  const ValueAt = (keys?:any[], newValue?:any) => { \r\n    if(newValue && JSON.stringify(ValueAt(keys)) !== newValue) \r\n      return SetValueAt(value, newValue, keys); \r\n    return GetValueAt(value, keys); \r\n  } \r\n  return ValueAt; \r\n} \r\n  \r\nexport function TestValueAt() { \r\n  const VALUE = {a:[15,46], b:[96,45]} \r\n  const valueAt = useStateAt(VALUE); \r\n  const value = valueAt(['a',0]); \r\n  const setValue = valueAt(['a',0]); \r\n\r\n  return <div> \r\n    <Editor {...{value}} /> \r\n  </div> \r\n} */\r\n\r\n\r\n// Test select when value is not in the avaible options */ \r\nexport function TestSelect () { \r\n  const [value, setValue] = useState(['-1']); \r\n  const options = [ \r\n    {value:'0', label:'option 0'}, \r\n    {value:'1', label:'option 1'}, \r\n    {value:'2', label:'option 2'}, \r\n    {value:'3', label:'option 3'} \r\n  ] \r\n\r\n  return <Select {...{value, setValue, options, multiple:true}} /> \r\n} \r\n\r\nexport function TestEditors() {\r\n  \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <TestEditor {...e} /></div> \r\n    })} \r\n    <br/>\r\n    asdsadsadas\r\n    <br/>\r\n  </div> \r\n}\r\n\r\n\r\nexport function TestEditor({ifield, options, ...props}:{value:any, ifield:IField, options?:IOption[]}) { \r\n  const [value, setValue] = useState(props.value); \r\n  return <div> \r\n    <div>{JSON.stringify(value)}</div> \r\n    <Editor {...{ifield, value, setValue, options}} /> \r\n    <br/>\r\n  </div>\r\n}\r\n\r\n\r\nexport function TestReader() { \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <Reader {...e} /></div> \r\n    })} \r\n  </div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx",["328"],"import React, {useContext} from 'react'; \r\nimport {DaoContext} from '../../reusable/_dao'; \r\nimport {Arrx} from '../../reusable/_arrx'; \r\n\r\nimport '../../css/feedback.css'; \r\n\r\n\r\n// Feedback =====================================\r\nexport function FeedBack() { \r\n  const {state} = useContext(DaoContext); \r\n\r\n  return <div> \r\n    {!state.ready && <span>LOADING ... </span>} \r\n    {state.ready && <span>Ready </span>} \r\n    {state.ready && state.success && <CrudFeedBack />}\r\n    {state.ready && !state.success && 'an errors occured'} \r\n  </div> \r\n} \r\n\r\nfunction CrudFeedBack() { \r\n  const {state} = useContext(DaoContext); \r\n  // assumes state is ready and successful\r\n  const {actionType, success, data, err} = state.response as ICrudResponse; \r\n  \r\n  const successMsg:any = { \r\n    create:'Creation succeed', \r\n    update:'Update succeed', \r\n    delete:'Deletion succeed', \r\n  } \r\n  const errorMsg:any = { \r\n    create:'Creation failed ', \r\n    update:'Update failed', \r\n    delete:'Deletion failed', \r\n  } \r\n\r\n  const className = success ? 'success' : 'failure'; \r\n\r\n  return <div className={className}> \r\n    <div>{success ? successMsg[actionType] : errorMsg[actionType]}</div> \r\n    {!success && <Arrx {...{values:(err)}} />} \r\n    </div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx",["329","330"],"import React, {useContext} from 'react'; \r\nimport {DaoContext, EActionType} from '../../../reusable/_dao'; \r\n\r\nimport {Rows, Row, RowContext, Cells, Cell, CellContext} from '../../../reusable/_tablr'; \r\nimport {CreateBtn, DeleteBtn, UpdateBtn} from './crudbtn.component'; \r\nimport {CellRender} from './cellrenderer.component';\r\n\r\n\r\n\r\nexport function InlineUpdateDelete({page, cols, colBtn}:{page:number[], cols:IField[], colBtn:IField}) { \r\n  return <Rows {...{rows:page}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <CellRender/> \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <UpdateBtn/><DeleteBtn/> \r\n    </Cell> \r\n  </Rows> \r\n} \r\n\r\nexport function InlineCreate({cols, colBtn}:{cols:IField[], colBtn:IField}) { \r\n  const {activeMode} = useContext(DaoContext); \r\n  const isCreate = activeMode === EActionType.CREATE; \r\n\r\n  return <Row {...{row:-1}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <span></span>\r\n      {isCreate && <CellRender/> } \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <CreateBtn/> \r\n    </Cell> \r\n  </Row> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx",["331"],"import React, {useContext} from 'react'; \r\nimport {RowContext, TablrContext} from '../../../reusable/_tablr'; \r\nimport {DaoContext, EActionType} from '../../../reusable/_dao'; \r\n\r\n\r\n\r\n// Create .......................................\r\nexport function CreateBtn() { \r\n  const {activeCollection:{accessor}, Create} = useContext(DaoContext); \r\n  const action = (entry:any) => Create(accessor, entry); \r\n\r\n  const mode = EActionType.CREATE; \r\n  const labels = {affirm:'Create', confirm:'Confirm creation', cancel:'Cancel creation'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Update .......................................\r\nexport function UpdateBtn() { \r\n  const {activeCollection:{accessor}, Update} = useContext(DaoContext);\r\n  const action = (entry:any) => Update(accessor, entry); \r\n\r\n  const mode = EActionType.UPDATE; \r\n  const labels = {affirm:'Update', confirm:'Confirm update', cancel:'Cancel update'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Delete .......................................\r\nexport function DeleteBtn() { \r\n  const {activeCollection:{accessor}, Delete} = useContext(DaoContext);\r\n  const action = (entry:any) => Delete(accessor, entry); \r\n\r\n  const mode = EActionType.DELETE; \r\n  const labels = {affirm:'Delete', confirm:'Confirm deletion', cancel:'Cancel deletion'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n\r\n\r\n// CRUD BTN =====================================\r\ninterface CrudBtn { \r\n  mode: EActionType; \r\n  labels:{ \r\n    affirm:string, \r\n    confirm:string, \r\n    cancel:string, \r\n  }; \r\n  action:(entry:any)=>Promise<void>; \r\n} \r\nfunction CrudBtn ({mode, labels, action}:CrudBtn) { \r\n  const {activeCollection, activeEntry, setActiveEntry, activeMode, GetEntry, SetActiveMode} = useContext(DaoContext); \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n  const id = datas[row] ? datas[row]._id: ''; \r\n\r\n  const isId = activeEntry._id === id; \r\n  const isMode = activeMode === mode; \r\n\r\n  const Affirm = () => { \r\n    setActiveEntry(GetEntry(activeCollection.accessor, id)); \r\n    SetActiveMode(mode); \r\n  } \r\n  const Cancel = () => { \r\n    setActiveEntry(GetEntry(activeCollection.accessor)); \r\n    SetActiveMode(); \r\n  }; \r\n  const Confirm = async () => { \r\n    await action(activeEntry); \r\n    Cancel(); \r\n  } \r\n\r\n  return <span> \r\n    {isId && isMode && <button onClick={Confirm}>{labels.confirm}</button>} \r\n    {isId && isMode && <button onClick={Cancel}>{labels.cancel}</button>} \r\n    {(id ==='' || !isId) && !isMode && <button onClick={Affirm}>{labels.affirm}</button>} \r\n  </span> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx",["332"],"import React, {useContext, useState} from 'react'; \r\nimport {DaoContext, EActionType} from '../../../reusable/_dao'; \r\nimport {IsEmpty} from '../../../reusable/_utils'; \r\nimport {FeedBack} from '../../../components/feedback/feedback.component'; \r\n\r\nimport {Objx, Fields, Field, FieldContext, FieldLabel} \r\n  from '../../../reusable/_objx'; \r\nimport {Reader, Editor} from '../../../reusable/_input'; \r\n//import {Questionnaire} from '../../questionnaire/questionnaire.page'; \r\nimport {PatientProfileContext} from '../patient.page'; \r\n\r\n\r\n// Patient profile ============================== \r\nexport function PatientProfile() { \r\n  const {activeEntry} = useContext(DaoContext); \r\n\r\n  return <div> \r\n    {IsEmpty(activeEntry['ramq']) ? \r\n      <IdPatientProfile />: \r\n      <UpdateCreatePatientProfile />} \r\n  </div> \r\n} \r\n\r\nfunction UpdateCreatePatientProfile() {\r\n  const {state, activeEntry, activeMode, activeCollection, Create, Update} = useContext(DaoContext); \r\n  const {ifields} = activeCollection; \r\n  const ramqField = ifields.find(f => f.accessor==='ramq') as IField; \r\n  const cols = ifields.filter(f => ['firstName', 'lastName'].includes(f.accessor) ); \r\n\r\n  const {setPatientProfile} = useContext(PatientProfileContext); \r\n\r\n  async function UpdateCreateProfile(Func:(accessor:string, entry:IEntry) => Promise<void>) { \r\n    await Func(activeCollection.accessor, activeEntry); \r\n    if(state.ready && state.success) \r\n      setPatientProfile(activeEntry); \r\n  } \r\n\r\n  return <div> \r\n    <h1>Patient profile</h1> \r\n    <FeedBack/> \r\n    {activeMode} \r\n    <Objx {...{value:activeEntry, ifields:cols}} > \r\n      <Field {...{ifield:ramqField}} /> \r\n      <Fields><div><FieldLabel/><FieldEditor/></div></Fields> \r\n    </Objx> \r\n    {activeMode === 'update' && <button onClick={() => UpdateCreateProfile(Update)}>Update patient profile</button>} \r\n    {activeMode === 'create' && <button onClick={() => UpdateCreateProfile(Create)}>Create new patient profile</button>} \r\n  </div> \r\n}\r\n\r\n\r\nfunction IdPatientProfile () {\r\n  const {activeEntry, setActiveEntry, SetActiveMode, activeCollection} = useContext(DaoContext); \r\n  const {entries, ifields} = activeCollection; \r\n  const ramqField = ifields.find(f => f.accessor==='ramq') as IField; \r\n  const [value, setValue] = useState(''); \r\n  \r\n  function IdentifyPatient(ramq:string) { \r\n    const found = entries.find( e => { \r\n      const e_ramq = (e['ramq'] as string); \r\n      return e_ramq.toLowerCase() === ramq.toLowerCase(); \r\n    }); \r\n    if(found) { \r\n      setActiveEntry(found); \r\n      SetActiveMode(EActionType.UPDATE); \r\n    } \r\n    else { \r\n      setActiveEntry({...activeEntry, ramq}); \r\n      SetActiveMode(EActionType.CREATE); \r\n    } \r\n  } \r\n\r\n  function Valid() { \r\n    return ramqField.validators?.every( valid => valid(value) ); \r\n  } \r\n\r\n  return <div> \r\n    <h1>Patient identification</h1> \r\n    <div>\r\n      <span>Ramq: </span>\r\n      <Editor {...{value, setValue, ifield:ramqField}} />\r\n      <span>{Valid() ? '✓' : 'x'}</span>\r\n    </div> \r\n    <button onClick={() => IdentifyPatient(value)}>Identify</button> \r\n  </div> \r\n}\r\n\r\n\r\n\r\nfunction FieldEditor() { \r\n  const {activeEntry, setActiveEntry} = useContext(DaoContext); \r\n  const {ifield} = useContext(FieldContext); \r\n\r\n  const value = activeEntry[ifield.accessor]; \r\n  const setValue = (newValue:any) => { \r\n    const copy = {...activeEntry}; \r\n    copy[ifield.accessor] = newValue; \r\n    setActiveEntry(copy); \r\n  } \r\n  return <Editor {...{value, setValue, ifield}} /> \r\n} \r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\loadpatient.component.tsx",["333","334"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {DaoContext} from '../../../reusable/_dao'; \r\nimport {FeedBack} from '../../../components/feedback/feedback.component'; \r\n\r\n\r\n\r\n// LOAD PATIENTS ================================\r\nexport function LoadPatients() { \r\n  const {setActiveCollection, Collections, GetCollections} = useContext(DaoContext); \r\n\r\n  async function GetPatient() { \r\n    await Collections(['patients']); \r\n    const collection = GetCollections().find( c => c.accessor==='patients'); \r\n    if(collection) \r\n      setActiveCollection(collection); \r\n  } \r\n  \r\n  useEffect(() => { \r\n    GetPatient(); \r\n  }, []); \r\n\r\n  return <div> \r\n    <FeedBack/> \r\n  </div> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\loadquestionnaire.component.tsx",["335"],"import React, {useContext, useEffect} from 'react'; \r\nimport {DaoContext} from '../../../reusable/_dao'; \r\nimport {FeedBack} from '../../../components/feedback/feedback.component'; \r\nimport {PatientProfileContext} from '../../patient/patient.page'; \r\nimport {AnswersContext} from '../questionnaire.page'; \r\n\r\n\r\n\r\n// LOAD PATIENTS ================================\r\nexport function LoadQuestionnaire() { \r\n  const {Collections, GetCollections} = useContext(DaoContext); \r\n  const {patientProfile} = useContext(PatientProfileContext); \r\n  const {setAnswers} = useContext(AnswersContext); \r\n\r\n  async function GetQuestionnaire() { \r\n    await Collections(['questions', 'forms', 'responses', 'answers', 'instructions']); \r\n    BuildBlankForm(); \r\n  }\r\n\r\n  function BuildBlankForm() { \r\n    const questions = GetCollections().find( c => c.accessor==='questions'); \r\n    if(!questions) \r\n      return [] as IAnswer[]; \r\n    const _answers = questions.entries.map(q=> { \r\n      return {_id:'', answer:-1, pid:patientProfile._id, qid:q._id} as IAnswer; \r\n    }); \r\n    console.log(_answers); \r\n    setAnswers(_answers); \r\n  }\r\n\r\n  useEffect(() => { \r\n    GetQuestionnaire(); \r\n  }, []); \r\n\r\n  return <div> \r\n    <FeedBack/> \r\n  </div> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\displayquestion.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaire.utils.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\paging.component.tsx",["336","337","338"],{"ruleId":"339","replacedBy":"340"},{"ruleId":"341","replacedBy":"342"},{"ruleId":"343","severity":1,"message":"344","line":1,"column":16,"nodeType":"345","messageId":"346","endLine":1,"endColumn":24},{"ruleId":"343","severity":1,"message":"347","line":1,"column":26,"nodeType":"345","messageId":"346","endLine":1,"endColumn":35},{"ruleId":"343","severity":1,"message":"348","line":1,"column":37,"nodeType":"345","messageId":"346","endLine":1,"endColumn":43},{"ruleId":"343","severity":1,"message":"349","line":2,"column":9,"nodeType":"345","messageId":"346","endLine":2,"endColumn":14},{"ruleId":"343","severity":1,"message":"350","line":4,"column":9,"nodeType":"345","messageId":"346","endLine":4,"endColumn":14},{"ruleId":"343","severity":1,"message":"351","line":6,"column":9,"nodeType":"345","messageId":"346","endLine":6,"endColumn":19},{"ruleId":"343","severity":1,"message":"352","line":6,"column":21,"nodeType":"345","messageId":"346","endLine":6,"endColumn":32},{"ruleId":"343","severity":1,"message":"353","line":6,"column":34,"nodeType":"345","messageId":"346","endLine":6,"endColumn":44},{"ruleId":"354","severity":1,"message":"355","line":27,"column":6,"nodeType":"356","endLine":27,"endColumn":8,"suggestions":"357"},{"ruleId":"339","replacedBy":"340"},{"ruleId":"341","replacedBy":"342"},{"ruleId":"339","replacedBy":"358"},{"ruleId":"341","replacedBy":"359"},{"ruleId":"360","severity":1,"message":"361","line":62,"column":37,"nodeType":"362","messageId":"363","endLine":62,"endColumn":47},{"ruleId":"364","severity":1,"message":"365","line":4,"column":9,"nodeType":"345","messageId":"346","endLine":4,"endColumn":15},{"ruleId":"366","severity":1,"message":"367","line":34,"column":22,"nodeType":"368","messageId":"369","endLine":34,"endColumn":24},{"ruleId":"366","severity":1,"message":"367","line":34,"column":47,"nodeType":"368","messageId":"369","endLine":34,"endColumn":49},{"ruleId":"364","severity":1,"message":"370","line":1,"column":16,"nodeType":"345","messageId":"346","endLine":1,"endColumn":26},{"ruleId":"366","severity":1,"message":"367","line":28,"column":20,"nodeType":"368","messageId":"369","endLine":28,"endColumn":22},{"ruleId":"366","severity":1,"message":"367","line":28,"column":36,"nodeType":"368","messageId":"369","endLine":28,"endColumn":38},{"ruleId":"371","severity":1,"message":"372","line":14,"column":40,"nodeType":"345","messageId":"373","endLine":14,"endColumn":51},{"ruleId":"354","severity":1,"message":"374","line":65,"column":34,"nodeType":"356","endLine":65,"endColumn":36,"suggestions":"375"},{"ruleId":"354","severity":1,"message":"376","line":89,"column":6,"nodeType":"356","endLine":89,"endColumn":24,"suggestions":"377"},{"ruleId":"339","replacedBy":"378"},{"ruleId":"341","replacedBy":"379"},{"ruleId":"339","replacedBy":"380"},{"ruleId":"341","replacedBy":"381"},{"ruleId":"364","severity":1,"message":"382","line":3,"column":43,"nodeType":"345","messageId":"346","endLine":3,"endColumn":51},{"ruleId":"364","severity":1,"message":"383","line":2,"column":15,"nodeType":"345","messageId":"346","endLine":2,"endColumn":26},{"ruleId":"364","severity":1,"message":"384","line":2,"column":38,"nodeType":"345","messageId":"346","endLine":2,"endColumn":45},{"ruleId":"364","severity":1,"message":"385","line":2,"column":63,"nodeType":"345","messageId":"346","endLine":2,"endColumn":75},{"ruleId":"364","severity":1,"message":"386","line":2,"column":77,"nodeType":"345","messageId":"346","endLine":2,"endColumn":89},{"ruleId":"354","severity":1,"message":"387","line":44,"column":6,"nodeType":"356","endLine":44,"endColumn":37,"suggestions":"388"},{"ruleId":"354","severity":1,"message":"389","line":44,"column":7,"nodeType":"390","endLine":44,"endColumn":36},{"ruleId":"339","replacedBy":"391"},{"ruleId":"341","replacedBy":"392"},{"ruleId":"364","severity":1,"message":"393","line":1,"column":21,"nodeType":"345","messageId":"346","endLine":1,"endColumn":28},{"ruleId":"364","severity":1,"message":"394","line":16,"column":16,"nodeType":"345","messageId":"346","endLine":16,"endColumn":23},{"ruleId":"354","severity":1,"message":"395","line":24,"column":6,"nodeType":"356","endLine":24,"endColumn":35,"suggestions":"396"},{"ruleId":"354","severity":1,"message":"389","line":24,"column":7,"nodeType":"390","endLine":24,"endColumn":34},{"ruleId":"364","severity":1,"message":"397","line":27,"column":9,"nodeType":"345","messageId":"346","endLine":27,"endColumn":19},{"ruleId":"354","severity":1,"message":"398","line":39,"column":6,"nodeType":"356","endLine":39,"endColumn":29,"suggestions":"399"},{"ruleId":"354","severity":1,"message":"389","line":39,"column":7,"nodeType":"390","endLine":39,"endColumn":28},{"ruleId":"354","severity":1,"message":"400","line":12,"column":6,"nodeType":"356","endLine":12,"endColumn":34,"suggestions":"401"},{"ruleId":"354","severity":1,"message":"389","line":12,"column":7,"nodeType":"390","endLine":12,"endColumn":33},{"ruleId":"364","severity":1,"message":"370","line":1,"column":16,"nodeType":"345","messageId":"346","endLine":1,"endColumn":26},{"ruleId":"364","severity":1,"message":"347","line":1,"column":28,"nodeType":"345","messageId":"346","endLine":1,"endColumn":37},{"ruleId":"364","severity":1,"message":"402","line":2,"column":56,"nodeType":"345","messageId":"346","endLine":2,"endColumn":66},{"ruleId":"364","severity":1,"message":"403","line":4,"column":18,"nodeType":"345","messageId":"346","endLine":4,"endColumn":28},{"ruleId":"364","severity":1,"message":"404","line":4,"column":30,"nodeType":"345","messageId":"346","endLine":4,"endColumn":40},{"ruleId":"354","severity":1,"message":"405","line":24,"column":6,"nodeType":"356","endLine":24,"endColumn":13,"suggestions":"406"},{"ruleId":"364","severity":1,"message":"403","line":3,"column":9,"nodeType":"345","messageId":"346","endLine":3,"endColumn":19},{"ruleId":"364","severity":1,"message":"404","line":3,"column":21,"nodeType":"345","messageId":"346","endLine":3,"endColumn":31},{"ruleId":"364","severity":1,"message":"407","line":23,"column":31,"nodeType":"345","messageId":"346","endLine":23,"endColumn":35},{"ruleId":"364","severity":1,"message":"408","line":4,"column":20,"nodeType":"345","messageId":"346","endLine":4,"endColumn":30},{"ruleId":"364","severity":1,"message":"409","line":4,"column":45,"nodeType":"345","messageId":"346","endLine":4,"endColumn":56},{"ruleId":"410","severity":1,"message":"411","line":49,"column":10,"nodeType":"345","messageId":"412","endLine":49,"endColumn":17},{"ruleId":"364","severity":1,"message":"413","line":8,"column":9,"nodeType":"345","messageId":"346","endLine":8,"endColumn":15},{"ruleId":"364","severity":1,"message":"344","line":1,"column":39,"nodeType":"345","messageId":"346","endLine":1,"endColumn":47},{"ruleId":"354","severity":1,"message":"414","line":20,"column":6,"nodeType":"356","endLine":20,"endColumn":8,"suggestions":"415"},{"ruleId":"354","severity":1,"message":"416","line":33,"column":6,"nodeType":"356","endLine":33,"endColumn":8,"suggestions":"417"},{"ruleId":"364","severity":1,"message":"418","line":9,"column":10,"nodeType":"345","messageId":"346","endLine":9,"endColumn":17},{"ruleId":"364","severity":1,"message":"419","line":32,"column":28,"nodeType":"345","messageId":"346","endLine":32,"endColumn":36},{"ruleId":"364","severity":1,"message":"420","line":32,"column":39,"nodeType":"345","messageId":"346","endLine":32,"endColumn":45},"no-native-reassign",["421"],"no-negated-in-lhs",["422"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'Admin' is defined but never used.","'Input' is defined but never used.","'TestReader' is defined but never used.","'TestEditors' is defined but never used.","'TestSelect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Collections'. Either include it or remove the dependency array.","ArrayExpression",["423"],["421"],["422"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","@typescript-eslint/no-unused-vars","'IsNull' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'useContext' is defined but never used.","@typescript-eslint/no-use-before-define","'Collections' was used before it was defined.","noUseBeforeDefine","React Hook useMemo has a missing dependency: 'dao'. Either include it or remove the dependency array.",["424"],"React Hook useEffect has a missing dependency: 'GetEntry'. Either include it or remove the dependency array.",["425"],["421"],["422"],["421"],["422"],"'SetWidth' is defined but never used.","'ArrxContext' is defined but never used.","'Element' is defined but never used.","'ElementIndex' is defined but never used.","'ElementValue' is defined but never used.","React Hook useEffect has missing dependencies: 'index' and 'values'. Either include them or remove the dependency array.",["426"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression",["421"],["422"],"'useMemo' is defined but never used.","'setData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.value'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'props.value', you can also switch to useReducer instead of useState and read 'props.value' in the reducer.",["427"],"'hasChanged' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data', 'ifield.accessor', 'isEdit', and 'value'. Either include them or remove the dependency array.",["428"],"React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["429"],"'DaoContext' is defined but never used.","'GetValueAt' is defined but never used.","'SetValueAt' is defined but never used.","React Hook useEffect has a missing dependency: '_value'. Either include it or remove the dependency array.",["430"],"'data' is assigned a value but never used.","'RowContext' is defined but never used.","'CellContext' is defined but never used.","@typescript-eslint/no-redeclare","'CrudBtn' is already defined.","redeclared","'Reader' is defined but never used.","React Hook useEffect has a missing dependency: 'GetPatient'. Either include it or remove the dependency array.",["431"],"React Hook useEffect has a missing dependency: 'GetQuestionnaire'. Either include it or remove the dependency array.",["432"],"'answers' is assigned a value but never used.","'accessor' is assigned a value but never used.","'Create' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},{"desc":"443","fix":"444"},{"desc":"445","fix":"446"},{"desc":"447","fix":"448"},{"desc":"449","fix":"450"},{"desc":"451","fix":"452"},"Update the dependencies array to be: [Collections]",{"range":"453","text":"454"},"Update the dependencies array to be: [dao]",{"range":"455","text":"456"},"Update the dependencies array to be: [GetEntry, activeCollection]",{"range":"457","text":"458"},"Update the dependencies array to be: [index, values]",{"range":"459","text":"460"},"Update the dependencies array to be: [props.value]",{"range":"461","text":"462"},"Update the dependencies array to be: [data, ifield.accessor, isEdit, value]",{"range":"463","text":"464"},"Update the dependencies array to be: [callback]",{"range":"465","text":"466"},"Update the dependencies array to be: [_value, value]",{"range":"467","text":"468"},"Update the dependencies array to be: [GetPatient]",{"range":"469","text":"470"},"Update the dependencies array to be: [GetQuestionnaire]",{"range":"471","text":"472"},[1159,1161],"[Collections]",[2107,2109],"[dao]",[3158,3176],"[GetEntry, activeCollection]",[1560,1591],"[index, values]",[639,668],"[props.value]",[1108,1131],"[data, ifield.accessor, isEdit, value]",[304,332],"[callback]",[762,769],"[_value, value]",[645,647],"[GetPatient]",[1173,1175],"[GetQuestionnaire]"]