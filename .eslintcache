[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\adminsection\\adminsection.tsx":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\adminsection\\admintable.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\businesslogic\\columnrules.tsx":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputcommon.tsx":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputdata\\inputdata.tsx":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputdata\\inputstring.tsx":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputarray.tsx":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputdata\\inputbool.tsx":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputdata\\inputnumber.tsx":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputselect\\inputselect.tsx":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputhooks\\inputhook.tsx":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\mongoosedao\\common.ts":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\mongoosedao\\field.ts":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\mongoosedao\\collection.ts":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\mongoosedao\\dao.ts":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\mongoosedao\\crudaxios.ts":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\mongoosedao\\mongooseparser.ts":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\misctest\\testobject\\testobject.tsx":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\custompackages.tsx":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\customhooks\\customhooks.tsx":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\components\\inputtable.tsx":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\components\\inputcells.tsx":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\components\\inputrows.tsx":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\components\\inputrowbtn.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\colsetting\\columnsetting.tsx":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\hook\\useColumnSetting.tsx":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\hook\\useCrud.tsx":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\customhooks\\useLoad.tsx":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\customhooks\\usePage.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\components\\inputtableheader.tsx":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\hook\\usetable.tsx":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputobject\\common.ts":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputobject\\defaultFieldRendering.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputobject\\fields.tsx":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputobject\\rows.tsx":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputobject\\table.tsx":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputobject\\object.tsx":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\common.ts":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\columnsetting\\usecolumnsetting.tsx":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\misctest\\testcolsetting\\testcolsetting.tsx":"43"},{"size":500,"mtime":499162500000,"results":"44","hashOfConfig":"45"},{"size":324,"mtime":1608246308349,"results":"46","hashOfConfig":"45"},{"size":362,"mtime":499162500000,"results":"47","hashOfConfig":"45"},{"size":1974,"mtime":1608169673146,"results":"48","hashOfConfig":"45"},{"size":3102,"mtime":1607221552785,"results":"49","hashOfConfig":"45"},{"size":5386,"mtime":1607200205645,"results":"50","hashOfConfig":"45"},{"size":2598,"mtime":1608162440760,"results":"51","hashOfConfig":"45"},{"size":548,"mtime":1608178914935,"results":"52","hashOfConfig":"45"},{"size":510,"mtime":1608162440774,"results":"53","hashOfConfig":"45"},{"size":2222,"mtime":1608162440756,"results":"54","hashOfConfig":"45"},{"size":443,"mtime":1608162440765,"results":"55","hashOfConfig":"45"},{"size":514,"mtime":1608162440771,"results":"56","hashOfConfig":"45"},{"size":3553,"mtime":1608162440800,"results":"57","hashOfConfig":"45"},{"size":4307,"mtime":1608178964104,"results":"58","hashOfConfig":"45"},{"size":305,"mtime":1608176903809,"results":"59","hashOfConfig":"45"},{"size":2727,"mtime":1608175282825,"results":"60","hashOfConfig":"45"},{"size":1442,"mtime":1608242746831,"results":"61","hashOfConfig":"45"},{"size":3793,"mtime":1608167743061,"results":"62","hashOfConfig":"45"},{"size":1738,"mtime":1608179375584,"results":"63","hashOfConfig":"45"},{"size":2781,"mtime":1608179493114,"results":"64","hashOfConfig":"45"},{"size":1407,"mtime":1608244936393,"results":"65","hashOfConfig":"45"},{"size":579,"mtime":1608245582596,"results":"66","hashOfConfig":"45"},{"size":143,"mtime":1608178883635,"results":"67","hashOfConfig":"45"},{"size":1244,"mtime":1608177539968,"results":"68","hashOfConfig":"45"},{"size":1681,"mtime":1608179200163,"results":"69","hashOfConfig":"45"},{"size":1337,"mtime":1608179093226,"results":"70","hashOfConfig":"45"},{"size":3761,"mtime":1608171095498,"results":"71","hashOfConfig":"45"},{"size":1239,"mtime":1608171095488,"results":"72","hashOfConfig":"45"},{"size":1975,"mtime":1608179309702,"results":"73","hashOfConfig":"45"},{"size":2174,"mtime":1608171095517,"results":"74","hashOfConfig":"45"},{"size":886,"mtime":1608178721002,"results":"75","hashOfConfig":"45"},{"size":1677,"mtime":1606787510225,"results":"76","hashOfConfig":"45"},{"size":1178,"mtime":1608179262776,"results":"77","hashOfConfig":"45"},{"size":2063,"mtime":1608179341349,"results":"78","hashOfConfig":"45"},{"size":866,"mtime":1608242237282,"results":"79","hashOfConfig":"45"},{"size":5838,"mtime":1608242287736,"results":"80","hashOfConfig":"45"},{"size":1916,"mtime":1608242349911,"results":"81","hashOfConfig":"45"},{"size":3123,"mtime":1608242357904,"results":"82","hashOfConfig":"45"},{"size":871,"mtime":1608242363871,"results":"83","hashOfConfig":"45"},{"size":682,"mtime":1608242342470,"results":"84","hashOfConfig":"45"},{"size":753,"mtime":1608178135450,"results":"85","hashOfConfig":"45"},{"size":925,"mtime":1608246720358,"results":"86","hashOfConfig":"45"},{"size":812,"mtime":1608246755749,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"ke513i",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"100"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"106"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"106"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"106"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"106"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"106"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"106"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["185","186"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\adminsection\\adminsection.tsx",["187","188"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\adminsection\\admintable.tsx",["189","190"],"import React, {useContext} from 'react'; \r\nimport {AdminContext} from './adminsection'; \r\n\r\nimport './table.css'; \r\n\r\n// INPUT TABLE \r\nimport {InputTable, InputHeader, InputHeaderRow, \r\n  InputRows, InputRow, InputCells, InputCell, \r\n  UpdateDeleteBtn, CreateBtn} from '../custompackages'; \r\n  \r\n// Page \r\nimport {usePage, IPageHook} from '../custompackages'; \r\n\r\n// Crud \r\nimport {useCrud} from '../custompackages'; \r\n\r\n// Column setting rules \r\nimport {BuildColumnSetting, ColumnSetter, IColumnSetting} from '../custompackages'; \r\nimport {icolrules} from '../businesslogic/columnrules'; \r\n\r\n\r\n// ADMIN TABLE ==================================\r\nexport default function AdminTable() { \r\n  const {dao, activeCollection} = useContext(AdminContext); \r\n\r\n  // CRUD functionality \r\n  const {entries, response, Create, Update, Delete} = useCrud(dao, activeCollection); \r\n  const createLabel = {action:'Create', confirm:'Confirm create', cancel:'Cancel create'}; \r\n  const onCreate = Create; \r\n  const updateLabel = {action:'Update', confirm:'Confirm update', cancel:'Cancel update'}; \r\n  const onUpdate = Update; \r\n  const deleteLabel = {action:'Delete', confirm:'Confirm delete', cancel:'Cancel delete'}; \r\n  const onDelete = Delete; \r\n\r\n  // column settings\r\n  const iColumnSetting = BuildColumnSetting(dao, activeCollection.ifields, icolrules); \r\n  const colModifier = (col:IColumnSetting) => { \r\n    if(col.ifield.accessor[0] === '_') \r\n      col.show = false; \r\n  } \r\n  ColumnSetter(iColumnSetting, colModifier); \r\n\r\n  // paging\r\n  const {pageIndex, setPageIndex, from, to, pageIndexes} = usePage(entries, 5); \r\n  const page = Array.from({length: to-from}, (v, k) => k+from); \r\n\r\n\r\n  // RENDER -------------------------------------\r\n  return <div> \r\n    <h4>Input table:</h4> \r\n    <Response {...response} /> \r\n    <InputTable entries={entries} colsetting={iColumnSetting}> \r\n      <thead> \r\n        <InputHeaderRow> \r\n          <InputHeader/><th>BTN</th> \r\n        </InputHeaderRow> \r\n      </thead> \r\n      <tbody> \r\n        <InputRows rows={page}> \r\n          <InputCells/> \r\n          <UpdateDeleteBtn {...{updateLabel, deleteLabel, onUpdate, onDelete}}/> \r\n        </InputRows> \r\n      </tbody> \r\n      <tfoot> \r\n        <InputRow row={-1}> \r\n          <InputCells/> \r\n          <CreateBtn {...{createLabel, onCreate}}/> \r\n        </InputRow> \r\n      </tfoot> \r\n    </InputTable> \r\n    <Paging {...{pageIndex, setPageIndex, from, to, pageIndexes}}/> \r\n  </div> \r\n}\r\n\r\nfunction Response({actionType,success,data,err}:IResponse) { \r\n  const {dao, activeCollection} = useContext(AdminContext); \r\n  if(success) \r\n    return <div className='feedback_green'>{activeCollection.label} successful {actionType}</div> \r\n  return <div className='feedback_red'>{err?.map( e => \r\n      {return <div>{e}</div>} \r\n    )}</div>; \r\n}\r\n\r\nfunction Paging({from, to, pageIndex, setPageIndex, pageIndexes}:IPageHook) { \r\n  return <div>\r\n    {pageIndexes.map( (p, i) => { \r\n      return <button key={i} onClick={() => setPageIndex(i)} disabled={pageIndex===i} >\r\n          {i+1}\r\n        </button> \r\n    })} \r\n  </div>\r\n}",["191","192"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\businesslogic\\columnrules.tsx",["193"],"import React from 'react'; \r\nimport {IColumnSettingRule, IDao, ITableHook} from '../custompackages'; \r\nimport {InputArray, InputData, InputSelect} from '../custompackages'; \r\nimport {Field} from '../custompackages'; \r\n\r\n// IField Predicate ===============================\r\nconst OnePrimitive = (ifield:IField) => !new Field(ifield).IsArray() && new Field(ifield).IsPrimitive(); \r\nconst OneEnum = (ifield:IField) => !new Field(ifield).IsArray() && new Field(ifield).IsEnum(); \r\nconst OneForeign = (ifield:IField) => !new Field(ifield).IsArray() && new Field(ifield).IsObjectID(); \r\nconst ManyPrimitive = (ifield:IField) => new Field(ifield).IsArray() && new Field(ifield).IsPrimitive(); \r\nconst ManyEnum = (ifield:IField) => new Field(ifield).IsArray() && new Field(ifield).IsEnum(); \r\nconst ManyForeign = (ifield:IField) => new Field(ifield).IsArray() && new Field(ifield).IsObjectID(); \r\n\r\n// icolumn Predicate ======================================\r\nconst editable = (handle?:string) => { \r\n  if(!handle) \r\n    return false; \r\n  return handle === 'update' || handle === 'create'; \r\n}; \r\n\r\n\r\n// BuildRenderFunc =====================================\r\nconst ReadMany = (ifield:IField, value:any) => { \r\n  const N = Array.isArray(value) ? value: []; \r\n  return <span>{new Field(ifield).GetElementType()} x {N.length}</span> \r\n}\r\n\r\nconst Display = (ifield:IField, value:any) => { \r\n  if(ifield.type === 'boolean') \r\n    return <span>{JSON.stringify(value)}</span>; \r\n  return <span>{value}</span>; \r\n}\r\n\r\n// PRIMITIVE --------------------------------------\r\nconst ReadOnePrimitive = (ifield:IField, dao:IDao) => { \r\n  return (value:any, onSendValue:any) => { \r\n    return Display(ifield, value); \r\n}}; \r\n\r\nconst EditOnePrimitive = (ifield:IField, dao:IDao) => {\r\n  return (value:any, onSendValue:any) => { \r\n    return <InputData {...{value, onSendValue}} /> \r\n}}; \r\n\r\nconst ReadManyPrimitive = (ifield:IField, dao:IDao) => {\r\n  return (value:any, onSendValue:any) => { \r\n    return ReadMany(ifield, value); \r\n}}; \r\n\r\nconst EditManyPrimitive = (ifield:IField, dao:IDao) => {\r\n  return (value:any, setValue:any):any => { \r\n    return <InputArray type={ifield.type} value={value} onSendValue={setValue} defaultValue={ifield.defaultValue} /> \r\n}}; \r\n\r\n\r\n// ENUM -----------------------------------------\r\nconst ReadOneEnum = (ifield:IField, dao:IDao) => { \r\n  return (value:any, onSendValue:any) => { \r\n    return <span>{value}</span>; \r\n}}; \r\n\r\nconst EditOneEnum = (ifield:IField, dao:IDao) => { \r\n  const enums:any[] = ifield.options['enum'] ?? []; \r\n  const options = enums.map( o => {\r\n    return {value:o, label:o} as IOption} \r\n  ); \r\n  return (value:any, onSendValue:any) => { \r\n    return <InputSelect {...{value, onSendValue, options}} /> \r\n}}; \r\n\r\nconst ReadManyEnum = (ifield:IField, dao:IDao) => {\r\n  return (value:any, onSendValue:any) => { \r\n    return ReadMany(ifield, value); \r\n}}; \r\n\r\nconst EditManyEnum = (ifield:IField, dao:IDao) => { \r\n  const enums:any[] = ifield.options['enum'] ?? []; \r\n  const options = enums.map( o => {\r\n    return {value:o, label:o} as IOption} \r\n  ); \r\n  return (value:any, onSendValue:any) => { \r\n    return <InputSelect {...{value, onSendValue, options, isMulti:true}} /> \r\n}}; \r\n\r\n// FOREIGN --------------------------------------\r\nconst ReadOneForeign = (ifield:IField, dao:IDao) => { \r\n  return (value:any, onSendValue:any):any => { \r\n    const foreignValue:any = dao.GetForeignValue(ifield, value); \r\n    return <span>{JSON.stringify(foreignValue)}</span>; \r\n  } \r\n} \r\n\r\nconst EditOneForeign = (ifield:IField, dao:IDao) => { \r\n  return (value:any, onSendValue:any) => { \r\n    const options:IOption[] = dao.GetForeignOptions(ifield); \r\n    return <InputSelect {...{value, onSendValue, options}} /> \r\n}}; \r\n\r\nconst ReadManyForeign = (ifield:IField, dao:IDao) => { \r\n  return (value:any, onSendValue:any) => { \r\n    return ReadMany(ifield, value); \r\n}}; \r\n\r\nconst EditManyForeign = (ifield:IField, dao:IDao) => { \r\n  return (value:any, onSendValue:any) => { \r\n    const options:IOption[] = dao.GetForeignOptions(ifield); \r\n    return <InputSelect {...{value, onSendValue, options, isMulti:true}} /> \r\n}}; \r\n\r\n\r\n// Column Setting Rules -------------------------\r\nconst defOps = {order:0, show:true, sort:0}\r\nexport const icolrules:IColumnSettingRule[] = [ \r\n  \r\n  // Primitive\r\n  {...defOps, ifieldPredicate:OnePrimitive, buildRenderer: ReadOnePrimitive}, \r\n  {...defOps, ifieldPredicate:OnePrimitive, buildRenderer: EditOnePrimitive, predicate:editable}, \r\n  {...defOps, ifieldPredicate:ManyPrimitive, buildRenderer: ReadManyPrimitive}, \r\n  {...defOps, ifieldPredicate:ManyPrimitive, buildRenderer: EditManyPrimitive, predicate:editable}, \r\n\r\n  // Enum\r\n  {...defOps, ifieldPredicate:OneEnum, buildRenderer: ReadOneEnum}, \r\n  {...defOps, ifieldPredicate:OneEnum, buildRenderer: EditOneEnum, predicate:editable}, \r\n  {...defOps, ifieldPredicate:ManyEnum, buildRenderer: ReadManyEnum}, \r\n  {...defOps, ifieldPredicate:ManyEnum, buildRenderer: EditManyEnum, predicate:editable}, \r\n\r\n  // Foreign\r\n  {...defOps, ifieldPredicate:OneForeign, buildRenderer: ReadOneForeign}, \r\n  {...defOps, ifieldPredicate:OneForeign, buildRenderer: EditOneForeign, predicate:editable}, \r\n  {...defOps, ifieldPredicate:ManyForeign, buildRenderer: ReadManyForeign}, \r\n  {...defOps, ifieldPredicate:ManyForeign, buildRenderer: EditManyForeign, predicate:editable}, \r\n] ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputcommon.tsx",[],["194","195"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputdata\\inputdata.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputdata\\inputstring.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputarray.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputdata\\inputbool.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputdata\\inputnumber.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputselect\\inputselect.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\input\\inputhooks\\inputhook.tsx",["196","197"],"import {useState, useEffect} from 'react'; \r\nimport {IInput, EnumType, InputAction} from '../inputcommon'; \r\n\r\n// IEvent ---------------------------------------\r\nexport interface IEvent { \r\n  target:{ \r\n    type:string, \r\n    value:string, \r\n    valueAsDate: Date | null, \r\n    valueAsNumber: number, \r\n    checked: boolean | null, \r\n  } \r\n  code?:any, \r\n}\r\n\r\n// InputHook -----------------------------------\r\nexport interface IInputHook<T> extends IInput<T> { \r\n  value: T; \r\n  setValue: React.Dispatch<React.SetStateAction<T>>; \r\n  type: EnumType; \r\n  //type?: EnumType; \r\n  //size?: any; \r\n\r\n  // Formatting .........\r\n  formatter?: (value:T) => T; \r\n  \r\n  // Editing ............\r\n  onSendValue: (value:T) => void;   // defined by parent component \r\n  onChange: InputAction;      // called when <input> changes \r\n  onBlur: InputAction;        // called when <input> blurs \r\n  onPressEnter: InputAction;  // called when <input> press enter \r\n} \r\nexport function useInputHook<T>(props:IInput<T>):IInputHook<T> { \r\n  const [value, setValue] = useState<T>(props.value as T); \r\n  // To synchronize with parent changes (page changes). \r\n  useEffect(() => { \r\n    if (props.value !== value) { \r\n      setValue(props.value); \r\n  } \r\n  },[JSON.stringify(props.value)]); \r\n  \r\n  // Allows access to child component \r\n  const type = props.type ? props.type: EnumType.ANY; \r\n  const onSendValue = props.onSendValue; \r\n  const args = {value, setValue, type, onSendValue}; \r\n\r\n  const onChange = props.onChange? props.onChange : DefaultOnChange({...args} as IInputHook<T>); \r\n  const onPressEnter = DefaultOnPressEnter({...args, onPressEnter:props.onPressEnter } as IInputHook<T>); \r\n  const onBlur = props.onBlur ? props.onBlur : DefaultOnBlur({...args} as IInputHook<T>); \r\n  const inputHook = {...args, onChange, onBlur, onPressEnter}; \r\n  // gives parent component access to these values and methods\r\n  if(props.useref) \r\n    props.useref.current = {...props, ...inputHook}; \r\n\r\n  //console.log(value); \r\n  return {...inputHook} as IInputHook<T>; \r\n} \r\n\r\n// default onBlur method ...............................\r\nfunction DefaultOnBlur<T>(inputHook:IInputHook<T>):InputAction { \r\n  const {value, onSendValue} = inputHook; \r\n  return (event:any) => onSendValue(value as any as T); \r\n} \r\n\r\n// default onPressEnter .........................\r\nconst IsPressEnter = (event:any):boolean => { \r\n  const {code} = event as IEvent; \r\n  return code === 'Enter' || code === 'NumpadEnter'; \r\n}\r\n\r\nfunction DefaultOnPressEnter<T>(inputHook:IInputHook<T>):InputAction { \r\n  const {value, onSendValue, onPressEnter} = inputHook; \r\n  if(onPressEnter) { \r\n    return (event:any) => { \r\n      if(IsPressEnter(event) && onPressEnter) \r\n        onPressEnter(event); \r\n    } \r\n  } \r\n  else { \r\n    return (event:any) => { \r\n      if(IsPressEnter(event)) \r\n        onSendValue(value as any as T); \r\n    } \r\n  } \r\n} \r\n\r\n\r\n// default ONCHANGE methods .....................\r\nfunction DefaultOnChange<T>(inputHook:IInputHook<T>):InputAction { \r\n  if(inputHook.type === EnumType.NUMBER) \r\n    return DefaultOnChangeNumber(inputHook); \r\n\r\n  else if(inputHook.type === EnumType.BOOLEAN) \r\n    return DefaultOnChangeBool(inputHook); \r\n\r\n  else if(inputHook.type === EnumType.STRING) \r\n    return DefaultOnChangeString(inputHook); \r\n  return (event:any) => console.log(event); \r\n}\r\n\r\nfunction DefaultOnChangeNumber<T>(inputHook:IInputHook<T>):InputAction { \r\n  const {setValue} = inputHook; \r\n  return (event:any) => {\r\n    const {target} = (event as IEvent); \r\n    const newValue = target.valueAsNumber as any as T; \r\n    setValue(newValue); \r\n  }\r\n}\r\n\r\nfunction DefaultOnChangeBool<T>(inputHook:IInputHook<T>):InputAction { \r\n  const {setValue, onSendValue} = inputHook; \r\n  return (event:any) => { \r\n    const {target} = (event as IEvent); \r\n    const newValue = target.checked as any as T; \r\n    setValue(newValue); \r\n    onSendValue(newValue); \r\n  }; \r\n}\r\n\r\nfunction DefaultOnChangeString<T>(inputHook:IInputHook<T>):InputAction { \r\n  const {setValue} = inputHook; \r\n  return (event:any) => { \r\n    const {target} = (event as IEvent); \r\n    const newValue = target.value as any as T; \r\n    setValue(newValue); \r\n  }; \r\n}\r\n\r\n/*function DeepCompare(a:any, b:any):boolean { \r\n  JSON.stringify(a) === JSON.stringify(b); \r\n  return false; \r\n}*/\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\mongoosedao\\common.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\mongoosedao\\field.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\mongoosedao\\collection.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\mongoosedao\\dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\mongoosedao\\crudaxios.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\mongoosedao\\mongooseparser.ts",["198"],"import { crud } from './crudaxios'; \r\n\r\nexport interface IMongooseCollection { \r\n  accessor:string; \r\n  label:string; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  accessor:string; \r\n  instance:string; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n//export const collections:Collection[] = new Array<Collection>(); \r\n\r\n// const collections:IMongooseCollection[] = (await crud.Read('collections')).data; \r\nexport async function LoadMongooseCollections(collectionsToFind:string[]):Promise<ICollection[]> { \r\n  const mongooseCollections = (await crud.Read('collections')).data as IMongooseCollection[]; \r\n  const foundCollections = mongooseCollections.filter( c => collectionsToFind.includes(c.accessor) ); \r\n  const loadedCollections = new Array<ICollection>(); \r\n  for(let i=0; i<foundCollections.length; i++) { \r\n    const collection = await LoadCollection(foundCollections[i]); \r\n    loadedCollections.push(collection); \r\n  } \r\n  return loadedCollections; \r\n} \r\n\r\nasync function LoadCollection(collection:IMongooseCollection):Promise<ICollection> { \r\n  const icollection:ICollection = {} as ICollection; \r\n  icollection.accessor = collection.accessor; \r\n  icollection.label = collection.label; \r\n  \r\n  const fields = (await crud.Models(collection.accessor)).data.paths; \r\n  const mongooseFields = Object.keys(fields).map( f => { \r\n    return {accessor:f, ...fields[f] } as IMongooseField; \r\n  }); \r\n  icollection.ifields = ParseFields(mongooseFields); \r\n  icollection.entries = (await crud.Read(collection.accessor)).data; \r\n  return icollection; \r\n} \r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'Array') \r\n    return []; \r\n  if(type === 'Boolean') \r\n    return false; \r\n  if(type === 'Number') \r\n    return 0; \r\n  return ''; \r\n} \r\n\r\n//async function ParseFields() \r\nfunction ParseFields(fields:IMongooseField[]):IField[] { \r\n  return fields.map( f => { \r\n    const {accessor, instance, $embeddedSchemaType, options} = f; \r\n    const ifield:IField = {} as IField; \r\n    \r\n    ifield.accessor = accessor; \r\n    ifield.label = options.label ?? ''; \r\n    ifield.options = options; \r\n    ifield.type = instance; \r\n    ifield.subtype = $embeddedSchemaType?.instance ?? ''; \r\n    ifield.modeltype = options.ref ?? ''; \r\n    ifield.format = options.format ?? \"${value}\"; \r\n    ifield.sort = options.sortType ?? ''; \r\n    ifield.defaultValue = GetDefaultValue(ifield.type, ifield.options); \r\n    return ifield; \r\n  }); \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\misctest\\testobject\\testobject.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\custompackages.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\customhooks\\customhooks.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\components\\inputtable.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\components\\inputcells.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\components\\inputrows.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\components\\inputrowbtn.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\colsetting\\columnsetting.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\hook\\useColumnSetting.tsx",["199","200","201"],"import {useState, useEffect} from 'react'; \r\nimport {IColumnSetting} from '../colsetting/columnsetting'; \r\n\r\n\r\nexport function ColumnSetter(cols:IColumnSetting[], setter:(col:IColumnSetting)=>void) { \r\n  cols.map( c => setter(c) ); \r\n} \r\n\r\n// useColumnSetting ===========================\r\nexport function useColumnSetting(defaultColumnSetting:IColumnSetting[]) { \r\n  const [columnSettings, setColumnSettings] = useState(defaultColumnSetting); \r\n\r\n  useEffect(() => { \r\n    setColumnSettings(defaultColumnSetting); \r\n  },[JSON.stringify(defaultColumnSetting)]); \r\n\r\n  // Get Column Settings ------------------------\r\n  function GetColumnSettings(handle?:string):IColumnSetting[] { \r\n    const ifields = GetFields(); \r\n    return ifields.map( f => { \r\n      return GetIColumnSetting(f, handle); \r\n    }); \r\n  } \r\n\r\n  function GetIColumnSetting(ifield:IField, handle?:string):IColumnSetting { \r\n    const defaultCol = columnSettings.find( c => c.ifield.accessor === ifield.accessor && !c.predicate); \r\n    const activeCol = columnSettings.find( c => c.ifield.accessor === ifield.accessor && c.predicate && c.predicate(handle)); \r\n    return activeCol ?? defaultCol ?? {} as IColumnSetting; \r\n  } \r\n\r\n  function GetFields():IField[] { \r\n    const ifields:IField[] = []; \r\n    columnSettings.forEach( c => { \r\n      if(c.show && ifields.every(f => f.accessor !== c.ifield.accessor)) \r\n        ifields.push(c.ifield); \r\n    }); \r\n    return ifields; \r\n  } \r\n\r\n  // FilterColumnSetting\r\n  function FilterColumns(columns:string[]) { \r\n    const filtered:(IColumnSetting|undefined)[] = columns.map( (c,i) => { \r\n      const found = defaultColumnSetting.find( cs => cs.ifield.accessor === c); \r\n      if(found) \r\n        found.order = i; \r\n      return found; \r\n    }); \r\n    if(filtered === undefined || filtered.length ===0) \r\n      return; \r\n    setColumnSettings(filtered as IColumnSetting[]); \r\n  } \r\n\r\n  function SortBy() {} \r\n\r\n  return {GetColumnSettings, FilterColumns}; \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\hook\\useCrud.tsx",["202","203"],"import {useEffect, useState} from 'react'; \r\n\r\n// IDao =========================================\r\nexport interface IDao { \r\n  Create: (accessor:string, entry:IEntry) => Promise<IResponse>; \r\n  Update: (accessor:string, entry:IEntry) => Promise<IResponse>; \r\n  Delete: (accessor:string, entry:IEntry) => Promise<IResponse>; \r\n  GetForeignOptions: (ifield:IField) => IOption[]; \r\n  GetForeignValue: (ifield:IField, id:string) => any|undefined; \r\n  GetICollection: (accessor:string) => ICollection|void; \r\n} \r\n\r\n// ICRUDHOOK ------------------------------------\r\nexport interface ICrudHook { \r\n  entries: IEntry[]; \r\n  response: IResponse; \r\n  Create: (entry:any) => Promise<boolean>; \r\n  Update: (entry:any) => Promise<boolean>; \r\n  Delete: (entry:any) => Promise<boolean>; \r\n}\r\n// useCrud ======================================\r\nexport function useCrud(dao:IDao, icollection:ICollection) { \r\n  const [entries, setEntries] = useState(icollection.entries); \r\n  const [response, setResponse] = useState({} as IResponse); \r\n\r\n  useEffect(() => { \r\n    setEntries(icollection.entries); \r\n  },[JSON.stringify(icollection.accessor)]) \r\n\r\n  // Build Crud methods \r\n  const Create = async (entry:IEntry):Promise<boolean> => { \r\n    const response = await dao.Create(icollection.accessor, entry); \r\n    if(response.success) \r\n      setEntries(icollection.entries); // ?? will it update entries hook propertly ?? \r\n    setResponse(response); \r\n    return response.success; \r\n  } \r\n\r\n  const Update = async (entry:IEntry):Promise<boolean> => { \r\n    const response = await dao.Update(icollection.accessor, entry); \r\n    if(response.success) \r\n      setEntries(icollection.entries); // ?? will it update entries hook propertly ?? \r\n    setResponse(response); \r\n    return response.success; \r\n  }\r\n\r\n  const Delete = async (entry:IEntry):Promise<boolean> => { \r\n    const response = await dao.Delete(icollection.accessor, entry); \r\n    if(response.success) \r\n      setEntries(icollection.entries); // ?? will it update entries hook propertly ?? \r\n    setResponse(response); \r\n    return response.success; \r\n  }\r\n\r\n  return {entries, response, Create, Update, Delete} as ICrudHook; \r\n} \r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\customhooks\\useLoad.tsx",["204","205"],"import {useState, useCallback, useEffect} from 'react'; \r\n\r\ninterface ILoad { \r\n  success: boolean; \r\n  err?: any; \r\n} \r\n\r\n// CUSTOM HOOK: useLoad  ========================\r\n/*\r\nTakes in a async Loading function \r\nreturns \r\n  'status'\r\n    .success = true if loading is done and successful. \r\n    .err = will remain undefined unless loading has failed. \r\n  'Reload' callBack function allowing to recall loading function. \r\n*/\r\nexport function useLoad(LoadFunc:() => Promise<any>) : {status:ILoad, Reload:any} { \r\n  const [status, setStatus] = useState({success:false} as ILoad); \r\n  const Reload = useCallback( async () => { \r\n    setStatus({success:false}); \r\n    await LoadFunc() \r\n    .then( () => setStatus({success:true})) \r\n    .catch( err => setStatus({success:true, err:err})); \r\n  }, []); \r\n\r\n  useEffect(() => { \r\n    Reload(); \r\n  }, []); \r\n\r\n  return {status, Reload}; \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\customhooks\\usePage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\components\\inputtableheader.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\hook\\usetable.tsx",["206"],"import { useEffect, useState } from 'react'; \r\n//import { IFieldSetting, CrudFunc } from \"./columsetting/columsetter\"; \r\n\r\n\r\nexport interface ITableStatus { \r\n  entries: IEntry[]; \r\n  activeEntry:IEntry; \r\n  activeRow:number; \r\n  activeMode:string; \r\n}\r\nexport interface ITableHook extends ITableStatus{ \r\n  setActiveEntry:any; \r\n  setActiveRow: any; \r\n  setActiveMode:any; \r\n  CrudAction: (crudFunc:CrudFunc) => Promise<void>; \r\n  SetActiveEntry: (newValue:any, ifield:IField) => void; \r\n  GetActiveHook: (row?:number) => string; \r\n  ActivateHook: (mode?:string, row?:number) => void; \r\n  ResetActiveHooks: () => void; \r\n} \r\n\r\n/// useInputTable\r\nexport function useInputTable(entries:IEntry[]):ITableHook { \r\n  const [activeEntry, setActiveEntry] = useState<IEntry>({} as IEntry); \r\n  const [activeRow, setActiveRow] = useState(-1); \r\n  const [activeMode, setActiveMode] = useState('read'); \r\n\r\n  useEffect(() => { \r\n    if(activeMode !== 'read' || activeRow !== -1) \r\n    ResetActiveHooks(); \r\n  },[entries]); \r\n\r\n  const CrudAction = async (crudFunc:CrudFunc) => { \r\n    if(await crudFunc(activeEntry)) \r\n      ResetActiveHooks(); \r\n  } \r\n\r\n  const SetActiveEntry = (newValue:any, ifield:IField) => { \r\n    const newEntries = {...activeEntry}; \r\n    newEntries[ifield.accessor as any] = newValue; \r\n    setActiveEntry(newEntries); \r\n  } \r\n\r\n  const GetActiveHook = (row?:number) => { \r\n    if(row !== undefined && activeRow === row) \r\n      return activeMode; \r\n    return ''; \r\n  }\r\n\r\n  const ActivateHook = (mode:string = 'read', row:number =-1) => { \r\n    const entry = entries[row] ?? {}; \r\n    setActiveMode(mode); \r\n    setActiveRow(row); \r\n    setActiveEntry(entry); \r\n  } \r\n\r\n  const ResetActiveHooks = () => { \r\n    setActiveEntry({} as IEntry); \r\n    setActiveRow(-1); \r\n    setActiveMode('read'); \r\n  } \r\n\r\n  const tableHook = {entries, activeEntry, setActiveEntry, activeRow, setActiveRow, activeMode, setActiveMode, \r\n    SetActiveEntry, CrudAction, GetActiveHook, ActivateHook, ResetActiveHooks} as ITableHook; \r\n\r\n\r\n  return {...tableHook}; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputobject\\common.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputobject\\defaultFieldRendering.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputobject\\fields.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputobject\\rows.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputobject\\table.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputobject\\object.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\inputtable\\common.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\packages\\columnsetting\\usecolumnsetting.tsx",["207"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\misctest\\testcolsetting\\testcolsetting.tsx",[],{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","severity":1,"message":"213","line":17,"column":18,"nodeType":"214","messageId":"215","endLine":17,"endColumn":24},{"ruleId":"216","severity":2,"message":"217","line":39,"column":6,"nodeType":"218","endLine":39,"endColumn":17},{"ruleId":"212","severity":1,"message":"219","line":8,"column":36,"nodeType":"214","messageId":"215","endLine":8,"endColumn":45},{"ruleId":"212","severity":1,"message":"220","line":76,"column":10,"nodeType":"214","messageId":"215","endLine":76,"endColumn":13},{"ruleId":"208","replacedBy":"221"},{"ruleId":"210","replacedBy":"222"},{"ruleId":"212","severity":1,"message":"223","line":2,"column":35,"nodeType":"214","messageId":"215","endLine":2,"endColumn":45},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","replacedBy":"211"},{"ruleId":"224","severity":1,"message":"225","line":40,"column":5,"nodeType":"226","endLine":40,"endColumn":34,"suggestions":"227"},{"ruleId":"224","severity":1,"message":"228","line":40,"column":6,"nodeType":"229","endLine":40,"endColumn":33},{"ruleId":"230","severity":1,"message":"231","line":79,"column":39,"nodeType":"232","messageId":"233","endLine":79,"endColumn":49},{"ruleId":"224","severity":1,"message":"234","line":15,"column":5,"nodeType":"226","endLine":15,"endColumn":43,"suggestions":"235"},{"ruleId":"224","severity":1,"message":"228","line":15,"column":6,"nodeType":"229","endLine":15,"endColumn":42},{"ruleId":"212","severity":1,"message":"236","line":53,"column":12,"nodeType":"214","messageId":"215","endLine":53,"endColumn":18},{"ruleId":"224","severity":1,"message":"237","line":28,"column":5,"nodeType":"226","endLine":28,"endColumn":43,"suggestions":"238"},{"ruleId":"224","severity":1,"message":"228","line":28,"column":6,"nodeType":"229","endLine":28,"endColumn":42},{"ruleId":"224","severity":1,"message":"239","line":24,"column":6,"nodeType":"226","endLine":24,"endColumn":8,"suggestions":"240"},{"ruleId":"224","severity":1,"message":"241","line":28,"column":6,"nodeType":"226","endLine":28,"endColumn":8,"suggestions":"242"},{"ruleId":"224","severity":1,"message":"243","line":31,"column":5,"nodeType":"226","endLine":31,"endColumn":14,"suggestions":"244"},{"ruleId":"224","severity":1,"message":"245","line":10,"column":40,"nodeType":"226","endLine":10,"endColumn":42,"suggestions":"246"},"no-native-reassign",["247"],"no-negated-in-lhs",["248"],"@typescript-eslint/no-unused-vars","'Reload' is assigned a value but never used.","Identifier","unusedVar","react/jsx-no-undef","'InputSelect' is not defined.","JSXIdentifier","'InputCell' is defined but never used.","'dao' is assigned a value but never used.",["247"],["248"],"'ITableHook' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.value' and 'value'. Either include them or remove the dependency array. If 'setValue' needs the current value of 'props.value', you can also switch to useReducer instead of useState and read 'props.value' in the reducer.","ArrayExpression",["249"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","React Hook useEffect has a missing dependency: 'defaultColumnSetting'. Either include it or remove the dependency array. If 'setColumnSettings' needs the current value of 'defaultColumnSetting', you can also switch to useReducer instead of useState and read 'defaultColumnSetting' in the reducer.",["250"],"'SortBy' is defined but never used.","React Hook useEffect has a missing dependency: 'icollection.entries'. Either include it or remove the dependency array. If 'setEntries' needs the current value of 'icollection.entries', you can also switch to useReducer instead of useState and read 'icollection.entries' in the reducer.",["251"],"React Hook useCallback has a missing dependency: 'LoadFunc'. Either include it or remove the dependency array. If 'LoadFunc' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["252"],"React Hook useEffect has a missing dependency: 'Reload'. Either include it or remove the dependency array.",["253"],"React Hook useEffect has missing dependencies: 'activeMode' and 'activeRow'. Either include them or remove the dependency array.",["254"],"React Hook useMemo has a missing dependency: 'Cols'. Either include it or remove the dependency array.",["255"],"no-global-assign","no-unsafe-negation",{"desc":"256","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},"Update the dependencies array to be: [props.value, value]",{"range":"270","text":"271"},"Update the dependencies array to be: [defaultColumnSetting]",{"range":"272","text":"273"},"Update the dependencies array to be: [icollection.entries]",{"range":"274","text":"275"},"Update the dependencies array to be: [LoadFunc]",{"range":"276","text":"277"},"Update the dependencies array to be: [Reload]",{"range":"278","text":"279"},"Update the dependencies array to be: [activeMode, activeRow, entries]",{"range":"280","text":"281"},"Update the dependencies array to be: [Cols]",{"range":"282","text":"283"},[1233,1262],"[props.value, value]",[520,558],"[defaultColumnSetting]",[1086,1124],"[icollection.entries]",[793,795],"[LoadFunc]",[845,847],"[Reload]",[1000,1009],"[activeMode, activeRow, entries]",[243,245],"[Cols]"]