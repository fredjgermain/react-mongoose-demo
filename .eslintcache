[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\experiments.tsx":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\_utils.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\field\\field.class.ts":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\_mongooseparser.ts":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudaxios.ts":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientheader.component.tsx":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentifier.component.tsx":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientinfos.component.tsx":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientsloader.component.tsx":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireloader.component.tsx":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireforms.component.tsx":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnairepage.page.tsx":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testArrx.tsx":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testarrx.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\_input.ts":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\_useloader.ts":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\_arrx.ts":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\_objx.ts":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\useloader.hook.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input\\input.component.tsx":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.component.tsx":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\readarray.component.tsx":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.component.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\options.component.tsx":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.hook.tsx":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\selectheader.component.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.hook.tsx":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\RemovableItems.component.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\_tablr.ts":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\usepage\\usePage.tsx":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionedit.component.tsx":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\useblankform.ts":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\testtablr.tsx":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\mockdata.ts":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\_useactive.ts":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\useactiveve.hook.ts":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\crudbtn.component.tsx":"57"},{"size":600,"mtime":1609529670659,"results":"58","hashOfConfig":"59"},{"size":441,"mtime":1610389372446,"results":"60","hashOfConfig":"59"},{"size":362,"mtime":499162500000,"results":"61","hashOfConfig":"59"},{"size":225,"mtime":1609475507334,"results":"62","hashOfConfig":"59"},{"size":119,"mtime":1609476074144,"results":"63","hashOfConfig":"59"},{"size":117,"mtime":1609476049273,"results":"64","hashOfConfig":"59"},{"size":496,"mtime":1609883323259,"results":"65","hashOfConfig":"59"},{"size":430,"mtime":1610389990615,"results":"66","hashOfConfig":"59"},{"size":693,"mtime":1610152063091,"results":"67","hashOfConfig":"59"},{"size":1432,"mtime":1610133369532,"results":"68","hashOfConfig":"59"},{"size":3330,"mtime":1609805687249,"results":"69","hashOfConfig":"59"},{"size":1698,"mtime":1610154963843,"results":"70","hashOfConfig":"59"},{"size":2351,"mtime":1609452679027,"results":"71","hashOfConfig":"59"},{"size":278,"mtime":1610227362484,"results":"72","hashOfConfig":"59"},{"size":1819,"mtime":1609452679070,"results":"73","hashOfConfig":"59"},{"size":1608,"mtime":1609452679069,"results":"74","hashOfConfig":"59"},{"size":2252,"mtime":1609452679073,"results":"75","hashOfConfig":"59"},{"size":2239,"mtime":1609979770974,"results":"76","hashOfConfig":"59"},{"size":222,"mtime":1609965015785,"results":"77","hashOfConfig":"59"},{"size":919,"mtime":1610159021625,"results":"78","hashOfConfig":"59"},{"size":1559,"mtime":1610228176480,"results":"79","hashOfConfig":"59"},{"size":1389,"mtime":1610159021729,"results":"80","hashOfConfig":"59"},{"size":1834,"mtime":1610230147763,"results":"81","hashOfConfig":"59"},{"size":5686,"mtime":1610389196830,"results":"82","hashOfConfig":"59"},{"size":1188,"mtime":1610230172532,"results":"83","hashOfConfig":"59"},{"size":2449,"mtime":1610062912048,"results":"84","hashOfConfig":"59"},{"size":2288,"mtime":1610229762594,"results":"85","hashOfConfig":"59"},{"size":643,"mtime":1609791814153,"results":"86","hashOfConfig":"59"},{"size":98,"mtime":1609788148795,"results":"87","hashOfConfig":"59"},{"size":217,"mtime":1610226352798,"results":"88","hashOfConfig":"59"},{"size":207,"mtime":1610161426383,"results":"89","hashOfConfig":"59"},{"size":1301,"mtime":1609804782791,"results":"90","hashOfConfig":"59"},{"size":1778,"mtime":1610159021625,"results":"91","hashOfConfig":"59"},{"size":2727,"mtime":1610159021626,"results":"92","hashOfConfig":"59"},{"size":489,"mtime":1609790785285,"results":"93","hashOfConfig":"59"},{"size":1410,"mtime":1610311943278,"results":"94","hashOfConfig":"59"},{"size":1025,"mtime":1609790418274,"results":"95","hashOfConfig":"59"},{"size":1657,"mtime":1610421736288,"results":"96","hashOfConfig":"59"},{"size":1992,"mtime":1610227775191,"results":"97","hashOfConfig":"59"},{"size":970,"mtime":1609787735783,"results":"98","hashOfConfig":"59"},{"size":977,"mtime":1610068539668,"results":"99","hashOfConfig":"59"},{"size":2177,"mtime":1610159021627,"results":"100","hashOfConfig":"59"},{"size":497,"mtime":1609787735852,"results":"101","hashOfConfig":"59"},{"size":3496,"mtime":1610389477035,"results":"102","hashOfConfig":"59"},{"size":379,"mtime":1610223339809,"results":"103","hashOfConfig":"59"},{"size":1529,"mtime":1610226206290,"results":"104","hashOfConfig":"59"},{"size":462,"mtime":1610223305599,"results":"105","hashOfConfig":"59"},{"size":1040,"mtime":1610223161129,"results":"106","hashOfConfig":"59"},{"size":982,"mtime":1610224559674,"results":"107","hashOfConfig":"59"},{"size":1708,"mtime":1610226535467,"results":"108","hashOfConfig":"59"},{"size":1664,"mtime":1610318540525,"results":"109","hashOfConfig":"59"},{"size":1486,"mtime":1610311931655,"results":"110","hashOfConfig":"59"},{"size":5062,"mtime":1610398701751,"results":"111","hashOfConfig":"59"},{"size":1442,"mtime":1610390032386,"results":"112","hashOfConfig":"59"},{"size":109,"mtime":1609788148849,"results":"113","hashOfConfig":"59"},{"size":1965,"mtime":1610415297943,"results":"114","hashOfConfig":"59"},{"size":1913,"mtime":1610398315644,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"ke513i",{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"135"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"135"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"127"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"127"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"127"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"127"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"154"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"135"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"135"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"135"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"127"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"135"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"135"},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["248","249"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",[],["250","251"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\experiments.tsx",["252"],"import React from 'react'; \r\nimport {TestArrx} from './testarrx'; \r\nimport {TestTablr} from './testtablr/testtablr'; \r\n\r\n\r\n// EXPERIMENTS ==================================\r\nexport default function Experiments() { \r\n\r\n  /*const arr = [1,2,3,4,5]; \r\n  const obj = {a:12, b:13, c:'a'}; \r\n  const keys = Object.keys(obj); \r\n  console.log(keys);*/\r\n\r\n  return <div> \r\n    <h1>EXPERIMENTS</h1> \r\n    <TestTablr /> \r\n  </div> \r\n} \r\n\r\n\r\n",["253","254"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\_utils.ts",["255","256","257"],"import {Filter, Remove, ToArray, Union, Combine, Duplicates, Order, CommonPredicates} from './arrays.utils'; \r\nimport {SetSize, SetWidth, IEvent, IsPressEnter, OnEnter, GetInputType, GetValueFromInput} from './htmlelement.utils'; \r\nimport {Copy, Edit, Read, IsEmpty, IsNull, GetDefaultValueByType, GetTypeByValue} from './valuetypetesting.utils'; \r\nimport {Field} from './field/field.class'; \r\n\r\n\r\nexport {Filter, Remove, ToArray, Union, Combine, Duplicates, Order, CommonPredicates} \r\nexport {SetSize, SetWidth, IsPressEnter, OnEnter, GetInputType, GetValueFromInput} \r\nexport type {IEvent} \r\nexport {Copy, Edit, Read, IsEmpty, IsNull, GetDefaultValueByType, GetTypeByValue} \r\nexport {Field} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",["258"],"import React from 'react'; \r\nimport {IsNull} from './_utils'; \r\n\r\n// IEvent #####################################\r\nexport interface IEvent extends React.ChangeEvent<HTMLInputElement> { \r\n  code?:any, \r\n  [key:string]:any, \r\n} \r\n\r\nexport function OnEnter(event:any, Func:any) { \r\n  if(IsPressEnter( (event as IEvent).code ) ) \r\n    Func(); \r\n} \r\n\r\n\r\n\r\n// Get Value From Input -------------------------\r\nexport function GetValueFromInput(event:IEvent) { \r\n  const target = event.target; \r\n  const type = target.type; \r\n  if(type === 'number') \r\n    return target.valueAsNumber as number; \r\n  if(type === 'date') \r\n    return target.valueAsDate; \r\n  if(type === 'checkbox') \r\n    return target.checked as boolean; \r\n  return target.value; \r\n} \r\n\r\n\r\n// GetInputType ---------------------------------\r\nexport function GetInputType(type:string) { \r\n  if(type === 'number') \r\n    return 'number'; \r\n  if(type === 'boolean') \r\n    return 'checkbox'; \r\n  if(type === 'string') \r\n    return 'text'; \r\n  return 'text'; \r\n}\r\n\r\n\r\n// If Code is pressEnter\r\nexport function IsPressEnter(code:string = ''):boolean { \r\n  return code === 'Enter' || code === 'NumpadEnter'; \r\n} \r\n\r\n\r\n// TAG UTILS ###################################\r\nexport function SetWidth(value:number):{width:any} {\r\n  return {width:`${SetSize(value)+2}ch`}; \r\n}\r\n\r\nexport function SetSize(value:any):number { \r\n  const w = String(value).length; \r\n  return w < 5 ? 5 : w; \r\n} \r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\field\\field.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudaxios.ts",[],["259","260"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["261"],"export interface IMongooseModel { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\n//async function ParseFields() \r\nexport function ParseField(field:IMongooseField):IField { \r\n  const {path, instance, options} = field; \r\n  const ifield:IField = {} as IField; \r\n  ifield.accessor = path; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.options = options; \r\n  ifield.type = GetType(field); \r\n  ifield.enums = options['enum'] ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, ifield.options); \r\n  \r\n  ifield.isEnum = options['enum']? true: false; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = instance.toLowerCase() === 'objectid'; \r\n  //ifield.isMixed = \r\n  //ifield.validators = \r\n  return ifield; \r\n} \r\n\r\nfunction GetType({instance, $embeddedSchemaType}:IMongooseField) { \r\n  if(instance.toLocaleLowerCase() === 'array') \r\n    return ($embeddedSchemaType?.instance ?? '').toLocaleLowerCase(); \r\n  return instance.toLocaleLowerCase(); \r\n} \r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",["262"],"import React, {useState} from 'react'; \r\nimport {CrudMongoose} from '../../reusable/mongooseparser/_mongooseparser'; \r\nimport {IsNull, IsEmpty} from '../../reusable/utils/_utils'; \r\n\r\nimport {PatientHeader} from './components/patientheader.component'; \r\nimport {PatientsLoader} from './components/patientsloader.component'; \r\nimport {PatientIdentifier} from './components/patientidentifier.component'; \r\nimport {PatientInfos} from './components/patientinfos.component'; \r\nimport QuestionnairePage from '../questionnaire/questionnairepage.page';\r\n\r\n/*import {QuestionnaireLoader} from './components/questionnaireloader.component'; \r\nimport {Questionnaire} from './components/questionnaire.component'; */\r\n\r\ninterface IPatientContext { \r\n  patients:ICollection; \r\n  setPatients:any; \r\n\r\n  patient:IEntry; \r\n  setPatient:any; \r\n\r\n  patientUpdated:boolean; \r\n  setPatientUpdated:any; \r\n} \r\n// PATIENT ======================================\r\nexport const PatientContext = React.createContext({} as IPatientContext); \r\nexport const CrudContext = React.createContext({} as {crud:CrudMongoose});\r\n\r\nexport default function Patient() { \r\n  const crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n  const [patient, setPatient] = useState<IEntry>({} as IEntry); \r\n  const [patientUpdated, setPatientUpdated] = useState(false); \r\n  const [patients, setPatients] = useState({} as ICollection); \r\n  \r\n  const context = {crud, patients, setPatients, \r\n    patient, setPatient, \r\n    patientUpdated, setPatientUpdated} as IPatientContext; \r\n\r\n  if(!patientUpdated) \r\n    return <div> \r\n      <CrudContext.Provider value={{crud}} >\r\n        <PatientContext.Provider value={context} > \r\n          <PatientHeader /> \r\n          {IsEmpty(patients) && <PatientsLoader/>} \r\n          {!IsEmpty(patients) && IsEmpty(patient) && <PatientIdentifier/>} \r\n          {!IsEmpty(patients) && !IsEmpty(patient) && <PatientInfos/>} \r\n        </PatientContext.Provider> \r\n      </CrudContext.Provider>\r\n    </div> \r\n\r\n  return <div> \r\n    <CrudContext.Provider value={{crud}} >\r\n      <PatientContext.Provider value={context} > \r\n        <QuestionnairePage/> \r\n      </PatientContext.Provider> \r\n    </CrudContext.Provider>\r\n  </div>  \r\n} \r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientheader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentifier.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientinfos.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientsloader.component.tsx",["263"],"import {useContext, useEffect} from 'react'; \r\nimport {useLoader} from '../../../reusable/hooks/useloader/_useloader'; \r\n\r\nimport {CrudContext, PatientContext} from '../patient.page'; \r\n\r\n\r\n// PatientsCollectionLoader ===================== \r\nexport function PatientsLoader() { \r\n  const {crud} = useContext(CrudContext); \r\n  const {setPatients} = useContext(PatientContext); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const loadfunc = async () => { \r\n    const response:IResponse = await crud.Collection('patients'); \r\n    if(response.success) \r\n      setPatients(() => response.data as ICollection); \r\n  }; \r\n\r\n  useEffect(() => {Load(loadfunc)}, []); \r\n\r\n\r\n  /* ?????? TO ADD IN USELOADER ??????\r\n  function Component(props) {\r\n    const [fetched, setFetched] = React.useState(false);\r\n    React.useEffect(() => {\r\n      const ac = new AbortController();\r\n      Promise.all([\r\n        fetch('http://placekitten.com/1000/1000', {signal: ac.signal}),\r\n        fetch('http://placekitten.com/2000/2000', {signal: ac.signal})\r\n      ]).then(() => setFetched(true))\r\n        .catch(ex => console.error(ex));\r\n      return () => ac.abort(); // Abort both fetches on unmount\r\n    }, []);\r\n    return fetched;\r\n  }\r\n  */\r\n\r\n  if(!state.ready) \r\n    return <div> Loading ... </div> \r\n  if(state.ready && !state.success) \r\n    return <div> Oh no! An error occured ... </div> \r\n  return null; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireloader.component.tsx",["264","265"],"import {useEffect, useContext} from 'react'; \r\nimport {useLoader} from '../../../reusable/hooks/useloader/_useloader'; \r\nimport {CrudContext} from '../../patient/patient.page';\r\nimport {QuestionnaireContext} from '../questionnairepage.page';\r\n\r\n\r\n\r\n// PatientsCollectionLoader ===================== \r\nexport function QuestionnaireLoader() { \r\n  const {crud} = useContext(CrudContext); \r\n\r\n  const {setQuestions, setResponses, setAnswers} = useContext(QuestionnaireContext); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const loadfunc = async () => { \r\n    const questions:IResponse = await crud.Collection('questions'); \r\n    if(questions.success) \r\n      setQuestions(() => questions.data as ICollection); \r\n    console.log(questions);\r\n\r\n    const responses:IResponse = await crud.Collection('responses'); \r\n    if(responses.success) \r\n      setResponses(() => responses.data as ICollection); \r\n\r\n    /*const answers:IResponse = await crud.Collection('answers'); \r\n    if(answers.success) \r\n      setAnswers(() => answers.data as ICollection); */\r\n  }; \r\n\r\n  useEffect(() => {Load(loadfunc)}, []); \r\n\r\n\r\n  /* ?????? TO ADD IN USELOADER ??????\r\n  function Component(props) {\r\n    const [fetched, setFetched] = React.useState(false);\r\n    React.useEffect(() => {\r\n      const ac = new AbortController();\r\n      Promise.all([\r\n        fetch('http://placekitten.com/1000/1000', {signal: ac.signal}),\r\n        fetch('http://placekitten.com/2000/2000', {signal: ac.signal})\r\n      ]).then(() => setFetched(true))\r\n        .catch(ex => console.error(ex));\r\n      return () => ac.abort(); // Abort both fetches on unmount\r\n    }, []);\r\n    return fetched;\r\n  }\r\n  */\r\n\r\n  if(!state.ready) \r\n    return <div> Loading ... </div> \r\n  if(state.ready && !state.success) \r\n    return <div> Oh no! An error occured ... </div> \r\n  return null; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireforms.component.tsx",["266","267"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnairepage.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testArrx.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testarrx.tsx",["268","269","270","271","272"],"import React, {useContext, useState} from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex} from '../../reusable/components/arrx/_arrx'; \r\nimport {Objx, ObjxContext, Fields, Field, FieldContext, FieldLabel, FieldValue, ArrxObjx} from '../../reusable/components/objx/_objx'; \r\nimport {Input} from '../../reusable/components/input/_input'; \r\nimport {OnEnter} from '../../reusable/utils/_utils'; \r\nimport { ElementValue } from '../../reusable/components/arrx/arrx.component';\r\n\r\n\r\n\r\n// TEST ARRX ====================================\r\nexport function TestArrx() {\r\n  // Ifields\r\n  const ifield = {type:'', accessor:'', defaultValue:'', label:'', options:{}} as IField; \r\n  const ifields:IField[] = [ \r\n    {...ifield, type:'number', accessor:'a', label:'A : ', defaultValue:0}, \r\n    {...ifield, type:'string', accessor:'b', label:'B : ', defaultValue:''}, \r\n  ]; \r\n\r\n  // Data\r\n  const Datas = [\r\n    {a:12, b:'a'}, \r\n    {a:13, b:'b'}, \r\n    {a:14, b:'c'}, \r\n    {a:15, b:'d'}, \r\n    {a:16, b:'e'}, \r\n    {a:17, b:'f'}, \r\n    {a:18, b:'g'}, \r\n    {a:15, b:'h'}, \r\n    {a:16, b:'i'}, \r\n    {a:17, b:'j'}, \r\n    {a:18, b:'k'} \r\n  ]; \r\n\r\n  const [datas, setDatas] = useState(Datas); \r\n\r\n  return <div> \r\n    <Arrx {...{values:datas}} > \r\n      <Elements>\r\n        <ElementIndex/>\r\n        <ElementValue/>\r\n        <br/>\r\n      </Elements>\r\n    </Arrx>\r\n\r\n    \r\n    <Arrx {...{values:datas}} > \r\n      <Elements>\r\n        <ElementIndex />\r\n        <ArrxObjx {...{ifields}}> \r\n          <Fields>\r\n            [ <FieldLabel/> = <FieldValue/> ]\r\n            <FieldEdit {...{setValues:setDatas}}/>\r\n          </Fields>\r\n          <br/>\r\n        </ArrxObjx>\r\n      </Elements> \r\n    </Arrx>\r\n  </div>\r\n}\r\n\r\n\r\ninterface IFieldEdit {setValues:any}\r\nfunction FieldEdit({setValues}:IFieldEdit) { \r\n  const {values} = useContext(ArrxContext); \r\n  const {index} = useContext(ElementContext); \r\n  const {ifield} = useContext(FieldContext); \r\n\r\n  const [value, setValue] = useState(values[index][ifield.accessor]); \r\n  const {type, defaultValue} = ifield; \r\n  \r\n  const onEnterUp = () => { \r\n    setValues((prev:any) => { \r\n      const newElement = {...prev[index]}; \r\n      newElement[ifield.accessor] = value; \r\n      prev[index] = newElement; \r\n      return [...prev]; \r\n    }); \r\n  }\r\n\r\n  return <Input {...{value, setValue, type, defaultValue, onEnterUp}} />\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\_useloader.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input\\input.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\readarray.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\options.component.tsx",["273"],"import React, {useContext, useEffect} from 'react'; \r\n//import {IOption} from '../../reusable/_input'; \r\nimport {SelectContext} from './select.component'; \r\n\r\n\r\n// OPTIONS ======================================\r\ninterface IOptions { \r\n  label?:string; // defines a optgroup with a label \r\n  options:IOption[]; \r\n  [key:string]:any; \r\n} \r\n//const OptionsContext = React.createContext({}); \r\nexport function Options({label, options}:IOptions) { \r\n  const {setOptions} = useContext(SelectContext); \r\n  \r\n  useEffect(() => { \r\n    setOptions( (prev:any) => [...prev, ...options] ); \r\n  }, []); \r\n\r\n  return <div > \r\n    {label ? (<div className={'select_body_label'}>{label}</div>) : null} \r\n    {options.map( (option,i) => { \r\n      return <Option key={i} option={option} /> \r\n    })} \r\n  </div> \r\n} \r\n\r\nfunction Option({option}:{option:IOption}) { \r\n  const {SelectValue} = useContext(SelectContext); \r\n  return <div className={'select_body_option'} onClick={() => SelectValue(option.value)}> \r\n    {option.label} \r\n  </div>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\selectheader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\RemovableItems.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["274","275","276"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull} from '../../utils/_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield,key) => { \r\n      return <Cell {...{key, ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const value = GetDefaultValue(datas, ifield, row); \r\n  const context = {value, row, ifield} as ICellContext; \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n\r\nfunction GetDefaultValue(datas:any[], ifield:IField, row?:number) { \r\n  const data = datas[(row??-1)]; \r\n  return data ? data[ifield.accessor] : ifield.defaultValue; \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["277","278","279"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\usepage\\usePage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionedit.component.tsx",["280","281","282","283","284"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {Arrx, Elements, ArrxContext, ElementContext, ElementIndex} from '../../../reusable/components/arrx/_arrx'; \r\nimport {Input, Select, Options, InputArray} from '../../../reusable/components/input/_input'; \r\nimport {AnswersAreComplete, IAnswer} from './useblankform'; \r\n\r\n\r\n\r\n// QUESTION EDIT ================================\r\nexport function QuestionEdit({setValues}:{setValues:any}) { \r\n  const {values} = useContext(ArrxContext); \r\n  const {index} = useContext(ElementContext); \r\n  const Answer = (values[index] as IAnswer); \r\n  const {labels, optional, answer, responseType} = Answer; \r\n  \r\n  const [value, setValue] = useState(answer); \r\n  const {type, defaultValue} = {type:'number', defaultValue:0}; \r\n\r\n  const UpdateAnswers = () => setValues((prev:any) => { \r\n    const editedAnswers:IAnswer[] = [...prev]; \r\n    const editedAnswer:IAnswer = editedAnswers[index]; \r\n    editedAnswer.answer = value; \r\n    return editedAnswers; \r\n  }); \r\n\r\n  useEffect(() => {UpdateAnswers()},[value]); \r\n\r\n  const options:IOption[] = responseType.enum ? \r\n    responseType.enum.map( (v,i) => { return {value:i, label:v} }) : [] ; \r\n\r\n  const input = <Input {...{value, setValue, type, defaultValue}} />\r\n  const select = <span>\r\n    <Select {...{value, setValue, type, defaultValue}} >\r\n      <Options {...{options}} />\r\n    </Select>\r\n  </span>\r\n\r\n\r\n  return <div> \r\n    [<ElementIndex /><span>{labels[0]}: </span>] \r\n    {AnswersAreComplete([{...Answer, answer:value}]) ? \r\n      <span>&#10003;</span> : \r\n      <span>X</span>}\r\n    <span>{!responseType.enum ? input : select}</span> \r\n  </div> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\useblankform.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\testtablr.tsx",["285","286","287","288"],"import React, { useContext, useState } from 'react'; \r\nimport {Tablr, Rows, Row, RowContext, Cells, CellContext, Header, Heads, Cell} \r\n  from '../../../reusable/components/tablr/_tablr'; \r\nimport {Input} from '../../../reusable/components/input/_input'; \r\nimport {Arrx, Elements, ElementIndex, ElementValue} \r\n  from '../../../reusable/components/arrx/_arrx'; \r\nimport {usePage, IPageHook} from '../../../reusable/hooks/usepage/usePage'; \r\nimport {ifields, Datas} from './mockdata'; \r\n\r\nimport './table.css'; \r\nimport {IUseActive, useActive} from '../../../reusable/hooks/useactive/_useactive'; \r\nimport {CreateBtn, UpdateBtn, DeleteBtn} from './crudbtn.component'; \r\n\r\n\r\n\r\nexport const ActiveContext = React.createContext({} as IUseActive); \r\n// TEST TABLR ====================================\r\nexport function TestTablr() { \r\n  const [datas, setDatas] = useState(Datas); \r\n  \r\n  // page rows\r\n  const {pageIndex, setPageIndex, pageIndexes, from, to} = usePage(datas, 5); \r\n  const rows = datas.map((v,i) => i).filter((i) => i >=from && i<=to); \r\n\r\n  // defineds columns for buttons. \r\n  const colBtn = {label:'Btn', accessor:'', defaultValue:'', options:{}, type:''} as IField; \r\n\r\n  // activeContext \r\n  const activeContext = useActive(datas, ifields); \r\n\r\n  // For debug purposes. \r\n  const displayDatas = <Arrx {...{values:datas}} > \r\n      <Elements>\r\n        <ElementIndex/><ElementValue/><br/>\r\n      </Elements>\r\n    </Arrx>\r\n\r\n\r\n  const Create = async (entry:any) => { \r\n    setDatas((prev:any[]) => { return [...prev, entry]; }) \r\n  }; \r\n  const Update = async (entry:any) => {\r\n    setDatas((prev:any[]) => { \r\n      const newDatas = [...prev]; \r\n      const index = newDatas.findIndex( e => e['_id'] === entry['_id']); \r\n      if(index >=0 ) \r\n        newDatas[index] = entry; \r\n      return newDatas; \r\n    }) \r\n  }; \r\n  const Delete = async (entry:any) => {\r\n    setDatas((prev:any[]) => { \r\n      const newDatas = [...prev]; \r\n      const index = newDatas.findIndex( e => e['_id'] === entry['_id']); \r\n      if(index >=0) \r\n        newDatas.splice(index, 1); \r\n      return newDatas; \r\n    }) \r\n  }; \r\n\r\n\r\n  const displayActive = <div>{JSON.stringify(activeContext.active)}</div> \r\n  // tablr\r\n  const displayCrudTable = <ActiveContext.Provider value={activeContext} ><Tablr {...{datas}} > \r\n    <Header> \r\n      <Heads {...{ifields:[...ifields,colBtn, ]}} /> \r\n    </Header> \r\n    <tbody>\r\n      <Rows {...{rows}} > \r\n        <Cells {...{ifields}}> \r\n          <CellContent {...{setDatas}} /> \r\n        </Cells> \r\n        <Cell {...{ifield:colBtn}} >\r\n          <UpdateBtn {...{action:Update}} />\r\n          <DeleteBtn {...{action:Delete}} />\r\n        </Cell>\r\n      </Rows> \r\n      <Row {...{row:-1}} > \r\n        <Cells {...{ifields}}> \r\n          <CellContent {...{setDatas}} /> \r\n        </Cells>\r\n        <Cell {...{ifield:colBtn}} > \r\n          <CreateBtn {...{action:Create}} /> \r\n        </Cell>\r\n      </Row>\r\n    </tbody>\r\n  </Tablr></ActiveContext.Provider>\r\n\r\n  // RENDER .....................................\r\n  return <div> \r\n    <div>{displayDatas}</div> \r\n    <br/>\r\n    {displayActive}\r\n    <br/>\r\n    <div>{displayCrudTable}</div> \r\n    <div><Paging {...{pageIndex, setPageIndex, pageIndexes, from, to}} /></div> \r\n  </div> \r\n}\r\n\r\n\r\n\r\nexport function CellContent({setDatas}:{setDatas:React.Dispatch<any>}) { \r\n  const {value, row} = useContext(CellContext); \r\n  const {active, SetData} = useContext(ActiveContext); \r\n  const isActive = active.row === row; \r\n  const isEdit = (active.mode === 'create' || active.mode === 'update') && isActive; \r\n\r\n  // Cell Context -------------------------------\r\n  return <span>\r\n    {!isEdit && JSON.stringify(value)} \r\n    {isEdit && <CellInput />} \r\n  </span>\r\n}\r\n\r\n\r\nfunction CellInput() { \r\n  const {active:{data}, SetData} = useContext(ActiveContext); \r\n  const {ifield:{accessor, type, defaultValue}} = useContext(CellContext); \r\n\r\n  const value = data[accessor]; \r\n  const setValue = (newValue:any) => { \r\n    const newData = {...data}; \r\n    newData[accessor] = newValue; \r\n    SetData(newData); \r\n  }; \r\n\r\n  return <Input {...{value, setValue, type, defaultValue}} /> \r\n}\r\n\r\n\r\nfunction TablrInput({setDatas}:{setDatas:React.Dispatch<any>}) { \r\n  const {value:_value, row, ifield} = useContext(CellContext); \r\n  const {SetData} = useContext(ActiveContext); \r\n  const {type, defaultValue} = ifield; \r\n\r\n  const [value, setValue] = useState(_value); \r\n  \r\n  const onEnterUp = () => { \r\n    setDatas((prev:any) => { \r\n      const newElement = {...prev[row]}; \r\n      newElement[ifield.accessor] = value; \r\n      prev[row] = newElement; \r\n      return [...prev]; \r\n    }); \r\n  }\r\n\r\n  return <Input {...{value, setValue, type, defaultValue, onEnterUp}} /> \r\n} \r\n\r\n\r\n\r\n// PAGING ---------------------------------------\r\nfunction Paging({pageIndex, setPageIndex, pageIndexes}:IPageHook) { \r\n  return <div>\r\n    {pageIndexes.map( (p, i) => { \r\n      return <button key={i} onClick={() => setPageIndex(i)} disabled={pageIndex===i} >\r\n          {i+1}\r\n        </button> \r\n    })} \r\n  </div>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\mockdata.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\_useactive.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\useactiveve.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\crudbtn.component.tsx",["289"],"import React, { useContext } from 'react'; \r\nimport {RowContext} from '../../../reusable/components/tablr/_tablr'; \r\nimport {ActiveContext} from './testtablr'; \r\n\r\n\r\n// CRUD BTN -------------------------------------\r\nexport function CreateBtn({action}:{action:(entry:any)=>Promise<void>}) { \r\n  const handle = 'create'; \r\n  const labels = {affirm:'Create', confirm:'Confirm creation', cancel:'Cancel creation'}; \r\n  return <CrudBtn {...{handle, labels, action}} /> \r\n} \r\n\r\nexport function UpdateBtn({action}:{action:(entry:any)=>Promise<void>}) { \r\n  const handle = 'update'; \r\n  const labels = {affirm:'Update', confirm:'Confirm update', cancel:'Cancel update'}; \r\n  return <CrudBtn {...{handle, labels, action}} /> \r\n} \r\n\r\nexport function DeleteBtn({action}:{action:(entry:any)=>Promise<void>}) { \r\n  const handle = 'delete'; \r\n  const labels = {affirm:'Delete', confirm:'Confirm deletion', cancel:'Cancel deletion'}; \r\n  return <CrudBtn {...{handle, labels, action}} /> \r\n} \r\n\r\n\r\ninterface CrudBtn { \r\n  handle: string; \r\n  labels:{ \r\n    affirm:string, \r\n    confirm:string, \r\n    cancel:string, \r\n  }; \r\n  action:(entry:any)=>Promise<void>; \r\n} \r\nfunction CrudBtn ({handle, labels, action}:CrudBtn) { \r\n  const {row} = useContext(RowContext); \r\n  const {active, SetActive} = useContext(ActiveContext); \r\n  const isActive = active.row === row; \r\n  const isHandled = active.mode === handle; \r\n\r\n  const Affirm = () => SetActive(row, handle); // replace with setActive. \r\n  const Cancel = () => SetActive(); // replace with with reset. \r\n  const Confirm = async () => { \r\n    await action(active.data); \r\n    SetActive(); \r\n  } \r\n\r\n  return <span> \r\n    {isActive && isHandled && <button onClick={Confirm}>{labels.confirm}</button>} \r\n    {isActive && isHandled && <button onClick={Cancel}>{labels.cancel}</button>} \r\n    {active.row !== row && <button onClick={Affirm}>{labels.affirm}</button>} \r\n  </span> \r\n}",{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","replacedBy":"293"},{"ruleId":"290","replacedBy":"294"},{"ruleId":"292","replacedBy":"295"},{"ruleId":"296","severity":1,"message":"297","line":2,"column":9,"nodeType":"298","messageId":"299","endLine":2,"endColumn":17},{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","replacedBy":"293"},{"ruleId":"296","severity":1,"message":"300","line":3,"column":9,"nodeType":"298","messageId":"299","endLine":3,"endColumn":13},{"ruleId":"296","severity":1,"message":"301","line":3,"column":15,"nodeType":"298","messageId":"299","endLine":3,"endColumn":19},{"ruleId":"296","severity":1,"message":"302","line":3,"column":21,"nodeType":"298","messageId":"299","endLine":3,"endColumn":25},{"ruleId":"296","severity":1,"message":"303","line":2,"column":9,"nodeType":"298","messageId":"299","endLine":2,"endColumn":15},{"ruleId":"290","replacedBy":"304"},{"ruleId":"292","replacedBy":"305"},{"ruleId":"306","severity":1,"message":"307","line":49,"column":37,"nodeType":"308","messageId":"309","endLine":49,"endColumn":47},{"ruleId":"296","severity":1,"message":"303","line":3,"column":9,"nodeType":"298","messageId":"299","endLine":3,"endColumn":15},{"ruleId":"310","severity":1,"message":"311","line":19,"column":37,"nodeType":"312","endLine":19,"endColumn":39,"suggestions":"313"},{"ruleId":"296","severity":1,"message":"314","line":12,"column":38,"nodeType":"298","messageId":"299","endLine":12,"endColumn":48},{"ruleId":"310","severity":1,"message":"311","line":30,"column":37,"nodeType":"312","endLine":30,"endColumn":39,"suggestions":"315"},{"ruleId":"296","severity":1,"message":"316","line":1,"column":28,"nodeType":"298","messageId":"299","endLine":1,"endColumn":36},{"ruleId":"296","severity":1,"message":"317","line":2,"column":68,"nodeType":"298","messageId":"299","endLine":2,"endColumn":80},{"ruleId":"296","severity":1,"message":"318","line":2,"column":38,"nodeType":"298","messageId":"299","endLine":2,"endColumn":45},{"ruleId":"296","severity":1,"message":"319","line":3,"column":9,"nodeType":"298","messageId":"299","endLine":3,"endColumn":13},{"ruleId":"296","severity":1,"message":"320","line":3,"column":15,"nodeType":"298","messageId":"299","endLine":3,"endColumn":26},{"ruleId":"296","severity":1,"message":"321","line":3,"column":36,"nodeType":"298","messageId":"299","endLine":3,"endColumn":41},{"ruleId":"296","severity":1,"message":"322","line":5,"column":9,"nodeType":"298","messageId":"299","endLine":5,"endColumn":16},{"ruleId":"310","severity":1,"message":"323","line":18,"column":6,"nodeType":"312","endLine":18,"endColumn":8,"suggestions":"324"},{"ruleId":"296","severity":1,"message":"303","line":4,"column":9,"nodeType":"298","messageId":"299","endLine":4,"endColumn":15},{"ruleId":"325","severity":1,"message":"326","line":33,"column":22,"nodeType":"327","messageId":"328","endLine":33,"endColumn":24},{"ruleId":"325","severity":1,"message":"326","line":33,"column":47,"nodeType":"327","messageId":"328","endLine":33,"endColumn":49},{"ruleId":"296","severity":1,"message":"329","line":1,"column":16,"nodeType":"298","messageId":"299","endLine":1,"endColumn":26},{"ruleId":"325","severity":1,"message":"326","line":28,"column":20,"nodeType":"327","messageId":"328","endLine":28,"endColumn":22},{"ruleId":"325","severity":1,"message":"326","line":28,"column":36,"nodeType":"327","messageId":"328","endLine":28,"endColumn":38},{"ruleId":"296","severity":1,"message":"330","line":2,"column":9,"nodeType":"298","messageId":"299","endLine":2,"endColumn":13},{"ruleId":"296","severity":1,"message":"331","line":2,"column":15,"nodeType":"298","messageId":"299","endLine":2,"endColumn":23},{"ruleId":"296","severity":1,"message":"332","line":3,"column":33,"nodeType":"298","messageId":"299","endLine":3,"endColumn":43},{"ruleId":"296","severity":1,"message":"333","line":13,"column":18,"nodeType":"298","messageId":"299","endLine":13,"endColumn":26},{"ruleId":"310","severity":1,"message":"334","line":25,"column":37,"nodeType":"312","endLine":25,"endColumn":44,"suggestions":"335"},{"ruleId":"296","severity":1,"message":"336","line":2,"column":27,"nodeType":"298","messageId":"299","endLine":2,"endColumn":37},{"ruleId":"296","severity":1,"message":"337","line":104,"column":18,"nodeType":"298","messageId":"299","endLine":104,"endColumn":25},{"ruleId":"296","severity":1,"message":"338","line":131,"column":10,"nodeType":"298","messageId":"299","endLine":131,"endColumn":20},{"ruleId":"296","severity":1,"message":"337","line":133,"column":10,"nodeType":"298","messageId":"299","endLine":133,"endColumn":17},{"ruleId":"339","severity":1,"message":"340","line":35,"column":10,"nodeType":"298","messageId":"341","endLine":35,"endColumn":17},"no-native-reassign",["342"],"no-negated-in-lhs",["343"],["342"],["343"],"@typescript-eslint/no-unused-vars","'TestArrx' is defined but never used.","Identifier","unusedVar","'Copy' is defined but never used.","'Edit' is defined but never used.","'Read' is defined but never used.","'IsNull' is defined but never used.",["342"],["343"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Load' and 'loadfunc'. Either include them or remove the dependency array.","ArrayExpression",["344"],"'setAnswers' is assigned a value but never used.",["345"],"'useState' is defined but never used.","'ElementValue' is defined but never used.","'Element' is defined but never used.","'Objx' is defined but never used.","'ObjxContext' is defined but never used.","'Field' is defined but never used.","'OnEnter' is defined but never used.","React Hook useEffect has missing dependencies: 'options' and 'setOptions'. Either include them or remove the dependency array.",["346"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'useContext' is defined but never used.","'Arrx' is defined but never used.","'Elements' is defined but never used.","'InputArray' is defined but never used.","'optional' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'UpdateAnswers'. Either include it or remove the dependency array.",["347"],"'RowContext' is defined but never used.","'SetData' is assigned a value but never used.","'TablrInput' is defined but never used.","@typescript-eslint/no-redeclare","'CrudBtn' is already defined.","redeclared","no-global-assign","no-unsafe-negation",{"desc":"348","fix":"349"},{"desc":"348","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},"Update the dependencies array to be: [Load, loadfunc]",{"range":"355","text":"356"},{"range":"357","text":"356"},"Update the dependencies array to be: [options, setOptions]",{"range":"358","text":"359"},"Update the dependencies array to be: [UpdateAnswers, value]",{"range":"360","text":"361"},[650,652],"[Load, loadfunc]",[1095,1097],[585,587],"[options, setOptions]",[1053,1060],"[UpdateAnswers, value]"]