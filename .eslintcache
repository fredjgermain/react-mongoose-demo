[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\experiments.tsx":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\_utils.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\field\\field.class.ts":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\_mongooseparser.ts":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudaxios.ts":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientheader.component.tsx":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentifier.component.tsx":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientinfos.component.tsx":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientsloader.component.tsx":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireloader.component.tsx":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireforms.component.tsx":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnairepage.page.tsx":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testArrx.tsx":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testarrx.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\_input.ts":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\_useloader.ts":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\_arrx.ts":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\_objx.ts":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\useloader.hook.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input\\input.component.tsx":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.component.tsx":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\readarray.component.tsx":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.component.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\options.component.tsx":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.hook.tsx":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\selectheader.component.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.hook.tsx":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\RemovableItems.component.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\_tablr.ts":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\usepage\\usePage.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionedit.component.tsx":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\useblankform.ts":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\testtablr.tsx":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\mockdata.ts":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\_useactive.ts":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\useactiveve.hook.ts":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\crudbtn.component.tsx":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\_rendering.ts":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\cellrenderer.component.tsx":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\rendering\\renderers.utils.tsx":"59","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\_dao.ts":"60","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts":"61","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts":"62","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testdao\\testdao.tsx":"63","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testdao\\crudbtn.component.tsx":"64","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testdao\\daotablr.tsx":"65","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testdao\\cellrenderer.component.tsx":"66","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testdao\\renderers.utils.tsx":"67"},{"size":600,"mtime":1609529670659,"results":"68","hashOfConfig":"69"},{"size":440,"mtime":1610495478519,"results":"70","hashOfConfig":"69"},{"size":362,"mtime":499162500000,"results":"71","hashOfConfig":"69"},{"size":225,"mtime":1609475507334,"results":"72","hashOfConfig":"69"},{"size":119,"mtime":1609476074144,"results":"73","hashOfConfig":"69"},{"size":117,"mtime":1609476049273,"results":"74","hashOfConfig":"69"},{"size":496,"mtime":1609883323259,"results":"75","hashOfConfig":"69"},{"size":471,"mtime":1610511861812,"results":"76","hashOfConfig":"69"},{"size":693,"mtime":1610152063091,"results":"77","hashOfConfig":"69"},{"size":1432,"mtime":1610133369532,"results":"78","hashOfConfig":"69"},{"size":3330,"mtime":1609805687249,"results":"79","hashOfConfig":"69"},{"size":1698,"mtime":1610154963843,"results":"80","hashOfConfig":"69"},{"size":2351,"mtime":1609452679027,"results":"81","hashOfConfig":"69"},{"size":278,"mtime":1610227362484,"results":"82","hashOfConfig":"69"},{"size":1819,"mtime":1609452679070,"results":"83","hashOfConfig":"69"},{"size":1608,"mtime":1609452679069,"results":"84","hashOfConfig":"69"},{"size":2252,"mtime":1609452679073,"results":"85","hashOfConfig":"69"},{"size":2239,"mtime":1609979770974,"results":"86","hashOfConfig":"69"},{"size":222,"mtime":1609965015785,"results":"87","hashOfConfig":"69"},{"size":919,"mtime":1610159021625,"results":"88","hashOfConfig":"69"},{"size":1559,"mtime":1610228176480,"results":"89","hashOfConfig":"69"},{"size":1389,"mtime":1610159021729,"results":"90","hashOfConfig":"69"},{"size":1834,"mtime":1610230147763,"results":"91","hashOfConfig":"69"},{"size":5686,"mtime":1610389196830,"results":"92","hashOfConfig":"69"},{"size":1188,"mtime":1610230172532,"results":"93","hashOfConfig":"69"},{"size":2449,"mtime":1610062912048,"results":"94","hashOfConfig":"69"},{"size":2288,"mtime":1610229762594,"results":"95","hashOfConfig":"69"},{"size":643,"mtime":1609791814153,"results":"96","hashOfConfig":"69"},{"size":98,"mtime":1609788148795,"results":"97","hashOfConfig":"69"},{"size":217,"mtime":1610226352798,"results":"98","hashOfConfig":"69"},{"size":207,"mtime":1610161426383,"results":"99","hashOfConfig":"69"},{"size":1301,"mtime":1609804782791,"results":"100","hashOfConfig":"69"},{"size":1778,"mtime":1610159021625,"results":"101","hashOfConfig":"69"},{"size":2727,"mtime":1610159021626,"results":"102","hashOfConfig":"69"},{"size":489,"mtime":1609790785285,"results":"103","hashOfConfig":"69"},{"size":1410,"mtime":1610311943278,"results":"104","hashOfConfig":"69"},{"size":1025,"mtime":1609790418274,"results":"105","hashOfConfig":"69"},{"size":1657,"mtime":1610421736288,"results":"106","hashOfConfig":"69"},{"size":1992,"mtime":1610227775191,"results":"107","hashOfConfig":"69"},{"size":970,"mtime":1609787735783,"results":"108","hashOfConfig":"69"},{"size":977,"mtime":1610068539668,"results":"109","hashOfConfig":"69"},{"size":2177,"mtime":1610159021627,"results":"110","hashOfConfig":"69"},{"size":497,"mtime":1609787735852,"results":"111","hashOfConfig":"69"},{"size":379,"mtime":1610223339809,"results":"112","hashOfConfig":"69"},{"size":1529,"mtime":1610226206290,"results":"113","hashOfConfig":"69"},{"size":462,"mtime":1610223305599,"results":"114","hashOfConfig":"69"},{"size":1040,"mtime":1610223161129,"results":"115","hashOfConfig":"69"},{"size":982,"mtime":1610224559674,"results":"116","hashOfConfig":"69"},{"size":1708,"mtime":1610226535467,"results":"117","hashOfConfig":"69"},{"size":1664,"mtime":1610318540525,"results":"118","hashOfConfig":"69"},{"size":1486,"mtime":1610311931655,"results":"119","hashOfConfig":"69"},{"size":3932,"mtime":1610494958855,"results":"120","hashOfConfig":"69"},{"size":1871,"mtime":1610492009448,"results":"121","hashOfConfig":"69"},{"size":109,"mtime":1609788148849,"results":"122","hashOfConfig":"69"},{"size":1965,"mtime":1610415297943,"results":"123","hashOfConfig":"69"},{"size":1913,"mtime":1610398315644,"results":"124","hashOfConfig":"69"},{"size":31,"mtime":1610488467872,"results":"125","hashOfConfig":"69"},{"size":1085,"mtime":1610490030257,"results":"126","hashOfConfig":"69"},{"size":3706,"mtime":1610492408818,"results":"127","hashOfConfig":"69"},{"size":171,"mtime":1609788021131,"results":"128","hashOfConfig":"69"},{"size":6133,"mtime":1610497643689,"results":"129","hashOfConfig":"69"},{"size":1927,"mtime":1610498113908,"results":"130","hashOfConfig":"69"},{"size":1441,"mtime":1610511861811,"results":"131","hashOfConfig":"69"},{"size":2220,"mtime":1610511861814,"results":"132","hashOfConfig":"69"},{"size":1880,"mtime":1610512163053,"results":"133","hashOfConfig":"69"},{"size":1111,"mtime":1610512332886,"results":"134","hashOfConfig":"69"},{"size":3703,"mtime":1610511889631,"results":"135","hashOfConfig":"69"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"ke513i",{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"157"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"157"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"147"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"147"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"147"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"173"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"157"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"157"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"157"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"147"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"157"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"157"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"157"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"157"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"157"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"157"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"287","messages":"288","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["291","292"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",[],["293","294"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\experiments.tsx",["295","296"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\_utils.ts",["297","298","299"],"import {Filter, Remove, ToArray, Union, Combine, Duplicates, Order, CommonPredicates} from './arrays.utils'; \r\nimport {SetSize, SetWidth, IEvent, IsPressEnter, OnEnter, GetInputType, GetValueFromInput} from './htmlelement.utils'; \r\nimport {Copy, Edit, Read, IsEmpty, IsNull, GetDefaultValueByType, GetTypeByValue} from './valuetypetesting.utils'; \r\nimport {Field} from './field/field.class'; \r\n\r\n\r\nexport {Filter, Remove, ToArray, Union, Combine, Duplicates, Order, CommonPredicates} \r\nexport {SetSize, SetWidth, IsPressEnter, OnEnter, GetInputType, GetValueFromInput} \r\nexport type {IEvent} \r\nexport {Copy, Edit, Read, IsEmpty, IsNull, GetDefaultValueByType, GetTypeByValue} \r\nexport {Field} ",["300","301"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",["302"],"import React from 'react'; \r\nimport {IsNull} from './_utils'; \r\n\r\n// IEvent #####################################\r\nexport interface IEvent extends React.ChangeEvent<HTMLInputElement> { \r\n  code?:any, \r\n  [key:string]:any, \r\n} \r\n\r\nexport function OnEnter(event:any, Func:any) { \r\n  if(IsPressEnter( (event as IEvent).code ) ) \r\n    Func(); \r\n} \r\n\r\n\r\n\r\n// Get Value From Input -------------------------\r\nexport function GetValueFromInput(event:IEvent) { \r\n  const target = event.target; \r\n  const type = target.type; \r\n  if(type === 'number') \r\n    return target.valueAsNumber as number; \r\n  if(type === 'date') \r\n    return target.valueAsDate; \r\n  if(type === 'checkbox') \r\n    return target.checked as boolean; \r\n  return target.value; \r\n} \r\n\r\n\r\n// GetInputType ---------------------------------\r\nexport function GetInputType(type:string) { \r\n  if(type === 'number') \r\n    return 'number'; \r\n  if(type === 'boolean') \r\n    return 'checkbox'; \r\n  if(type === 'string') \r\n    return 'text'; \r\n  return 'text'; \r\n}\r\n\r\n\r\n// If Code is pressEnter\r\nexport function IsPressEnter(code:string = ''):boolean { \r\n  return code === 'Enter' || code === 'NumpadEnter'; \r\n} \r\n\r\n\r\n// TAG UTILS ###################################\r\nexport function SetWidth(value:number):{width:any} {\r\n  return {width:`${SetSize(value)+2}ch`}; \r\n}\r\n\r\nexport function SetSize(value:any):number { \r\n  const w = String(value).length; \r\n  return w < 5 ? 5 : w; \r\n} \r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\field\\field.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudaxios.ts",[],["303","304"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["305"],"export interface IMongooseModel { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\n//async function ParseFields() \r\nexport function ParseField(field:IMongooseField):IField { \r\n  const {path, instance, options} = field; \r\n  const ifield:IField = {} as IField; \r\n  ifield.accessor = path; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.options = options; \r\n  ifield.type = GetType(field); \r\n  ifield.enums = options['enum'] ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, ifield.options); \r\n  \r\n  ifield.isEnum = options['enum']? true: false; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = instance.toLowerCase() === 'objectid'; \r\n  //ifield.isMixed = \r\n  //ifield.validators = \r\n  return ifield; \r\n} \r\n\r\nfunction GetType({instance, $embeddedSchemaType}:IMongooseField) { \r\n  if(instance.toLocaleLowerCase() === 'array') \r\n    return ($embeddedSchemaType?.instance ?? '').toLocaleLowerCase(); \r\n  return instance.toLocaleLowerCase(); \r\n} \r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",["306"],"import React, {useState} from 'react'; \r\nimport {CrudMongoose} from '../../reusable/mongooseparser/_mongooseparser'; \r\nimport {IsNull, IsEmpty} from '../../reusable/utils/_utils'; \r\n\r\nimport {PatientHeader} from './components/patientheader.component'; \r\nimport {PatientsLoader} from './components/patientsloader.component'; \r\nimport {PatientIdentifier} from './components/patientidentifier.component'; \r\nimport {PatientInfos} from './components/patientinfos.component'; \r\nimport QuestionnairePage from '../questionnaire/questionnairepage.page';\r\n\r\n/*import {QuestionnaireLoader} from './components/questionnaireloader.component'; \r\nimport {Questionnaire} from './components/questionnaire.component'; */\r\n\r\ninterface IPatientContext { \r\n  patients:ICollection; \r\n  setPatients:any; \r\n\r\n  patient:IEntry; \r\n  setPatient:any; \r\n\r\n  patientUpdated:boolean; \r\n  setPatientUpdated:any; \r\n} \r\n// PATIENT ======================================\r\nexport const PatientContext = React.createContext({} as IPatientContext); \r\nexport const CrudContext = React.createContext({} as {crud:CrudMongoose});\r\n\r\nexport default function Patient() { \r\n  const crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n  const [patient, setPatient] = useState<IEntry>({} as IEntry); \r\n  const [patientUpdated, setPatientUpdated] = useState(false); \r\n  const [patients, setPatients] = useState({} as ICollection); \r\n  \r\n  const context = {crud, patients, setPatients, \r\n    patient, setPatient, \r\n    patientUpdated, setPatientUpdated} as IPatientContext; \r\n\r\n  if(!patientUpdated) \r\n    return <div> \r\n      <CrudContext.Provider value={{crud}} >\r\n        <PatientContext.Provider value={context} > \r\n          <PatientHeader /> \r\n          {IsEmpty(patients) && <PatientsLoader/>} \r\n          {!IsEmpty(patients) && IsEmpty(patient) && <PatientIdentifier/>} \r\n          {!IsEmpty(patients) && !IsEmpty(patient) && <PatientInfos/>} \r\n        </PatientContext.Provider> \r\n      </CrudContext.Provider>\r\n    </div> \r\n\r\n  return <div> \r\n    <CrudContext.Provider value={{crud}} >\r\n      <PatientContext.Provider value={context} > \r\n        <QuestionnairePage/> \r\n      </PatientContext.Provider> \r\n    </CrudContext.Provider>\r\n  </div>  \r\n} \r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientheader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentifier.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientinfos.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientsloader.component.tsx",["307"],"import {useContext, useEffect} from 'react'; \r\nimport {useLoader} from '../../../reusable/hooks/useloader/_useloader'; \r\n\r\nimport {CrudContext, PatientContext} from '../patient.page'; \r\n\r\n\r\n// PatientsCollectionLoader ===================== \r\nexport function PatientsLoader() { \r\n  const {crud} = useContext(CrudContext); \r\n  const {setPatients} = useContext(PatientContext); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const loadfunc = async () => { \r\n    const response:IResponse = await crud.Collection('patients'); \r\n    if(response.success) \r\n      setPatients(() => response.data as ICollection); \r\n  }; \r\n\r\n  useEffect(() => {Load(loadfunc)}, []); \r\n\r\n\r\n  /* ?????? TO ADD IN USELOADER ??????\r\n  function Component(props) {\r\n    const [fetched, setFetched] = React.useState(false);\r\n    React.useEffect(() => {\r\n      const ac = new AbortController();\r\n      Promise.all([\r\n        fetch('http://placekitten.com/1000/1000', {signal: ac.signal}),\r\n        fetch('http://placekitten.com/2000/2000', {signal: ac.signal})\r\n      ]).then(() => setFetched(true))\r\n        .catch(ex => console.error(ex));\r\n      return () => ac.abort(); // Abort both fetches on unmount\r\n    }, []);\r\n    return fetched;\r\n  }\r\n  */\r\n\r\n  if(!state.ready) \r\n    return <div> Loading ... </div> \r\n  if(state.ready && !state.success) \r\n    return <div> Oh no! An error occured ... </div> \r\n  return null; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireloader.component.tsx",["308","309"],"import {useEffect, useContext} from 'react'; \r\nimport {useLoader} from '../../../reusable/hooks/useloader/_useloader'; \r\nimport {CrudContext} from '../../patient/patient.page';\r\nimport {QuestionnaireContext} from '../questionnairepage.page';\r\n\r\n\r\n\r\n// PatientsCollectionLoader ===================== \r\nexport function QuestionnaireLoader() { \r\n  const {crud} = useContext(CrudContext); \r\n\r\n  const {setQuestions, setResponses, setAnswers} = useContext(QuestionnaireContext); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const loadfunc = async () => { \r\n    const questions:IResponse = await crud.Collection('questions'); \r\n    if(questions.success) \r\n      setQuestions(() => questions.data as ICollection); \r\n    console.log(questions);\r\n\r\n    const responses:IResponse = await crud.Collection('responses'); \r\n    if(responses.success) \r\n      setResponses(() => responses.data as ICollection); \r\n\r\n    /*const answers:IResponse = await crud.Collection('answers'); \r\n    if(answers.success) \r\n      setAnswers(() => answers.data as ICollection); */\r\n  }; \r\n\r\n  useEffect(() => {Load(loadfunc)}, []); \r\n\r\n\r\n  /* ?????? TO ADD IN USELOADER ??????\r\n  function Component(props) {\r\n    const [fetched, setFetched] = React.useState(false);\r\n    React.useEffect(() => {\r\n      const ac = new AbortController();\r\n      Promise.all([\r\n        fetch('http://placekitten.com/1000/1000', {signal: ac.signal}),\r\n        fetch('http://placekitten.com/2000/2000', {signal: ac.signal})\r\n      ]).then(() => setFetched(true))\r\n        .catch(ex => console.error(ex));\r\n      return () => ac.abort(); // Abort both fetches on unmount\r\n    }, []);\r\n    return fetched;\r\n  }\r\n  */\r\n\r\n  if(!state.ready) \r\n    return <div> Loading ... </div> \r\n  if(state.ready && !state.success) \r\n    return <div> Oh no! An error occured ... </div> \r\n  return null; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireforms.component.tsx",["310","311"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnairepage.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testArrx.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testarrx.tsx",["312","313","314","315","316"],"import React, {useContext, useState} from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex} from '../../reusable/components/arrx/_arrx'; \r\nimport {Objx, ObjxContext, Fields, Field, FieldContext, FieldLabel, FieldValue, ArrxObjx} from '../../reusable/components/objx/_objx'; \r\nimport {Input} from '../../reusable/components/input/_input'; \r\nimport {OnEnter} from '../../reusable/utils/_utils'; \r\nimport { ElementValue } from '../../reusable/components/arrx/arrx.component';\r\n\r\n\r\n\r\n// TEST ARRX ====================================\r\nexport function TestArrx() {\r\n  // Ifields\r\n  const ifield = {type:'', accessor:'', defaultValue:'', label:'', options:{}} as IField; \r\n  const ifields:IField[] = [ \r\n    {...ifield, type:'number', accessor:'a', label:'A : ', defaultValue:0}, \r\n    {...ifield, type:'string', accessor:'b', label:'B : ', defaultValue:''}, \r\n  ]; \r\n\r\n  // Data\r\n  const Datas = [\r\n    {a:12, b:'a'}, \r\n    {a:13, b:'b'}, \r\n    {a:14, b:'c'}, \r\n    {a:15, b:'d'}, \r\n    {a:16, b:'e'}, \r\n    {a:17, b:'f'}, \r\n    {a:18, b:'g'}, \r\n    {a:15, b:'h'}, \r\n    {a:16, b:'i'}, \r\n    {a:17, b:'j'}, \r\n    {a:18, b:'k'} \r\n  ]; \r\n\r\n  const [datas, setDatas] = useState(Datas); \r\n\r\n  return <div> \r\n    <Arrx {...{values:datas}} > \r\n      <Elements>\r\n        <ElementIndex/>\r\n        <ElementValue/>\r\n        <br/>\r\n      </Elements>\r\n    </Arrx>\r\n\r\n    \r\n    <Arrx {...{values:datas}} > \r\n      <Elements>\r\n        <ElementIndex />\r\n        <ArrxObjx {...{ifields}}> \r\n          <Fields>\r\n            [ <FieldLabel/> = <FieldValue/> ]\r\n            <FieldEdit {...{setValues:setDatas}}/>\r\n          </Fields>\r\n          <br/>\r\n        </ArrxObjx>\r\n      </Elements> \r\n    </Arrx>\r\n  </div>\r\n}\r\n\r\n\r\ninterface IFieldEdit {setValues:any}\r\nfunction FieldEdit({setValues}:IFieldEdit) { \r\n  const {values} = useContext(ArrxContext); \r\n  const {index} = useContext(ElementContext); \r\n  const {ifield} = useContext(FieldContext); \r\n\r\n  const [value, setValue] = useState(values[index][ifield.accessor]); \r\n  const {type, defaultValue} = ifield; \r\n  \r\n  const onEnterUp = () => { \r\n    setValues((prev:any) => { \r\n      const newElement = {...prev[index]}; \r\n      newElement[ifield.accessor] = value; \r\n      prev[index] = newElement; \r\n      return [...prev]; \r\n    }); \r\n  }\r\n\r\n  return <Input {...{value, setValue, type, defaultValue, onEnterUp}} />\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\_useloader.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useloader\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input\\input.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\readarray.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\options.component.tsx",["317"],"import React, {useContext, useEffect} from 'react'; \r\n//import {IOption} from '../../reusable/_input'; \r\nimport {SelectContext} from './select.component'; \r\n\r\n\r\n// OPTIONS ======================================\r\ninterface IOptions { \r\n  label?:string; // defines a optgroup with a label \r\n  options:IOption[]; \r\n  [key:string]:any; \r\n} \r\n//const OptionsContext = React.createContext({}); \r\nexport function Options({label, options}:IOptions) { \r\n  const {setOptions} = useContext(SelectContext); \r\n  \r\n  useEffect(() => { \r\n    setOptions( (prev:any) => [...prev, ...options] ); \r\n  }, []); \r\n\r\n  return <div > \r\n    {label ? (<div className={'select_body_label'}>{label}</div>) : null} \r\n    {options.map( (option,i) => { \r\n      return <Option key={i} option={option} /> \r\n    })} \r\n  </div> \r\n} \r\n\r\nfunction Option({option}:{option:IOption}) { \r\n  const {SelectValue} = useContext(SelectContext); \r\n  return <div className={'select_body_option'} onClick={() => SelectValue(option.value)}> \r\n    {option.label} \r\n  </div>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\selectheader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\select.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\select\\RemovableItems.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["318","319","320"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull} from '../../utils/_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield,key) => { \r\n      return <Cell {...{key, ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const value = GetDefaultValue(datas, ifield, row); \r\n  const context = {value, row, ifield} as ICellContext; \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n\r\nfunction GetDefaultValue(datas:any[], ifield:IField, row?:number) { \r\n  const data = datas[(row??-1)]; \r\n  return data ? data[ifield.accessor] : ifield.defaultValue; \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["321","322","323"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\usepage\\usePage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionedit.component.tsx",["324","325","326","327","328"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {Arrx, Elements, ArrxContext, ElementContext, ElementIndex} from '../../../reusable/components/arrx/_arrx'; \r\nimport {Input, Select, Options, InputArray} from '../../../reusable/components/input/_input'; \r\nimport {AnswersAreComplete, IAnswer} from './useblankform'; \r\n\r\n\r\n\r\n// QUESTION EDIT ================================\r\nexport function QuestionEdit({setValues}:{setValues:any}) { \r\n  const {values} = useContext(ArrxContext); \r\n  const {index} = useContext(ElementContext); \r\n  const Answer = (values[index] as IAnswer); \r\n  const {labels, optional, answer, responseType} = Answer; \r\n  \r\n  const [value, setValue] = useState(answer); \r\n  const {type, defaultValue} = {type:'number', defaultValue:0}; \r\n\r\n  const UpdateAnswers = () => setValues((prev:any) => { \r\n    const editedAnswers:IAnswer[] = [...prev]; \r\n    const editedAnswer:IAnswer = editedAnswers[index]; \r\n    editedAnswer.answer = value; \r\n    return editedAnswers; \r\n  }); \r\n\r\n  useEffect(() => {UpdateAnswers()},[value]); \r\n\r\n  const options:IOption[] = responseType.enum ? \r\n    responseType.enum.map( (v,i) => { return {value:i, label:v} }) : [] ; \r\n\r\n  const input = <Input {...{value, setValue, type, defaultValue}} />\r\n  const select = <span>\r\n    <Select {...{value, setValue, type, defaultValue}} >\r\n      <Options {...{options}} />\r\n    </Select>\r\n  </span>\r\n\r\n\r\n  return <div> \r\n    [<ElementIndex /><span>{labels[0]}: </span>] \r\n    {AnswersAreComplete([{...Answer, answer:value}]) ? \r\n      <span>&#10003;</span> : \r\n      <span>X</span>}\r\n    <span>{!responseType.enum ? input : select}</span> \r\n  </div> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\useblankform.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\testtablr.tsx",["329","330","331"],"import React, { useContext, useState } from 'react'; \r\nimport {Tablr, Rows, Row, RowContext, Cells, CellContext, Header, Heads, Cell} \r\n  from '../../../reusable/components/tablr/_tablr'; \r\nimport {Arrx, Elements, ElementIndex, ElementValue} \r\n  from '../../../reusable/components/arrx/_arrx'; \r\nimport {usePage, IPageHook} from '../../../reusable/hooks/usepage/usePage'; \r\nimport {ifields, Datas, GetForeignOptions, GetForeignValue} from './mockdata'; \r\n\r\nimport './table.css'; \r\nimport {IUseActive, useActive} from '../../../reusable/hooks/useactive/_useactive'; \r\nimport {CreateBtn, UpdateBtn, DeleteBtn} from './crudbtn.component'; \r\nimport {BuildDefaultRenderingFunc} from './rendering/renderers.utils'; \r\nimport {CellRenderer} from './cellrenderer.component'; \r\n\r\n/* \r\nexport const DaoContext = React.createContext({} as ); \r\nconst daoContext = {, GetForeignOptions, GetForeignValue, Create, Update, Delete} \r\n*/ \r\n\r\n\r\nexport const ActiveContext = React.createContext({} as IUseActive); \r\n// TEST TABLR ====================================\r\nexport function TestTablr() { \r\n  const [datas, setDatas] = useState(Datas); \r\n  const renderers = BuildDefaultRenderingFunc(GetForeignValue, GetForeignOptions); \r\n  \r\n  // page rows\r\n  const {pageIndex, setPageIndex, pageIndexes, from, to} = usePage(datas, 5); \r\n  const rows = datas.map((v,i) => i).filter((i) => i >=from && i<=to); \r\n\r\n  // defineds columns for buttons. \r\n  const colBtn = {label:'Btn', accessor:'', defaultValue:'', options:{}, type:''} as IField; \r\n\r\n  // activeContext \r\n  const activeContext = useActive(datas, ifields); \r\n  \r\n\r\n  // For debug purposes. \r\n  const displayDatas = <Arrx {...{values:datas}} > \r\n      <Elements>\r\n        <ElementIndex/><ElementValue/><br/>\r\n      </Elements>\r\n    </Arrx>\r\n\r\n\r\n  const Create = async (entry:any) => { \r\n    setDatas((prev:any[]) => { return [...prev, entry]; }) \r\n  }; \r\n  const Update = async (entry:any) => {\r\n    setDatas((prev:any[]) => { \r\n      const newDatas = [...prev]; \r\n      const index = newDatas.findIndex( e => e['_id'] === entry['_id']); \r\n      if(index >=0 ) \r\n        newDatas[index] = entry; \r\n      return newDatas; \r\n    }) \r\n  }; \r\n  const Delete = async (entry:any) => {\r\n    setDatas((prev:any[]) => { \r\n      const newDatas = [...prev]; \r\n      const index = newDatas.findIndex( e => e['_id'] === entry['_id']); \r\n      if(index >=0) \r\n        newDatas.splice(index, 1); \r\n      return newDatas; \r\n    }) \r\n  }; \r\n\r\n\r\n  const displayActive = <div>{JSON.stringify(activeContext.active)}</div> \r\n  // tablr\r\n  const displayCrudTable = <ActiveContext.Provider value={activeContext} ><Tablr {...{datas}} > \r\n    <Header> \r\n      <Heads {...{ifields:[...ifields,colBtn, ]}} /> \r\n    </Header> \r\n    <tbody> \r\n      <Rows {...{rows}} > \r\n        <Cells {...{ifields}}> \r\n          <CellRenderer {...{renderers}} /> \r\n        </Cells> \r\n        <Cell {...{ifield:colBtn}} >\r\n          <UpdateBtn {...{action:Update}} />\r\n          <DeleteBtn {...{action:Delete}} />\r\n        </Cell>\r\n      </Rows> \r\n      <Row {...{row:-1}} > \r\n        <Cells {...{ifields}}> \r\n          <CellRenderer {...{renderers}} /> \r\n        </Cells>\r\n        <Cell {...{ifield:colBtn}} > \r\n          <CreateBtn {...{action:Create}} /> \r\n        </Cell>\r\n      </Row>\r\n    </tbody>\r\n  </Tablr></ActiveContext.Provider>\r\n\r\n  // RENDER .....................................\r\n  return <div> \r\n    <div>{displayDatas}</div> \r\n    <br/>\r\n    {displayActive}\r\n    <br/>\r\n    <div>{displayCrudTable}</div> \r\n    <div><Paging {...{pageIndex, setPageIndex, pageIndexes, from, to}} /></div> \r\n  </div> \r\n}\r\n\r\n\r\n// PAGING ---------------------------------------\r\nfunction Paging({pageIndex, setPageIndex, pageIndexes}:IPageHook) { \r\n  return <div>\r\n    {pageIndexes.map( (p, i) => { \r\n      return <button key={i} onClick={() => setPageIndex(i)} disabled={pageIndex===i} >\r\n          {i+1}\r\n        </button> \r\n    })} \r\n  </div>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\mockdata.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\_useactive.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\hooks\\useactive\\useactiveve.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\crudbtn.component.tsx",["332"],"import React, { useContext } from 'react'; \r\nimport {RowContext} from '../../../reusable/components/tablr/_tablr'; \r\nimport {ActiveContext} from './testtablr'; \r\n\r\n\r\n// CRUD BTN -------------------------------------\r\nexport function CreateBtn({action}:{action:(entry:any)=>Promise<void>}) { \r\n  const handle = 'create'; \r\n  const labels = {affirm:'Create', confirm:'Confirm creation', cancel:'Cancel creation'}; \r\n  return <CrudBtn {...{handle, labels, action}} /> \r\n} \r\n\r\nexport function UpdateBtn({action}:{action:(entry:any)=>Promise<void>}) { \r\n  const handle = 'update'; \r\n  const labels = {affirm:'Update', confirm:'Confirm update', cancel:'Cancel update'}; \r\n  return <CrudBtn {...{handle, labels, action}} /> \r\n} \r\n\r\nexport function DeleteBtn({action}:{action:(entry:any)=>Promise<void>}) { \r\n  const handle = 'delete'; \r\n  const labels = {affirm:'Delete', confirm:'Confirm deletion', cancel:'Cancel deletion'}; \r\n  return <CrudBtn {...{handle, labels, action}} /> \r\n} \r\n\r\n\r\ninterface CrudBtn { \r\n  handle: string; \r\n  labels:{ \r\n    affirm:string, \r\n    confirm:string, \r\n    cancel:string, \r\n  }; \r\n  action:(entry:any)=>Promise<void>; \r\n} \r\nfunction CrudBtn ({handle, labels, action}:CrudBtn) { \r\n  const {row} = useContext(RowContext); \r\n  const {active, SetActive} = useContext(ActiveContext); \r\n  const isActive = active.row === row; \r\n  const isHandled = active.mode === handle; \r\n\r\n  const Affirm = () => SetActive(row, handle); // replace with setActive. \r\n  const Cancel = () => SetActive(); // replace with with reset. \r\n  const Confirm = async () => { \r\n    await action(active.data); \r\n    SetActive(); \r\n  } \r\n\r\n  return <span> \r\n    {isActive && isHandled && <button onClick={Confirm}>{labels.confirm}</button>} \r\n    {isActive && isHandled && <button onClick={Cancel}>{labels.cancel}</button>} \r\n    {active.row !== row && <button onClick={Affirm}>{labels.affirm}</button>} \r\n  </span> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\_rendering.ts",["333"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\cellrenderer.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testtablr\\rendering\\renderers.utils.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts",["334"],"//import {IOption} from '../input/_input'; \r\nimport {Field} from '../utils/_utils'; \r\n\r\n\r\nexport interface ICrud { \r\n  Collection:(accessor:string) => Promise<IResponse>; \r\n  Create: (accessor:string, toCreate?:IEntry|IEntry[]) => Promise<IResponse>; \r\n  Read: (accessor:string, id?:string[]) => Promise<IResponse>; \r\n  Update: (accessor:string, toUpdate:IEntry|IEntry[]) => Promise<IResponse>; \r\n  Delete: (accessor:string, toDelete?:IEntry|IEntry[]) => Promise<IResponse>; \r\n} \r\n\r\n// DataAcessObject ==============================\r\nexport class DataAccessObject { \r\n  private collections:Collections = new Collections(); \r\n  private crud:ICrud = {} as ICrud; \r\n  //public errors:any[] = [] as any[]; \r\n\r\n  \r\n  constructor(crud:ICrud) { \r\n    this.crud = crud; \r\n  } \r\n\r\n  /*public GetCollections(accessors?:string[]):ICollection[] { \r\n    return this.collections.GetCollections(accessors); \r\n  } */\r\n\r\n  // COLLECTION .................................\r\n  public async Collections(accessors:string[]):Promise<IResponse[]> { \r\n    const responses = [] as IResponse[]; \r\n    for(let i=0; i<accessors.length; i++) { \r\n      const response = await this.crud.Collection(accessors[i]); \r\n      if(response.success) \r\n        this.collections.PushCollection(response.data); \r\n      responses.push(response); \r\n    } \r\n    return responses; \r\n  } \r\n\r\n  // CREATE .....................................  \r\n  public async Create(accessor:string, entry:IEntry):Promise<IResponse> { \r\n    const [response] = (await this.crud.Create(accessor, [entry])).data as IResponse[]; \r\n    if(response.success) \r\n      this.collections.Create(accessor, response.data); \r\n    return response; \r\n  } \r\n\r\n  // READ .......................................\r\n  public async Read(accessor:string, entry?:string[]):Promise<IEntry[]> { \r\n    //const results = (await crud.Read(accessor, [entry])).data as IResponse[]; \r\n    //const selectedCollection = this.GetCollection(accessor); \r\n    /*if(selectedCollection) \r\n      selectedCollection.Create(response.data); */ \r\n    return [] as IEntry[]; \r\n  } \r\n\r\n  // UPDATE .....................................\r\n  public async Update(accessor:string, entry:IEntry):Promise<IResponse> { \r\n    const [response] = (await this.crud.Update(accessor, [entry])).data as IResponse[]; \r\n    if(response.success) \r\n      this.collections.Update(accessor, response.data); \r\n    return response; \r\n  } \r\n\r\n  // DELETE .....................................\r\n  public async Delete(accessor:string, entry?:IEntry):Promise<IResponse> { \r\n    const [response] = (await this.crud.Delete(accessor, entry)).data as IResponse[]; \r\n    if(response.success) \r\n      this.collections.Delete(accessor, response.data); \r\n    return response; \r\n  } \r\n\r\n  // GET FOREIGN INFO -----------------------------\r\n  public GetForeignValue(ifield:IField, id:string):any|undefined { \r\n    return this.collections.GetForeignValue(ifield, id); \r\n  } \r\n\r\n  public GetForeignOptions(ifield:IField):IOption[] { \r\n    return this.collections.GetForeignOptions(ifield); \r\n  } \r\n} \r\n\r\n\r\n\r\n// Collections ===================================\r\nclass Collections { \r\n  public collections:ICollection[] = [] as ICollection[]; \r\n\r\n  public GetCollections(accessors?:string[]):ICollection[] { \r\n    if(!accessors) \r\n      return this.collections; \r\n    return this.collections.filter(c=> accessors.includes(c.accessor)); \r\n  } \r\n\r\n  // replace former collection with the same accessor. \r\n  public PushCollection(collection:ICollection) { \r\n    const duplicateAt = this.collections.findIndex(c=>c.accessor===collection.accessor); \r\n    if(duplicateAt >=0) \r\n      this.collections.splice(duplicateAt, 1); \r\n    this.collections.push(collection); \r\n  } \r\n\r\n  public Create(accessor:string, entry:IEntry) { \r\n    const collection = this.collections.find(c=> c.accessor===accessor); \r\n    if(collection) \r\n      collection.entries.push(entry); \r\n    return !collection; \r\n  } \r\n\r\n  public Update(accessor:string, entry:IEntry) { \r\n    const collection = this.collections.find(c=> c.accessor===accessor); \r\n    if(!collection) \r\n      return false; \r\n    const index = collection.entries.findIndex( e => e._id === entry._id ); \r\n    if(index < 0) \r\n      return false; \r\n    collection.entries[index] = {...entry}; \r\n  } \r\n\r\n  public Delete(accessor:string, entry:IEntry) {\r\n    const collection = this.collections.find(c => c.accessor === accessor); \r\n    if(!collection) \r\n      return false;\r\n    const index = collection.entries.findIndex( e => e._id === entry._id ); \r\n    if(index < 0) \r\n      return false; \r\n      collection.entries.splice(index, 1); \r\n  }\r\n\r\n  // GET FOREIGN INFO -----------------------------\r\n  public GetForeignValue(ifield:IField, id:string):any|undefined { \r\n    const [foreignCollection, foreignField] = this.GetForeignElements(ifield); \r\n    const foreignEntry = foreignCollection?.entries.find( e => e._id === id); \r\n    if(foreignEntry && foreignField) \r\n      return foreignEntry[foreignField.accessor]; \r\n    return; \r\n  } \r\n\r\n  public GetForeignOptions(ifield:IField):IOption[] { \r\n    const [foreignCollection, foreignField] = this.GetForeignElements(ifield); \r\n    if(!foreignCollection || !foreignField) \r\n      return [] as IOption[]; \r\n    return foreignCollection.entries?.map( e => { \r\n      return {value:e._id, label:e[foreignField.accessor]} as IOption; \r\n    }); \r\n  } \r\n\r\n  private GetForeignElements(ifield:IField): [ICollection, IField] | [] { \r\n    if(!ifield.isModel) \r\n      return []; \r\n    const foreignCollection = this.collections.find(c => c.accessor === ifield.type); \r\n    const foreignField = foreignCollection? this.GetAbbreviateField(foreignCollection): null; \r\n    if(!foreignCollection || !foreignField) \r\n      return []; \r\n    return [foreignCollection, foreignField]; \r\n  } \r\n  \r\n  private GetAbbreviateField(collection:ICollection):IField { \r\n    let foundAbvField = collection.ifields.find(c => c.options['abbreviate']); \r\n    if(foundAbvField) \r\n      return foundAbvField; \r\n    foundAbvField = collection.ifields.find( f => new Field(f).IsAbbreviable() ); \r\n    return foundAbvField as IField; \r\n  } \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts",["335"],"import {useMemo, useState} from 'react'; \r\nimport {useLoader, IState} from '../hooks/useloader/_useloader'; \r\nimport {DataAccessObject as IDao} from './dao.class'; \r\n\r\n\r\nexport interface IUseDao{ \r\n  state:IState; \r\n  activeCollection:ICollection; \r\n  setActiveCollection:React.Dispatch<ICollection>; \r\n  collections:() => ICollection[]; \r\n\r\n  Collections:(accessors:string[]) => Promise<void>; \r\n  Create: (accessor:string, toCreate:IEntry) => Promise<void>; \r\n  Read: (accessor:string, id?:string[]) => Promise<void>; \r\n  Update: (accessor:string, toUpdate:IEntry) => Promise<void>; \r\n  Delete: (accessor:string, toDelete?:IEntry) => Promise<void>; \r\n  GetForeignValue: (ifield:IField, value:any) => any; \r\n  GetForeignOptions: (ifield:IField) => IOption[]; \r\n} \r\n// USE DAO ======================================\r\nexport function useDao(dao:IDao):IUseDao { \r\n  const Dao = useMemo(() => dao, []); \r\n  const {state, Load} = useLoader(); \r\n  const [activeCollection, setActiveCollection] = useState({} as ICollection); \r\n\r\n  const collections = () => Dao.collections.collections; \r\n  const Collections = async (accessors:string[]) => Load(() => Dao.Collections(accessors)); \r\n  const Create = async (accessor:string, toCreate:IEntry) => Load(() => Dao.Create(accessor, toCreate)); \r\n  const Read = async (accessor:string, ids?:string[]) => Load(() => Dao.Read(accessor, ids)); \r\n  const Update = async (accessor:string, toUpdate:IEntry) => Load(() => Dao.Update(accessor, toUpdate)); \r\n  const Delete = async (accessor:string, toDelete?:IEntry) => Load(() => Dao.Delete(accessor, toDelete)); \r\n\r\n  const GetForeignValue = (ifield:IField, value:any) => Dao.GetForeignValue(ifield, value); \r\n  const GetForeignOptions = (ifield:IField) => Dao.GetForeignOptions(ifield); \r\n\r\n  return {state, activeCollection, setActiveCollection, collections, Collections, Create, Read, Update, Delete, GetForeignValue, GetForeignOptions}; \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testdao\\testdao.tsx",["336","337","338"],"import React, { useEffect, useState, useContext } from 'react'; \r\nimport {DataAccessObject, ICrud, IUseDao, useDao} from '../../../reusable/dao/_dao'; \r\nimport {CrudMongoose} from '../../../reusable/mongooseparser/mongooseaxios'; \r\nimport {Select, Options} from '../../../reusable/components/input/_input'; \r\nimport {IsEmpty, IsNull} from '../../../reusable/utils/_utils'; \r\n\r\n\r\nimport { DaoTablr } from './daotablr'; \r\n\r\nconst crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n\r\n\r\nexport const DaoContext = React.createContext({} as IUseDao); \r\n// Test Dao =====================================\r\nexport function TestDao() { \r\n  const context = useDao(new DataAccessObject(crud as ICrud)); \r\n  const {state, activeCollection, Collections} = context; \r\n\r\n  useEffect(() => { \r\n    Collections(['questions', 'responses']); \r\n  }, []); \r\n  \r\n  return <div> \r\n    <DaoContext.Provider value={context} > \r\n      {!state.ready && 'Loading'} \r\n      {state.ready && <SelectCollection />} \r\n      {!IsEmpty(activeCollection) && <DaoTablr/>} \r\n    </DaoContext.Provider> \r\n  </div> \r\n} \r\n\r\n\r\nfunction SelectCollection () { \r\n  const {activeCollection:value, setActiveCollection:setValue, collections} = useContext(DaoContext); \r\n  const options:IOption[] = collections().map( ic => { return {value:ic, label:ic.label} }); \r\n  \r\n  return <Select {...{value, setValue}} > \r\n    <Options {...{options}} /> \r\n  </Select> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testdao\\crudbtn.component.tsx",["339"],"import React, { useContext } from 'react'; \r\nimport {RowContext} from '../../../reusable/components/tablr/_tablr'; \r\nimport {DaoContext} from './testdao'; \r\nimport {ActiveContext} from './daotablr'; \r\n\r\n// CRUD BTN -------------------------------------\r\nexport function CreateBtn() { \r\n  const {activeCollection:{accessor}, Create} = useContext(DaoContext);\r\n  const action = (entry:any) => Create(accessor, entry); \r\n\r\n  const handle = 'create'; \r\n  const labels = {affirm:'Create', confirm:'Confirm creation', cancel:'Cancel creation'}; \r\n  return <CrudBtn {...{handle, labels, action}} /> \r\n} \r\n\r\nexport function UpdateBtn() { \r\n  const {activeCollection:{accessor}, Update} = useContext(DaoContext);\r\n  const action = (entry:any) => Update(accessor, entry); \r\n\r\n  const handle = 'update'; \r\n  const labels = {affirm:'Update', confirm:'Confirm update', cancel:'Cancel update'}; \r\n  return <CrudBtn {...{handle, labels, action}} /> \r\n} \r\n\r\nexport function DeleteBtn() { \r\n  const {activeCollection:{accessor}, Delete} = useContext(DaoContext);\r\n  const action = (entry:any) => Delete(accessor, entry); \r\n\r\n  const handle = 'delete'; \r\n  const labels = {affirm:'Delete', confirm:'Confirm deletion', cancel:'Cancel deletion'}; \r\n  return <CrudBtn {...{handle, labels, action}} /> \r\n} \r\n\r\n\r\ninterface CrudBtn { \r\n  handle: string; \r\n  labels:{ \r\n    affirm:string, \r\n    confirm:string, \r\n    cancel:string, \r\n  }; \r\n  action:(entry:any)=>Promise<void>; \r\n} \r\nfunction CrudBtn ({handle, labels, action}:CrudBtn) { \r\n  const {row} = useContext(RowContext); \r\n  const {active, SetActive} = useContext(ActiveContext); \r\n  const isActive = active.row === row; \r\n  const isHandled = active.mode === handle; \r\n\r\n  const Affirm = () => SetActive(row, handle); // replace with setActive. \r\n  const Cancel = () => SetActive(); // replace with with reset. \r\n  const Confirm = async () => { \r\n    await action(active.data); \r\n    SetActive(); \r\n  } \r\n\r\n  return <span> \r\n    {isActive && isHandled && <button onClick={Confirm}>{labels.confirm}</button>} \r\n    {isActive && isHandled && <button onClick={Cancel}>{labels.cancel}</button>} \r\n    {active.row !== row && <button onClick={Affirm}>{labels.affirm}</button>} \r\n  </span> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testdao\\daotablr.tsx",["340","341"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testdao\\cellrenderer.component.tsx",["342","343","344"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testdao\\renderers.utils.tsx",[],{"ruleId":"345","replacedBy":"346"},{"ruleId":"347","replacedBy":"348"},{"ruleId":"345","replacedBy":"349"},{"ruleId":"347","replacedBy":"350"},{"ruleId":"351","severity":1,"message":"352","line":2,"column":9,"nodeType":"353","messageId":"354","endLine":2,"endColumn":17},{"ruleId":"351","severity":1,"message":"355","line":3,"column":9,"nodeType":"353","messageId":"354","endLine":3,"endColumn":18},{"ruleId":"351","severity":1,"message":"356","line":3,"column":9,"nodeType":"353","messageId":"354","endLine":3,"endColumn":13},{"ruleId":"351","severity":1,"message":"357","line":3,"column":15,"nodeType":"353","messageId":"354","endLine":3,"endColumn":19},{"ruleId":"351","severity":1,"message":"358","line":3,"column":21,"nodeType":"353","messageId":"354","endLine":3,"endColumn":25},{"ruleId":"345","replacedBy":"346"},{"ruleId":"347","replacedBy":"348"},{"ruleId":"351","severity":1,"message":"359","line":2,"column":9,"nodeType":"353","messageId":"354","endLine":2,"endColumn":15},{"ruleId":"345","replacedBy":"360"},{"ruleId":"347","replacedBy":"361"},{"ruleId":"362","severity":1,"message":"363","line":49,"column":37,"nodeType":"364","messageId":"365","endLine":49,"endColumn":47},{"ruleId":"351","severity":1,"message":"359","line":3,"column":9,"nodeType":"353","messageId":"354","endLine":3,"endColumn":15},{"ruleId":"366","severity":1,"message":"367","line":19,"column":37,"nodeType":"368","endLine":19,"endColumn":39,"suggestions":"369"},{"ruleId":"351","severity":1,"message":"370","line":12,"column":38,"nodeType":"353","messageId":"354","endLine":12,"endColumn":48},{"ruleId":"366","severity":1,"message":"367","line":30,"column":37,"nodeType":"368","endLine":30,"endColumn":39,"suggestions":"371"},{"ruleId":"351","severity":1,"message":"372","line":1,"column":28,"nodeType":"353","messageId":"354","endLine":1,"endColumn":36},{"ruleId":"351","severity":1,"message":"373","line":2,"column":68,"nodeType":"353","messageId":"354","endLine":2,"endColumn":80},{"ruleId":"351","severity":1,"message":"374","line":2,"column":38,"nodeType":"353","messageId":"354","endLine":2,"endColumn":45},{"ruleId":"351","severity":1,"message":"375","line":3,"column":9,"nodeType":"353","messageId":"354","endLine":3,"endColumn":13},{"ruleId":"351","severity":1,"message":"376","line":3,"column":15,"nodeType":"353","messageId":"354","endLine":3,"endColumn":26},{"ruleId":"351","severity":1,"message":"377","line":3,"column":36,"nodeType":"353","messageId":"354","endLine":3,"endColumn":41},{"ruleId":"351","severity":1,"message":"378","line":5,"column":9,"nodeType":"353","messageId":"354","endLine":5,"endColumn":16},{"ruleId":"366","severity":1,"message":"379","line":18,"column":6,"nodeType":"368","endLine":18,"endColumn":8,"suggestions":"380"},{"ruleId":"351","severity":1,"message":"359","line":4,"column":9,"nodeType":"353","messageId":"354","endLine":4,"endColumn":15},{"ruleId":"381","severity":1,"message":"382","line":33,"column":22,"nodeType":"383","messageId":"384","endLine":33,"endColumn":24},{"ruleId":"381","severity":1,"message":"382","line":33,"column":47,"nodeType":"383","messageId":"384","endLine":33,"endColumn":49},{"ruleId":"351","severity":1,"message":"385","line":1,"column":16,"nodeType":"353","messageId":"354","endLine":1,"endColumn":26},{"ruleId":"381","severity":1,"message":"382","line":28,"column":20,"nodeType":"383","messageId":"384","endLine":28,"endColumn":22},{"ruleId":"381","severity":1,"message":"382","line":28,"column":36,"nodeType":"383","messageId":"384","endLine":28,"endColumn":38},{"ruleId":"351","severity":1,"message":"386","line":2,"column":9,"nodeType":"353","messageId":"354","endLine":2,"endColumn":13},{"ruleId":"351","severity":1,"message":"387","line":2,"column":15,"nodeType":"353","messageId":"354","endLine":2,"endColumn":23},{"ruleId":"351","severity":1,"message":"388","line":3,"column":33,"nodeType":"353","messageId":"354","endLine":3,"endColumn":43},{"ruleId":"351","severity":1,"message":"389","line":13,"column":18,"nodeType":"353","messageId":"354","endLine":13,"endColumn":26},{"ruleId":"366","severity":1,"message":"390","line":25,"column":37,"nodeType":"368","endLine":25,"endColumn":44,"suggestions":"391"},{"ruleId":"351","severity":1,"message":"385","line":1,"column":17,"nodeType":"353","messageId":"354","endLine":1,"endColumn":27},{"ruleId":"351","severity":1,"message":"392","line":2,"column":27,"nodeType":"353","messageId":"354","endLine":2,"endColumn":37},{"ruleId":"351","severity":1,"message":"393","line":2,"column":46,"nodeType":"353","messageId":"354","endLine":2,"endColumn":57},{"ruleId":"394","severity":1,"message":"395","line":35,"column":10,"nodeType":"353","messageId":"396","endLine":35,"endColumn":17},{"ruleId":"351","severity":1,"message":"397","line":1,"column":8,"nodeType":"353","messageId":"354","endLine":1,"endColumn":13},{"ruleId":"398","severity":1,"message":"399","line":15,"column":41,"nodeType":"353","messageId":"400","endLine":15,"endColumn":52},{"ruleId":"366","severity":1,"message":"401","line":22,"column":34,"nodeType":"368","endLine":22,"endColumn":36,"suggestions":"402"},{"ruleId":"351","severity":1,"message":"372","line":1,"column":28,"nodeType":"353","messageId":"354","endLine":1,"endColumn":36},{"ruleId":"351","severity":1,"message":"359","line":5,"column":18,"nodeType":"353","messageId":"354","endLine":5,"endColumn":24},{"ruleId":"366","severity":1,"message":"403","line":21,"column":6,"nodeType":"368","endLine":21,"endColumn":8,"suggestions":"404"},{"ruleId":"394","severity":1,"message":"395","line":44,"column":10,"nodeType":"353","messageId":"396","endLine":44,"endColumn":17},{"ruleId":"351","severity":1,"message":"392","line":2,"column":27,"nodeType":"353","messageId":"354","endLine":2,"endColumn":37},{"ruleId":"351","severity":1,"message":"393","line":2,"column":46,"nodeType":"353","messageId":"354","endLine":2,"endColumn":57},{"ruleId":"351","severity":1,"message":"405","line":4,"column":9,"nodeType":"353","messageId":"354","endLine":4,"endColumn":25},{"ruleId":"351","severity":1,"message":"406","line":16,"column":9,"nodeType":"353","messageId":"354","endLine":16,"endColumn":14},{"ruleId":"351","severity":1,"message":"407","line":17,"column":9,"nodeType":"353","messageId":"354","endLine":17,"endColumn":17},"no-native-reassign",["408"],"no-negated-in-lhs",["409"],["408"],["409"],"@typescript-eslint/no-unused-vars","'TestArrx' is defined but never used.","Identifier","unusedVar","'TestTablr' is defined but never used.","'Copy' is defined but never used.","'Edit' is defined but never used.","'Read' is defined but never used.","'IsNull' is defined but never used.",["408"],["409"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'Load' and 'loadfunc'. Either include them or remove the dependency array.","ArrayExpression",["410"],"'setAnswers' is assigned a value but never used.",["411"],"'useState' is defined but never used.","'ElementValue' is defined but never used.","'Element' is defined but never used.","'Objx' is defined but never used.","'ObjxContext' is defined but never used.","'Field' is defined but never used.","'OnEnter' is defined but never used.","React Hook useEffect has missing dependencies: 'options' and 'setOptions'. Either include them or remove the dependency array.",["412"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'useContext' is defined but never used.","'Arrx' is defined but never used.","'Elements' is defined but never used.","'InputArray' is defined but never used.","'optional' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'UpdateAnswers'. Either include it or remove the dependency array.",["413"],"'RowContext' is defined but never used.","'CellContext' is defined but never used.","@typescript-eslint/no-redeclare","'CrudBtn' is already defined.","redeclared","'React' is defined but never used.","@typescript-eslint/no-use-before-define","'Collections' was used before it was defined.","noUseBeforeDefine","React Hook useMemo has a missing dependency: 'dao'. Either include it or remove the dependency array.",["414"],"React Hook useEffect has a missing dependency: 'Collections'. Either include it or remove the dependency array.",["415"],"'GetRenderingFunc' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"416","fix":"417"},{"desc":"416","fix":"418"},{"desc":"419","fix":"420"},{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},"Update the dependencies array to be: [Load, loadfunc]",{"range":"427","text":"428"},{"range":"429","text":"428"},"Update the dependencies array to be: [options, setOptions]",{"range":"430","text":"431"},"Update the dependencies array to be: [UpdateAnswers, value]",{"range":"432","text":"433"},"Update the dependencies array to be: [dao]",{"range":"434","text":"435"},"Update the dependencies array to be: [Collections]",{"range":"436","text":"437"},[650,652],"[Load, loadfunc]",[1095,1097],[585,587],"[options, setOptions]",[1053,1060],"[UpdateAnswers, value]",[895,897],"[dao]",[855,857],"[Collections]"]