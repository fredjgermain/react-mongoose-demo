[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\valuerenderer.component.tsx":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\loadpatient.component.tsx":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\loadquestionnaire.component.tsx":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\displayquestion.component.tsx":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaire.utils.tsx":"59","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\paging.component.tsx":"60","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts":"61","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts":"62","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx":"63","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudmongoose.class.ts":"64","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testdao\\testcrud.experiment.tsx":"65"},{"size":621,"mtime":1612141670677,"results":"66","hashOfConfig":"67"},{"size":329,"mtime":1612383423688,"results":"68","hashOfConfig":"67"},{"size":362,"mtime":499162500000,"results":"69","hashOfConfig":"67"},{"size":225,"mtime":1609475507334,"results":"70","hashOfConfig":"67"},{"size":1365,"mtime":1612382548450,"results":"71","hashOfConfig":"67"},{"size":117,"mtime":1609476049273,"results":"72","hashOfConfig":"67"},{"size":496,"mtime":1609883323259,"results":"73","hashOfConfig":"67"},{"size":1495,"mtime":1612141671254,"results":"74","hashOfConfig":"67"},{"size":3332,"mtime":1612141671254,"results":"75","hashOfConfig":"67"},{"size":2832,"mtime":1612141671255,"results":"76","hashOfConfig":"67"},{"size":1900,"mtime":1612141671217,"results":"77","hashOfConfig":"67"},{"size":3091,"mtime":1612141671217,"results":"78","hashOfConfig":"67"},{"size":1780,"mtime":1612141670967,"results":"79","hashOfConfig":"67"},{"size":2274,"mtime":1612141671117,"results":"80","hashOfConfig":"67"},{"size":1473,"mtime":1612141671140,"results":"81","hashOfConfig":"67"},{"size":462,"mtime":1612141671142,"results":"82","hashOfConfig":"67"},{"size":1042,"mtime":1612141671142,"results":"83","hashOfConfig":"67"},{"size":982,"mtime":1612141671141,"results":"84","hashOfConfig":"67"},{"size":6106,"mtime":1612383192960,"results":"85","hashOfConfig":"67"},{"size":287,"mtime":1612382530122,"results":"86","hashOfConfig":"67"},{"size":341,"mtime":1612382805121,"results":"87","hashOfConfig":"67"},{"size":862,"mtime":1612141670934,"results":"88","hashOfConfig":"67"},{"size":112,"mtime":1612141670932,"results":"89","hashOfConfig":"67"},{"size":1301,"mtime":1612141671147,"results":"90","hashOfConfig":"67"},{"size":688,"mtime":1611105433287,"results":"91","hashOfConfig":"67"},{"size":1330,"mtime":1611105734495,"results":"92","hashOfConfig":"67"},{"size":124,"mtime":1611105257047,"results":"93","hashOfConfig":"67"},{"size":233,"mtime":1612141670928,"results":"94","hashOfConfig":"67"},{"size":3111,"mtime":1612141671125,"results":"95","hashOfConfig":"67"},{"size":1385,"mtime":1612141671125,"results":"96","hashOfConfig":"67"},{"size":510,"mtime":1612141670929,"results":"97","hashOfConfig":"67"},{"size":1532,"mtime":1612141670991,"results":"98","hashOfConfig":"67"},{"size":2116,"mtime":1612141671020,"results":"99","hashOfConfig":"67"},{"size":943,"mtime":1612141671021,"results":"100","hashOfConfig":"67"},{"size":447,"mtime":1612141670931,"results":"101","hashOfConfig":"67"},{"size":4285,"mtime":1611356030017,"results":"102","hashOfConfig":"67"},{"size":1373,"mtime":1611177659474,"results":"103","hashOfConfig":"67"},{"size":107,"mtime":1612141670933,"results":"104","hashOfConfig":"67"},{"size":2743,"mtime":1612141671148,"results":"105","hashOfConfig":"67"},{"size":79,"mtime":1612141670934,"results":"106","hashOfConfig":"67"},{"size":338,"mtime":1612141671148,"results":"107","hashOfConfig":"67"},{"size":1561,"mtime":1612141670895,"results":"108","hashOfConfig":"67"},{"size":231,"mtime":1612141670930,"results":"109","hashOfConfig":"67"},{"size":1927,"mtime":1612141671121,"results":"110","hashOfConfig":"67"},{"size":1598,"mtime":1612141670985,"results":"111","hashOfConfig":"67"},{"size":4408,"mtime":1612141670676,"results":"112","hashOfConfig":"67"},{"size":512,"mtime":1612141670758,"results":"113","hashOfConfig":"67"},{"size":1421,"mtime":1612141670703,"results":"114","hashOfConfig":"67"},{"size":1265,"mtime":1612194020643,"results":"115","hashOfConfig":"67"},{"size":1055,"mtime":1612141670805,"results":"116","hashOfConfig":"67"},{"size":2620,"mtime":1612141670791,"results":"117","hashOfConfig":"67"},{"size":1662,"mtime":1612141670735,"results":"118","hashOfConfig":"67"},{"size":3514,"mtime":1612141670856,"results":"119","hashOfConfig":"67"},{"size":1087,"mtime":1612141670927,"results":"120","hashOfConfig":"67"},{"size":701,"mtime":1612141670827,"results":"121","hashOfConfig":"67"},{"size":1229,"mtime":1612141670909,"results":"122","hashOfConfig":"67"},{"size":736,"mtime":1612141670564,"results":"123","hashOfConfig":"67"},{"size":2673,"mtime":1612141670908,"results":"124","hashOfConfig":"67"},{"size":1292,"mtime":1612141670910,"results":"125","hashOfConfig":"67"},{"size":2462,"mtime":1612141670910,"results":"126","hashOfConfig":"67"},{"size":2642,"mtime":1612382464975,"results":"127","hashOfConfig":"67"},{"size":2527,"mtime":1612382505511,"results":"128","hashOfConfig":"67"},{"size":431,"mtime":1612382505474,"results":"129","hashOfConfig":"67"},{"size":2509,"mtime":1612383143349,"results":"130","hashOfConfig":"67"},{"size":99,"mtime":1612383800505,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},"ke513i",{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"150"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"157"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"157"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"150"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"190"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"157"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"157"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"157"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"157"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"157"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"157"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"157"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"157"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"157"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"157"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"157"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"157"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"157"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"150"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"150"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"150"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["289","290"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",["291","292","293"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",["294"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx",[],["295","296"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",[],["297","298"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],["299","300"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["301"],"import {IsEmpty, IsInRange} from '../_utils';\r\n\r\nexport interface IMongooseCollection { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    enum?: any[]; \r\n    abbrev?: boolean; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\n// Parser functions =============================\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\nexport function ParseField(field:IMongooseField):IField { \r\n  const {path, instance, options, $embeddedSchemaType} = field; \r\n  const ifield:IField = {} as IField; \r\n\r\n  ifield.accessor = path ?? ''; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.type = options?.ref ?? $embeddedSchemaType?.instance ?? field.instance.toLowerCase(); \r\n  ifield.isMixed = instance.toLowerCase() === 'mixed'; \r\n  ifield.isEnum = !!options?.enum; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = !!options?.ref; \r\n  ifield.isAbbrev = !!options?.abbrev; \r\n  ifield.validators = GetValidators(field); \r\n  ifield.isRequired = field.options['required'] ?? false; \r\n  ifield.regex = field.options['regex']? field.options['regex']: undefined; \r\n\r\n  ifield.enums = options.enum ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, field.options); \r\n\r\n  return ifield; \r\n} \r\n\r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} \r\n\r\n\r\nfunction GetValidators(field:IMongooseField):IValidator[] { \r\n  const required = (value:any) => { \r\n    return !IsEmpty(value); \r\n  }; \r\n\r\n  const regex = (value:any) => { \r\n    if(field.options['regex']) \r\n      return new RegExp(field.options['regex']).test(value); \r\n    return true; \r\n  } \r\n\r\n  const range = (value:any) => { \r\n    return IsInRange(value, field.options['min'], field.options['max']); \r\n  } \r\n\r\n  let validators:IValidator[] = []; \r\n  if(field.options['required']) \r\n    validators.push(required); \r\n  if(field.options['regex']) \r\n    validators.push(regex); \r\n  if(field.options['min'] || field.options['max']) \r\n    validators.push(range); \r\n  return validators; \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["302","303","304"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull, GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield) => { \r\n      return <Cell key={ifield.accessor} {...{ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const data = datas[row]; \r\n  const value = IsEmpty(data) ? GetDefaultValueFromIField(ifield): datas[row][ifield.accessor]; \r\n  const context = {value, row, ifield} as ICellContext; \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["305","306","307"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts",["308"],"import {Order} from '../_utils'; \r\nimport {Collection} from './collection.class'; \r\n\r\n\r\n\r\nexport interface ICrud { \r\n  Collections:(accessors?:string[]) => Promise<ICrudResponse[]>; \r\n  Create: (accessor:string, toCreate:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Read: (accessor:string, id?:string[]) => Promise<ICrudResponse[]>;          /// ??\r\n  Update: (accessor:string, toUpdate:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Delete: (accessor:string, toDelete:IEntry[]) => Promise<ICrudResponse[]>; \r\n} \r\n\r\n\r\n// DAO #############################################\r\nexport class DAO { \r\n  public collections:ICollection[] = [] as ICollection[]; \r\n\r\n  private crud:ICrud = {} as ICrud; \r\n\r\n  constructor(crud:ICrud) { \r\n    this.crud = crud; \r\n  } \r\n\r\n  // Get ICollections ----------------------------- \r\n  public GetICollections(accessors?:string[]):ICollection[] { \r\n    if(!accessors) \r\n      return this.collections; \r\n    const compare = (a:ICollection, b:string) => {return a.accessor === b}; \r\n    return Order<ICollection>(this.collections, accessors, compare).selection; \r\n  } \r\n\r\n  // Get IFields -----------------------------------\r\n  public GetIFields(accessor:string, fields?:string[]):IField[] { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    if(!fields) \r\n      return collection?.ifields ?? []; \r\n    const compare = (a:IField, b:string) => {return a.accessor === b}; \r\n    return Order<IField>(collection?.ifields ?? [], fields, compare).selection; \r\n  }\r\n\r\n  // GEt Entries --------------------------------------\r\n  public GetIEntries(accessor:string, ids?:string[]):IEntry[] {\r\n    const collection = this.collections.find(c => c.accessor === accessor); \r\n    if(!ids)\r\n      return collection?.entries ?? []; \r\n    const compare = (a:IEntry, b:string) => {return a._id === b}; \r\n    return Order<IEntry>(collection?.entries ?? [], ids, compare).selection; \r\n  }\r\n\r\n  // Get Default IEntry ----------------------------------\r\n  public GetDefaultIEntry(accessor:string):IEntry { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    return new Collection(collection).GetDefaultIEntry(); \r\n  } \r\n  \r\n  // GET FOREIGN ELEMENTS -----------------------------\r\n  public GetForeignElements(ifield:IField) \r\n    : {foreignCollection:ICollection|undefined, abbrevField:IField|undefined} \r\n  { \r\n    const foreignCollection = this.collections.find(c => c.accessor === ifield.type); \r\n    const abbrevField = foreignCollection?.ifields.find(f=>f.isAbbrev); \r\n    return {foreignCollection, abbrevField}; \r\n  } \r\n\r\n  // Get Options ----------------------------------------\r\n  public GetIOptions(ifield:IField):IOption[] { \r\n    if(ifield.enums)\r\n      return ifield.enums.map(e => {return {value:e, label:e}}); \r\n    if(!ifield.isModel)\r\n      return [] as IOption[]; \r\n    const {foreignCollection, abbrevField} = this.GetForeignElements(ifield); \r\n    if(!foreignCollection || !abbrevField) \r\n      return [] as IOption[]; \r\n    return foreignCollection.entries?.map( e => { \r\n      return {value:e._id, label:e[abbrevField.accessor]} as IOption; \r\n    }); \r\n  } \r\n\r\n  // COLLECTIONS -------------------------------------------\r\n  public async Collections(accessors?:string[]):Promise<ICrudResponse[]> { \r\n    const responses = (await this.crud.Collections(accessors)) as ICrudResponse[]; \r\n    const icollections = responses.filter(r => r.success).map(r => r.data as ICollection); \r\n    this.PushUpdateCollection(icollections); \r\n    return responses; \r\n  } \r\n\r\n  private PushUpdateCollection(icollections:ICollection[]) { \r\n    icollections.forEach( newCol => { \r\n      const index = this.collections.findIndex(col => col.accessor === newCol.accessor); \r\n      if(index >=0) \r\n        this.collections[index] = newCol; \r\n      else \r\n        this.collections.push(newCol); \r\n    }) \r\n  } \r\n\r\n  /* Create -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Create(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Create(accessor, entries)) as ICrudResponse[]; \r\n    const created = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Create(created); \r\n    return responses; \r\n  } \r\n\r\n  /* Read -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  Create/Update read data to local. \r\n  */\r\n  public async Read(accessor:string, ids?:string[]):Promise<IEntry[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Read(accessor, ids)) as ICrudResponse[]; \r\n    const read = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    return read; \r\n  } \r\n\r\n  /* Update -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Update(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Update(accessor, entries)) as ICrudResponse[]; \r\n    const updated = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Update(updated); \r\n    return responses; \r\n  } \r\n\r\n  /* Delete -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Delete(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Delete(accessor, entries)) as ICrudResponse[]; \r\n    const deleted = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Delete(deleted); \r\n    return responses; \r\n  } \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx",[],["309","310"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts",[],["311","312"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx",["313"],"import React from 'react'; \r\n//import CSS from ''\r\nimport {IEvent, IsNull, OnEnter, SetSize, SetWidth, \r\n  GetDefaultValueByType, GetTypeByValue, GetInputType, GetValueFromInput} from '../../_utils'; \r\n\r\n\r\n// INPUT ========================================\r\nexport interface IInput extends React.HTMLAttributes<HTMLInputElement> { \r\n  value:any; \r\n  setValue:any; \r\n  type?:string; \r\n  defaultValue?:any; \r\n  inputType?:string; \r\n  onEnterUp?:() => void; \r\n  width?: number; \r\n  [key:string]:any; \r\n} \r\nexport function Input(\r\n  {\r\n    value, setValue, \r\n    type=GetTypeByValue(value??''), \r\n    defaultValue=GetDefaultValueByType(type??'string'), \r\n    inputType=GetInputType(type??''), \r\n    onEnterUp=() => {}, \r\n    ...props\r\n  }:IInput) \r\n{ \r\n  const onChange = (event:IEvent) => setValue(GetInputValueOrDefault(event, defaultValue)); \r\n  const Value = IsNull(value) ? defaultValue: value; \r\n  const onKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => OnEnter(event, onEnterUp); \r\n\r\n  const width = props.width ?? SetSize(value); \r\n  const style = {width: `${width+2}ch`}; \r\n\r\n  if(type === 'boolean') \r\n    return <input {...{type:inputType, checked:Value, onChange, onKeyUp,  ...props}} /> \r\n  return <input {...{type:inputType, value:Value, onChange, onKeyUp, ...props}} style={style} /> \r\n} \r\n\r\n\r\n// GetValue --------------------------------------\r\nfunction GetInputValueOrDefault (event:IEvent, defaultValue:any) { \r\n  const value = GetValueFromInput(event); \r\n  return IsNull(value) ? defaultValue: value; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx",["314","315","316","317","318","319"],"import React, { useContext, useEffect, useState } from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex, ElementValue} from '../../_arrx'; \r\nimport {Input} from '../../_input'; \r\nimport {IInputArray, IUseInputArray, useInputArray} from './inputarray.hook'; \r\n\r\n\r\nexport const InputArrayContext = React.createContext({} as IUseInputArray); \r\nexport function InputArray({...props}:React.PropsWithChildren<IInputArray>) { \r\n  const context = useInputArray(props); \r\n  const {values} = props; \r\n  \r\n  return <InputArrayContext.Provider value={context} > \r\n    <Arrx {...{values}} > \r\n      <Elements> \r\n        <UpdateElement/> <DeleteBtn/>\r\n        <br/> \r\n      </Elements> \r\n      <CreateElement/>\r\n    </Arrx> \r\n  </InputArrayContext.Provider> \r\n} \r\n\r\n\r\n// Create element =======================================\r\nfunction CreateElement() { \r\n  const {type, defaultValue, Create} = useContext(InputArrayContext); \r\n  const [value, setValue] = useState(defaultValue); \r\n\r\n  const onEnterUp = () => {\r\n    Create(value); \r\n    setValue(() => defaultValue); // reset input to defaultValue after creation. \r\n  }; \r\n  return <Input {...{value, setValue, defaultValue, type, onEnterUp}}  /> \r\n} \r\n\r\n// Update element =======================================\r\nfunction UpdateElement() { \r\n  const {values, type, defaultValue, Update} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n\r\n  const [value, setValue] = useState(values[index]); \r\n  useEffect(() => { \r\n    setValue(values[index]); \r\n  }, [JSON.stringify(values[index])]); \r\n\r\n  const onEnterUp = () => Update(index, value); \r\n  return <Input {...{value, setValue, type, defaultValue, onEnterUp}} />\r\n}\r\n\r\n// Delete Btn ===================================\r\nexport function DeleteBtn({children, ...props}:React.PropsWithChildren<React.ButtonHTMLAttributes<HTMLButtonElement>>) { \r\n  const {Delete} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  return <button onClick={() => Delete(index)} {...props}> \r\n    {!children ? 'x' : children} \r\n  </button> \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx",[],["320","321"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\valuerenderer.component.tsx",["322","323","324","325","326","327","328"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx",["329","330"],"import {useEffect, useRef} from 'react'; \r\n\r\nexport function useUpdate(callback:() => void, changeling:any) { \r\n  const flagFirstRender = useRef(true); \r\n  \r\n  useEffect(() => { \r\n    if(flagFirstRender.current) { \r\n      flagFirstRender.current = false; \r\n      return; \r\n    } \r\n    callback(); \r\n  }, [JSON.stringify(changeling)]); \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",["331","332","333","334","335"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {useDao, DaoContexter, ICrud, DataAccessObject, DaoContext} from '../../reusable/_dao'; \r\nimport {CrudMongoose} from '../../reusable/_mongooseparser'; \r\nimport {IsEmpty, GetValueAt, SetValueAt} from '../../reusable/_utils'; \r\nimport {PatientProfile} from './components/patientprofile.component'; \r\nimport {Questionnaire} from '../questionnaire/questionnaire.page'; \r\nimport {LoadPatients } from './components/loadpatient.component'; \r\n//import {RamqIdentification} from './components/ramqidentitication.component';\r\n\r\nconst crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n\r\n\r\n\r\n\r\n\r\n// PATIENT PAGE =================================\r\ninterface IPatientProfileContext { \r\n  patientProfile: IEntry; \r\n  setPatientProfile: React.Dispatch<IEntry>; \r\n} \r\nexport const PatientProfileContext = React.createContext({} as IPatientProfileContext); \r\nexport function Patient() { \r\n  const UseDao = useDao( new DataAccessObject(crud as ICrud) ); \r\n  const {activeCollection} = UseDao; \r\n  const [patientProfile, setPatientProfile] = useState({} as IEntry); \r\n\r\n  const context = {patientProfile, setPatientProfile}; \r\n  return <DaoContexter {...{UseDao}} > \r\n    <PatientProfileContext.Provider value={context} > \r\n      {IsEmpty(activeCollection) && <LoadPatients/>} \r\n      {!IsEmpty(activeCollection) && IsEmpty(patientProfile) && <PatientProfile/>} \r\n      {!IsEmpty(patientProfile) && <Questionnaire/>} \r\n    </PatientProfileContext.Provider> \r\n  </DaoContexter> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx",["336"],"import React, { useEffect, useState } from 'react'; \r\nimport {Input, InputArray, Select} from '../../_input'; \r\nimport {GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\nimport {useUpdate} from '../../_useupdate'; \r\n\r\n\r\n\r\n// Reader =======================================\r\ninterface IEditor{ \r\n  ifield:IField; \r\n  value:any; \r\n  setValue:React.Dispatch<any>; \r\n  options?:IOption[]; \r\n} \r\nexport function Editor({ ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) { \r\n  const {defaultValue, type} = ifield; \r\n  const _options = options ?? [] as IOption[]; \r\n  const [_value, _setValue] = useState(value); \r\n\r\n  // synchronize from parent value\r\n  useEffect(() => { \r\n    if(value !== _value) \r\n      _setValue(value); \r\n  }, [value]); \r\n\r\n  // synchronize to parent value \r\n  useUpdate(() => {setValue(_value)},_value); \r\n\r\n  // Edit Many\r\n  if(ifield.isArray) {\r\n    if(IsEmpty(options)) \r\n      return <InputArray {...{defaultValue, type, values:_value, setValues:_setValue}} /> \r\n    return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:true}} /> \r\n  }\r\n  // Edit Mixed\r\n  if(ifield.isMixed) \r\n    return <EditMixed {...{ifield, value, setValue}} /> \r\n\r\n  // Edit One\r\n  if(IsEmpty(options)) \r\n    return <Input {...{value:_value, setValue:_setValue, type, defaultValue}} /> \r\n  return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:false}} /> \r\n} \r\n\r\n\r\nfunction EditMixed ({ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) {\r\n  return <span>{JSON.stringify(value)}</span>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx",["337","338"],"import React, { useState } from 'react'; \r\nimport {Reader, Editor, Select} from '../reusable/_input'; \r\nimport {GetValueAt, SetValueAt} from '../reusable/_utils'; \r\n\r\n\r\nconst numField:IField = {accessor:'num', label:'Accessor', type:'number', defaultValue:0, options:{}} as IField; \r\nconst strField:IField = {accessor:'str', label:'Accessor', type:'string', defaultValue:'', options:{}} as IField; \r\nconst boolField:IField = {accessor:'bool', label:'Accessor', type:'boolean', defaultValue:false, options:{}} as IField; \r\n\r\nconst numOptions:IOption[] = [ \r\n  {value: 0, label:'value 0'}, \r\n  {value: 1, label:'value 1'}, \r\n  {value: 2, label:'value 2'}, \r\n  {value: 3, label:'value 3'}, \r\n] \r\n\r\nconst strOptions:IOption[] = [ \r\n  {value: 'a', label:'value a'}, \r\n  {value: 'b', label:'value b'}, \r\n  {value: 'c', label:'value c'}, \r\n  {value: 'd', label:'value d'}, \r\n] \r\n\r\nconst boolOptions:IOption[] = [ \r\n  {value: false, label:'female'}, \r\n  {value: true, label:'male'}, \r\n] \r\n\r\nconst testRead:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n  {value: 12, ifield: {...numField}}, \r\n  {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n  {value: 'bababa', ifield:{...strField} }, \r\n  {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n  {value: false, ifield:{...boolField} }, \r\n  {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n  // options\r\n  {value: 2, ifield:{...numField}, options:numOptions }, \r\n  {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n  {value: 'b', ifield:{...strField}, options:strOptions}, \r\n  {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n  {value: false, ifield:{...boolField}, options:strOptions}, \r\n  {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n] \r\n\r\n  /*const testEditor:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n    {value: 12, ifield: {...numField}}, \r\n    {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n    {value: 'bababa', ifield:{...strField} }, \r\n    {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n    {value: false, ifield:{...boolField} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n    // options\r\n    {value: 2, ifield:{...numField}, options:numOptions }, \r\n    {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n    {value: 'b', ifield:{...strField}, options:strOptions}, \r\n    {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n    {value: false, ifield:{...boolField, options:strOptions} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n  ] */\r\n\r\n/*\r\nfunction useStateAt(_value:any) { \r\n  const [value, setValue] = useState(_value); \r\n  const ValueAt = (keys?:any[], newValue?:any) => { \r\n    if(newValue && JSON.stringify(ValueAt(keys)) !== newValue) \r\n      return SetValueAt(value, newValue, keys); \r\n    return GetValueAt(value, keys); \r\n  } \r\n  return ValueAt; \r\n} \r\n  \r\nexport function TestValueAt() { \r\n  const VALUE = {a:[15,46], b:[96,45]} \r\n  const valueAt = useStateAt(VALUE); \r\n  const value = valueAt(['a',0]); \r\n  const setValue = valueAt(['a',0]); \r\n\r\n  return <div> \r\n    <Editor {...{value}} /> \r\n  </div> \r\n} */\r\n\r\n\r\n// Test select when value is not in the avaible options */ \r\nexport function TestSelect () { \r\n  const [value, setValue] = useState(['-1']); \r\n  const options = [ \r\n    {value:'0', label:'option 0'}, \r\n    {value:'1', label:'option 1'}, \r\n    {value:'2', label:'option 2'}, \r\n    {value:'3', label:'option 3'} \r\n  ] \r\n\r\n  return <Select {...{value, setValue, options, multiple:true}} /> \r\n} \r\n\r\nexport function TestEditors() {\r\n  \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <TestEditor {...e} /></div> \r\n    })} \r\n    <br/>\r\n    asdsadsadas\r\n    <br/>\r\n  </div> \r\n}\r\n\r\n\r\nexport function TestEditor({ifield, options, ...props}:{value:any, ifield:IField, options?:IOption[]}) { \r\n  const [value, setValue] = useState(props.value); \r\n  return <div> \r\n    <div>{JSON.stringify(value)}</div> \r\n    <Editor {...{ifield, value, setValue, options}} /> \r\n    <br/>\r\n  </div>\r\n}\r\n\r\n\r\nexport function TestReader() { \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <Reader {...e} /></div> \r\n    })} \r\n  </div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx",["339"],"import React, {useContext} from 'react'; \r\nimport {DaoContext} from '../../reusable/_dao'; \r\nimport {Arrx} from '../../reusable/_arrx'; \r\n\r\nimport '../../css/feedback.css'; \r\n\r\n\r\n// Feedback =====================================\r\nexport function FeedBack() { \r\n  const {state} = useContext(DaoContext); \r\n\r\n  return <div> \r\n    {!state.ready && <span>LOADING ... </span>} \r\n    {state.ready && <span>Ready </span>} \r\n    {state.ready && state.success && <CrudFeedBack />} \r\n    {state.ready && !state.success && 'an errors occured'} \r\n  </div> \r\n} \r\n\r\nfunction CrudFeedBack() { \r\n  const {state} = useContext(DaoContext); \r\n  // assumes state is ready and successful\r\n  const {actionType, success, data, err} = state.response as ICrudResponse; // ICrudResponse[]\r\n  \r\n  const successMsg:any = { \r\n    create:'Creation succeed', \r\n    update:'Update succeed', \r\n    delete:'Deletion succeed', \r\n  } \r\n  const errorMsg:any = { \r\n    create:'Creation failed ', \r\n    update:'Update failed', \r\n    delete:'Deletion failed', \r\n  } \r\n\r\n  const className = success ? 'success' : 'failure'; \r\n\r\n  return <div className={className}> \r\n    <div>{success ? successMsg[actionType] : errorMsg[actionType]}</div> \r\n    {!success && <Arrx {...{values:(err)}} />} \r\n    </div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx",["340","341"],"import React, {useContext} from 'react'; \r\nimport {DaoContext, EActionType} from '../../../reusable/_dao'; \r\n\r\nimport {Rows, Row, RowContext, Cells, Cell, CellContext} from '../../../reusable/_tablr'; \r\nimport {CreateBtn, DeleteBtn, UpdateBtn} from './crudbtn.component'; \r\nimport {CellRender} from './cellrenderer.component';\r\n\r\n\r\n\r\nexport function InlineUpdateDelete({page, cols, colBtn}:{page:number[], cols:IField[], colBtn:IField}) { \r\n  return <Rows {...{rows:page}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <CellRender/> \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <UpdateBtn/><DeleteBtn/> \r\n    </Cell> \r\n  </Rows> \r\n} \r\n\r\nexport function InlineCreate({cols, colBtn}:{cols:IField[], colBtn:IField}) { \r\n  const {activeMode} = useContext(DaoContext); \r\n  const isCreate = activeMode === EActionType.CREATE; \r\n\r\n  return <Row {...{row:-1}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <span></span>\r\n      {isCreate && <CellRender/> } \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <CreateBtn/> \r\n    </Cell> \r\n  </Row> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx",["342"],"import React, {useContext} from 'react'; \r\nimport {RowContext, TablrContext} from '../../../reusable/_tablr'; \r\nimport {DaoContext, EActionType} from '../../../reusable/_dao'; \r\n\r\n\r\n\r\n// Create .......................................\r\nexport function CreateBtn() { \r\n  const {activeCollection:{accessor}, Create} = useContext(DaoContext); \r\n  const action = (entry:any) => Create(accessor, entry); \r\n\r\n  const mode = EActionType.CREATE; \r\n  const labels = {affirm:'Create', confirm:'Confirm creation', cancel:'Cancel creation'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Update .......................................\r\nexport function UpdateBtn() { \r\n  const {activeCollection:{accessor}, Update} = useContext(DaoContext);\r\n  const action = (entry:any) => Update(accessor, entry); \r\n\r\n  const mode = EActionType.UPDATE; \r\n  const labels = {affirm:'Update', confirm:'Confirm update', cancel:'Cancel update'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Delete .......................................\r\nexport function DeleteBtn() { \r\n  const {activeCollection:{accessor}, Delete} = useContext(DaoContext);\r\n  const action = (entry:any) => Delete(accessor, entry); \r\n\r\n  const mode = EActionType.DELETE; \r\n  const labels = {affirm:'Delete', confirm:'Confirm deletion', cancel:'Cancel deletion'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n\r\n\r\n// CRUD BTN =====================================\r\ninterface CrudBtn { \r\n  mode: EActionType; \r\n  labels:{ \r\n    affirm:string, \r\n    confirm:string, \r\n    cancel:string, \r\n  }; \r\n  action:(entry:any)=>Promise<void>; \r\n} \r\nfunction CrudBtn ({mode, labels, action}:CrudBtn) { \r\n  const {activeCollection, activeEntry, setActiveEntry, activeMode, GetEntry, SetActiveMode} = useContext(DaoContext); \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n  const id = datas[row] ? datas[row]._id: ''; \r\n\r\n  const isId = activeEntry._id === id; \r\n  const isMode = activeMode === mode; \r\n\r\n  const Affirm = () => { \r\n    setActiveEntry(GetEntry(activeCollection.accessor, id)); \r\n    SetActiveMode(mode); \r\n  } \r\n  const Cancel = () => { \r\n    setActiveEntry(GetEntry(activeCollection.accessor)); \r\n    SetActiveMode(); \r\n  }; \r\n  const Confirm = async () => { \r\n    await action(activeEntry); \r\n    Cancel(); \r\n  } \r\n\r\n  return <span> \r\n    {isId && isMode && <button onClick={Confirm}>{labels.confirm}</button>} \r\n    {isId && isMode && <button onClick={Cancel}>{labels.cancel}</button>} \r\n    {(id ==='' || !isId) && !isMode && <button onClick={Affirm}>{labels.affirm}</button>} \r\n  </span> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx",["343"],"import React, {useContext, useState} from 'react'; \r\nimport {DaoContext, EActionType} from '../../../reusable/_dao'; \r\nimport {IsEmpty} from '../../../reusable/_utils'; \r\nimport {FeedBack} from '../../../components/feedback/feedback.component'; \r\n\r\nimport {Objx, Fields, Field, FieldContext, FieldLabel} \r\n  from '../../../reusable/_objx'; \r\nimport {Reader, Editor} from '../../../reusable/_input'; \r\n//import {Questionnaire} from '../../questionnaire/questionnaire.page'; \r\nimport {PatientProfileContext} from '../patient.page'; \r\n\r\n\r\n// Patient profile ============================== \r\nexport function PatientProfile() { \r\n  const {activeEntry} = useContext(DaoContext); \r\n\r\n  return <div> \r\n    {IsEmpty(activeEntry['ramq']) ? \r\n      <IdPatientProfile />: \r\n      <UpdateCreatePatientProfile />} \r\n  </div> \r\n} \r\n\r\nfunction UpdateCreatePatientProfile() {\r\n  const {state, activeEntry, activeMode, activeCollection, Create, Update} = useContext(DaoContext); \r\n  const {ifields} = activeCollection; \r\n  const ramqField = ifields.find(f => f.accessor==='ramq') as IField; \r\n  const cols = ifields.filter(f => ['firstName', 'lastName'].includes(f.accessor) ); \r\n\r\n  const {setPatientProfile} = useContext(PatientProfileContext); \r\n\r\n  async function UpdateCreateProfile(Func:(accessor:string, entry:IEntry) => Promise<void>) { \r\n    await Func(activeCollection.accessor, activeEntry); \r\n    if(state.ready && state.success) \r\n      setPatientProfile(activeEntry); \r\n  } \r\n\r\n  return <div> \r\n    <h1>Patient profile</h1> \r\n    <FeedBack/> \r\n    {activeMode} \r\n    <Objx {...{value:activeEntry, ifields:cols}} > \r\n      <Field {...{ifield:ramqField}} /> \r\n      <Fields><div><FieldLabel/><FieldEditor/></div></Fields> \r\n    </Objx> \r\n    {activeMode === 'update' && <button onClick={() => UpdateCreateProfile(Update)}>Update patient profile</button>} \r\n    {activeMode === 'create' && <button onClick={() => UpdateCreateProfile(Create)}>Create new patient profile</button>} \r\n  </div> \r\n}\r\n\r\n\r\nfunction IdPatientProfile () {\r\n  const {activeEntry, setActiveEntry, SetActiveMode, activeCollection} = useContext(DaoContext); \r\n  const {entries, ifields} = activeCollection; \r\n  const ramqField = ifields.find(f => f.accessor==='ramq') as IField; \r\n  const [value, setValue] = useState(''); \r\n  \r\n  function IdentifyPatient(ramq:string) { \r\n    const found = entries.find( e => { \r\n      const e_ramq = (e['ramq'] as string); \r\n      return e_ramq.toLowerCase() === ramq.toLowerCase(); \r\n    }); \r\n    if(found) { \r\n      setActiveEntry(found); \r\n      SetActiveMode(EActionType.UPDATE); \r\n    } \r\n    else { \r\n      setActiveEntry({...activeEntry, ramq}); \r\n      SetActiveMode(EActionType.CREATE); \r\n    } \r\n  } \r\n\r\n  function Valid() { \r\n    return ramqField.validators?.every( valid => valid(value) ); \r\n  } \r\n\r\n  return <div> \r\n    <h1>Patient identification</h1> \r\n    <div>\r\n      <span>Ramq: </span>\r\n      <Editor {...{value, setValue, ifield:ramqField}} />\r\n      <span>{Valid() ? '✓' : 'x'}</span>\r\n    </div> \r\n    <button onClick={() => IdentifyPatient(value)}>Identify</button> \r\n  </div> \r\n}\r\n\r\n\r\n\r\nfunction FieldEditor() { \r\n  const {activeEntry, setActiveEntry} = useContext(DaoContext); \r\n  const {ifield} = useContext(FieldContext); \r\n\r\n  const value = activeEntry[ifield.accessor]; \r\n  const setValue = (newValue:any) => { \r\n    const copy = {...activeEntry}; \r\n    copy[ifield.accessor] = newValue; \r\n    setActiveEntry(copy); \r\n  } \r\n  return <Editor {...{value, setValue, ifield}} /> \r\n} \r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\loadpatient.component.tsx",["344","345"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {DaoContext} from '../../../reusable/_dao'; \r\nimport {FeedBack} from '../../../components/feedback/feedback.component'; \r\n\r\n\r\n\r\n// LOAD PATIENTS ================================\r\nexport function LoadPatients() { \r\n  const {setActiveCollection, Collections, GetCollections} = useContext(DaoContext); \r\n\r\n  async function GetPatient() { \r\n    await Collections(['patients']); \r\n    const collection = GetCollections().find( c => c.accessor==='patients'); \r\n    if(collection) \r\n      setActiveCollection(collection); \r\n  } \r\n  \r\n  useEffect(() => { \r\n    GetPatient(); \r\n  }, []); \r\n\r\n  return <div> \r\n    <FeedBack/> \r\n  </div> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\loadquestionnaire.component.tsx",["346"],"import React, {useContext, useEffect} from 'react'; \r\nimport {DaoContext} from '../../../reusable/_dao'; \r\nimport {FeedBack} from '../../../components/feedback/feedback.component'; \r\nimport {PatientProfileContext} from '../../patient/patient.page'; \r\nimport {AnswersContext} from '../questionnaire.page'; \r\n\r\n\r\n\r\n// LOAD PATIENTS ================================\r\nexport function LoadQuestionnaire() { \r\n  const {Collections, GetCollections} = useContext(DaoContext); \r\n  const {patientProfile} = useContext(PatientProfileContext); \r\n  const {setAnswers} = useContext(AnswersContext); \r\n\r\n  async function GetQuestionnaire() { \r\n    await Collections(['questions', 'forms', 'responses', 'answers', 'instructions']); \r\n    BuildBlankForm(); \r\n  }\r\n\r\n  function BuildBlankForm() { \r\n    const questions = GetCollections().find( c => c.accessor==='questions'); \r\n    if(!questions) \r\n      return [] as IAnswer[]; \r\n    const _answers = questions.entries.map(q=> { \r\n      return {_id:'', answer:-1, pid:patientProfile._id, qid:q._id} as IAnswer; \r\n    }); \r\n    console.log(_answers); \r\n    setAnswers(_answers); \r\n  }\r\n\r\n  useEffect(() => { \r\n    GetQuestionnaire(); \r\n  }, []); \r\n\r\n  return <div> \r\n    <FeedBack/> \r\n  </div> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\displayquestion.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaire.utils.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\paging.component.tsx",["347","348","349"],"import {useContext} from 'react'; \r\nimport {DaoContext} from '../../../reusable/_dao'; \r\nimport {AnswersContext} from '../questionnaire.page'; \r\nimport {IPageHook} from '../../../reusable/_usepage'; \r\n\r\n\r\n// PAGE BREAKER ==================================\r\nexport function PageBreaker() { \r\n  const {answers} = useContext(AnswersContext); \r\n  const {GetEntry} = useContext(DaoContext); \r\n\r\n  function PageBreak(accumulator:Array<any>, value?:any, index?:number):boolean { \r\n    const answer = value as IAnswer; \r\n    const [prevAnswer] = accumulator as IAnswer[]; \r\n    const question = GetEntry('questions', answer.qid) as IQuestion; \r\n    const prevQuestion = prevAnswer ? GetEntry('questions', prevAnswer.qid) as IQuestion: question; \r\n\r\n    if(accumulator.length >= 4) \r\n      return true; \r\n    if(question.form !== prevQuestion.form) \r\n      return true; \r\n    if(JSON.stringify(question.instructions) !== JSON.stringify(prevQuestion.instructions)) \r\n      return true; \r\n    return false; \r\n  } \r\n  return PageBreak; \r\n} \r\n\r\n\r\n// PAGING =======================================\r\nexport function Paging({pageIndex, setPageIndex, pages}:IPageHook) { \r\n  const {activeCollection:{accessor}, Create} = useContext(DaoContext); \r\n  const page = pages[pageIndex] ?? []; \r\n  const isComplete = IsComplete(page); \r\n  const [from, to] = [ [...page].shift(), [...page].pop()]; \r\n  const [first, last] = [pages.flat().shift(), pages.flat().pop()]; \r\n\r\n  const onClickNext = () => {setPageIndex(pageIndex+1)}; \r\n  //const onClickSubmit = () => {Create(accessor, )}; \r\n\r\n  return <div>\r\n    <span>page : {pageIndex+1} of {pages.length}</span>\r\n    <div>{(from??0) +1} - {(to??0)+1} of {(first??0)+1} - {(last??0)+1}</div>\r\n    {pages.map( (p:number[], i:number) => { \r\n      const onClick = () => {setPageIndex(i)} \r\n      const disabled = pageIndex === i; \r\n      return <button key={i} {...{onClick, disabled}} >{i+1}</button> \r\n    })} \r\n    <button {...{onClick:onClickNext, disabled:isComplete}} >Next</button> \r\n  </div> \r\n} \r\n\r\n\r\nexport function IsComplete(page:number[]) { \r\n  const {answers} = useContext(AnswersContext); \r\n  const {GetEntry} = useContext(DaoContext); \r\n\r\n  const indexes = page ? page : answers.map( (e,i) => i); \r\n  const isIncomplete = indexes.some( i => { \r\n    const answer = answers[i]; \r\n    const question = GetEntry('questions', answer.qid); \r\n    return answer.answer < 0 && !question.optional; \r\n  }); \r\n  return isIncomplete; \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts",["350"],"import {IsEmpty, GetDefaultValueFromIField, Order} from '../_utils'; \r\n\r\n\r\n// COLLECTION ===================================\r\nexport class Collection { \r\n  public collection:ICollection = {} as ICollection; \r\n\r\n  constructor(collection:ICollection) { \r\n    if(collection) \r\n      this.collection = collection; \r\n  }\r\n\r\n  // GET IFIELDS --------------------------------\r\n  public GetIFields(ifieldAccessors?:string[]):IField[] { \r\n    if(!ifieldAccessors) \r\n      return this.collection.ifields ?? [] as IField[]; \r\n    const ifields = [] as IField[]; \r\n    ifieldAccessors.forEach(accessor => { \r\n      const ifield = this.collection.ifields.find(f=>f.accessor===accessor); \r\n      if(ifield) \r\n        ifields.push(ifield); \r\n    })\r\n    return ifields; \r\n  } \r\n\r\n  // GET Default IEntry -----------------------------------\r\n  public GetDefaultIEntry() { \r\n    const ifields = this.collection.ifields; \r\n    let entry = {} as IEntry; \r\n    ifields?.forEach( f => { \r\n      entry[f.accessor] = GetDefaultValueFromIField(f); \r\n    }); \r\n    return entry; \r\n  } \r\n\r\n  // DOES NOT RETURN EMPTY ENTRY ANYMORE ... \r\n  // Same as READ ??? \r\n  // GET ENTRIES ----------------------------------------\r\n  public GetIEntries(ids?:string[]):IEntry[] { \r\n    const entries = [] as IEntry[]; \r\n    ids?.forEach( id => { \r\n      const entry = this.collection?.entries.find(e=>e._id===id); \r\n      if(entry) \r\n        entries.push(entry); \r\n    }); \r\n    return entries; \r\n  } \r\n\r\n  // Find Entry index\r\n  public FindIndex(entry:IEntry):number { \r\n    return this.collection.entries?.findIndex( e => e._id === entry._id) ?? -1; \r\n  }\r\n\r\n  // Create -------------------------------------\r\n  public Create(entries:IEntry[]) { \r\n    if(!this.collection?.entries) \r\n      return; \r\n    this.collection.entries.concat(entries); \r\n  } \r\n\r\n  // Read ---------------------------------------\r\n  public Read(ids?:string[]):IEntry[] { \r\n    if(!this.collection?.entries) \r\n      return [] as IEntry[]; \r\n    if(IsEmpty(ids)) \r\n      return this.collection.entries; \r\n    return this.collection.entries.filter(e => ids?.includes(e._id) ) ?? [] as IEntry[]; \r\n  }\r\n\r\n  // Update -------------------------------------\r\n  public Update(entries:IEntry[]) { \r\n    entries?.forEach( e => { \r\n      const index = this.FindIndex(e); \r\n      if(index >= 0) \r\n        this.collection.entries[index] = {...e}; \r\n    }) \r\n  } \r\n\r\n  // Delete -------------------------------------\r\n  public Delete(entries:IEntry[]) { \r\n    entries?.forEach( e => { \r\n      const index = this.FindIndex(e); \r\n      if(index >= 0) \r\n        this.collection.entries.splice(index,1); \r\n    })\r\n  }\r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts",["351"],"import {useMemo} from 'react'; \r\nimport {useLoader, IState} from '../_useloader'; \r\nimport {DAO} from './dao.class'; \r\n\r\n\r\nexport enum EActionType { \r\n  CREATE = 'create', \r\n  READ = 'read', \r\n  UPDATE = 'update', \r\n  DELETE = 'delete', \r\n}\r\n\r\n\r\n\r\n// USE DAO ======================================\r\nexport interface IUseDao{ \r\n  state:IState; \r\n\r\n  // Get collections, entry, fields data \r\n  GetICollections:(accessors?:string[]) => ICollection[]; \r\n  GetIFields:(accessor:string, fields?:string[]) => IField[]; \r\n  GetIEntries:(accessor:string, ids?:string[]) => IEntry[]; \r\n  GetDefaultIEntry:(accessor:string) => IEntry; \r\n  \r\n  // Get foreign elements\r\n  GetForeignElements: (ifield:IField) => {foreignCollection:ICollection|undefined, abbrevField:IField|undefined}, \r\n\r\n  // Ge options \r\n  GetIOptions: (ifield:IField) => IOption[]; \r\n\r\n  // load remote collections. \r\n  Collections:(accessors:string[]) => Promise<void>; \r\n\r\n  // Crud functionalities. \r\n  Create: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n  Read: (accessor:string, id?:string[]) => Promise<void>; \r\n  Update: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n  Delete: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n} \r\n\r\n\r\n\r\n// USE DAO ======================================\r\nexport function useDao(dao:DAO):IUseDao { \r\n  // Hooks \r\n  const Dao = useMemo(() => dao, []); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const GetICollections = Dao.GetICollections; \r\n  const GetIFields = Dao.GetIFields; \r\n  const GetIEntries = Dao.GetIEntries; \r\n  const GetDefaultIEntry = Dao.GetDefaultIEntry; \r\n\r\n  const GetForeignElements = Dao.GetForeignElements; \r\n  const GetIOptions = Dao.GetIOptions; \r\n\r\n  // Collections \r\n  const Collections = async (accessors:string[]) => \r\n    Load(() => Dao.Collections(accessors)); \r\n\r\n  // Crud functionalities \r\n  // async Validate ... \r\n  // async Ids ... \r\n  const Create = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Create(accessor, entries)); \r\n  const Read = async (accessor:string, ids?:string[]) => \r\n    Load(() => Dao.Read(accessor, ids)); \r\n  const Update = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Update(accessor, entries)); \r\n  const Delete = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Delete(accessor, entries)); \r\n\r\n  return { \r\n    state, \r\n    GetICollections, GetIFields, GetIEntries, GetDefaultIEntry, \r\n    GetForeignElements, GetIOptions, \r\n    Collections, Create, Read, Update, Delete \r\n  }; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudmongoose.class.ts",["352","353"],"import axios from 'axios'; \r\nimport {ParseCollection} from './mongooseparser.utils'; \r\n\r\n\r\n// Crud Mongoose =======================================\r\nexport class CrudMongoose { \r\n  public baseUrl:string = ''; \r\n\r\n  constructor(baseUrl:string) { \r\n    this.baseUrl = baseUrl; \r\n  }\r\n\r\n  // Access -----------------------------------------------\r\n  public async Access() { \r\n    return await axios.get(this.baseUrl); \r\n  } \r\n\r\n  /* \r\n  PUT ...api/collections \r\n    req.body => accessors:string[] \r\n    res:ICrudResponse[] \r\n  */ \r\n  // Collections ..........................................\r\n  public async Collections(accessors:string[]): Promise<ICrudResponse[]> { \r\n    // !!! PARSE response.data = ParseCollection(response.data); !!!\r\n    return await axios.put(this.baseUrl+'collection/'+accessors); \r\n  } \r\n\r\n  // Validate .............................................\r\n  public async Validate(accessor:string, entries:IEntry[]) { \r\n    return await axios.put(this.baseUrl+'validate/'+accessor, entries); \r\n  } \r\n\r\n  // Ids ..................................................\r\n  public async Ids(accessor:string): Promise<string[]> { \r\n    return await axios.get(this.baseUrl+'ids/'+accessor); \r\n  } \r\n\r\n\r\n  //?? public async CreateUpdate ?? \r\n\r\n\r\n  // Create ...............................................\r\n  public async Create(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toCreate = entries.map(e => { \r\n      const {_id, _v, ...data} = e; \r\n      return data; \r\n    }); \r\n    return await axios.put(this.baseUrl+'create/'+accessor, toCreate); \r\n  } \r\n\r\n  // ICrudResponse ?? or IEntry ??\r\n  // Read .................................................\r\n  public async Read(accessor:string, ids?:string[]): Promise<ICrudResponse[]> {\r\n    return await axios.put(this.baseUrl+'read/'+accessor, ids); \r\n  }\r\n\r\n  // Update ...............................................\r\n  public async Update(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    return await axios.put(this.baseUrl+'update/'+accessor, entries); \r\n  }\r\n\r\n  // Delete ...............................................\r\n  /* Sends an array of objects with the only property being '_id' ... [{_id}] */\r\n  public async Delete(modelName:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toDelete = entries.map(e => { \r\n      const {_id, ...data} = e; \r\n      return {_id}; \r\n    }); \r\n    return await axios.put(this.baseUrl+'delete/'+modelName, toDelete) as ICrudResponse[]; \r\n  } \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testdao\\testcrud.experiment.tsx",[],{"ruleId":"354","replacedBy":"355"},{"ruleId":"356","replacedBy":"357"},{"ruleId":"358","severity":1,"message":"359","line":1,"column":16,"nodeType":"360","messageId":"361","endLine":1,"endColumn":24},{"ruleId":"358","severity":1,"message":"362","line":1,"column":26,"nodeType":"360","messageId":"361","endLine":1,"endColumn":35},{"ruleId":"358","severity":1,"message":"363","line":1,"column":37,"nodeType":"360","messageId":"361","endLine":1,"endColumn":43},{"ruleId":"364","severity":1,"message":"365","line":27,"column":6,"nodeType":"366","endLine":27,"endColumn":8,"suggestions":"367"},{"ruleId":"354","replacedBy":"368"},{"ruleId":"356","replacedBy":"369"},{"ruleId":"354","replacedBy":"355"},{"ruleId":"356","replacedBy":"357"},{"ruleId":"354","replacedBy":"370"},{"ruleId":"356","replacedBy":"371"},{"ruleId":"372","severity":1,"message":"373","line":62,"column":37,"nodeType":"374","messageId":"375","endLine":62,"endColumn":47},{"ruleId":"376","severity":1,"message":"377","line":4,"column":9,"nodeType":"360","messageId":"361","endLine":4,"endColumn":15},{"ruleId":"378","severity":1,"message":"379","line":34,"column":22,"nodeType":"380","messageId":"381","endLine":34,"endColumn":24},{"ruleId":"378","severity":1,"message":"379","line":34,"column":47,"nodeType":"380","messageId":"381","endLine":34,"endColumn":49},{"ruleId":"376","severity":1,"message":"382","line":1,"column":16,"nodeType":"360","messageId":"361","endLine":1,"endColumn":26},{"ruleId":"378","severity":1,"message":"379","line":28,"column":20,"nodeType":"380","messageId":"381","endLine":28,"endColumn":22},{"ruleId":"378","severity":1,"message":"379","line":28,"column":36,"nodeType":"380","messageId":"381","endLine":28,"endColumn":38},{"ruleId":"376","severity":1,"message":"383","line":115,"column":12,"nodeType":"360","messageId":"361","endLine":115,"endColumn":22},{"ruleId":"354","replacedBy":"384"},{"ruleId":"356","replacedBy":"385"},{"ruleId":"354","replacedBy":"386"},{"ruleId":"356","replacedBy":"387"},{"ruleId":"376","severity":1,"message":"388","line":3,"column":43,"nodeType":"360","messageId":"361","endLine":3,"endColumn":51},{"ruleId":"376","severity":1,"message":"389","line":2,"column":15,"nodeType":"360","messageId":"361","endLine":2,"endColumn":26},{"ruleId":"376","severity":1,"message":"390","line":2,"column":38,"nodeType":"360","messageId":"361","endLine":2,"endColumn":45},{"ruleId":"376","severity":1,"message":"391","line":2,"column":63,"nodeType":"360","messageId":"361","endLine":2,"endColumn":75},{"ruleId":"376","severity":1,"message":"392","line":2,"column":77,"nodeType":"360","messageId":"361","endLine":2,"endColumn":89},{"ruleId":"364","severity":1,"message":"393","line":44,"column":6,"nodeType":"366","endLine":44,"endColumn":37,"suggestions":"394"},{"ruleId":"364","severity":1,"message":"395","line":44,"column":7,"nodeType":"396","endLine":44,"endColumn":36},{"ruleId":"354","replacedBy":"397"},{"ruleId":"356","replacedBy":"398"},{"ruleId":"376","severity":1,"message":"399","line":1,"column":21,"nodeType":"360","messageId":"361","endLine":1,"endColumn":28},{"ruleId":"376","severity":1,"message":"400","line":16,"column":16,"nodeType":"360","messageId":"361","endLine":16,"endColumn":23},{"ruleId":"364","severity":1,"message":"401","line":24,"column":6,"nodeType":"366","endLine":24,"endColumn":35,"suggestions":"402"},{"ruleId":"364","severity":1,"message":"395","line":24,"column":7,"nodeType":"396","endLine":24,"endColumn":34},{"ruleId":"376","severity":1,"message":"403","line":27,"column":9,"nodeType":"360","messageId":"361","endLine":27,"endColumn":19},{"ruleId":"364","severity":1,"message":"404","line":39,"column":6,"nodeType":"366","endLine":39,"endColumn":29,"suggestions":"405"},{"ruleId":"364","severity":1,"message":"395","line":39,"column":7,"nodeType":"396","endLine":39,"endColumn":28},{"ruleId":"364","severity":1,"message":"406","line":12,"column":6,"nodeType":"366","endLine":12,"endColumn":34,"suggestions":"407"},{"ruleId":"364","severity":1,"message":"395","line":12,"column":7,"nodeType":"396","endLine":12,"endColumn":33},{"ruleId":"376","severity":1,"message":"382","line":1,"column":16,"nodeType":"360","messageId":"361","endLine":1,"endColumn":26},{"ruleId":"376","severity":1,"message":"362","line":1,"column":28,"nodeType":"360","messageId":"361","endLine":1,"endColumn":37},{"ruleId":"376","severity":1,"message":"408","line":2,"column":56,"nodeType":"360","messageId":"361","endLine":2,"endColumn":66},{"ruleId":"376","severity":1,"message":"409","line":4,"column":18,"nodeType":"360","messageId":"361","endLine":4,"endColumn":28},{"ruleId":"376","severity":1,"message":"410","line":4,"column":30,"nodeType":"360","messageId":"361","endLine":4,"endColumn":40},{"ruleId":"364","severity":1,"message":"411","line":24,"column":6,"nodeType":"366","endLine":24,"endColumn":13,"suggestions":"412"},{"ruleId":"376","severity":1,"message":"409","line":3,"column":9,"nodeType":"360","messageId":"361","endLine":3,"endColumn":19},{"ruleId":"376","severity":1,"message":"410","line":3,"column":21,"nodeType":"360","messageId":"361","endLine":3,"endColumn":31},{"ruleId":"376","severity":1,"message":"413","line":23,"column":31,"nodeType":"360","messageId":"361","endLine":23,"endColumn":35},{"ruleId":"376","severity":1,"message":"414","line":4,"column":20,"nodeType":"360","messageId":"361","endLine":4,"endColumn":30},{"ruleId":"376","severity":1,"message":"415","line":4,"column":45,"nodeType":"360","messageId":"361","endLine":4,"endColumn":56},{"ruleId":"416","severity":1,"message":"417","line":49,"column":10,"nodeType":"360","messageId":"418","endLine":49,"endColumn":17},{"ruleId":"376","severity":1,"message":"419","line":8,"column":9,"nodeType":"360","messageId":"361","endLine":8,"endColumn":15},{"ruleId":"376","severity":1,"message":"359","line":1,"column":39,"nodeType":"360","messageId":"361","endLine":1,"endColumn":47},{"ruleId":"364","severity":1,"message":"420","line":20,"column":6,"nodeType":"366","endLine":20,"endColumn":8,"suggestions":"421"},{"ruleId":"364","severity":1,"message":"422","line":33,"column":6,"nodeType":"366","endLine":33,"endColumn":8,"suggestions":"423"},{"ruleId":"376","severity":1,"message":"424","line":9,"column":10,"nodeType":"360","messageId":"361","endLine":9,"endColumn":17},{"ruleId":"376","severity":1,"message":"425","line":32,"column":28,"nodeType":"360","messageId":"361","endLine":32,"endColumn":36},{"ruleId":"376","severity":1,"message":"426","line":32,"column":39,"nodeType":"360","messageId":"361","endLine":32,"endColumn":45},{"ruleId":"376","severity":1,"message":"427","line":1,"column":45,"nodeType":"360","messageId":"361","endLine":1,"endColumn":50},{"ruleId":"364","severity":1,"message":"428","line":46,"column":34,"nodeType":"366","endLine":46,"endColumn":36,"suggestions":"429"},{"ruleId":"376","severity":1,"message":"430","line":2,"column":9,"nodeType":"360","messageId":"361","endLine":2,"endColumn":24},{"ruleId":"376","severity":1,"message":"413","line":67,"column":22,"nodeType":"360","messageId":"361","endLine":67,"endColumn":26},"no-native-reassign",["431"],"no-negated-in-lhs",["432"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Collections'. Either include it or remove the dependency array.","ArrayExpression",["433"],["431"],["432"],["431"],["432"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","@typescript-eslint/no-unused-vars","'IsNull' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'useContext' is defined but never used.","'collection' is assigned a value but never used.",["431"],["432"],["431"],["432"],"'SetWidth' is defined but never used.","'ArrxContext' is defined but never used.","'Element' is defined but never used.","'ElementIndex' is defined but never used.","'ElementValue' is defined but never used.","React Hook useEffect has missing dependencies: 'index' and 'values'. Either include them or remove the dependency array.",["434"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression",["431"],["432"],"'useMemo' is defined but never used.","'setData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.value'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'props.value', you can also switch to useReducer instead of useState and read 'props.value' in the reducer.",["435"],"'hasChanged' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'data', 'ifield.accessor', 'isEdit', and 'value'. Either include them or remove the dependency array.",["436"],"React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["437"],"'DaoContext' is defined but never used.","'GetValueAt' is defined but never used.","'SetValueAt' is defined but never used.","React Hook useEffect has a missing dependency: '_value'. Either include it or remove the dependency array.",["438"],"'data' is assigned a value but never used.","'RowContext' is defined but never used.","'CellContext' is defined but never used.","@typescript-eslint/no-redeclare","'CrudBtn' is already defined.","redeclared","'Reader' is defined but never used.","React Hook useEffect has a missing dependency: 'GetPatient'. Either include it or remove the dependency array.",["439"],"React Hook useEffect has a missing dependency: 'GetQuestionnaire'. Either include it or remove the dependency array.",["440"],"'answers' is assigned a value but never used.","'accessor' is assigned a value but never used.","'Create' is assigned a value but never used.","'Order' is defined but never used.","React Hook useMemo has a missing dependency: 'dao'. Either include it or remove the dependency array.",["441"],"'ParseCollection' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"442","fix":"443"},{"desc":"444","fix":"445"},{"desc":"446","fix":"447"},{"desc":"448","fix":"449"},{"desc":"450","fix":"451"},{"desc":"452","fix":"453"},{"desc":"454","fix":"455"},{"desc":"456","fix":"457"},{"desc":"458","fix":"459"},"Update the dependencies array to be: [Collections]",{"range":"460","text":"461"},"Update the dependencies array to be: [index, values]",{"range":"462","text":"463"},"Update the dependencies array to be: [props.value]",{"range":"464","text":"465"},"Update the dependencies array to be: [data, ifield.accessor, isEdit, value]",{"range":"466","text":"467"},"Update the dependencies array to be: [callback]",{"range":"468","text":"469"},"Update the dependencies array to be: [_value, value]",{"range":"470","text":"471"},"Update the dependencies array to be: [GetPatient]",{"range":"472","text":"473"},"Update the dependencies array to be: [GetQuestionnaire]",{"range":"474","text":"475"},"Update the dependencies array to be: [dao]",{"range":"476","text":"477"},[1133,1135],"[Collections]",[1560,1591],"[index, values]",[639,668],"[props.value]",[1108,1131],"[data, ifield.accessor, isEdit, value]",[304,332],"[callback]",[762,769],"[_value, value]",[645,647],"[GetPatient]",[1173,1175],"[GetQuestionnaire]",[1369,1371],"[dao]"]