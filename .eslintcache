[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\loadpatient.component.tsx":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\loadquestionnaire.component.tsx":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\displayquestion.component.tsx":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaire.utils.tsx":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\paging.component.tsx":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts":"59","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx":"60","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudmongoose.class.ts":"61","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testcrud\\testcrud.experiment.tsx":"62","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_crud.ts":"63","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\crud\\useactive.hook.tsx":"64","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\predloader.component.tsx":"65","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx":"66","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\testrender.tsx":"67","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\renderer.component.tsx":"68","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testarray\\testarrayutils.experiment.tsx":"69","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils2.ts":"70","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays2.utils.ts":"71","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\value.utils.ts":"72","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\input\\input.component.tsx":"73"},{"size":621,"mtime":1612141670677,"results":"74","hashOfConfig":"75"},{"size":1018,"mtime":1612746500730,"results":"76","hashOfConfig":"75"},{"size":362,"mtime":499162500000,"results":"77","hashOfConfig":"75"},{"size":912,"mtime":1612469327163,"results":"78","hashOfConfig":"75"},{"size":496,"mtime":1612141670563,"results":"79","hashOfConfig":"75"},{"size":1495,"mtime":1612141671254,"results":"80","hashOfConfig":"75"},{"size":4289,"mtime":1612739899058,"results":"81","hashOfConfig":"75"},{"size":2460,"mtime":1612554957776,"results":"82","hashOfConfig":"75"},{"size":1900,"mtime":1612141671217,"results":"83","hashOfConfig":"75"},{"size":3091,"mtime":1612141671217,"results":"84","hashOfConfig":"75"},{"size":1780,"mtime":1612141670967,"results":"85","hashOfConfig":"75"},{"size":2274,"mtime":1612141671117,"results":"86","hashOfConfig":"75"},{"size":1473,"mtime":1612141671140,"results":"87","hashOfConfig":"75"},{"size":462,"mtime":1612141671142,"results":"88","hashOfConfig":"75"},{"size":1042,"mtime":1612141671142,"results":"89","hashOfConfig":"75"},{"size":982,"mtime":1612141671141,"results":"90","hashOfConfig":"75"},{"size":6072,"mtime":1612741712331,"results":"91","hashOfConfig":"75"},{"size":287,"mtime":1612382530122,"results":"92","hashOfConfig":"75"},{"size":341,"mtime":1612382805121,"results":"93","hashOfConfig":"75"},{"size":930,"mtime":1612739988899,"results":"94","hashOfConfig":"75"},{"size":112,"mtime":1612141670932,"results":"95","hashOfConfig":"75"},{"size":1301,"mtime":1612141671147,"results":"96","hashOfConfig":"75"},{"size":688,"mtime":1611105433287,"results":"97","hashOfConfig":"75"},{"size":1330,"mtime":1611105734495,"results":"98","hashOfConfig":"75"},{"size":124,"mtime":1611105257047,"results":"99","hashOfConfig":"75"},{"size":233,"mtime":1612141670928,"results":"100","hashOfConfig":"75"},{"size":3111,"mtime":1612141671125,"results":"101","hashOfConfig":"75"},{"size":1372,"mtime":1612745867003,"results":"102","hashOfConfig":"75"},{"size":510,"mtime":1612141670929,"results":"103","hashOfConfig":"75"},{"size":1532,"mtime":1612141670991,"results":"104","hashOfConfig":"75"},{"size":2116,"mtime":1612141671020,"results":"105","hashOfConfig":"75"},{"size":943,"mtime":1612141671021,"results":"106","hashOfConfig":"75"},{"size":447,"mtime":1612141670931,"results":"107","hashOfConfig":"75"},{"size":4285,"mtime":1611356030017,"results":"108","hashOfConfig":"75"},{"size":107,"mtime":1612141670933,"results":"109","hashOfConfig":"75"},{"size":2743,"mtime":1612141671148,"results":"110","hashOfConfig":"75"},{"size":79,"mtime":1612141670934,"results":"111","hashOfConfig":"75"},{"size":338,"mtime":1612141671148,"results":"112","hashOfConfig":"75"},{"size":1540,"mtime":1612469132190,"results":"113","hashOfConfig":"75"},{"size":231,"mtime":1612141670930,"results":"114","hashOfConfig":"75"},{"size":1927,"mtime":1612141671121,"results":"115","hashOfConfig":"75"},{"size":1598,"mtime":1612141670985,"results":"116","hashOfConfig":"75"},{"size":4408,"mtime":1612141670676,"results":"117","hashOfConfig":"75"},{"size":607,"mtime":1612745818250,"results":"118","hashOfConfig":"75"},{"size":1426,"mtime":1612469986798,"results":"119","hashOfConfig":"75"},{"size":1304,"mtime":1612395256953,"results":"120","hashOfConfig":"75"},{"size":1101,"mtime":1612746368218,"results":"121","hashOfConfig":"75"},{"size":2514,"mtime":1612746348392,"results":"122","hashOfConfig":"75"},{"size":1808,"mtime":1612483113644,"results":"123","hashOfConfig":"75"},{"size":3568,"mtime":1612398748187,"results":"124","hashOfConfig":"75"},{"size":1087,"mtime":1612141670927,"results":"125","hashOfConfig":"75"},{"size":655,"mtime":1612398529932,"results":"126","hashOfConfig":"75"},{"size":1092,"mtime":1612398948278,"results":"127","hashOfConfig":"75"},{"size":736,"mtime":1612141670564,"results":"128","hashOfConfig":"75"},{"size":2673,"mtime":1612141670908,"results":"129","hashOfConfig":"75"},{"size":1364,"mtime":1612399470590,"results":"130","hashOfConfig":"75"},{"size":2585,"mtime":1612399179478,"results":"131","hashOfConfig":"75"},{"size":2690,"mtime":1612394054258,"results":"132","hashOfConfig":"75"},{"size":2800,"mtime":1612387165429,"results":"133","hashOfConfig":"75"},{"size":431,"mtime":1612382505474,"results":"134","hashOfConfig":"75"},{"size":2669,"mtime":1612469768616,"results":"135","hashOfConfig":"75"},{"size":2238,"mtime":1612394941169,"results":"136","hashOfConfig":"75"},{"size":137,"mtime":1612397882586,"results":"137","hashOfConfig":"75"},{"size":2194,"mtime":1612474171413,"results":"138","hashOfConfig":"75"},{"size":663,"mtime":1612482168663,"results":"139","hashOfConfig":"75"},{"size":129,"mtime":1612482242441,"results":"140","hashOfConfig":"75"},{"size":449,"mtime":1612749913110,"results":"141","hashOfConfig":"75"},{"size":3690,"mtime":1612749873170,"results":"142","hashOfConfig":"75"},{"size":4146,"mtime":1612739538913,"results":"143","hashOfConfig":"75"},{"size":346,"mtime":1612660524953,"results":"144","hashOfConfig":"75"},{"size":4289,"mtime":1612739502176,"results":"145","hashOfConfig":"75"},{"size":1913,"mtime":1612558696964,"results":"146","hashOfConfig":"75"},{"size":1604,"mtime":1612554305205,"results":"147","hashOfConfig":"75"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},"ke513i",{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"158"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"158"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"158"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"158"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"158"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"158"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"158"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"158"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"158"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"169"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"158"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"158"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"272","messages":"273","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"158"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"158"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"158"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"158"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"306","messages":"307","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"308","messages":"309","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310","usedDeprecatedRules":"158"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"158"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["320","321"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",["322"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",["323"],"import React, {useContext, useEffect} from 'react'; \r\nimport {CrudContext} from '../../reusable/_crud'; \r\nimport {FeedBack} from '../../components/feedback/feedback.component'; \r\nimport {IsEmpty} from '../../reusable/_utils'; \r\n\r\nimport {CollectionSelector} from './components/collectionselector.component'; \r\nimport {AdminTablr} from './components/admintablr.component'; \r\n\r\nimport '../../css/table.css'; \r\n\r\n\r\n\r\n\r\n// ADMIN PAGE ====================================\r\nexport default function Admin() { \r\n  const {state, activeCollection, setActiveCollection} = useContext(CrudContext); \r\n\r\n  useEffect(() => { \r\n    setActiveCollection({} as ICollection); \r\n  }, []); \r\n\r\n  return <div> \r\n    <h2>Admin</h2> \r\n    <FeedBack/> \r\n    {state.ready && state.success && <CollectionSelector /> } \r\n    {!IsEmpty(activeCollection) && <AdminTablr/>} \r\n  </div> \r\n}\r\n\r\n//{!IsEmpty(activeCollection) && <AdminTablr/>} \r\n\r\n",["324","325"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",["326","327"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],["328","329"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["330"],"import {IsEmpty, IsInRange} from '../_utils';\r\n\r\nexport interface IMongooseCollection { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    enum?: any[]; \r\n    abbrev?: boolean; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\n// Parser functions =============================\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\nexport function ParseField(field:IMongooseField):IField { \r\n  const {path, instance, options, $embeddedSchemaType} = field; \r\n  const ifield:IField = {} as IField; \r\n\r\n  ifield.accessor = path ?? ''; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.type = options?.ref ?? $embeddedSchemaType?.instance ?? field.instance.toLowerCase(); \r\n  ifield.isMixed = instance.toLowerCase() === 'mixed'; \r\n  ifield.isEnum = !!options?.enum; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = !!options?.ref; \r\n  ifield.isAbbrev = !!options?.abbrev; \r\n  ifield.validators = GetValidators(field); \r\n  ifield.isRequired = field.options['required'] ?? false; \r\n  ifield.regex = field.options['regex']? field.options['regex']: undefined; \r\n\r\n  ifield.enums = options.enum ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, field.options); \r\n\r\n  return ifield; \r\n} \r\n\r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} \r\n\r\n\r\nfunction GetValidators(field:IMongooseField):IValidator[] { \r\n  const required = (value:any) => { \r\n    return !IsEmpty(value); \r\n  }; \r\n\r\n  const regex = (value:any) => { \r\n    if(field.options['regex']) \r\n      return new RegExp(field.options['regex']).test(value); \r\n    return true; \r\n  } \r\n\r\n  const range = (value:any) => { \r\n    return IsInRange(value, field.options['min'], field.options['max']); \r\n  } \r\n\r\n  let validators:IValidator[] = []; \r\n  if(field.options['required']) \r\n    validators.push(required); \r\n  if(field.options['regex']) \r\n    validators.push(regex); \r\n  if(field.options['min'] || field.options['max']) \r\n    validators.push(range); \r\n  return validators; \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],["331","332"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["333","334","335"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull, GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield) => { \r\n      return <Cell key={ifield.accessor} {...{ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const data = datas[row]; \r\n  const value = IsEmpty(data) ? GetDefaultValueFromIField(ifield): datas[row][ifield.accessor]; \r\n  const context = {value, row, ifield} as ICellContext; \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["336","337","338"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts",["339"],"import {Group} from '../_utils'; \r\nimport {Collection} from './collection.class'; \r\n\r\nexport interface ICrud { \r\n  Collections:(accessors?:string[]) => Promise<ICrudResponse[]>; \r\n  Create: (accessor:string, toCreate:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Read: (accessor:string, id?:string[]) => Promise<ICrudResponse[]>; \r\n  Update: (accessor:string, toUpdate:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Delete: (accessor:string, toDelete:IEntry[]) => Promise<ICrudResponse[]>; \r\n} \r\n\r\n\r\n// DAO #############################################\r\nexport class DAO { \r\n  public collections:ICollection[] = [] as ICollection[]; \r\n\r\n  private crud:ICrud = {} as ICrud; \r\n\r\n  constructor(crud:ICrud) { \r\n    this.crud = crud; \r\n  } \r\n\r\n  // Get ICollections ----------------------------- \r\n  public GetICollections(accessors?:string[]):ICollection[] { \r\n    if(!accessors) \r\n      return this.collections; \r\n    const compare = (t:ICollection, accessor:string) => {return t.accessor === accessor}; \r\n    return Group(this.collections, compare, accessors).flat(); \r\n  } \r\n\r\n  // Get IFields -----------------------------------\r\n  public GetIFields(accessor:string, fields?:string[]):IField[] { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    if(!fields) \r\n      return collection?.ifields ?? []; \r\n    const compare = (f:IField, accessor:string) => {return f.accessor === accessor}; \r\n    return Group(collection.ifields, compare, fields).flat(); \r\n  }\r\n\r\n  // Get Entries --------------------------------------\r\n  public GetIEntries(accessor:string, ids?:string[]):IEntry[] { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    if(!ids)\r\n      return collection?.entries ?? []; \r\n    const compare = (e:IEntry, id:string) => {return e._id === id}; \r\n    return Group(collection.entries, compare, ids).flat(); \r\n  }\r\n\r\n  // Get Default IEntry ----------------------------------\r\n  public GetDefaultIEntry(accessor:string):IEntry { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    return new Collection(collection).GetDefaultIEntry(); \r\n  } \r\n  \r\n  // GET FOREIGN ELEMENTS -----------------------------\r\n  public GetForeignElements(ifield:IField) \r\n    : {foreignCollection:ICollection|undefined, abbrevField:IField|undefined} \r\n  { \r\n    const foreignCollection = this.collections.find(c => c.accessor === ifield.type); \r\n    const abbrevField = foreignCollection?.ifields.find(f=>f.isAbbrev); \r\n    return {foreignCollection, abbrevField}; \r\n  } \r\n\r\n  // Get Options ----------------------------------------\r\n  public GetIOptions(ifield:IField):IOption[] { \r\n    if(ifield.isEnum)\r\n      return ifield.enums?.map(e => {return {value:e, label:e}}) ?? [] as IOption[];  \r\n    if(!ifield.isModel) \r\n      return [] as IOption[]; \r\n    const {foreignCollection, abbrevField} = this.GetForeignElements(ifield); \r\n    if(!foreignCollection || !abbrevField) \r\n      return [] as IOption[]; \r\n    return foreignCollection.entries?.map( e => { \r\n      return {value:e._id, label:e[abbrevField.accessor]} as IOption; \r\n    }); \r\n  } \r\n\r\n  // COLLECTIONS -------------------------------------------\r\n  public async Collections(accessors?:string[]):Promise<ICrudResponse[]> { \r\n    const responses = (await this.crud.Collections(accessors)) as ICrudResponse[]; \r\n    const icollections = responses.filter(r => r.success).map(r => r.data as ICollection); \r\n    this.PushUpdateCollection(icollections); \r\n    return responses; \r\n  } \r\n\r\n  private PushUpdateCollection(icollections:ICollection[]) { \r\n    icollections.forEach( newCol => { \r\n      const index = this.collections.findIndex(col => col.accessor === newCol.accessor); \r\n      if(index >=0) \r\n        this.collections[index] = newCol; \r\n      else \r\n        this.collections.push(newCol); \r\n    }) \r\n  } \r\n\r\n  /* Create -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Create(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Create(accessor, entries)) as ICrudResponse[]; \r\n    const created = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Create(created); \r\n    return responses; \r\n  } \r\n\r\n  /* Read -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  Create/Update read data to local. \r\n  */\r\n  public async Read(accessor:string, ids?:string[]):Promise<IEntry[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Read(accessor, ids)) as ICrudResponse[]; \r\n    const read = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    return read; \r\n  } \r\n\r\n  /* Update -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Update(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Update(accessor, entries)) as ICrudResponse[]; \r\n    const updated = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Update(updated); \r\n    return responses; \r\n  } \r\n\r\n  /* Delete -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Delete(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Delete(accessor, entries)) as ICrudResponse[]; \r\n    const deleted = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Delete(deleted); \r\n    return responses; \r\n  } \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx",[],["340","341"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts",[],["342","343"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx",["344"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx",["345"],"import React from 'react'; \r\n//import CSS from ''\r\nimport {IEvent, IsNull, OnEnter, SetSize, SetWidth, \r\n  GetDefaultValueByType, GetTypeByValue, GetInputType, GetValueFromInput} from '../../_utils'; \r\n\r\n\r\n// INPUT ========================================\r\nexport interface IInput extends React.HTMLAttributes<HTMLInputElement> { \r\n  value:any; \r\n  setValue:any; \r\n  type?:string; \r\n  defaultValue?:any; \r\n  inputType?:string; \r\n  onEnterUp?:() => void; \r\n  width?: number; \r\n  [key:string]:any; \r\n} \r\nexport function Input(\r\n  {\r\n    value, setValue, \r\n    type=GetTypeByValue(value??''), \r\n    defaultValue=GetDefaultValueByType(type??'string'), \r\n    inputType=GetInputType(type??''), \r\n    onEnterUp=() => {}, \r\n    ...props\r\n  }:IInput) \r\n{ \r\n  const onChange = (event:IEvent) => setValue(GetInputValueOrDefault(event, defaultValue)); \r\n  const Value = IsNull(value) ? defaultValue: value; \r\n  const onKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => OnEnter(event, onEnterUp); \r\n\r\n  const width = props.width ?? SetSize(value); \r\n  const style = {width: `${width+2}ch`}; \r\n\r\n  if(type === 'boolean') \r\n    return <input {...{type:inputType, checked:Value, onChange, onKeyUp,  ...props}} /> \r\n  return <input {...{type:inputType, value:Value, onChange, onKeyUp, ...props}} style={style} /> \r\n} \r\n\r\n\r\n// GetValue --------------------------------------\r\nfunction GetInputValueOrDefault (event:IEvent, defaultValue:any) { \r\n  const value = GetValueFromInput(event); \r\n  return IsNull(value) ? defaultValue: value; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx",["346","347","348","349","350","351"],"import React, { useContext, useEffect, useState } from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex, ElementValue} from '../../_arrx'; \r\nimport {Input} from '../../_input'; \r\nimport {IInputArray, IUseInputArray, useInputArray} from './inputarray.hook'; \r\n\r\n\r\nexport const InputArrayContext = React.createContext({} as IUseInputArray); \r\nexport function InputArray({...props}:React.PropsWithChildren<IInputArray>) { \r\n  const context = useInputArray(props); \r\n  const {values} = props; \r\n  \r\n  return <InputArrayContext.Provider value={context} > \r\n    <Arrx {...{values}} > \r\n      <Elements> \r\n        <UpdateElement/> <DeleteBtn/>\r\n        <br/> \r\n      </Elements> \r\n      <CreateElement/>\r\n    </Arrx> \r\n  </InputArrayContext.Provider> \r\n} \r\n\r\n\r\n// Create element =======================================\r\nfunction CreateElement() { \r\n  const {type, defaultValue, Create} = useContext(InputArrayContext); \r\n  const [value, setValue] = useState(defaultValue); \r\n\r\n  const onEnterUp = () => {\r\n    Create(value); \r\n    setValue(() => defaultValue); // reset input to defaultValue after creation. \r\n  }; \r\n  return <Input {...{value, setValue, defaultValue, type, onEnterUp}}  /> \r\n} \r\n\r\n// Update element =======================================\r\nfunction UpdateElement() { \r\n  const {values, type, defaultValue, Update} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n\r\n  const [value, setValue] = useState(values[index]); \r\n  useEffect(() => { \r\n    setValue(values[index]); \r\n  }, [JSON.stringify(values[index])]); \r\n\r\n  const onEnterUp = () => Update(index, value); \r\n  return <Input {...{value, setValue, type, defaultValue, onEnterUp}} />\r\n}\r\n\r\n// Delete Btn ===================================\r\nexport function DeleteBtn({children, ...props}:React.PropsWithChildren<React.ButtonHTMLAttributes<HTMLButtonElement>>) { \r\n  const {Delete} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  return <button onClick={() => Delete(index)} {...props}> \r\n    {!children ? 'x' : children} \r\n  </button> \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx",[],["352","353"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx",["354","355"],"import {useEffect, useRef} from 'react'; \r\n\r\nexport function useUpdate(callback:() => void, changeling:any) { \r\n  const flagFirstRender = useRef(true); \r\n  \r\n  useEffect(() => { \r\n    if(flagFirstRender.current) { \r\n      flagFirstRender.current = false; \r\n      return; \r\n    } \r\n    callback(); \r\n  }, [JSON.stringify(changeling)]); \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",["356","357","358","359","360","361","362"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {IsEmpty, GetValueAt, SetValueAt} from '../../reusable/_utils'; \r\nimport {PatientProfile} from './components/patientprofile.component'; \r\nimport {Questionnaire} from '../questionnaire/questionnaire.page'; \r\nimport {LoadPatients } from './components/loadpatient.component'; \r\nimport { CrudContext } from '../../reusable/_crud';\r\n//import {RamqIdentification} from './components/ramqidentitication.component';\r\n\r\n\r\n\r\n// PATIENT PAGE =================================\r\ninterface IPatientProfileContext { \r\n  patientProfile: IEntry; \r\n  setPatientProfile: React.Dispatch<IEntry>; \r\n} \r\nexport const PatientProfileContext = React.createContext({} as IPatientProfileContext); \r\nexport default function Patient() { \r\n  const {activeCollection, setActiveCollection, GetICollections} = useContext(CrudContext); \r\n  const [patientProfile, setPatientProfile] = useState({} as IEntry); \r\n\r\n\r\n  useEffect(() => {\r\n    if(activeCollection.accessor !== 'patients') { \r\n      const [patients] = GetICollections(['patients']); \r\n      if(patients) \r\n        setActiveCollection(patients); \r\n    } \r\n  }, [activeCollection]); \r\n\r\n  /*useEffect(() => {\r\n    if(activeCollection.accessor !== 'patients') {\r\n\r\n      const [patients] = GetICollections(['patients']); \r\n      if(patients) \r\n        setActiveCollection(patients); \r\n    } \r\n  }, [activeCollection.accessor]) */\r\n  \r\n\r\n  const context = {patientProfile, setPatientProfile}; \r\n  return <PatientProfileContext.Provider value={context} > \r\n    <h2>Patient</h2>\r\n    {activeCollection.accessor}\r\n  </PatientProfileContext.Provider> \r\n} \r\n\r\n/*\r\n{!IsEmpty(activeCollection) && IsEmpty(patientProfile) && <PatientProfile/>} \r\n      {!IsEmpty(patientProfile) && <Questionnaire/>} \r\n*/","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx",["363"],"import React, { useEffect, useState } from 'react'; \r\nimport {Input, InputArray, Select} from '../../_input'; \r\nimport {GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\nimport {useUpdate} from '../../_useupdate'; \r\n\r\n\r\n\r\n// Reader =======================================\r\ninterface IEditor{ \r\n  ifield:IField; \r\n  value:any; \r\n  setValue:React.Dispatch<any>; \r\n  options?:IOption[]; \r\n} \r\nexport function Editor({ ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) { \r\n  const {defaultValue, type} = ifield; \r\n  const _options = options ?? [] as IOption[]; \r\n  const [_value, _setValue] = useState(value); \r\n\r\n  // synchronize from parent value\r\n  useEffect(() => { \r\n    if(value !== _value) \r\n      _setValue(value); \r\n  }, [value]); \r\n\r\n  // synchronize to parent value \r\n  useUpdate(() => {setValue(_value)},_value); \r\n\r\n  // Edit Many\r\n  if(ifield.isArray) {\r\n    if(IsEmpty(options)) \r\n      return <InputArray {...{defaultValue, type, values:_value, setValues:_setValue}} /> \r\n    return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:true}} /> \r\n  }\r\n  // Edit Mixed\r\n  if(ifield.isMixed) \r\n    return <EditMixed {...{ifield, value, setValue}} /> \r\n\r\n  // Edit One\r\n  if(IsEmpty(options)) \r\n    return <Input {...{value:_value, setValue:_setValue, type, defaultValue}} /> \r\n  return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:false}} /> \r\n} \r\n\r\n\r\nfunction EditMixed ({ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) {\r\n  return <span>{JSON.stringify(value)}</span>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx",["364","365"],"import React, { useState } from 'react'; \r\nimport {Reader, Editor, Select} from '../reusable/_input'; \r\nimport {GetValueAt, SetValueAt} from '../reusable/_utils'; \r\n\r\n\r\nconst numField:IField = {accessor:'num', label:'Accessor', type:'number', defaultValue:0, options:{}} as IField; \r\nconst strField:IField = {accessor:'str', label:'Accessor', type:'string', defaultValue:'', options:{}} as IField; \r\nconst boolField:IField = {accessor:'bool', label:'Accessor', type:'boolean', defaultValue:false, options:{}} as IField; \r\n\r\nconst numOptions:IOption[] = [ \r\n  {value: 0, label:'value 0'}, \r\n  {value: 1, label:'value 1'}, \r\n  {value: 2, label:'value 2'}, \r\n  {value: 3, label:'value 3'}, \r\n] \r\n\r\nconst strOptions:IOption[] = [ \r\n  {value: 'a', label:'value a'}, \r\n  {value: 'b', label:'value b'}, \r\n  {value: 'c', label:'value c'}, \r\n  {value: 'd', label:'value d'}, \r\n] \r\n\r\nconst boolOptions:IOption[] = [ \r\n  {value: false, label:'female'}, \r\n  {value: true, label:'male'}, \r\n] \r\n\r\nconst testRead:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n  {value: 12, ifield: {...numField}}, \r\n  {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n  {value: 'bababa', ifield:{...strField} }, \r\n  {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n  {value: false, ifield:{...boolField} }, \r\n  {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n  // options\r\n  {value: 2, ifield:{...numField}, options:numOptions }, \r\n  {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n  {value: 'b', ifield:{...strField}, options:strOptions}, \r\n  {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n  {value: false, ifield:{...boolField}, options:strOptions}, \r\n  {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n] \r\n\r\n  /*const testEditor:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n    {value: 12, ifield: {...numField}}, \r\n    {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n    {value: 'bababa', ifield:{...strField} }, \r\n    {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n    {value: false, ifield:{...boolField} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n    // options\r\n    {value: 2, ifield:{...numField}, options:numOptions }, \r\n    {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n    {value: 'b', ifield:{...strField}, options:strOptions}, \r\n    {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n    {value: false, ifield:{...boolField, options:strOptions} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n  ] */\r\n\r\n/*\r\nfunction useStateAt(_value:any) { \r\n  const [value, setValue] = useState(_value); \r\n  const ValueAt = (keys?:any[], newValue?:any) => { \r\n    if(newValue && JSON.stringify(ValueAt(keys)) !== newValue) \r\n      return SetValueAt(value, newValue, keys); \r\n    return GetValueAt(value, keys); \r\n  } \r\n  return ValueAt; \r\n} \r\n  \r\nexport function TestValueAt() { \r\n  const VALUE = {a:[15,46], b:[96,45]} \r\n  const valueAt = useStateAt(VALUE); \r\n  const value = valueAt(['a',0]); \r\n  const setValue = valueAt(['a',0]); \r\n\r\n  return <div> \r\n    <Editor {...{value}} /> \r\n  </div> \r\n} */\r\n\r\n\r\n// Test select when value is not in the avaible options */ \r\nexport function TestSelect () { \r\n  const [value, setValue] = useState(['-1']); \r\n  const options = [ \r\n    {value:'0', label:'option 0'}, \r\n    {value:'1', label:'option 1'}, \r\n    {value:'2', label:'option 2'}, \r\n    {value:'3', label:'option 3'} \r\n  ] \r\n\r\n  return <Select {...{value, setValue, options, multiple:true}} /> \r\n} \r\n\r\nexport function TestEditors() {\r\n  \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <TestEditor {...e} /></div> \r\n    })} \r\n    <br/>\r\n    asdsadsadas\r\n    <br/>\r\n  </div> \r\n}\r\n\r\n\r\nexport function TestEditor({ifield, options, ...props}:{value:any, ifield:IField, options?:IOption[]}) { \r\n  const [value, setValue] = useState(props.value); \r\n  return <div> \r\n    <div>{JSON.stringify(value)}</div> \r\n    <Editor {...{ifield, value, setValue, options}} /> \r\n    <br/>\r\n  </div>\r\n}\r\n\r\n\r\nexport function TestReader() { \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <Reader {...e} /></div> \r\n    })} \r\n  </div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx",["366","367"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx",["368","369"],"import React, {useContext} from 'react'; \r\nimport {CrudContext} from '../../reusable/_crud'; \r\nimport {Arrx} from '../../reusable/_arrx'; \r\n\r\nimport '../../css/feedback.css'; \r\n\r\n\r\n// Feedback =====================================\r\nexport function FeedBack() { \r\n  const {state} = useContext(CrudContext); \r\n\r\n  return <div> \r\n    {!state.ready && <span>LOADING ... </span>} \r\n    {state.ready && <span>Ready </span>} \r\n    {state.ready && !state.success && 'an errors occured'} \r\n  </div> \r\n} \r\n\r\nfunction CrudFeedBack() { \r\n  const {state} = useContext(CrudContext); \r\n  // assumes state is ready and successful \r\n  const responses = state.response as ICrudResponse[]; // ICrudResponse[] \r\n  \r\n  return <div> \r\n    #Responses : {responses.length} \r\n  </div> \r\n  /*{actionType, success, data, err} \r\n  \r\n  const successMsg:any = { \r\n    create:'Creation succeed', \r\n    update:'Update succeed', \r\n    delete:'Deletion succeed', \r\n  } \r\n  const errorMsg:any = { \r\n    create:'Creation failed ', \r\n    update:'Update failed', \r\n    delete:'Deletion failed', \r\n  } \r\n\r\n  const className = success ? 'success' : 'failure'; \r\n\r\n  return <div className={className}> \r\n    <div>{success ? successMsg[actionType] : errorMsg[actionType]}</div> \r\n    {!success && <Arrx {...{values:(err)}} />} \r\n    </div> */\r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx",["370","371"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx",["372"],"import React, {useContext} from 'react'; \r\nimport {RowContext, TablrContext} from '../../../reusable/_tablr'; \r\nimport {CrudContext} from '../../../reusable/_crud'; \r\nimport {EActionType} from '../../../reusable/_dao'; \r\n\r\n\r\n\r\n// Create .......................................\r\nexport function CreateBtn() { \r\n  const {activeCollection:{accessor}, Create} = useContext(CrudContext); \r\n  const action = (entries:IEntry[]) => Create(accessor, entries); \r\n\r\n  const mode = EActionType.CREATE; \r\n  const labels = {affirm:'Create', confirm:'Confirm creation', cancel:'Cancel creation'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Update .......................................\r\nexport function UpdateBtn() { \r\n  const {activeCollection:{accessor}, Update} = useContext(CrudContext);\r\n  const action = (entries:IEntry[]) => Update(accessor, entries); \r\n\r\n  const mode = EActionType.UPDATE; \r\n  const labels = {affirm:'Update', confirm:'Confirm update', cancel:'Cancel update'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Delete .......................................\r\nexport function DeleteBtn() { \r\n  const {activeCollection:{accessor}, Delete} = useContext(CrudContext); \r\n  const action = (entries:IEntry[]) => Delete(accessor, entries); \r\n\r\n  const mode = EActionType.DELETE; \r\n  const labels = {affirm:'Delete', confirm:'Confirm deletion', cancel:'Cancel deletion'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n\r\n\r\n// CRUD BTN =====================================\r\ninterface CrudBtn { \r\n  mode: EActionType; \r\n  labels:{ \r\n    affirm:string, \r\n    confirm:string, \r\n    cancel:string, \r\n  }; \r\n  action:(entries:IEntry[])=>Promise<void>; \r\n} \r\nfunction CrudBtn ({mode, labels, action}:CrudBtn) { \r\n  const {activeEntry, activeMode, SetActive, ResetActive, IsActive} = useContext(CrudContext); \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n  const id = datas[row] ? datas[row]?._id: ''; \r\n\r\n  const isMode = activeMode === mode; \r\n\r\n  const Affirm = () => { \r\n    SetActive(id, mode); \r\n  } \r\n  const Cancel = () => { \r\n    ResetActive(); \r\n  }; \r\n  const Confirm = async () => { \r\n    await action([activeEntry]); \r\n    Cancel(); \r\n  } \r\n\r\n  return <span> \r\n    {IsActive(id) && isMode && <button onClick={Confirm}>{labels.confirm}</button>} \r\n    {IsActive(id) && isMode && <button onClick={Cancel}>{labels.cancel}</button>} \r\n    {!IsActive(id) && <button onClick={Affirm}>{labels.affirm}</button>} \r\n  </span> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx",["373"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\loadpatient.component.tsx",["374","375"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\loadquestionnaire.component.tsx",["376","377"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\displayquestion.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaire.utils.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\paging.component.tsx",["378","379","380"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts",["381"],"import {useMemo} from 'react'; \r\nimport {useLoader, IState} from '../_useloader'; \r\nimport {DAO} from './dao.class'; \r\n\r\n\r\nexport enum EActionType { \r\n  CREATE = 'create', \r\n  READ = 'read', \r\n  UPDATE = 'update', \r\n  DELETE = 'delete', \r\n}\r\n\r\n\r\n\r\n// USE DAO ======================================\r\nexport interface IUseDao{ \r\n  state:IState; \r\n\r\n  // Get collections, entry, fields data \r\n  GetICollections:(accessors?:string[]) => ICollection[]; \r\n  GetIFields:(accessor:string, fields?:string[]) => IField[]; \r\n  GetIEntries:(accessor:string, ids?:string[]) => IEntry[]; \r\n  GetDefaultIEntry:(accessor:string) => IEntry; \r\n  \r\n  // Get foreign elements\r\n  GetForeignElements: (ifield:IField) => {foreignCollection:ICollection|undefined, abbrevField:IField|undefined}, \r\n\r\n  // Ge options \r\n  GetIOptions: (ifield:IField) => IOption[]; \r\n\r\n  // load remote collections. \r\n  Collections:(accessors:string[]) => Promise<void>; \r\n\r\n  // Crud functionalities. \r\n  Create: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n  Read: (accessor:string, id?:string[]) => Promise<void>; \r\n  Update: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n  Delete: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n} \r\n\r\n\r\n\r\n// USE DAO ======================================\r\nexport function useDao(dao:DAO):IUseDao { \r\n  // Hooks \r\n  const Dao = useMemo(() => dao, []); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const GetICollections = (accessors?:string[]) => Dao.GetICollections(accessors); \r\n  const GetIFields = (accessor:string, fields?:string[]) => Dao.GetIFields(accessor, fields); \r\n  const GetIEntries = (accessor:string, ids?:string[]) => Dao.GetIEntries(accessor, ids); \r\n  const GetDefaultIEntry = (accessor:string) => Dao.GetDefaultIEntry(accessor); \r\n  // Get foreign elements\r\n  const GetForeignElements = (ifield:IField) => Dao.GetForeignElements(ifield); \r\n  // Get options \r\n  const GetIOptions = (ifield:IField) => Dao.GetIOptions(ifield); \r\n\r\n  // Collections \r\n  const Collections = async (accessors:string[]) => \r\n    Load(() => Dao.Collections(accessors)); \r\n\r\n  // Crud functionalities \r\n  // async Validate ... \r\n  // async Ids ... \r\n  const Create = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Create(accessor, entries)); \r\n  const Read = async (accessor:string, ids?:string[]) => \r\n    Load(() => Dao.Read(accessor, ids)); \r\n  const Update = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Update(accessor, entries)); \r\n  const Delete = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Delete(accessor, entries)); \r\n\r\n  return { \r\n    state, \r\n    GetICollections, GetIFields, GetIEntries, GetDefaultIEntry, \r\n    GetForeignElements, GetIOptions, \r\n    Collections, Create, Read, Update, Delete \r\n  }; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudmongoose.class.ts",["382"],"import axios from 'axios'; \r\nimport {ParseCollection} from './mongooseparser.utils'; \r\n\r\n\r\n// Crud Mongoose =======================================\r\nexport class CrudMongoose { \r\n  public baseUrl:string = ''; \r\n\r\n  constructor(baseUrl:string) { \r\n    this.baseUrl = baseUrl; \r\n  }\r\n\r\n  // Access -----------------------------------------------\r\n  public async Access() { \r\n    return await axios.get(this.baseUrl); \r\n  } \r\n\r\n  /* \r\n  PUT ...api/collections \r\n    req.body => accessors:string[] \r\n    res:ICrudResponse[] \r\n  */ \r\n  // Collections ..........................................\r\n  public async Collections(accessors:string[]): Promise<ICrudResponse[]> { \r\n    const axiosResponses = (await axios.put(this.baseUrl+'collections/', accessors)).data as ICrudResponse[]; \r\n    return axiosResponses.map( r => { \r\n      const parsedCollection = ParseCollection(r.data); \r\n      return {...r, data:parsedCollection} as ICrudResponse; \r\n    }); \r\n  } \r\n\r\n  // Validate .............................................\r\n  public async Validate(accessor:string, entries:IEntry[]) { \r\n    return await axios.put(this.baseUrl+'validate/'+accessor, entries); \r\n  } \r\n\r\n  // Ids ..................................................\r\n  public async Ids(accessor:string): Promise<string[]>{ \r\n    return (await axios.get(this.baseUrl+'ids/'+accessor)).data; \r\n  } \r\n\r\n\r\n  //?? public async CreateUpdate ?? \r\n\r\n\r\n  // Create ...............................................\r\n  public async Create(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toCreate = entries.map(e => { \r\n      const {_id, _v, ...data} = e; \r\n      return data; \r\n    }); \r\n    return (await axios.put(this.baseUrl+'create/'+accessor, toCreate)).data; \r\n  } \r\n\r\n  // ICrudResponse ?? or IEntry ??\r\n  // Read .................................................\r\n  public async Read(accessor:string, ids?:string[]): Promise<ICrudResponse[]> {\r\n    return (await axios.put(this.baseUrl+'read/'+accessor, ids)).data; \r\n  }\r\n\r\n  // Update ...............................................\r\n  public async Update(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    return (await axios.put(this.baseUrl+'update/'+accessor, entries)).data; \r\n  }\r\n\r\n  // Delete ...............................................\r\n  /* Sends an array of objects with the only property being '_id' ... [{_id}] */\r\n  public async Delete(modelName:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toDelete = entries.map(e => { \r\n      const {_id, ...data} = e; \r\n      return {_id}; \r\n    }); \r\n    return (await axios.put(this.baseUrl+'delete/'+modelName, toDelete)).data; \r\n  } \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testcrud\\testcrud.experiment.tsx",["383"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_crud.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\crud\\useactive.hook.tsx",["384","385"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {IUseDao, useDao, ICrud, DAO, DaoContext} from '../_dao'; \r\nimport {CrudMongoose} from '../_mongooseparser'; \r\n\r\n\r\n\r\n// ICrudContext ------------------------------------------- \r\ninterface ICrudContext extends IUseDao { \r\n  activeCollection: ICollection; \r\n  setActiveCollection: React.Dispatch<ICollection>; \r\n  activeEntry: IEntry; \r\n  setActiveEntry: React.Dispatch<IEntry>; \r\n  activeMode: string; \r\n  setActiveMode: React.Dispatch<string>; \r\n  ResetActive: () => void, \r\n  SetActive: (id:string, mode:string) => void, \r\n  IsActive: (id:string) => boolean; \r\n} \r\nexport const CrudContext = React.createContext({} as ICrudContext); \r\n\r\n\r\n\r\n// CrudContexter ========================================== \r\nexport function CrudContexter({baseUrl, children}:React.PropsWithChildren<{baseUrl:string}>) { \r\n  const dao = new DAO(new CrudMongoose(baseUrl) as ICrud); \r\n  const usedao = useDao(dao); \r\n  const useactive = useActive(usedao); \r\n  const context = {...usedao, ...useactive}; \r\n  return <CrudContext.Provider value={context} > \r\n    {children} \r\n  </CrudContext.Provider> \r\n} \r\n\r\n\r\n\r\n// UseCrud ================================================ \r\nexport function useActive(useDao:IUseDao) { \r\n  const [activeCollection, setActiveCollection] = useState({} as ICollection); \r\n\r\n  const [activeEntry, setActiveEntry] = useState({} as IEntry); \r\n  const [activeMode, setActiveMode] = useState('read'); \r\n\r\n  useEffect(() => { \r\n    ResetActive(); \r\n  }, [activeCollection]); \r\n\r\n  function ResetActive() { \r\n    setActiveEntry({} as IEntry); \r\n    setActiveMode('read'); \r\n  } \r\n\r\n  function SetActive(id:string, mode:string) { \r\n    const [entry] = useDao.GetIEntries(activeCollection?.accessor, [id]); \r\n    const defaultEntry = useDao.GetDefaultIEntry(activeCollection?.accessor); \r\n    setActiveEntry(entry ?? defaultEntry); \r\n    setActiveMode(mode); \r\n  }\r\n\r\n  function IsActive(id:string):boolean { \r\n    return id === activeEntry?._id; \r\n  } \r\n\r\n  return {activeCollection, setActiveCollection, \r\n    activeEntry, setActiveEntry, \r\n    activeMode, setActiveMode, \r\n    ResetActive, SetActive, IsActive \r\n  }; \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\predloader.component.tsx",["386"],"import {useContext, useEffect} from 'react'; \r\nimport {CrudContext} from '../reusable/_crud'; \r\n\r\n\r\n// Prelaoder ===============================================\r\nexport function PreLoader() { \r\n  const {state, Collections, GetICollections} = useContext(CrudContext); \r\n\r\n  useEffect(() => { \r\n    Collections(['questions','responses', 'forms', 'instructions', 'patients', 'answers']); \r\n  }, []); \r\n\r\n  const ready = state.ready && state.success; \r\n  const [forms] = GetICollections(['forms']); \r\n\r\n  return <div> \r\n    <h1>Test Crud</h1> \r\n    <div>{forms && forms.entries.length}</div> \r\n    {!ready && 'loading ...'} \r\n    {ready && 'ready !'} \r\n  </div> \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\testrender.tsx",["387"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\renderer.component.tsx",["388","389"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testarray\\testarrayutils.experiment.tsx",["390","391","392"],"import React from 'react'; \r\nimport {ToArray, Filter, Indexes, Union, Group, Sort, Duplicates} from '../../reusable/_utils2'; \r\nimport {Comparator, Predicate} from '../../reusable/_utils2'; \r\nimport {IsEmpty, IsNull} from '../../reusable/_utils2'; \r\n\r\n\r\n// Test Util ====================================\r\nexport function TestArrayUtil() { \r\n  const values:any[] = [\r\n    undefined, \r\n    '', \r\n    0, \r\n    [] as any[], \r\n    {}, \r\n    null, \r\n  ] \r\n\r\n  const testArgs = [ \r\n    {array:[12,56,4,9,7,5,566], predicate: v => v > 10}, \r\n    {array:[12,56,4,9,7,5,566], predicate: (v,i) => i < 5} \r\n  ] as { array:any[], predicate:Predicate<any> } []; \r\n  \r\n\r\n  return <div> \r\n    <TestDuplicates /> <br/>\r\n    <TestGroup /> <br/>\r\n    <TestUnion  /> <br/>\r\n    <TestFilter {...{testArgs}} /> <br/> \r\n    <TestIndexes {...{testArgs}} /> <br/> \r\n    <TestSort /> \r\n  </div> \r\n\r\n\r\n  return <div> \r\n    <h1>ArrayTest</h1> \r\n    <h3>test 'IsNull'</h3> \r\n    <Tester {...{values, func:IsNull}} /> \r\n    <br/> \r\n    <h3>test 'IsEmpty'</h3> \r\n    <Tester {...{values, func:IsEmpty}} /> \r\n  </div> \r\n} \r\n\r\n\r\n\r\n\r\n// DUPLICATES =========================================\r\nfunction TestDuplicates() { \r\n  const ts = [{id:'b'}, {id:'b'}, {id:'a'}, {id:'d'}, {id:'a'}, {id:'c'}]; \r\n  const {duplicates, unics} = Duplicates(ts, (t,u) => t.id === u.id); \r\n\r\n  return <div> \r\n    <div>Duplicates / Unics</div> \r\n    {JSON.stringify([ts])} : \r\n      <br/> -- duplicates: {JSON.stringify(duplicates)} \r\n      <br/> -- unics: {JSON.stringify(unics)} \r\n  </div> \r\n} \r\n\r\n\r\n// GROUP ===============================================\r\nfunction TestGroup() { \r\n  type T = {id:string}; \r\n  const array = [{id:'b'}, {id:'b'}, {id:'a'}, {id:'d'}, {id:'a'}, {id:'c'}]; \r\n  const comparator = (t:T,u:string) => t.id === (u as string); \r\n  const comparator2 = (t:T,u:T) => t.id === (u as T).id; \r\n\r\n  const grouped = Group<T, string>(array,  comparator, ['a']); \r\n  const grouped2 = Group<T, T>(array,  comparator2); \r\n\r\n  return <div> \r\n    <div>Group</div> \r\n    {JSON.stringify([array])} : \r\n      <br/> -- grouped: {JSON.stringify(grouped)} \r\n      <br/> -- grouped: {JSON.stringify(grouped2)} \r\n  </div> \r\n} \r\n\r\n// SORT =================================================\r\nfunction TestSort() { \r\n  const ts = [{id:11}, {id:2}, {id:1}, {id:5}, {id:4}, {id:7}]; \r\n  const sorted = Sort(ts, (t, pivot) => t.id > pivot.id); \r\n  \r\n  return <div> \r\n    <div>Sort</div> \r\n    {JSON.stringify([ts])} : \r\n      <br/> -- sorted: {JSON.stringify(sorted)} \r\n  </div> \r\n} \r\n\r\n\r\n// Test Union ============================================= \r\nfunction TestUnion() { \r\n  const A = [12, 56, 4, 9, 7, 5, 566]; \r\n  const B = [15, 99, 54, 68]; \r\n  const predicate = (v:any) => v > 10; \r\n\r\n  return <div> \r\n    <div>Union</div> \r\n    {JSON.stringify(A)} : \r\n    {JSON.stringify(B)} : \r\n    {JSON.stringify(Union(A, B, predicate))} \r\n  </div> \r\n} \r\n\r\n// Test Indexes =========================================== \r\nfunction TestIndexes({testArgs}:{testArgs:{array:any[], predicate:Predicate<any>} []}) { \r\n  return <div> \r\n    <span>Indexes</span>\r\n    {testArgs.map( ({array, predicate},i) => { \r\n      return <div key={i}> \r\n        {JSON.stringify(array)} : \r\n        {JSON.stringify(predicate)} : \r\n        {JSON.stringify(Indexes(array, predicate))} \r\n      </div> \r\n    })} \r\n  </div> \r\n} \r\n\r\n// Test Filter ============================================ \r\nfunction TestFilter({testArgs}:{testArgs:{array:any[], predicate:Predicate<any>} []}) { \r\n  return <div> \r\n    <span>Filter</span>\r\n    {testArgs.map( ({array, predicate},i) => { \r\n      return <div key={i}> \r\n        {JSON.stringify(array)} : \r\n        {JSON.stringify(predicate)} : \r\n        {JSON.stringify(Filter(array, predicate))} \r\n      </div> \r\n    })} \r\n  </div> \r\n} \r\n\r\n// Tester ================================================= \r\nfunction Tester({values, func}:{values:any[], func:(value:any)=>any}) { \r\n  return <div> \r\n    {values.map( (value,i) => { \r\n      return <div key={i}> \r\n        {JSON.stringify(value)} : \r\n        {func.name} : \r\n        {JSON.stringify(func(value))} \r\n      </div> \r\n    })} \r\n  </div> \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils2.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays2.utils.ts",["393","394"],"import { IsEmpty } from \"../_utils2\";\r\n\r\nexport type Predicate<T> = (value:T, i:number, array:T[]) => boolean; \r\nexport type Comparator<T, U> = (t:T, u:U) => boolean; \r\nexport type Sorter<T> = (t:T, pivot:T) => boolean; \r\n\r\n\r\n/* ToArray ======================================\r\n\"Wrap\" an object as an array if not already an array. \r\nIf object is undefined, returns an empty array. \r\n*/\r\nexport function ToArray(toArray:any|any[]):any[] { \r\n  return toArray !== undefined ? [toArray].flat() : [] as any[]; \r\n} \r\n\r\n\r\n/* DUPLICATES ===========================================\r\n\r\n*/\r\nexport function Duplicates<T>(array:T[] = [], compare?:Comparator<T, T>):\r\n  {duplicates:T[], unics:T[]} { \r\n\r\n  let duplicates = [] as T[]; \r\n  let unics = [] as T[]; \r\n\r\n  array.forEach( (t:T, ti:number, array:T[]) => { \r\n    const predicate = (a:T, ai:number, array:T[]) => { \r\n      if(ti===ai) \r\n        return false; \r\n      return compare ? compare(t,a): t === a; \r\n    }; \r\n    if(array.some(predicate)) \r\n      duplicates.push(t); \r\n    else\r\n      unics.push(t); \r\n  }); \r\n  return {duplicates, unics}; \r\n}\r\n\r\n\r\n/* INTERSECT ==================================== \r\nReturn 2 lists, \r\n  - 'inclusion' the list of elements from 'ts' that intersect 'us'. \r\n  - 'exclusion' the list of all remaining elements. \r\n\r\n2 elements intersect if the predicate 'compare' return true for these 2 elements. \r\n*/ \r\nexport function Intersection<T, U>(ts:T[] = [], us:U[] = [], compare:Comparator<T,U>): \r\n    {inclusion:T[], exclusion:T[]} { \r\n  \r\n  const predicate = (t:T) => us.some(u => compare(t,u)); \r\n  return Filter(ts, predicate); \r\n} \r\n\r\n\r\n/* GROUP ========================================\r\n--- If 'values' is specified, groups elements from 'array' by their element[key] values, where element[key] in values. \r\nGroups will follow the order of values specified in 'values'\r\n\r\n--- If 'values' is NOT specified, groups element from 'array' by their element[key] values. \r\n*/\r\nexport function Group<T, U>(array:T[] = [], compare:Comparator<T, any>, us:U[] = []): \r\n    Array<T[]> { \r\n  const [u, ...remainder] = us; \r\n  const predicate = (t:T, i:number, ts:T[]) => { \r\n    if(u) \r\n      return compare(t, u as U); \r\n    return ts[0] ? compare(t, ts[0] as T): false; \r\n  } \r\n  const {inclusion, exclusion} = Filter(array, predicate); \r\n  if(!IsEmpty(exclusion) &&  (IsEmpty(us) || u && !IsEmpty(remainder)) ) { \r\n    const groups = Group(exclusion, compare, remainder); \r\n    return [inclusion, ...groups]; \r\n  } \r\n  return [inclusion]; \r\n}\r\n\r\n\r\n/* SORT =========================================\r\nQuick sort using a predicate (sorter) \r\n*/ \r\nexport function Sort<T>(array:T[] = [], sorter:Sorter<T>):T[] { \r\n  const [pivot, ...remainder] = [...array]; \r\n  if(remainder && remainder?.length <= 1) \r\n    return pivot ? [pivot] : []; \r\n  const {exclusion, inclusion} = Filter(remainder, (t:T) => sorter(t, pivot)); \r\n  const left = Sort<T>(exclusion, sorter); \r\n  const right = Sort<T>(inclusion, sorter); \r\n  return [...left, pivot, ...right]; \r\n} \r\n\r\n\r\n/* INDEXES ======================================= \r\nReturns indexes of each element matching predicate \r\n*/ \r\nexport function Indexes<T>(array:T[] = [], predicate:Predicate<T>): number[] { \r\n  const indexes = [] as number[]; \r\n  array?.forEach( (t,i,a) => { \r\n    if(predicate(t,i,a)) \r\n      indexes.push(i); \r\n  }) \r\n  return indexes; \r\n} \r\n\r\n\r\n/* FILTER ======================================= \r\nReturn 2 lists, \r\n  - 'inclusion' the list of elements matching predicate. \r\n  - 'exclusion' the list of all remaining elements. \r\n*/ \r\nexport function Filter<T>(array:T[] = [], predicate:Predicate<T>): \r\n    {inclusion:T[], exclusion:T[]} { \r\n\r\n  const inclusion = [] as T[]; \r\n  const exclusion = [] as T[]; \r\n\r\n  array?.forEach( (value:T, i:number, array:T[]) => { \r\n    if(predicate(value, i, array)) \r\n      inclusion.push(value); \r\n    else \r\n      exclusion.push(value); \r\n  }) \r\n  return {inclusion, exclusion}; \r\n} \r\n\r\n\r\n/* UNION ================================================== \r\nUnite 2 lists. \r\nOptional; exclude element not matching predicate. \r\n*/ \r\nexport function Union<T>(A:T|T[] = [], B:T|T[] = [], predicate?:Predicate<T>): T[] { \r\n  const union = [...ToArray(A), ...ToArray(B)]; \r\n  return predicate ? union.filter(predicate) : union; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\value.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\input\\input.component.tsx",[],{"ruleId":"395","replacedBy":"396"},{"ruleId":"397","replacedBy":"398"},{"ruleId":"399","severity":1,"message":"400","line":20,"column":3,"nodeType":"401","messageId":"402","endLine":31,"endColumn":19},{"ruleId":"403","severity":1,"message":"404","line":20,"column":6,"nodeType":"405","endLine":20,"endColumn":8,"suggestions":"406"},{"ruleId":"395","replacedBy":"396"},{"ruleId":"397","replacedBy":"398"},{"ruleId":"407","severity":1,"message":"408","line":71,"column":43,"nodeType":"409","messageId":"410","endLine":71,"endColumn":45},{"ruleId":"407","severity":1,"message":"408","line":71,"column":48,"nodeType":"409","messageId":"410","endLine":71,"endColumn":50},{"ruleId":"395","replacedBy":"411"},{"ruleId":"397","replacedBy":"412"},{"ruleId":"413","severity":1,"message":"414","line":62,"column":37,"nodeType":"415","messageId":"416","endLine":62,"endColumn":47},{"ruleId":"395","replacedBy":"417"},{"ruleId":"397","replacedBy":"418"},{"ruleId":"419","severity":1,"message":"420","line":4,"column":9,"nodeType":"421","messageId":"422","endLine":4,"endColumn":15},{"ruleId":"407","severity":1,"message":"423","line":34,"column":22,"nodeType":"409","messageId":"410","endLine":34,"endColumn":24},{"ruleId":"407","severity":1,"message":"423","line":34,"column":47,"nodeType":"409","messageId":"410","endLine":34,"endColumn":49},{"ruleId":"419","severity":1,"message":"424","line":1,"column":16,"nodeType":"421","messageId":"422","endLine":1,"endColumn":26},{"ruleId":"407","severity":1,"message":"423","line":28,"column":20,"nodeType":"409","messageId":"410","endLine":28,"endColumn":22},{"ruleId":"407","severity":1,"message":"423","line":28,"column":36,"nodeType":"409","messageId":"410","endLine":28,"endColumn":38},{"ruleId":"419","severity":1,"message":"425","line":113,"column":12,"nodeType":"421","messageId":"422","endLine":113,"endColumn":22},{"ruleId":"395","replacedBy":"426"},{"ruleId":"397","replacedBy":"427"},{"ruleId":"395","replacedBy":"428"},{"ruleId":"397","replacedBy":"429"},{"ruleId":"419","severity":1,"message":"430","line":1,"column":26,"nodeType":"421","messageId":"422","endLine":1,"endColumn":31},{"ruleId":"419","severity":1,"message":"431","line":3,"column":43,"nodeType":"421","messageId":"422","endLine":3,"endColumn":51},{"ruleId":"419","severity":1,"message":"432","line":2,"column":15,"nodeType":"421","messageId":"422","endLine":2,"endColumn":26},{"ruleId":"419","severity":1,"message":"433","line":2,"column":38,"nodeType":"421","messageId":"422","endLine":2,"endColumn":45},{"ruleId":"419","severity":1,"message":"434","line":2,"column":63,"nodeType":"421","messageId":"422","endLine":2,"endColumn":75},{"ruleId":"419","severity":1,"message":"435","line":2,"column":77,"nodeType":"421","messageId":"422","endLine":2,"endColumn":89},{"ruleId":"403","severity":1,"message":"436","line":44,"column":6,"nodeType":"405","endLine":44,"endColumn":37,"suggestions":"437"},{"ruleId":"403","severity":1,"message":"438","line":44,"column":7,"nodeType":"439","endLine":44,"endColumn":36},{"ruleId":"395","replacedBy":"440"},{"ruleId":"397","replacedBy":"441"},{"ruleId":"403","severity":1,"message":"442","line":12,"column":6,"nodeType":"405","endLine":12,"endColumn":34,"suggestions":"443"},{"ruleId":"403","severity":1,"message":"438","line":12,"column":7,"nodeType":"439","endLine":12,"endColumn":33},{"ruleId":"419","severity":1,"message":"444","line":2,"column":9,"nodeType":"421","messageId":"422","endLine":2,"endColumn":16},{"ruleId":"419","severity":1,"message":"445","line":2,"column":18,"nodeType":"421","messageId":"422","endLine":2,"endColumn":28},{"ruleId":"419","severity":1,"message":"446","line":2,"column":30,"nodeType":"421","messageId":"422","endLine":2,"endColumn":40},{"ruleId":"419","severity":1,"message":"447","line":3,"column":9,"nodeType":"421","messageId":"422","endLine":3,"endColumn":23},{"ruleId":"419","severity":1,"message":"448","line":4,"column":9,"nodeType":"421","messageId":"422","endLine":4,"endColumn":22},{"ruleId":"419","severity":1,"message":"449","line":5,"column":9,"nodeType":"421","messageId":"422","endLine":5,"endColumn":21},{"ruleId":"403","severity":1,"message":"450","line":28,"column":6,"nodeType":"405","endLine":28,"endColumn":24,"suggestions":"451"},{"ruleId":"403","severity":1,"message":"452","line":24,"column":6,"nodeType":"405","endLine":24,"endColumn":13,"suggestions":"453"},{"ruleId":"419","severity":1,"message":"445","line":3,"column":9,"nodeType":"421","messageId":"422","endLine":3,"endColumn":19},{"ruleId":"419","severity":1,"message":"446","line":3,"column":21,"nodeType":"421","messageId":"422","endLine":3,"endColumn":31},{"ruleId":"419","severity":1,"message":"454","line":1,"column":28,"nodeType":"421","messageId":"422","endLine":1,"endColumn":36},{"ruleId":"419","severity":1,"message":"455","line":3,"column":17,"nodeType":"421","messageId":"422","endLine":3,"endColumn":22},{"ruleId":"419","severity":1,"message":"456","line":3,"column":9,"nodeType":"421","messageId":"422","endLine":3,"endColumn":13},{"ruleId":"419","severity":1,"message":"457","line":19,"column":10,"nodeType":"421","messageId":"422","endLine":19,"endColumn":22},{"ruleId":"419","severity":1,"message":"458","line":5,"column":20,"nodeType":"421","messageId":"422","endLine":5,"endColumn":30},{"ruleId":"419","severity":1,"message":"459","line":5,"column":45,"nodeType":"421","messageId":"422","endLine":5,"endColumn":56},{"ruleId":"460","severity":1,"message":"461","line":50,"column":10,"nodeType":"421","messageId":"462","endLine":50,"endColumn":17},{"ruleId":"419","severity":1,"message":"463","line":9,"column":9,"nodeType":"421","messageId":"422","endLine":9,"endColumn":15},{"ruleId":"419","severity":1,"message":"464","line":3,"column":9,"nodeType":"421","messageId":"422","endLine":3,"endColumn":17},{"ruleId":"403","severity":1,"message":"465","line":20,"column":6,"nodeType":"405","endLine":20,"endColumn":8,"suggestions":"466"},{"ruleId":"419","severity":1,"message":"467","line":11,"column":10,"nodeType":"421","messageId":"422","endLine":11,"endColumn":21},{"ruleId":"403","severity":1,"message":"468","line":31,"column":6,"nodeType":"405","endLine":31,"endColumn":8,"suggestions":"469"},{"ruleId":"419","severity":1,"message":"470","line":9,"column":10,"nodeType":"421","messageId":"422","endLine":9,"endColumn":17},{"ruleId":"419","severity":1,"message":"471","line":33,"column":28,"nodeType":"421","messageId":"422","endLine":33,"endColumn":36},{"ruleId":"419","severity":1,"message":"472","line":33,"column":39,"nodeType":"421","messageId":"422","endLine":33,"endColumn":45},{"ruleId":"403","severity":1,"message":"473","line":46,"column":34,"nodeType":"405","endLine":46,"endColumn":36,"suggestions":"474"},{"ruleId":"419","severity":1,"message":"475","line":70,"column":22,"nodeType":"421","messageId":"422","endLine":70,"endColumn":26},{"ruleId":"403","severity":1,"message":"476","line":18,"column":6,"nodeType":"405","endLine":18,"endColumn":8,"suggestions":"477"},{"ruleId":"419","severity":1,"message":"424","line":1,"column":16,"nodeType":"421","messageId":"422","endLine":1,"endColumn":26},{"ruleId":"419","severity":1,"message":"478","line":2,"column":38,"nodeType":"421","messageId":"422","endLine":2,"endColumn":48},{"ruleId":"403","severity":1,"message":"476","line":11,"column":6,"nodeType":"405","endLine":11,"endColumn":8,"suggestions":"479"},{"ruleId":"419","severity":1,"message":"480","line":6,"column":9,"nodeType":"421","messageId":"422","endLine":6,"endColumn":16},{"ruleId":"419","severity":1,"message":"455","line":2,"column":9,"nodeType":"421","messageId":"422","endLine":2,"endColumn":14},{"ruleId":"419","severity":1,"message":"481","line":3,"column":9,"nodeType":"421","messageId":"422","endLine":3,"endColumn":19},{"ruleId":"419","severity":1,"message":"482","line":2,"column":9,"nodeType":"421","messageId":"422","endLine":2,"endColumn":16},{"ruleId":"419","severity":1,"message":"483","line":3,"column":9,"nodeType":"421","messageId":"422","endLine":3,"endColumn":19},{"ruleId":"399","severity":1,"message":"400","line":34,"column":3,"nodeType":"401","messageId":"402","endLine":41,"endColumn":9},{"ruleId":"407","severity":1,"message":"408","line":71,"column":43,"nodeType":"409","messageId":"410","endLine":71,"endColumn":45},{"ruleId":"407","severity":1,"message":"408","line":71,"column":48,"nodeType":"409","messageId":"410","endLine":71,"endColumn":50},"no-native-reassign",["484"],"no-negated-in-lhs",["485"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setActiveCollection'. Either include it or remove the dependency array.","ArrayExpression",["486"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator",["484"],["485"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression",["484"],["485"],"@typescript-eslint/no-unused-vars","'IsNull' is defined but never used.","Identifier","unusedVar","Unexpected mix of '&&' and '||'.","'useContext' is defined but never used.","'collection' is assigned a value but never used.",["484"],["485"],["484"],["485"],"'Union' is defined but never used.","'SetWidth' is defined but never used.","'ArrxContext' is defined but never used.","'Element' is defined but never used.","'ElementIndex' is defined but never used.","'ElementValue' is defined but never used.","React Hook useEffect has missing dependencies: 'index' and 'values'. Either include them or remove the dependency array.",["487"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression",["484"],["485"],"React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["488"],"'IsEmpty' is defined but never used.","'GetValueAt' is defined but never used.","'SetValueAt' is defined but never used.","'PatientProfile' is defined but never used.","'Questionnaire' is defined but never used.","'LoadPatients' is defined but never used.","React Hook useEffect has missing dependencies: 'GetICollections' and 'setActiveCollection'. Either include them or remove the dependency array.",["489"],"React Hook useEffect has a missing dependency: '_value'. Either include it or remove the dependency array.",["490"],"'useState' is defined but never used.","'Input' is defined but never used.","'Arrx' is defined but never used.","'CrudFeedBack' is defined but never used.","'RowContext' is defined but never used.","'CellContext' is defined but never used.","@typescript-eslint/no-redeclare","'CrudBtn' is already defined.","redeclared","'Reader' is defined but never used.","'FeedBack' is defined but never used.","React Hook useEffect has a missing dependency: 'GetPatient'. Either include it or remove the dependency array.",["491"],"'Collections' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetQuestionnaire'. Either include it or remove the dependency array.",["492"],"'answers' is assigned a value but never used.","'accessor' is assigned a value but never used.","'Create' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'dao'. Either include it or remove the dependency array.",["493"],"'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'Collections'. Either include it or remove the dependency array.",["494"],"'DaoContext' is defined but never used.",["495"],"'options' is assigned a value but never used.","'InputArray' is defined but never used.","'ToArray' is defined but never used.","'Comparator' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"510","fix":"511"},{"desc":"512","fix":"513"},{"desc":"512","fix":"514"},"Update the dependencies array to be: [setActiveCollection]",{"range":"515","text":"516"},"Update the dependencies array to be: [index, values]",{"range":"517","text":"518"},"Update the dependencies array to be: [callback]",{"range":"519","text":"520"},"Update the dependencies array to be: [GetICollections, activeCollection, setActiveCollection]",{"range":"521","text":"522"},"Update the dependencies array to be: [_value, value]",{"range":"523","text":"524"},"Update the dependencies array to be: [GetPatient]",{"range":"525","text":"526"},"Update the dependencies array to be: [GetQuestionnaire]",{"range":"527","text":"528"},"Update the dependencies array to be: [dao]",{"range":"529","text":"530"},"Update the dependencies array to be: [Collections]",{"range":"531","text":"532"},{"range":"533","text":"532"},[663,665],"[setActiveCollection]",[1560,1591],"[index, values]",[304,332],"[callback]",[1158,1176],"[GetICollections, activeCollection, setActiveCollection]",[762,769],"[_value, value]",[594,596],"[GetPatient]",[1036,1038],"[GetQuestionnaire]",[1369,1371],"[dao]",[618,620],"[Collections]",[392,394]]