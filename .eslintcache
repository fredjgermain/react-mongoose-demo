[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\testrender.tsx":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testarray\\testarrayutils.experiment.tsx":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\value.utils.ts":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrayutils.ts":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\editor.component.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\reader.component.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testLoader\\testLoader.tsx":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\preloader.component.tsx":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_session.ts":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useGetSet.hook.tsx":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objset\\objset.component.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\field.component.tsx":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\date.utils.ts":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_customhooks.ts":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.contexter.tsx":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\session\\usesession.hook.ts":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usecolumnsetting.hook.tsx":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\session\\session.class.ts":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usestateat.hook.tsx":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx":"59","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx":"60","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentification.component.tsx":"61","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionpage.component.tsx":"62","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionitem.component.tsx":"63","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\pager.component.tsx":"64","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_pager.ts":"65","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\pager\\pager.component.tsx":"66","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx2\\objx.component.tsx":"67","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx2.ts":"68","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\landing\\landing.page.tsx":"69","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\AppTypeScript.tsx":"70","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\hooks\\usepatient.hook.ts":"71","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"72","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\hooks\\useadmin.hook.ts":"73","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx":"74","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\header.component.tsx":"75","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\hooks\\useeditstate.hook.tsx":"76","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\inlinenbtn.component.tsx":"77","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\hooks\\usequestionnaire.hook.tsx":"78","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\hooks\\userow.hook.ts":"79","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useientry.hook.tsx":"80","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\adminrow.component.tsx":"81","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\hooks\\usequestionnaireitem.hook.tsx":"82","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Button.stories.tsx":"83","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Header.stories.tsx":"84","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Page.stories.tsx":"85","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Button.tsx":"86","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Header.tsx":"87","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Page.tsx":"88","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.stories.tsx":"89","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedbackcrud.component.tsx":"90","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\stories\\dao.stories.tsx":"91","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\fetcher.class.ts":"92","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\stories\\mockcrud.ts":"93","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\stories\\mockdb.ts":"94","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\stories\\mockdata.ts":"95","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\validators.tsx":"96","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\stories\\admin.stories.tsx":"97","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\reader\\reader.stories.tsx":"98","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\editor\\editor.stories.tsx":"99","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\editor\\editor.component.tsx":"100","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\reader\\reader.component.tsx":"101","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\reader\\_reader.tsx":"102","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\input\\input.stories.tsx":"103","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\inputarray\\inputarray.stories.tsx":"104","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\inputselect\\imputselection.stories.tsx":"105","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\input\\_input.tsx":"106","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\inputarray\\_inputarray.tsx":"107","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\inputselect\\_inputselect.tsx":"108","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\inputselect\\inputselect.hook.tsx":"109","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\inputarray\\inputarray.component.tsx":"110","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\input\\input.component.tsx":"111","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\inputselect\\inputselect.component.tsx":"112"},{"size":621,"mtime":1612141670677,"results":"113","hashOfConfig":"114"},{"size":123,"mtime":1615491516124,"results":"115","hashOfConfig":"114"},{"size":362,"mtime":499162500000,"results":"116","hashOfConfig":"114"},{"size":557,"mtime":1615492050370,"results":"117","hashOfConfig":"114"},{"size":1988,"mtime":1615841322977,"results":"118","hashOfConfig":"114"},{"size":4948,"mtime":1614814115967,"results":"119","hashOfConfig":"114"},{"size":1708,"mtime":1615752999802,"results":"120","hashOfConfig":"114"},{"size":1900,"mtime":1612141671217,"results":"121","hashOfConfig":"114"},{"size":3364,"mtime":1616093161049,"results":"122","hashOfConfig":"114"},{"size":1782,"mtime":1614038749839,"results":"123","hashOfConfig":"114"},{"size":1422,"mtime":1614206751965,"results":"124","hashOfConfig":"114"},{"size":1473,"mtime":1612141671140,"results":"125","hashOfConfig":"114"},{"size":462,"mtime":1612141671142,"results":"126","hashOfConfig":"114"},{"size":1042,"mtime":1612141671142,"results":"127","hashOfConfig":"114"},{"size":982,"mtime":1612141671141,"results":"128","hashOfConfig":"114"},{"size":8423,"mtime":1616262582452,"results":"129","hashOfConfig":"114"},{"size":310,"mtime":1616264233336,"results":"130","hashOfConfig":"114"},{"size":326,"mtime":1616093209455,"results":"131","hashOfConfig":"114"},{"size":879,"mtime":1615753042371,"results":"132","hashOfConfig":"114"},{"size":1725,"mtime":1613937646786,"results":"133","hashOfConfig":"114"},{"size":688,"mtime":1611105433287,"results":"134","hashOfConfig":"114"},{"size":1330,"mtime":1612141671143,"results":"135","hashOfConfig":"114"},{"size":233,"mtime":1612141670928,"results":"136","hashOfConfig":"114"},{"size":2947,"mtime":1614795800373,"results":"137","hashOfConfig":"114"},{"size":1544,"mtime":1614732740773,"results":"138","hashOfConfig":"114"},{"size":564,"mtime":1613957467554,"results":"139","hashOfConfig":"114"},{"size":1709,"mtime":1615326290210,"results":"140","hashOfConfig":"114"},{"size":2138,"mtime":1612987585877,"results":"141","hashOfConfig":"114"},{"size":1183,"mtime":1612987585982,"results":"142","hashOfConfig":"114"},{"size":447,"mtime":1612141670931,"results":"143","hashOfConfig":"114"},{"size":1697,"mtime":1614795986709,"results":"144","hashOfConfig":"114"},{"size":338,"mtime":1612141671148,"results":"145","hashOfConfig":"114"},{"size":329,"mtime":1614040019055,"results":"146","hashOfConfig":"114"},{"size":4408,"mtime":1612141670676,"results":"147","hashOfConfig":"114"},{"size":1882,"mtime":1616089027251,"results":"148","hashOfConfig":"114"},{"size":736,"mtime":1612141670564,"results":"149","hashOfConfig":"114"},{"size":2539,"mtime":1613766518266,"results":"150","hashOfConfig":"114"},{"size":484,"mtime":1615506232202,"results":"151","hashOfConfig":"114"},{"size":6470,"mtime":1612996434149,"results":"152","hashOfConfig":"114"},{"size":4725,"mtime":1614732728564,"results":"153","hashOfConfig":"114"},{"size":2779,"mtime":1615149115198,"results":"154","hashOfConfig":"114"},{"size":323,"mtime":1614809528857,"results":"155","hashOfConfig":"114"},{"size":4063,"mtime":1614795960140,"results":"156","hashOfConfig":"114"},{"size":3673,"mtime":1615326458895,"results":"157","hashOfConfig":"114"},{"size":758,"mtime":1613681678874,"results":"158","hashOfConfig":"114"},{"size":790,"mtime":1614731546782,"results":"159","hashOfConfig":"114"},{"size":204,"mtime":1614730588739,"results":"160","hashOfConfig":"114"},{"size":1287,"mtime":1613953897783,"results":"161","hashOfConfig":"114"},{"size":3295,"mtime":1614047931428,"results":"162","hashOfConfig":"114"},{"size":1559,"mtime":1614795790067,"results":"163","hashOfConfig":"114"},{"size":881,"mtime":1614217904889,"results":"164","hashOfConfig":"114"},{"size":942,"mtime":1615422780642,"results":"165","hashOfConfig":"114"},{"size":1037,"mtime":1616264385247,"results":"166","hashOfConfig":"114"},{"size":1403,"mtime":1614730588739,"results":"167","hashOfConfig":"114"},{"size":582,"mtime":1612141671146,"results":"168","hashOfConfig":"114"},{"size":2834,"mtime":1614730588739,"results":"169","hashOfConfig":"114"},{"size":1499,"mtime":1615235871671,"results":"170","hashOfConfig":"114"},{"size":1321,"mtime":1615505408472,"results":"171","hashOfConfig":"114"},{"size":2885,"mtime":1615506050294,"results":"172","hashOfConfig":"114"},{"size":644,"mtime":1615506058125,"results":"173","hashOfConfig":"114"},{"size":1857,"mtime":1615506042712,"results":"174","hashOfConfig":"114"},{"size":909,"mtime":1615491748211,"results":"175","hashOfConfig":"114"},{"size":882,"mtime":1615491653357,"results":"176","hashOfConfig":"114"},{"size":1571,"mtime":1615506364247,"results":"177","hashOfConfig":"114"},{"size":163,"mtime":1614888850060,"results":"178","hashOfConfig":"114"},{"size":3864,"mtime":1614888810614,"results":"179","hashOfConfig":"114"},{"size":4256,"mtime":1615166005708,"results":"180","hashOfConfig":"114"},{"size":291,"mtime":1615162883609,"results":"181","hashOfConfig":"114"},{"size":136,"mtime":1615506021885,"results":"182","hashOfConfig":"114"},{"size":2141,"mtime":1615855426147,"results":"183","hashOfConfig":"114"},{"size":3659,"mtime":1615409463103,"results":"184","hashOfConfig":"114"},{"size":2215,"mtime":1615506021900,"results":"185","hashOfConfig":"114"},{"size":1708,"mtime":1616266107861,"results":"186","hashOfConfig":"114"},{"size":689,"mtime":1616266645271,"results":"187","hashOfConfig":"114"},{"size":297,"mtime":1615326757108,"results":"188","hashOfConfig":"114"},{"size":1188,"mtime":1615315567149,"results":"189","hashOfConfig":"114"},{"size":1768,"mtime":1615425538457,"results":"190","hashOfConfig":"114"},{"size":4884,"mtime":1615505573016,"results":"191","hashOfConfig":"114"},{"size":1969,"mtime":1615425463556,"results":"192","hashOfConfig":"114"},{"size":1451,"mtime":1615425436373,"results":"193","hashOfConfig":"114"},{"size":1000,"mtime":1615425527655,"results":"194","hashOfConfig":"114"},{"size":1689,"mtime":1615490461716,"results":"195","hashOfConfig":"114"},{"size":804,"mtime":499162500000,"results":"196","hashOfConfig":"114"},{"size":510,"mtime":499162500000,"results":"197","hashOfConfig":"114"},{"size":605,"mtime":499162500000,"results":"198","hashOfConfig":"114"},{"size":941,"mtime":499162500000,"results":"199","hashOfConfig":"114"},{"size":1356,"mtime":499162500000,"results":"200","hashOfConfig":"114"},{"size":2415,"mtime":499162500000,"results":"201","hashOfConfig":"114"},{"size":2462,"mtime":1616089040399,"results":"202","hashOfConfig":"114"},{"size":1738,"mtime":1616089032244,"results":"203","hashOfConfig":"114"},{"size":1760,"mtime":1616264470700,"results":"204","hashOfConfig":"114"},{"size":2695,"mtime":1616095958597,"results":"205","hashOfConfig":"114"},{"size":2915,"mtime":1616263870705,"results":"206","hashOfConfig":"114"},{"size":1286,"mtime":1616109866801,"results":"207","hashOfConfig":"114"},{"size":5987,"mtime":1616109847035,"results":"208","hashOfConfig":"114"},{"size":829,"mtime":1616110600608,"results":"209","hashOfConfig":"114"},{"size":1492,"mtime":1616268561381,"results":"210","hashOfConfig":"114"},{"size":1292,"mtime":1616268717891,"results":"211","hashOfConfig":"114"},{"size":2170,"mtime":1616267790179,"results":"212","hashOfConfig":"114"},{"size":2588,"mtime":1616268422807,"results":"213","hashOfConfig":"114"},{"size":1963,"mtime":1616268197948,"results":"214","hashOfConfig":"114"},{"size":148,"mtime":1616267999410,"results":"215","hashOfConfig":"114"},{"size":1727,"mtime":1616268520036,"results":"216","hashOfConfig":"114"},{"size":1092,"mtime":1616267508671,"results":"217","hashOfConfig":"114"},{"size":889,"mtime":1616266908275,"results":"218","hashOfConfig":"114"},{"size":91,"mtime":1616267139824,"results":"219","hashOfConfig":"114"},{"size":118,"mtime":1616267494279,"results":"220","hashOfConfig":"114"},{"size":245,"mtime":1616266873756,"results":"221","hashOfConfig":"114"},{"size":1308,"mtime":1616268331920,"results":"222","hashOfConfig":"114"},{"size":3200,"mtime":1616268294397,"results":"223","hashOfConfig":"114"},{"size":1794,"mtime":1616268282887,"results":"224","hashOfConfig":"114"},{"size":2224,"mtime":1616268316247,"results":"225","hashOfConfig":"114"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},"ke513i",{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"228"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"245"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"238"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"253"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"257"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"257"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"257"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"257"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"277"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"238"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"238"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"257"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"238"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"253"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"245"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"257"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"319"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"323"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"238"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"238"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"257"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"235"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"238"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"348"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"253"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"238"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"238"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"235"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"235"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"235"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"238"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"392"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"392"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"399","messages":"400","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"235"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"235"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"238"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"235"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"238"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"445","messages":"446","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"238"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"238"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"238"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"238"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"238"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"462","messages":"463","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"464","messages":"465","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"468","messages":"469","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"238"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"473","messages":"474","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"475","messages":"476","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"477","messages":"478","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"479","messages":"480","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"487","messages":"488","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["493","494"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],["495","496"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",[],["497","498"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],["499","500"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["501"],"import {IsEmpty, IsInRange} from '../_utils';\r\n\r\nexport interface IMongooseCollection { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    enum?: any[]; \r\n    abbrev?: boolean; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\n// Parser functions =============================\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\nexport function ParseField(field:IMongooseField):IField { \r\n  const {path, instance, options, $embeddedSchemaType} = field; \r\n  const ifield:IField = {} as IField; \r\n\r\n  ifield.accessor = path ?? ''; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.type = options?.ref ?? $embeddedSchemaType?.instance ?? field.instance.toLowerCase(); \r\n  ifield.isMixed = instance.toLowerCase() === 'mixed'; \r\n  ifield.isEnum = !!options?.enum; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = !!options?.ref; \r\n  ifield.isAbbrev = !!options?.abbrev; \r\n  ifield.validators = GetValidators(field); \r\n  ifield.isRequired = field.options['required'] ?? false; \r\n  ifield.regex = field.options['regex']? field.options['regex']: undefined; \r\n\r\n  ifield.enums = options.enum ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, field.options); \r\n\r\n  return ifield; \r\n} \r\n\r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction GetValidators(field:IMongooseField):IValidator[] { \r\n  const required = (value:any) => { \r\n    return !IsEmpty(value); \r\n  }; \r\n\r\n  const regex = (value:any) => { \r\n    if(field.options['regex']) \r\n      return new RegExp(field.options['regex']).test(value); \r\n    return true; \r\n  } \r\n\r\n  const arrayLength = (value:any[]) => { \r\n    return IsInRange(value.length, field.options['minelements'], field.options['maxelements']) \r\n  } \r\n\r\n  const numberRange = (value:any) => { \r\n    return IsInRange(value, field.options['min'], field.options['max']); \r\n  } \r\n\r\n  let validators:IValidator[] = []; \r\n  if(field.options['required']) \r\n    validators.push(required); \r\n  if(field.options['regex']) \r\n    validators.push(regex); \r\n  if(field.options['min'] || field.options['max']) \r\n    validators.push(numberRange); \r\n  if(field.options['minelements'] || field.options['maxelements']) \r\n    validators.push(arrayLength); \r\n  return validators; \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],["502","503"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["504","505","506"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull, GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield) => { \r\n      return <Cell key={ifield.accessor} {...{ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const data = datas[row]; \r\n  const value = IsEmpty(data) ? GetDefaultValueFromIField(ifield): datas[row][ifield.accessor]; \r\n  const context = {value, row, ifield} as ICellContext; \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n",["507","508"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["509","510","511"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts",["512","513"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx",[],["514","515"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx",["516"],"import React, { useContext, useState } from 'react'; \r\nimport {IsEmpty} from '../../_utils'; \r\nimport {useSelect, IUseSelect} from './select.hook'; \r\nimport {IEditor} from '../../_input'; \r\nimport {useToggle, IUseToggle} from '../../_customhooks'; \r\n\r\n\r\nimport './select.style.css'; \r\n\r\nexport function TestSelect() { \r\n  const options:IOption[] = [\r\n    {value:0, label:'valeur 0'}, \r\n    {value:1, label:'valeur 1'}, \r\n    {value:2, label:'valeur 2'}, \r\n    {value:3, label:'valeur 3'}, \r\n  ] \r\n\r\n  const ifield = {accessor:'', label:'', defaultValue:'', type:'string'} as IField; \r\n  const [value, setValue] = useState(0); \r\n\r\n\r\n\r\n  return <div> \r\n    <span>{JSON.stringify(value)}</span> \r\n    <span>Label:</span> \r\n    <Select {...{ifield, value, setValue, options}} /> \r\n    <span>asdasdasdsa:</span> \r\n  </div> \r\n} \r\n\r\n\r\nexport const SelectContext = React.createContext({} as IUseSelect); \r\nexport function Select({ifield, value, setValue, options}:IEditor) { \r\n  const context = useSelect({ifield, value, setValue, options}); \r\n\r\n  const {toggle, ToggleBtnAction, toggleTarget, Toggle} = useToggle<HTMLDivElement>(true); \r\n\r\n  const CloseToggle = () => { \r\n    if(!context.multiple) \r\n      Toggle(); \r\n  }\r\n\r\n  return <SelectContext.Provider value={context}> \r\n    <div className={'select-main'} > \r\n      <div  {...ToggleBtnAction()} > \r\n        <Selection/> \r\n      </div> \r\n      <div tabIndex={0} ref={toggleTarget} hidden={toggle} onClick={CloseToggle}> \r\n        <Options /> \r\n      </div> \r\n    </div> \r\n  </SelectContext.Provider> \r\n}\r\n\r\n\r\nfunction Selection() {\r\n  const {SelectValue, GetSelection} = useContext(SelectContext); \r\n  const selection = GetSelection(); \r\n\r\n  return <div className={'select-header'}> \r\n\r\n    {IsEmpty(selection) && <span className={'select-placeholder'}> --- Empty --- </span>} \r\n\r\n    {selection.map( (option, i) => { \r\n      const key = JSON.stringify(option.value); \r\n      const onClick = () => SelectValue(option?.value); \r\n      const className = 'select-option'; \r\n      return <span key={key} {...{onClick, className}}> \r\n        {option?.label}{(i < selection.length-1) ? ', ':''}\r\n      </span> \r\n    })} \r\n  </div> \r\n}\r\n\r\n\r\n\r\nfunction Options() { \r\n  const {options, SelectValue, GetSelection} = useContext(SelectContext); \r\n  const selection = GetSelection(); \r\n  const IsSelected = (option:IOption) => selection.some(o => o?.value === option?.value); \r\n\r\n  /*const style: CSS.Properties = { \r\n    display: 'none', \r\n    position: 'absolute', \r\n    width: '100%', \r\n    zIndex: 1, \r\n  }*/\r\n\r\n  return <div className={'select-options'}  > \r\n    {options.map( option => { \r\n      const key = JSON.stringify(option.value); \r\n      const onClick = () => SelectValue(option.value); \r\n      const className = IsSelected(option) ? 'select-option-selected': 'select-option'; \r\n      return <div key={key} {...{onClick, className}} > \r\n        {option.label} \r\n      </div> \r\n    })}\r\n  </div>\r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx",["517","518","519","520","521","522"],"import React, { useContext, useEffect, useState } from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex, ElementValue} from '../../../reusable/_arrx'; \r\nimport {Input} from '../input/input.component'; \r\nimport {IInputArray, IUseInputArray, useInputArray} from './inputarray.hook'; \r\n\r\n\r\nexport const InputArrayContext = React.createContext({} as IUseInputArray); \r\nexport function InputArray({...props}:React.PropsWithChildren<IInputArray>) { \r\n  const context = useInputArray(props); \r\n  const {values} = props; \r\n  \r\n  return <InputArrayContext.Provider value={context} > \r\n    <Arrx {...{values}} > \r\n      <Elements> \r\n        <UpdateElement/> <DeleteBtn/>\r\n        <br/> \r\n      </Elements> \r\n      <CreateElement/>\r\n    </Arrx> \r\n  </InputArrayContext.Provider> \r\n} \r\n\r\n\r\n// Create element =======================================\r\nfunction CreateElement() { \r\n  const {ifield, Create} = useContext(InputArrayContext); \r\n  const {defaultValue} = ifield; \r\n  const [value, setValue] = useState(defaultValue); \r\n\r\n  const onPressEnter = () => { \r\n    Create(value); \r\n    setValue(defaultValue); // reset input to defaultValue after creation. \r\n  }; \r\n  return <Input {...{value, setValue, ifield, onPressEnter}}  /> \r\n} \r\n\r\n// Update element =======================================\r\nfunction UpdateElement() { \r\n  const {values, ifield, Update} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  const [value, setValue] = useState(values[index]); \r\n  \r\n  useEffect(() => { \r\n    setValue(values[index]); \r\n  }, [JSON.stringify(values[index])]); \r\n\r\n  const onPressEnter = () => Update(index, value); \r\n  return <Input {...{value, setValue, ifield, onPressEnter}}  /> \r\n}\r\n\r\n// Delete Btn ===================================\r\nexport function DeleteBtn({children, ...props}:React.PropsWithChildren<React.ButtonHTMLAttributes<HTMLButtonElement>>) { \r\n  const {Delete} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  return <button onClick={() => Delete(index)} {...props}> \r\n    {!children ? 'x' : children} \r\n  </button> \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx",["523","524"],"import {useEffect, useRef} from 'react'; \r\n\r\nexport function useUpdate(callback:() => void, changeling:any) { \r\n  const flagFirstRender = useRef(true); \r\n  \r\n  useEffect(() => { \r\n    if(flagFirstRender.current) { \r\n      flagFirstRender.current = false; \r\n      return; \r\n    } \r\n    callback(); \r\n  }, [JSON.stringify(changeling)]); \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx",["525","526"],"import React, { useState } from 'react'; \r\nimport {Reader, Editor, Select} from '../reusable/_input'; \r\nimport {GetValueAt, SetValueAt} from '../reusable/_utils'; \r\n\r\n\r\nconst numField:IField = {accessor:'num', label:'Accessor', type:'number', defaultValue:0, options:{}} as IField; \r\nconst strField:IField = {accessor:'str', label:'Accessor', type:'string', defaultValue:'', options:{}} as IField; \r\nconst boolField:IField = {accessor:'bool', label:'Accessor', type:'boolean', defaultValue:false, options:{}} as IField; \r\n\r\nconst numOptions:IOption[] = [ \r\n  {value: 0, label:'value 0'}, \r\n  {value: 1, label:'value 1'}, \r\n  {value: 2, label:'value 2'}, \r\n  {value: 3, label:'value 3'}, \r\n] \r\n\r\nconst strOptions:IOption[] = [ \r\n  {value: 'a', label:'value a'}, \r\n  {value: 'b', label:'value b'}, \r\n  {value: 'c', label:'value c'}, \r\n  {value: 'd', label:'value d'}, \r\n] \r\n\r\nconst boolOptions:IOption[] = [ \r\n  {value: false, label:'female'}, \r\n  {value: true, label:'male'}, \r\n] \r\n\r\nconst testRead:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n  {value: 12, ifield: {...numField}}, \r\n  {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n  {value: 'bababa', ifield:{...strField} }, \r\n  {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n  {value: false, ifield:{...boolField} }, \r\n  {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n  // options\r\n  {value: 2, ifield:{...numField}, options:numOptions }, \r\n  {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n  {value: 'b', ifield:{...strField}, options:strOptions}, \r\n  {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n  {value: false, ifield:{...boolField}, options:strOptions}, \r\n  {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n] \r\n\r\n  /*const testEditor:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n    {value: 12, ifield: {...numField}}, \r\n    {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n    {value: 'bababa', ifield:{...strField} }, \r\n    {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n    {value: false, ifield:{...boolField} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n    // options\r\n    {value: 2, ifield:{...numField}, options:numOptions }, \r\n    {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n    {value: 'b', ifield:{...strField}, options:strOptions}, \r\n    {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n    {value: false, ifield:{...boolField, options:strOptions} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n  ] */\r\n\r\n/*\r\nfunction useStateAt(_value:any) { \r\n  const [value, setValue] = useState(_value); \r\n  const ValueAt = (keys?:any[], newValue?:any) => { \r\n    if(newValue && JSON.stringify(ValueAt(keys)) !== newValue) \r\n      return SetValueAt(value, newValue, keys); \r\n    return GetValueAt(value, keys); \r\n  } \r\n  return ValueAt; \r\n} \r\n  \r\nexport function TestValueAt() { \r\n  const VALUE = {a:[15,46], b:[96,45]} \r\n  const valueAt = useStateAt(VALUE); \r\n  const value = valueAt(['a',0]); \r\n  const setValue = valueAt(['a',0]); \r\n\r\n  return <div> \r\n    <Editor {...{value}} /> \r\n  </div> \r\n} */\r\n\r\n\r\n// Test select when value is not in the avaible options */ \r\nexport function TestSelect () { \r\n  const [value, setValue] = useState(['-1']); \r\n  const options = [ \r\n    {value:'0', label:'option 0'}, \r\n    {value:'1', label:'option 1'}, \r\n    {value:'2', label:'option 2'}, \r\n    {value:'3', label:'option 3'} \r\n  ] \r\n\r\n  return <Select {...{value, setValue, options, multiple:true}} /> \r\n} \r\n\r\nexport function TestEditors() {\r\n  \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <TestEditor {...e} /></div> \r\n    })} \r\n    <br/>\r\n    asdsadsadas\r\n    <br/>\r\n  </div> \r\n}\r\n\r\n\r\nexport function TestEditor({ifield, options, ...props}:{value:any, ifield:IField, options?:IOption[]}) { \r\n  const [value, setValue] = useState(props.value); \r\n  return <div> \r\n    <div>{JSON.stringify(value)}</div> \r\n    <Editor {...{ifield, value, setValue, options}} /> \r\n    <br/>\r\n  </div>\r\n}\r\n\r\n\r\nexport function TestReader() { \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <Reader {...e} /></div> \r\n    })} \r\n  </div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\testrender.tsx",["527","528"],"import {useState} from 'react'; \r\nimport {Reader, IReader, Editor, IEditor} from '../../reusable/_input'; \r\n\r\n\r\nconst stringField = {accessor:'', label:'', defaultValue:'', type:'string'} as IField; \r\nconst numField = {accessor:'', label:'', defaultValue:0, type:'number'} as IField; \r\nconst boolField = {accessor:'', label:'', defaultValue:false, type:'boolean'} as IField; \r\n\r\n// Options\r\nconst stringOptions = [ \r\n  {value:'a', label:'option 0'}, \r\n  {value:'b', label:'option 1'}, \r\n  {value:'c', label:'option 2'} \r\n] as IOption[]; \r\n\r\nconst numOptions = [ \r\n  {value:0, label:'option 0'}, \r\n  {value:1, label:'option 1'}, \r\n  {value:2, label:'option 2'} \r\n] as IOption[]; \r\n\r\n\r\n\r\n// One String \r\nconst strOne:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined string', args:{ifield: stringField, value:undefined}}, // undefined string \r\n  {label: 'Empty string', args:{ifield: stringField, value:''}}, // empty string \r\n  {label: 'Correct string', args:{ifield: stringField, value:'baba'}}, // none empty string \r\n]\r\n\r\n// One option String\r\nconst strOneOptions:{label:string, args:IReader}[] = [\r\n  \r\n  {label: 'Undefined string option', args:{ifield: stringField, value:undefined, options:stringOptions}}, // undefined string \r\n  {label: 'Empty string option', args:{ifield: stringField, value:''}}, // empty string \r\n  {label: 'a string option', args:{ifield: stringField, value:'a', options:stringOptions}}, // some string\r\n  {label: 'b string option', args:{ifield: stringField, value:'b', options:stringOptions}}, // some string\r\n]\r\n\r\n\r\n// Many String \r\nconst strMany:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined string[]', args:{ifield:{...stringField, isArray:true}, value:undefined}},  // undefined string[] \r\n  {label: 'Empty string[]', args:{ifield:{...stringField, isArray:true}, value:[]}},  // empty string[] \r\n  {label: 'Single string[]', args:{ifield:{...stringField, isArray:true}, value:['dada']}},  // one correct string[] \r\n  {label: 'Many string[]', args:{ifield:{...stringField, isArray:true}, value:['dada', 'fafa', 'gaga']}},  // many correct string[] \r\n]\r\n\r\n  // Many options String \r\nconst strManyOptions:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined option string[]', args:{ifield:{...stringField, isArray:true}, value:undefined, options:stringOptions}},  // undefined string[] \r\n  {label: 'Empty option string[]', args:{ifield:{...stringField, isArray:true}, value:[], options:stringOptions}},  // empty string[] \r\n  {label: 'One string[]', args:{ifield:{...stringField, isArray:true}, value:['a'], options:stringOptions}},  // one correct string[] \r\n  {label: 'Incorrect option string[]', args:{ifield:{...stringField, isArray:true}, value:['babaa'], options:stringOptions}},  // one incorrect string[] \r\n  {label: 'Many options string[]', args:{ifield:{...stringField, isArray:true}, value:['c', 'b', 'a'], options:stringOptions}},  // many correct string[] \r\n]\r\n\r\nconst numOne:{label:string, args:IReader}[] = [\r\n  // One Number \r\n  {label: 'Undefined number', args:{ifield: numField, value:undefined}}, // undefined number \r\n  {label: 'Number zero', args:{ifield: numField, value:0}}, // zero number \r\n  {label: 'Number 12', args:{ifield: numField, value:12}}, // some number \r\n]\r\n\r\n// One options number \r\nconst numOneOptions:{label:string, args:IReader}[] = [  \r\n  {label: 'Undefined number[] option', args:{ifield: numField, value:undefined, options:numOptions}}, // undefined number \r\n  {label: 'Zero options string[] option', args:{ifield: numField, value:0, options:numOptions}}, // zero number \r\n  {label: 'Correct string[] option', args:{ifield: numField, value:2, options:numOptions}}, // zero number \r\n  {label: 'Incorrect string[] option', args:{ifield: numField, value:12, options:numOptions}}, // incorrect options value\r\n]\r\n\r\n// Many Number\r\nconst numMany:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined number[]', args:{ifield:{...numField, isArray:true}, value:undefined}},  // undefined number[] \r\n  {label: 'Empty number[]', args:{ifield:{...numField, isArray:true}, value:[]}},  // empty number[] \r\n  {label: 'Single number[]', args:{ifield:{...numField, isArray:true}, value:[2]}},  // single correct number[] \r\n  {label: 'Many number[]', args:{ifield:{...numField, isArray:true}, value:[1, 2, 0]}},  // many correct number[] \r\n]\r\n  // Many options Number\r\nconst numManyOptions:{label:string, args:IReader}[] = [\r\n  {label: 'Undefined option number[]', args:{ifield:{...numField, isArray:true}, value:undefined, options:numOptions}},  // undefined number[] \r\n  {label: 'Empty option number[]', args:{ifield:{...numField, isArray:true}, value:[], options:numOptions}},  // empty number[] \r\n  {label: 'Single option number[]', args:{ifield:{...numField, isArray:true}, value:[2], options:numOptions}},  // single correct number[] \r\n  {label: 'Many option number[]', args:{ifield:{...numField, isArray:true}, value:[1, 2, 0], options:numOptions}},  // many correct number[] \r\n  {label: 'Single incorrect number[]', args:{ifield:{...numField, isArray:true}, value:[12], options:numOptions}},  // incorrect number[] \r\n]\r\n\r\n\r\nexport function ReaderFuncSpecial({ifield, value}:IReader) { \r\n  return <div>SPECIAL :{JSON.stringify(value)}</div> \r\n} \r\n\r\nexport function TestReader() { \r\n  const strs = [...strOne, ...strOneOptions, ...strMany, ...strManyOptions]; \r\n  const nums = [...numOne, ...numOneOptions, ...numMany, ...numManyOptions]; \r\n\r\n  return <div> \r\n    <h3>Strings</h3> \r\n    {strs.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <Reader {...{...args}} /><br/></div> \r\n    })} \r\n\r\n    <h3>Numbers </h3>\r\n    {nums.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <Reader {...args} /><br/></div> \r\n    })} \r\n    </div> \r\n} \r\n\r\n\r\nexport function TestEditors() { \r\n  return <div>\r\n    <h3>Strings </h3>\r\n    {strOne.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <TestEditor {...args} /><br/></div>\r\n    })} \r\n\r\n    <h3>Numbers </h3>\r\n    {numOne.map( (arg, i) => { \r\n      const {label, args} = arg; \r\n      return <div key={i}>{label}: <TestEditor {...args} /><br/></div>\r\n    })} \r\n    </div> \r\n} \r\n\r\n\r\nexport function TestEditor({...args}:IReader) { \r\n  const [value, setValue] = useState(args.value); \r\n  const {ifield, options} = args; \r\n  return <div>\r\n    {value} :\r\n    <Editor {...{value, setValue, ifield, options}} /> \r\n  </div>\r\n} ",["529","530"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testarray\\testarrayutils.experiment.tsx",["531","532","533","534","535","536","537","538","539","540","541","542","543","544"],"import React from 'react'; \r\nimport {Comparator, Predicate, Sorter, Pick, ToArray, Intersect, Filter, Union, Groups, Group, Sort} \r\n  from '../../reusable/_arrayutils'; \r\nimport {IsEmpty, IsNull} from '../../reusable/_utils'; \r\n\r\n\r\n\r\nconst nul = undefined; \r\nconst empty:any[] = []; \r\nconst nums = [5, 3, 7, 9, 6, 7, 8]; \r\nconst strs = ['a', 'bf', 'hf', 'l']; \r\n\r\ntype ObjId = {id:string}; \r\nconst objs = [\r\n  {id:'b'}, \r\n  {id:'c'}, \r\n  {id:'d'}, \r\n  {id:'c'}, \r\n  {id:'d'}, \r\n  {id:'a'},\r\n  {id:'c'}, \r\n  {id:'d'}, \r\n  {id:'a'}\r\n]; \r\ntype ObjIdNumStr = {id:string, num:number, str:string}; \r\nconst objIdVal:ObjIdNumStr[] = [ \r\n  {id:'a', num:1, str: 'b'}, \r\n  {id:'a', num:2, str: 'f'}, \r\n  {id:'c', num:1, str: 'g'}, \r\n  {id:'a', num:3, str: 'l'}, \r\n  {id:'c', num:2, str: 'f'}, \r\n  {id:'a', num:3, str: 'l'}, \r\n  {id:'c', num:1, str: 'd'}, \r\n]; \r\n\r\n\r\n// Test Util ==================================== \r\nexport function TestArrayUtil() { \r\n  /*\r\n    <TestFilters/> \r\n    <TestSorts/> \r\n  */\r\n  return <div> \r\n\r\n    <TestGroups /> \r\n  </div> \r\n} \r\n\r\n\r\n// GROUP ==================================================\r\nfunction TestGroups() { \r\n  const indexes:number[][] = []; \r\n\r\n  const groupOf3 = (v:any, As:any[], Bs:any[], Cs:any[]) => { \r\n    const result = As.length < 3; \r\n    return result; \r\n  }\r\n  const groupById = (v:ObjId, As:ObjId[], Bs:ObjId[]) => { \r\n    const [pivot] = As; \r\n    const result = IsNull(pivot) || pivot.id === v.id; \r\n    return result; \r\n  } \r\n  \r\n  // <TestGroup {...{data:empty, predicate:groupById}} /> <br/>\r\n  // <TestGroup {...{data:objs, predicate:groupOf3}} /> <br/>\r\n  return <div> \r\n    <TestGroup {...{data:objs, predicate:groupById}} /> <br/>\r\n    \r\n  </div> \r\n} \r\n\r\n\r\nfunction TestGroup<T>({data = [], predicate}:{data:T[], predicate:Predicate<T>}) { \r\n  const groups = Group(data, predicate); \r\n\r\n  return <div> \r\n    <b>{JSON.stringify(predicate.name)}</b> <br/> \r\n    data: {JSON.stringify(data)} <br/> \r\n    {groups.map( (group,i) => { \r\n      return <div key={i}><span>{i}:</span> \r\n        {JSON.stringify(group)} \r\n      </div> \r\n    })} \r\n  </div> \r\n} \r\n\r\n\r\n\r\n\r\n\r\n// SORT =================================================== \r\nfunction TestSorts() { \r\n  const ascending = (t:any, pivot:any) => t > pivot; \r\n  const descending = (t:any, pivot:any) => t < pivot; \r\n\r\n  const ascendingId = (t:ObjId, pivot:ObjId) => t.id > pivot.id; \r\n  const descendingId = (t:ObjId, pivot:ObjId) => t.id < pivot.id; \r\n\r\n  return <div> \r\n    <TestSort {...{data:nums, sorter:ascending}} /> <br/> \r\n    <TestSort {...{data:nums, sorter:descending}} /> <br/> \r\n\r\n    <TestSort {...{data:strs, sorter:ascending}} /> <br/> \r\n    <TestSort {...{data:strs, sorter:descending}} /> <br/> \r\n\r\n    <TestSort {...{data:objs, sorter:ascendingId}} /> <br/> \r\n    <TestSort {...{data:objs, sorter:descendingId}} /> <br/> \r\n  </div> \r\n} \r\n\r\nfunction TestSort<T>({data, sorter}:{data:T[], sorter:Sorter<T>}) { \r\n  const sorted = Sort(data, sorter); \r\n\r\n  return <div>\r\n    <b>{JSON.stringify(sorter.name)}</b> <br/> \r\n    <div>Unsorted: {JSON.stringify(data)}</div> \r\n    <div>Sorted: {JSON.stringify(sorted)}</div> \r\n  </div>\r\n}\r\n\r\n\r\n// Filter ================================================= \r\nfunction TestFilters() { \r\n  const even = (value:number) => value % 2 === 0; \r\n  const half = (v:any, a:any[], b:any[], c:any[]) => a.length < b.length; \r\n  const first4 = (v:any, a:any[], b:any[], c:any[]) => a.length < 4; \r\n  const last4 = (v:any, a:any[], b:any[], c:any[]) => c.length < 4; \r\n  const duplicate = (v:any, As:any[], Bs:any[], Cs:any[]) => { \r\n    return As.some( a => a === v ) || Cs.some( c => c === v); \r\n  } \r\n  const idC = (v:ObjId) => v.id === 'c'; \r\n  const duplicateId = (v:ObjId, As:ObjId[], Bs:ObjId[], Cs:ObjId[]) => { \r\n    return As.some( a => a.id === v.id ) || Cs.some( c => c.id === v.id); \r\n  } \r\n\r\n  return <div>\r\n    <TestFilter {...{data:strs, predicate:half}}/> <br/> \r\n    <TestFilter {...{data:nums, predicate:duplicate}}/> <br/> \r\n    <TestFilter {...{data:objs, predicate:duplicateId}}/> <br/> \r\n\r\n    <TestFilter {...{data:objs, predicate:idC}}/> <br/> \r\n\r\n    <TestFilter {...{data:nums, predicate:even}}/> <br/> \r\n    <TestFilter {...{data:nums, predicate:half}}/> <br/> \r\n    <TestFilter {...{data:nums, predicate:first4}}/> <br/> \r\n    <TestFilter {...{data:nums, predicate:last4}}/> <br/> \r\n  </div>\r\n}\r\n\r\nfunction TestFilter<T>({data, predicate}:{data:T[], predicate:Predicate<T>}) { \r\n  const [positive, negative] = Filter(data, predicate); \r\n\r\n  return <div> \r\n    {JSON.stringify(predicate.name)} <br/> \r\n    data: {JSON.stringify(data)} <br/> \r\n    positive: {JSON.stringify(positive)} <br/> \r\n    negative: {JSON.stringify(negative)} <br/> \r\n  </div> \r\n}\r\n\r\n",["545","546"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\value.utils.ts",["547","548"],"/* Copy ========================================= \r\nreturn a shallow copy of a value \r\nif that value is either an array or an object\r\n\r\notherwise return the value itself. \r\n*/\r\nexport function Copy(value:any) { \r\n  if(Array.isArray(value)) \r\n    return [...value] \r\n  if(typeof value === 'object') \r\n    return {...value} \r\n  return value; \r\n} \r\n\r\n\r\n/* HasKey =========================================\r\nRecursively search through 'value' to find the nested keys specified in keys. \r\nReturns false if it fails to find one of the keys. \r\nReturn true if it find all of the keys. \r\n\r\n!!! Note: Works for both objects and arrays. \r\n*/ \r\nexport function HasKey(value:any, keys?:any[]):boolean { \r\n  if(IsEmpty(value) || !keys || IsEmpty(keys)) \r\n    return false; \r\n  const [key, ...remainingKeys] = keys; \r\n  const _key = typeof key === 'string' ? key: new Number(key).toString(); \r\n  if(!Object.keys(value).includes(_key) ) \r\n    return false; \r\n  if(IsEmpty(remainingKeys)) \r\n    return true; \r\n  return HasKey(value[_key], remainingKeys); \r\n}\r\n\r\n\r\n/* SetValueAt =====================================\r\nAssign a newValue in object or array value at the index/key defined by keys. \r\nCan assign a newValue to object with multiple levels. \r\n*/\r\nexport function SetValueAt(value:any, newValue:any, keys?:any[]):any { \r\n  if(!keys || IsEmpty(keys)) \r\n    return newValue; \r\n  const [key, ...remainingKeys] = keys; \r\n  const copy = Copy(value); \r\n  copy[key] = IsEmpty(remainingKeys) ? \r\n    copy[key] = newValue: \r\n    copy[key] = SetValueAt(copy[key], newValue, remainingKeys); \r\n  return copy; \r\n} \r\n\r\n/* GetValueAt ========================================\r\nReturn value specified at 'keys' \r\n*/\r\nexport function GetValueAt(value:any, keys?:any[]):any { \r\n  if(IsEmpty(value) || !keys || IsEmpty(keys)) \r\n    return value; \r\n  const [key, ...remainingKeys] = keys; \r\n  return GetValueAt(value[key], remainingKeys); \r\n} \r\n\r\n\r\n/* IsNUll =======================================\r\nreturns true if value is:\r\n  - undefined\r\n  - null\r\notherwise returns false\r\n*/\r\nexport function IsNull(value:any): boolean { \r\n  return (value ?? null) === null || IsNaN(value); \r\n} \r\n\r\nexport function IsNaN(value:any): boolean { \r\n  return typeof value === 'number' && new Number(value).toString() === 'NaN'; \r\n}\r\n\r\n/* IsEmpty ====================================== \r\nreturn true if value is \r\n  - undefined\r\n  - null\r\n  - '' (an empty string)\r\n  - [] (an empty array)\r\n  - {} (an empty object)\r\notherwise returns false\r\n*/\r\nexport function IsEmpty(value:any): boolean {\r\n  if(IsNull(value)) \r\n    return true; \r\n  if(Array.isArray(value) && value.length === 0) \r\n    return true; \r\n  if(JSON.stringify(value) === '{}') \r\n    return true; \r\n  if(value === '') \r\n    return true; \r\n  return false; \r\n}\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrayutils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\editor.component.tsx",["549","550"],"import React, {useEffect, useState} from 'react'; \r\nimport {GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\nimport {ToArray, Pick} from '../../_arrayutils'; \r\nimport {Input, InputArray} from '../../_input'; \r\nimport {Select} from '../../_input'; \r\n\r\nimport {IReader} from './reader.component'; \r\nimport { useUpdate } from '../../_customhooks'; \r\n\r\n\r\n\r\nexport interface IEditor extends IReader { \r\n  //setValue: React.Dispatch<React.SetStateAction<any>>; \r\n  setValue: (newValue:any) => void; \r\n} \r\n\r\ntype EditorFunc = ({...props}:IEditor) => JSX.Element; \r\n\r\nexport interface IEditorComponent extends IEditor { \r\n  CustomEditDefault?:EditorFunc; \r\n\r\n  CustomEditOne?:EditorFunc; \r\n  CustomEditMany?:EditorFunc; \r\n\r\n  CustomEditOneOptions?:EditorFunc; \r\n  CustomEditManyOptions?:EditorFunc; \r\n\r\n  CustomEditMixed?:EditorFunc; \r\n} \r\n\r\n/* EDITOR ===========================================================\r\n- ifield      // gives info about the type and default values to be displayed. \r\n- value       // will be assigned to its appropriate default values if undefined. \r\n- options     // if not empty, the label matching the value will be displayed. \r\n- setValue    // hooks with parent component value. \r\n\r\n- CustomEditDefault : if defined this function will be used display value. \r\n\r\n- CustomEditOne : if defined is used to display value, otherwise uses 'EditOne' (Input) \r\n\r\n- CustomEditMany : if defined is used to display value, otherwise uses 'EditMany' (Input array) \r\n\r\n- CustomEditOneOptions : if defined is used to display value, otherwise uses 'EditOneOptions' (Select with multiple:false) \r\n\r\n- CustomEditOneOptions : if defined is used to display value, otherwise uses 'EditManyOptions' (Select with multiple:true) \r\n\r\n- CustomEditMixed : if defined is use to display value, otherwise uses 'EditMixed' (EditMixed) \r\n*/ \r\nexport function Editor({ifield, options, ...props}:IEditorComponent) { \r\n  const _value = IsEmpty(options) ? \r\n    props.value ?? GetDefaultValueFromIField(ifield): \r\n    GetSelection(props.value).map(o => o.value); \r\n  \r\n  const [value, setValue] = useState(_value); \r\n  \r\n  // synchronize from parent value\r\n  useEffect(() => { \r\n    if(value !== _value) \r\n      props.setValue(value); \r\n  }, [value]); \r\n\r\n  // synchronize to parent value \r\n  //useUpdate(() => {props.setValue(_value)},_value); \r\n\r\n  function GetSelection (value:any) { \r\n    return Pick(options, ToArray(props.value), (o,u) => o.value === u); \r\n  } \r\n\r\n  const args = {ifield, value, setValue, options}; \r\n  const hasOptions = !IsEmpty(options); \r\n\r\n  // Edit Default\r\n  let editfunc = props.CustomEditDefault ?? undefined; \r\n\r\n  // Edit Many options\r\n  if(!editfunc && ifield.isArray && hasOptions) \r\n    editfunc = props.CustomEditManyOptions ?? EditManyOptions; \r\n\r\n  // Edit Many\r\n  if(!editfunc && ifield.isArray && !hasOptions) \r\n    editfunc = props.CustomEditMany ?? EditMany; \r\n\r\n  // Edit Mixed\r\n  if(!editfunc && ifield.isMixed) \r\n    editfunc = props.CustomEditMixed ?? EditMixed; \r\n\r\n  // Edit One option\r\n  if(!editfunc && hasOptions) \r\n    editfunc = props.CustomEditOneOptions ?? EditOneOptions; \r\n  // Edit One\r\n  editfunc = editfunc ?? props.CustomEditOne ?? EditOne; \r\n\r\n  return <EditFunc {...{editfunc, args}} /> \r\n} \r\n\r\n\r\nfunction EditFunc({...props}:{editfunc:EditorFunc, args:IEditor}) { \r\n  return <props.editfunc {...props.args} />; \r\n} \r\n\r\n\r\nfunction EditOne({...args}:IEditor) { \r\n  return <Input {...args} /> \r\n}\r\n\r\nfunction EditMany({value, setValue, ifield}:IEditor) { \r\n  return <InputArray {...{ifield, values:value, setValues:setValue}} /> \r\n}\r\n\r\nfunction EditOneOptions({ifield, value, setValue, ...props}:IEditor) { \r\n  const options = props.options ?? [] as IOption[]; \r\n  return <Select {...{ifield, value, setValue, options}  } /> \r\n} \r\n\r\nfunction EditManyOptions({...props}:IEditor) { \r\n  const options = props.options ?? [] as IOption[]; \r\n  return <Select {...{...props, options} } /> \r\n} \r\n\r\nfunction EditMixed({ifield, value, options, setValue}:IEditor) {\r\n  return <div>{JSON.stringify(value)}</div> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\renderer\\reader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testLoader\\testLoader.tsx",["551"],"import {useEffect} from 'react'; \r\nimport {useLoader} from '../../reusable/customhooks/useloader.hook';\r\nimport {ICrud, DAO} from '../../reusable/_dao'; \r\nimport {Fetcher} from '../../reusable/_mongooseparser'; \r\n\r\nconst baseUrl = `https://fjg-mongoose-heroku.herokuapp.com/api/`; \r\n\r\nconst dao = new DAO(new Fetcher(baseUrl) as ICrud); \r\n\r\n\r\nexport function TestLoader() { \r\n  const {state, Load} = useLoader(); \r\n  \r\n\r\n  async function LoadFunc() { \r\n    await dao.Collections(['patients']) as ICrudResponse[]; \r\n  } \r\n\r\n  useEffect(() => { \r\n    Load(() => LoadFunc()); \r\n  }, []); \r\n\r\n  return <div>\r\n    TestLoader\r\n      <div>State-busy {JSON.stringify(state.busy)}</div> \r\n      <div>State-success {JSON.stringify(state.success)}</div> \r\n    </div>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\preloader.component.tsx",["552"],"import {useContext, useEffect} from 'react'; \r\nimport { DaoContext } from '../reusable/_dao'; \r\nimport { useLoader } from '../reusable/_customhooks'; \r\n\r\n\r\n// Preloader ==============================================\r\nexport function PreloadCollection () { \r\n  const ready = usePreloadCollections(); \r\n  return <div> \r\n    Preloading : {JSON.stringify(ready)} \r\n  </div> \r\n}\r\n\r\n\r\nexport function usePreloadCollections() { \r\n  const {Collections} = useContext(DaoContext); \r\n  const accessors = ['questions','responses', 'answers', 'forms', 'instructions', 'patients', 'appointments']; \r\n  const callback = (res:any) => {}; \r\n  const {state, Load} = useLoader(); \r\n\r\n  useEffect(() => { \r\n    Load( () => Collections(accessors), callback); \r\n  }, []); \r\n\r\n  return state.success; \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_session.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useGetSet.hook.tsx",["553","554"],"import {useState, useEffect} from 'react'; \r\nimport {GetValueAt, SetValueAt} from '../_utils'; \r\n\r\n\r\ninterface IUseStateAt { \r\n  getValueAt: (keys:string[]) => any; \r\n  setValueAt: (keys:string[]) => (newValue:any) => any; \r\n}\r\n\r\nexport function useStateAt(Value:any) { \r\n  const [value, setValue] = useState(Value); \r\n\r\n  const getValueAt = (keys?:string[]) => GetValueAt(value, keys); \r\n  \r\n  //type arg = T | ((prevState: T) => T); \r\n  const setValueAt = (keys?:string[]) => { \r\n    return (newValue:any) => { \r\n      setValue((prev:any) => { \r\n        return SetValueAt(prev, newValue, keys); \r\n      }); \r\n    } \r\n  }\r\n  return {getValueAt, setValueAt}; \r\n}\r\n\r\n\r\ninterface IUseGetSet { \r\n  value: any; \r\n  setValue: React.Dispatch<React.SetStateAction<any>>; \r\n  accessor: string; \r\n} \r\n\r\nexport function useGetSet(Value:any, SetValue:React.Dispatch<React.SetStateAction<any>>, accessor:string):IUseGetSet { \r\n  const [value, setValue] = useState(GetValueAt(Value, [accessor])); \r\n\r\n  useEffect(() => { \r\n    const prev = GetValueAt(Value, [accessor]); \r\n    if(JSON.stringify(prev) !== JSON.stringify(value)) { \r\n      SetValue((prev:any) => { \r\n        return SetValueAt(prev, value, [accessor]); \r\n      }); \r\n    } \r\n  }, [value]) \r\n\r\n  return {value, setValue, accessor}; \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objset\\objset.component.tsx",["555","556","557","558"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport { IsEmpty, SetValueAt } from '../../utils/value.utils';\r\nimport { GetValueAt } from '../../_utils';\r\n\r\n\r\nexport interface IObjx { \r\n  value:any; \r\n} \r\n\r\nexport const ObjxContext = React.createContext({} as IObjx); \r\nexport const KeysContext = React.createContext({} as {keys: IKeys}); \r\nexport const KeyContext = React.createContext({} as {k: number|string}); \r\n\r\n// ARRX =========================================\r\nexport function Objx({value, children}:React.PropsWithChildren<IObjx>) { \r\n  return <ObjxContext.Provider value={{value}} > \r\n    {children} \r\n  </ObjxContext.Provider> \r\n} \r\n\r\ntype IKeys = (number|string)[][]; \r\n\r\nexport function Keys({keys, children}:React.PropsWithChildren<{keys:IKeys}>) { \r\n  const {value} = useContext(ObjxContext); \r\n  const [firstKeys, ...remaining] = keys; \r\n\r\n  if(!IsEmpty(remaining)) { \r\n    return <KeysContext.Provider value={{keys:[firstKeys] as IKeys}}> \r\n      {firstKeys.map( k => { \r\n        const _value = value[k]; \r\n        return <Objx key={k} value={_value}> \r\n          <Keys keys={remaining}>{children}</Keys> \r\n        </Objx> \r\n      })} \r\n    </KeysContext.Provider> \r\n  } \r\n\r\n  return <KeysContext.Provider value={{keys:[firstKeys] as IKeys}}> \r\n    {firstKeys.map( k => {       \r\n      return <KeyContext.Provider key={k} value={{k}}> \r\n        {children} \r\n      </KeyContext.Provider> \r\n    })} \r\n  </KeysContext.Provider> \r\n} \r\n\r\n\r\ninterface IKey { \r\n  k: number|string; \r\n} \r\nexport function Key({k, children}:React.PropsWithChildren<IKey>) { \r\n  return <KeyContext.Provider value={{k}}> \r\n    {children} \r\n  </KeyContext.Provider> \r\n} \r\n\r\nexport function Label() { \r\n  const {k} = useContext(KeyContext); \r\n  return <span>{k}: </span> \r\n} \r\n\r\nexport function Value() { \r\n  const {value} = useContext(ObjxContext); \r\n  const {k} = useContext(KeyContext); \r\n  return <span>{value[k]}</span> \r\n} \r\n\r\nexport function Test() { \r\n  const obj = [ \r\n    {a:12, b:'as'}, \r\n    {a:13, b:'bs'}\r\n  ]\r\n  return <Objx value={obj}> \r\n    <Keys keys={[[0, 1], ['a','b']]} > \r\n      <Label/><Value/> <br/>\r\n    </Keys> \r\n  </Objx> \r\n} \r\n\r\n\r\n/*\r\nexport function ElementEdit({...props}:{setValue:React.Dispatch<React.SetStateAction<any>> }) { \r\n  const {value:_value} = useContext(ObjxContext); \r\n  const {k} = useContext(ElementContext); \r\n  const [value, setValue] = useState(GetValueAt(_value, [k])); \r\n\r\n  useEffect(() => { \r\n    const prev = GetValueAt(_value, [k]); \r\n    if(JSON.stringify(prev) !== JSON.stringify(value)) { \r\n      props.setValue((prev:any) => { \r\n        return SetValueAt(prev, value, [k]); \r\n      }); \r\n    } \r\n  }, [value]) \r\n\r\n  return <TestEditor {...{k, value, setValue}} /> \r\n} \r\n\r\ninterface ITestEditor {\r\n  k:string|number, \r\n  value:any, \r\n  setValue:React.Dispatch<React.SetStateAction<any>>\r\n}\r\n\r\nfunction TestEditor({k, value, setValue}:ITestEditor) { \r\n  return <div>\r\n    {k} : {value} <br/> \r\n    <button onClick={() => setValue((prev:any) => { \r\n      return prev + prev; \r\n    })} >Increment</button> \r\n  </div>\r\n}\r\n\r\n\r\nexport function Test() { \r\n  const obj = {a:12, b:'adas'}; \r\n  const [value, setValue] = useState(obj); \r\n\r\n  return <Objx {...{value, keys:['a', 'b']}} > \r\n    <ElementEdit {...{setValue}}/> \r\n  </Objx> \r\n}\r\n*/",["559","560"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\field.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\date.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_customhooks.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.contexter.tsx",["561","562"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\session\\usesession.hook.ts",["563"],"import { useEffect, useState } from 'react';\r\nimport { GetValueAt, SetValueAt } from '../../_utils';\r\nimport {Session} from './session.class'; \r\n\r\n\r\ntype Keys = any[]; \r\n\r\nexport interface IUseSession { \r\n  Get: (keys?:Keys) => any; \r\n  Set: (newValue: any, keys?:Keys) => void; \r\n  Reset: () => void; \r\n  End: () => void; \r\n} \r\n\r\n// UseSession =============================================\r\nexport function useSession(sessionName:string, value?:any):IUseSession { \r\n  const _value = Session.Exists(sessionName) ? Session.Get(sessionName): value;\r\n  const [session, setSession] = useState(_value); \r\n\r\n  function Reset() { \r\n    Set(value); \r\n  } \r\n\r\n  function Get(keys?:string[]) { \r\n    if(!Session.Exists(sessionName)) \r\n      Session.Set(sessionName, session); \r\n    return GetValueAt(session, keys); \r\n  } \r\n\r\n  function Set(newValue:any, keys?:string[]) { \r\n    if(IsChanging(newValue, keys)) \r\n      setSession((prev:any) => { \r\n        const newSession = SetValueAt(prev, newValue, keys); \r\n        Session.Set(sessionName, newSession); \r\n        return newSession; \r\n      }) \r\n  } \r\n\r\n  function End() { \r\n    Session.EndSession(sessionName); \r\n    setSession(undefined) \r\n  } \r\n\r\n  function IsChanging(newValue:any, keys?:string[]) { \r\n    const prev = GetValueAt(session, keys); \r\n    return JSON.stringify(prev) !== JSON.stringify(newValue); \r\n  }\r\n  \r\n  return {Get, Set, Reset, End}; \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usecolumnsetting.hook.tsx",["564"],"import {useMemo, useState} from 'react'; \r\n\r\n\r\n\r\n// Use Column Setting =========================== \r\nexport function useColumnSetting(ifields:IField[]) { \r\n  const memIfields = useMemo(() => ifields, []); \r\n  const [cols, setCols] = useState(ifields); \r\n\r\n  // TEMPORARY\r\n  function OrderFields(ifields:string[]) { \r\n    const ordered:IField[] = []; \r\n    ifields.forEach( f => { \r\n      const found = memIfields.find(mf => mf.accessor === f); \r\n      if(found) \r\n        ordered.push(found); \r\n    }) \r\n    setCols(ordered); \r\n  } \r\n  return {memIfields, cols, OrderFields}; \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\session\\session.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usestateat.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx",["565","566","567","568","569"],"import React, { useContext, useState } from 'react'; \r\nimport { Editor, Reader } from '../../../reusable/_input'; \r\nimport { IsEmpty, GetValueAt } from '../../../reusable/_utils'; \r\nimport { PatientContext } from '../patient.page'; \r\n\r\nimport { DaoContext } from '../../../reusable/_dao'; \r\nimport { useStateAt } from '../../../reusable/_customhooks';\r\n\r\n\r\n\r\nexport function PatientProfile() { \r\n  const {GetIFields} = useContext(DaoContext); \r\n  const {profile, CreateUpdateProfile} = useContext(PatientContext); \r\n  const [ramqIField, firstNameField, lastNameField] = GetIFields('patients', ['ramq', 'firstName', 'lastName']); \r\n  const btnLabel = !IsEmpty(profile._id) ? \r\n    'Update patient profile': \r\n    'Create new patient profile'; \r\n  \r\n  const [Get, Set] = useStateAt(profile); \r\n  const {ramq, firstName, lastName} = CollectArgs(['ramq', 'firstName', 'lastName'], Get, Set); \r\n  \r\n\r\n  return <div> \r\n    <h1>Patient profile</h1> \r\n    <div>\r\n      <label>Ramq:</label><Reader {...ramq}/> <br/>\r\n      <label>First name:</label><Editor {...firstName}/> <br/>\r\n      <label>Last name:</label><Editor {...lastName}/> <br/>\r\n    </div> \r\n    <button onClick={() => CreateUpdateProfile(Get())}>{btnLabel}</button> \r\n  </div> \r\n}\r\n\r\n\r\n\r\nfunction CollectArgs( \r\n    fieldAccessors: string[], \r\n    Get: (keys?: TKey[] | undefined) => any, \r\n    Set?: (newValue: any, keys?: TKey[] | undefined) => void) \r\n{ \r\n  const {GetIFields, GetIOptions} = useContext(DaoContext); \r\n  const ifields = GetIFields('patients', fieldAccessors); \r\n  let args:any = {}; \r\n  ifields.forEach( ifield => { \r\n    const value = Get([ifield.accessor]); \r\n    const setValue = Set ? (newValue:any) => Set(newValue, [ifield.accessor]): undefined; \r\n    const options = GetIOptions(ifield); \r\n    args[ifield.accessor] = {ifield, value, setValue, options}; \r\n  }); \r\n  return args; \r\n}\r\n\r\n\r\n\r\n// export function PatientProfile() { \r\n//   console.log('patient profile'); \r\n//   const {GetIFields} = useContext(DaoContext); \r\n//   const {profile, CreateUpdateProfile} = useContext(PatientContext); \r\n//   const [ramqIField, ...ifields] = GetIFields('patients', ['ramq', 'firstName', 'lastName']); \r\n\r\n//   const [value, setValue] = useState(profile); \r\n\r\n//   const btnLabel = !IsEmpty(profile._id) ? \r\n//     'Update patient profile': \r\n//     'Create new patient profile'; \r\n\r\n//   return <div> \r\n//     <h2>Patient profile</h2> \r\n//     {JSON.stringify(value)} \r\n//     <Objx {...{value, ifields}} > \r\n//       <Field {...{ifield:ramqIField}} >\r\n//         <div><FieldLabel/><FieldReader {...{readerFunc:Reader}} /></div>\r\n//       </Field> \r\n//       <Fields {...{ifields}} > \r\n//         <div><FieldLabel/><FieldEditor {...{setValue, editorFunc:Editor}} /></div> \r\n//       </Fields> \r\n//     </Objx> \r\n//     <button onClick={() => CreateUpdateProfile(value)}>{btnLabel}</button>\r\n//   </div> \r\n// } \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentification.component.tsx",["570","571"],"import React, { useContext, useState } from 'react'; \r\nimport { Editor, Reader } from '../../../reusable/_input'; \r\nimport { PatientContext } from '../patient.page'; \r\n\r\nimport { DaoContext } from '../../../reusable/_dao'; \r\nimport { useStateAt } from '../../../reusable/_customhooks';\r\n\r\n\r\n\r\nexport function PatientIdentification () { \r\n  const {GetIFields, GetDefaultIEntry} = useContext(DaoContext); \r\n  const {RamqIsValid, IdentifyPatient} = useContext(PatientContext); \r\n  const [ifield] = GetIFields('patients', ['ramq']); \r\n\r\n  const [Get, Set] = useStateAt(GetDefaultIEntry('patients')); \r\n  const value = Get(['ramq']); \r\n  const setValue = (newValue:any) => Set(newValue, ['ramq']); \r\n\r\n  return <div> \r\n    <h1>Patient identification</h1> \r\n    <div>\r\n      <label>Ramq:</label><Editor {...{value, setValue, ifield}}/>\r\n      <span>{RamqIsValid(value) ? '✓' : 'x'}</span> \r\n    </div> \r\n    <button onClick={() => IdentifyPatient(value)}>Identify</button> \r\n  </div> \r\n}\r\n\r\n\r\n\r\n\r\n// Patient Identification \r\n/*export function PatientIdentification() { \r\n  const {GetIFields, GetDefaultIEntry} = useContext(DaoContext); \r\n  const {RamqIsValid, IdentifyPatient} = useContext(PatientContext); \r\n  const [ramqIField] = GetIFields('patients', ['ramq']); \r\n\r\n  const [value, setValue] = useState(GetDefaultIEntry('patients')); \r\n  const ramq = GetValueAt(value, [ramqIField.accessor]); \r\n\r\n  return <div> \r\n    <h2>Patient identification</h2> \r\n    {JSON.stringify(value)} \r\n    <Objx {...{value, ifields:[ramqIField]}} > \r\n      <Field {...{ifield:ramqIField}}> \r\n        <div> \r\n          <FieldLabel/><FieldEditor {...{setValue, editorFunc:Editor}} /> \r\n          <span>{RamqIsValid(ramq) ? '✓' : 'x'}</span> \r\n        </div> \r\n      </Field> \r\n    </Objx> \r\n    <button onClick={() => IdentifyPatient(ramq)}>Identify</button> \r\n  </div> \r\n}\r\n*/","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionpage.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionitem.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\pager.component.tsx",["572","573"],"import React, { useContext } from 'react'; \r\nimport {QuestionnnaireContext} from '../questionnaire.page'; \r\nimport {PageOfPages, PagerBtn, PagerFromTo} from '../../../reusable/_pager';\r\nimport { feedback } from '../../../components/feedback/feedback.component';\r\n\r\n\r\n// PAGER ==================================================\r\nexport function Pager() { \r\n  const {paging} = useContext(QuestionnnaireContext); \r\n\r\n  return <div> \r\n    <BtnSubmitAnswers/> <br/> \r\n    <PageOfPages {...{paging}}/> <br/> \r\n    <PagerFromTo {...{paging}}/> <br/> \r\n    <PagerBtn {...{paging}} /> <br/> \r\n  </div> \r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\n// Butonn Submit Answers =========================================\r\nexport function BtnSubmitAnswers() { \r\n  const {paging, AnswersAreComplete, SubmitQuestionnaire} = useContext(QuestionnnaireContext); \r\n  const {page, pageIndex, pages, setPageIndex} = paging; \r\n  const pageIsComplete = AnswersAreComplete(page.map(ia => ia.t)); \r\n  const formIsComplete = AnswersAreComplete(); \r\n\r\n  async function SubmitAnswersAndNextPage () { \r\n    \r\n  }\r\n\r\n  async function SubmitAnswersFinal() { \r\n    const responses = await SubmitQuestionnaire(); \r\n    if(responses.every( r => r.success )) \r\n      feedback.setValue(responses); // success \r\n    else \r\n      feedback.setValue(responses); // failure \r\n  }\r\n\r\n  return <div> \r\n    {formIsComplete ? \r\n      <button onClick={() => SubmitAnswersFinal()} disabled={!formIsComplete}>Submit</button>: \r\n      <button onClick={() => setPageIndex(pageIndex+1)} disabled={!pageIsComplete} >Next</button> \r\n    } \r\n  </div> \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_pager.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\pager\\pager.component.tsx",["574","575","576","577","578","579","580","581","582","583"],"import { IPageHook } from '../../../reusable/_customhooks'; \r\nimport {Filter, HeadMidTail} from '../../../reusable/_arrayutils';\r\nimport { IsNull } from '../../../reusable/_utils';\r\nimport {usePage} from '../../_customhooks'; \r\n\r\n\r\n\r\n/* Pager Btn\r\nDisplay buttons to change pages. \r\n*/\r\nexport function PagerBtn<T>({paging:{pageIndex, setPageIndex, page, pages}}:{paging:IPageHook<T>}) { \r\n  let indexes = pages.map( (p,i) => i); \r\n  if(indexes.length > 10) \r\n    indexes = AbbrevIndexes(pageIndex, indexes); \r\n\r\n  return <span> \r\n    {indexes.map( (index, i) => { \r\n      return <span key={index}> \r\n        <button onClick={() => setPageIndex(index)} disabled={index===pageIndex}>{index+1}</button> \r\n        {index + 1 !== indexes[i+1] && i < indexes.length-1 && '...'} \r\n      </span> \r\n    })} \r\n  </span> \r\n} \r\n\r\n/* Pager From To\r\nDisplay the range of element being represented on a given page. \r\n*/\r\nexport function PagerFromTo<T>({paging:{pageIndex, setPageIndex, page, pages}}:{paging:IPageHook<T>}) { \r\n  const indexes = page?.map(p=>p.i) ?? []; \r\n  let [from, a, mid, b, to] = HeadMidTail(indexes); \r\n  from = !IsNull(from) ? from+1: 0; \r\n  to = !IsNull(to) ? to+1: from; \r\n  //const indexes.length-1; \r\n  return <span> \r\n    {from === to ? \r\n      <span>Item #{from}</span>: \r\n      <span>Items #{from} to {to}</span>} \r\n  </span> \r\n} \r\n\r\n\r\n/* PageOfPages \r\nDisplay index the current page being display and the total number of pages. \r\n*/\r\nexport function PageOfPages<T>({paging:{pageIndex, setPageIndex, page, pages}}:{paging:IPageHook<T>}) { \r\n  return <span>Page {pageIndex+1} of {pages?.length ?? 0}</span> \r\n} \r\n\r\n\r\n\r\nfunction IndexesWindow(index:number, min:number, max:number, length:number) { \r\n  const window = []; \r\n  let i = index-2; \r\n  i = Math.min(i, max-length); \r\n  i = Math.max(i, min); \r\n  while(window.length < length && i >=min && i<max) { \r\n    window.push(i++); \r\n  } \r\n  return window; \r\n} \r\n\r\nfunction AbbrevIndexes(index:number, indexes:number[]) { \r\n  const window = IndexesWindow(index, 0, indexes.length-1, 5); \r\n  const [abbrev] = Filter(indexes, (i:number, positive:number[], negative:number[], remainder:number[]) => { \r\n    const t = Math.floor(indexes.length/5); \r\n    return [0, ...window, indexes.length-1].includes(i) || (i % t) === 0; \r\n  }) \r\n  return abbrev; \r\n}\r\n\r\nfunction AbbrevIndexes2(index:number, indexes:number[]) { \r\n  const [firstHalf, remainder] = Filter(indexes, (n:number, firstHalf:number[]) => firstHalf.length < index); \r\n  const [current, ...secondHalf] = remainder; \r\n\r\n  const [first, fistLeft, firstQuart, firstRight, prev] = HeadMidTail(firstHalf); \r\n  const [next, secondLeft, secondQuart, secondRight, last] = HeadMidTail(secondHalf); \r\n  \r\n  const abbrevIndexes = [ \r\n    first, first+1, firstQuart, \r\n    prev-1, prev, current, next, next+1, \r\n    secondQuart, last-1, last]; \r\n  const [abbrev] = Filter(abbrevIndexes, (i:number, positive:number[]) => { \r\n    return !IsNull(i) && !positive.includes(i) && i>=0 && i < indexes.length; \r\n  }) \r\n  return abbrev; \r\n}\r\n\r\n\r\n\r\n\r\nexport function TestPagerBtn<T>() { \r\n  let items = [] as number[]; \r\n  while(items.length < 98) \r\n    items.push(items.length); \r\n\r\n  const paging = usePage(items, 5); \r\n\r\n  \r\n  let i = 0;\r\n  while(i<11) {\r\n    console.log([i, IndexesWindow(i++, 0, 10, 5)]);\r\n  }\r\n\r\n  /*TestAbbrev(10);\r\n  TestAbbrev(50);\r\n  TestAbbrev(98);\r\n  TestAbbrev(99);\r\n  TestAbbrev(100);*/\r\n\r\n  return <div> \r\n    {JSON.stringify(paging.page)} <br/> \r\n    <PagerBtn {...{paging}}/> \r\n  </div> \r\n} \r\n\r\n\r\nfunction TestAbbrev(length:number) {\r\n  let items = [] as number[]; \r\n  while(items.length < length) \r\n    items.push(items.length); \r\n\r\n  AbbrevIndexes(0, items); \r\n  AbbrevIndexes(1, items); \r\n  AbbrevIndexes(2, items); \r\n  AbbrevIndexes(length-3, items); \r\n  AbbrevIndexes(length-2, items); \r\n  AbbrevIndexes(length-1, items); \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx2\\objx.component.tsx",["584"],"import React, { useContext } from 'react'; \r\nimport { ToArray, Union } from '../../_arrayutils'; \r\nimport { IReaderComponent, IEditorComponent } from '../../_input'; \r\nimport { GetValueAt, IsNull } from '../../_utils'; \r\n\r\n\r\n// GET SET AT ==============================================\r\ninterface IGetSetAt {\r\n  Get:(keys?: TKey[]|undefined) => any; \r\n  Set:(newValue: any, keys?: TKey[]|undefined) => void; \r\n  Args:(keys:TKey[]) => any; \r\n}\r\nexport const GetSetAtContext = React.createContext({} as IGetSetAt); \r\nexport function GetSetAt({Get, Set, Args, children}:React.PropsWithChildren<IGetSetAt>) { \r\n  return <GetSetAtContext.Provider value={{Get, Set, Args}}> \r\n    {children}\r\n  </GetSetAtContext.Provider> \r\n} \r\n\r\ntype ReaderFunc = ({...props}:IReaderComponent) => JSX.Element; \r\nexport function ReaderAt({...props}:{readerFunc:ReaderFunc}) { \r\n  const {Get, Args} = useContext(GetSetAtContext); \r\n  const {k} = useContext(KeyContext); \r\n  const value = Get(k); \r\n  const {ifield, options} = Args(k) as {ifield:IField, options:IOption[]}; \r\n  return <props.readerFunc {...{value, ifield, options}} /> \r\n} \r\n\r\n\r\ntype EditorFunc = ({...props}:IEditorComponent) => JSX.Element; \r\nexport function EditorAt({...props}:{editorFunc:EditorFunc}) { \r\n  const {Get, Set, Args} = useContext(GetSetAtContext); \r\n  const {k} = useContext(KeyContext); \r\n  const value = Get(k); \r\n  const setValue = (newValue:any) => Set(newValue, k); \r\n  const {ifield, options} = Args(k) as {ifield:IField, options:IOption[]}; \r\n\r\n  return <props.editorFunc {...{value, setValue, ifield, options}} /> \r\n} \r\n\r\n\r\n\r\n\r\n\r\nexport const ObjxContext = React.createContext({} as {value:any}); \r\nconst KeysContext = React.createContext({} as any); \r\nexport const KeyContext = React.createContext({} as {k:TKey[]}); \r\n\r\n// OBJX =================================================== \r\nexport function Objx({value, children}:React.PropsWithChildren<{value:any}>) { \r\n  return <ObjxContext.Provider value={{value}}> \r\n    {children} \r\n  </ObjxContext.Provider> \r\n} \r\n\r\n// Keys =================================================== \r\nexport function Keys({keys, nested = false, children}:React.PropsWithChildren<{keys:TKey[][], nested?:boolean}>) { \r\n  //const {value} = useContext(ObjxContext); \r\n  return <KeysContext.Provider value={{}}> \r\n    {keys?.map( k => { \r\n      return <Key key={JSON.stringify(k)} {...{k, nested}} > \r\n        {children} \r\n      </Key> \r\n    })} \r\n  </KeysContext.Provider> \r\n} \r\n\r\n// Key ==================================================== \r\nexport function Key({k, nested = false, children}:React.PropsWithChildren<{k:TKey[], nested?:boolean}>) { \r\n  let {k:_k} = useContext(KeyContext); \r\n  _k = !IsNull(_k) && nested ? Union(_k, k) as TKey[]: k; \r\n  \r\n  return <KeyContext.Provider value={{k:_k}} > \r\n    {children ?? <KeyValue/>} \r\n  </KeyContext.Provider> \r\n} \r\n\r\n// KeyString ============================================== \r\nexport function KeyString() { \r\n  const {k} = useContext(KeyContext); \r\n  return <span>{JSON.stringify(k)} : </span> \r\n} \r\n\r\n// KeyValue =============================================== \r\nexport function KeyValue() { \r\n  const {value} = useContext(ObjxContext); \r\n  const {k} = useContext(KeyContext); \r\n  return <span>{JSON.stringify(GetValueAt(value, ToArray(k)))}</span> \r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function TestsObjx() { \r\n  const value = [0,['a', 'b','d'],5,65,['a', 'b','d']]; \r\n  const keys = [['4', 2], [1]]; \r\n\r\n  return <TestObjx {...{ value, keys }} /> \r\n} \r\n\r\nexport function TestObjx({value, keys}:{value:any, keys:TKey[][]}) { \r\n  return <Objx value={value}> \r\n    <Keys keys={keys}> \r\n      <KeyString/><KeyValue/> <br/> \r\n    </Keys> \r\n  </Objx> \r\n} \r\n\r\n\r\nexport function TestsNestedObjx() { \r\n  const value = [0,['a', 'b','d'],5,65,['a', 'b','d']]; \r\n  const keys = [['4'], [1]]; \r\n  const keys2= [['2'], ['0']]; \r\n  return <TestNestedObjx {...{value, keys, keys2 }} /> \r\n} \r\n\r\nexport function TestNestedObjx({value, keys, keys2}:{value:any, keys:TKey[][], keys2:TKey[][]}) { \r\n\r\n  return <Objx value={value}> \r\n    <Keys keys={keys}> \r\n      <KeyString/><KeyValue/><br/> \r\n      -----\r\n        <Keys keys={keys2}> \r\n          // <KeyString/><KeyValue/><br/> \r\n        </Keys> \r\n    </Keys> \r\n  </Objx> \r\n} \r\n\r\n/*\r\n\r\n*/",["585","586"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx2.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\landing\\landing.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\AppTypeScript.tsx",["587"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\hooks\\usepatient.hook.ts",["588","589","590"],"import { useContext } from 'react'; \r\nimport { DaoContext } from '../../../reusable/_dao'; \r\nimport { Session, useSession, IUseSession } from '../../../reusable/_session'; \r\nimport { feedback } from '../../../components/feedback/feedback.component'; \r\n\r\n\r\nexport interface IUsePatient { \r\n  TestResetSession: () => void; \r\n\r\n  profile: IEntry; \r\n  setProfile: (newValue:any, keys:any[]) => void; \r\n\r\n  appointment: IEntry; \r\n  setAppointment: (newValue:any, keys:any[]) => void; \r\n\r\n  IdentifyPatient: (ramq:string) => void; \r\n  RamqIsValid: (value:string) => boolean; \r\n  \r\n  CreateUpdateProfile: (patient: IEntry) => Promise<void>; \r\n  //CreateUpdateAppointment: (patient: IEntry) => Promise<void>; \r\n} \r\n\r\n\r\n// UsePatient ============================================= \r\nexport function usePatient():IUsePatient { \r\n  const {GetDefaultIEntry, GetIEntries, CreateUpdate, Validate} = useContext(DaoContext); \r\n\r\n  // Profile & Appointment session --------------------------------------\r\n  const sessionProfile = useSession('profile', {}); \r\n  const sessionAppointment = useSession('appointment', {}); \r\n\r\n  const profile = sessionProfile.Get(); \r\n  const setProfile = (newValue:any, keys:any[] = []) => sessionProfile.Set(newValue, [...keys]); \r\n  const appointment = sessionAppointment.Get(); \r\n  const setAppointment = (newValue:any, keys:any[] = []) => sessionAppointment.Set(newValue, [...keys]); \r\n\r\n  // RamqIsValid ------------------------------------------\r\n  function RamqIsValid(value:string) { \r\n    return Validate('patients', 'ramq', value); \r\n  } \r\n\r\n  // IdentifyPatient --------------------------------------\r\n  function IdentifyPatient(ramq:string) { \r\n    const entries = GetIEntries('patients'); \r\n    const foundProfile = entries.find( e => { \r\n      const e_ramq = (e['ramq'] as string); \r\n      return e_ramq.toLowerCase() === ramq.toLowerCase(); \r\n    });\r\n    const newProfile = {...GetDefaultIEntry('patients'), ramq}; \r\n    setProfile(foundProfile ?? newProfile); \r\n  }\r\n\r\n  // CreateUpdateProfile ----------------------------------\r\n  async function CreateUpdateProfile(patient: IEntry) { \r\n    const [response] = await CreateUpdate('patients', [patient]); \r\n    feedback.setValue([response]); \r\n    if(response.success) { \r\n      await CreateUpdateAppointment(response.data); \r\n      setProfile(response.data); \r\n    } \r\n    else \r\n      console.log(response.err); \r\n  } \r\n\r\n  // CreateUpdateappointment ----------------------------------\r\n  async function CreateUpdateAppointment(patient: IEntry) { \r\n    const appointment = FindAppointment(patient); \r\n    const [response] = await CreateUpdate('appointments', [appointment]); \r\n    feedback.setValue([response]); \r\n    if(response.success) { \r\n      setAppointment(response.data); \r\n      const date = new Date(response.data['date'] as any); \r\n    } \r\n    else \r\n      console.log('appointment failed ...'); \r\n  } \r\n\r\n  // FindCurrentSession -----------------------------------\r\n  function FindAppointment(patient: IEntry) { \r\n    const entries = GetIEntries('appointments'); \r\n    const defaultAppointment = {...GetDefaultIEntry('appointments'), patient:patient._id}; \r\n    const foundAppointment = entries.find( e => { \r\n      const e_patient = (e['patient'] as string); \r\n      return e_patient === patient._id; \r\n    }); \r\n    return {...defaultAppointment, ...foundAppointment}; \r\n  } \r\n\r\n\r\n  const TestResetSession = () => {\r\n    sessionProfile.Reset(); \r\n    sessionAppointment.Reset(); \r\n  }\r\n\r\n  return { \r\n    TestResetSession, \r\n\r\n    profile, setProfile, \r\n    appointment, setAppointment, \r\n    RamqIsValid, \r\n    IdentifyPatient, \r\n    CreateUpdateProfile\r\n  } \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\hooks\\useadmin.hook.ts",["591"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\header.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\hooks\\useeditstate.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\inlinenbtn.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\hooks\\usequestionnaire.hook.tsx",["592"],"import { useContext } from 'react'; \r\nimport { DaoContext } from '../../../reusable/_dao'; \r\nimport { useSession, Session } from '../../../reusable/_session'; \r\nimport { IsEmpty } from '../../../reusable/_utils'; \r\nimport { usePage, IPageHook } from '../../../reusable/_customhooks'; \r\nimport { feedback } from '../../../components/feedback/feedback.component'; \r\n\r\n\r\nexport interface IUseQuestionnaire { \r\n  TestResetSession: () => void; \r\n\r\n  paging: IPageHook<IAnswer>; \r\n  questionnaire: IAnswer[]; \r\n  setQuestionnaire: (newAnswer:number, keys:any[]) => void; \r\n  //GetPages: () => any[][]; \r\n\r\n  AnswersAreComplete: (answers?:IAnswer[]) => boolean; \r\n  LoadQuestionnaire: () => void; \r\n  /*GetQuestionnaireItem:(answer:IAnswer) => { \r\n    form: undefined|IForm; \r\n    instructions: undefined|IInstruction[]; \r\n    question: undefined|IQuestion; \r\n    response: undefined|IResponse; \r\n  } */\r\n  SubmitQuestionnaire: (answers?:IEntry[]) => Promise<ICrudResponse[]>; \r\n} \r\n\r\n\r\nexport function useQuestionnaire():IUseQuestionnaire { \r\n  console.log('questionnaire');\r\n  const {GetIEntries, CreateUpdate} = useContext(DaoContext); \r\n  const profile = Session.Get('profile') as IEntry; \r\n\r\n  const sessionQuestionnaire = useSession('questionnaire', LoadQuestionnaire()); \r\n  const questionnaire:IAnswer[] = sessionQuestionnaire.Get(); \r\n  const setQuestionnaire = (newValue:any, keys:any[] = []) => sessionQuestionnaire.Set(newValue, [...keys]); \r\n  const paging = usePage(questionnaire, PageBreakPredicates()); \r\n\r\n  function GetQuestion(answer:IAnswer) { \r\n    const [question] = GetIEntries('questions', [answer?.question]) as IQuestion[]; \r\n    return question; \r\n  }\r\n\r\n  // LoadQuestionnaire -----------------------------------\r\n  function LoadQuestionnaire() { \r\n    const loadQuestionnaire = [] as any[]; \r\n    /*(GetIEntries('answers') as IAnswer[]).filter( a => { \r\n      return a.patient === profile._id && IsToday(a.date); \r\n    }) */\r\n    return IsEmpty(loadQuestionnaire) ? BlankQuestionnaire() : loadQuestionnaire; \r\n  } \r\n\r\n  // BlankQuestionnaire ----------------------------------- \r\n  function BlankQuestionnaire():IAnswer[] { \r\n    const entries = GetIEntries('questions'); \r\n    return entries.map( q => { \r\n      return {_id:'', patient:profile._id, date: new Date(), question:q._id, answer:-1} as IAnswer; \r\n    }); \r\n  } \r\n\r\n  // SubmitQuestionnaire ----------------------------------\r\n  async function SubmitQuestionnaire(answers?:IEntry[]) { \r\n    const toSubmit = answers ?? questionnaire; \r\n    const responses = await CreateUpdate('answers', toSubmit); \r\n    return responses; \r\n  } \r\n\r\n  // return form, instructions, question, response\r\n  /*function GetQuestionnaireItem(answer:IAnswer) { \r\n    if(!answer) \r\n      return {form:undefined, instructions:undefined, question:undefined, response:undefined}; \r\n    const [question] = GetIEntries('questions', [answer.question]) as IQuestion[]; \r\n    const [form] = GetIEntries('forms', [question?.form]) as IForm[]; \r\n    const instructions = GetIEntries('instructions', question?.instructions) as IInstruction[]; \r\n    const [response] = GetIEntries('responses', [question?.responseType]) as IResponse[]; \r\n    return {form, instructions, question, response}; \r\n  } */\r\n\r\n  function AnswersAreComplete(answers?:IAnswer[]) { \r\n    const _answers = answers ?? questionnaire; \r\n    return _answers.every( answer => {\r\n      const question = GetQuestion(answer); \r\n      return question && (question?.optional || answer.answer >=0); \r\n    }); \r\n  } \r\n\r\n\r\n  // Page Break Predicates =============================================\r\n  function PageBreakPredicates() { \r\n    function GetQuestionAndPivot(answer:IAnswer, As:IAnswer[]) { \r\n      const question = GetQuestion(answer); \r\n      const pivot = GetQuestion(As[0]); \r\n      return {question, pivot}; \r\n    } \r\n\r\n    // group by form\r\n    const GroupByForm = (a:IAnswer, As:IAnswer[], Bs:IAnswer[], Cs:IAnswer[]) => { \r\n      const {question, pivot} = GetQuestionAndPivot(a, As);\r\n      return JSON.stringify(question?.form) === JSON.stringify(pivot?.form) || IsEmpty(As); \r\n    } \r\n\r\n    // group by instructions set\r\n    const GroupByInstruction = (a:IAnswer, As:IAnswer[], Bs:IAnswer[], Cs:IAnswer[]) => { \r\n      const {question, pivot} = GetQuestionAndPivot(a, As);\r\n      return JSON.stringify(question?.instructions) === JSON.stringify(pivot?.instructions) || IsEmpty(As); \r\n    } \r\n\r\n    // max 4 items\r\n    const GroupBy4 = (a:IAnswer, As:IAnswer[], Bs:IAnswer[], Cs:IAnswer[]) => { \r\n      return As.length < 4; \r\n    } \r\n\r\n    return [GroupByForm, GroupByInstruction, GroupBy4]; \r\n  } \r\n\r\n\r\n  const TestResetSession = () => {\r\n    sessionQuestionnaire.Reset(); \r\n  }\r\n\r\n  return { \r\n    TestResetSession, \r\n\r\n    paging, \r\n    questionnaire, setQuestionnaire, \r\n\r\n    AnswersAreComplete, \r\n    LoadQuestionnaire, \r\n    SubmitQuestionnaire \r\n  } \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\hooks\\userow.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useientry.hook.tsx",["593","594","595","596"],"import { useContext } from 'react'; \r\nimport { DaoContext } from '../_dao'; \r\nimport { useStateAt } from '../_customhooks'; \r\nimport { IEditor, IReader } from '../_input'; \r\n\r\n\r\n// IENTRY =================================================\r\nexport interface IUseIEntry { \r\n  index:number; \r\n  Get: (keys?: TKey[] | undefined) => any; \r\n  Set: (newValue: any, keys?: TKey[] | undefined) => void; \r\n  GetIEditorArgs: (columns: string[]) => IEditor[]; \r\n} \r\n\r\nexport function useIEntry(collectionAccessor:string, index:number):IUseIEntry { \r\n  const {GetDefaultIEntry, GetIEntries, Validate, GetIFields, GetIOptions, CreateUpdate, Delete} = useContext(DaoContext); \r\n  const [Get, Set] = useStateAt(GetEntry()); \r\n\r\n  // Get Entry ............................................\r\n  function GetEntry() { \r\n    return GetIEntries(collectionAccessor).find( (e,i) => i === index) \r\n      ?? GetDefaultIEntry(collectionAccessor) \r\n      ?? {} as IEntry; \r\n  } \r\n  \r\n  // Get Columns Args .....................................\r\n  function GetIEditorArgs(columns: string[]) { \r\n    const ifields = GetIFields(collectionAccessor, columns); \r\n    return ifields.map( ifield => { \r\n      const value = Get([ifield.accessor]); \r\n      const setValue = (newValue:any) => Set(newValue, [ifield.accessor]); \r\n      const options = GetIOptions(ifield); \r\n      return {ifield, value, setValue, options}; \r\n    }); \r\n  } \r\n\r\n  return {index, Get, Set, GetIEditorArgs} \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\adminrow.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\hooks\\usequestionnaireitem.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Button.stories.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Header.stories.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Page.stories.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Button.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Header.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\stories\\Page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.stories.tsx",["597"],"import React, { useRef } from 'react'; \r\nimport { TestFeedback, FeedbackLines, GetSet } from './feedback.component'; \r\nimport { FeedbackCruds } from './feedbackcrud.component'; \r\n\r\n\r\n\r\nfunction FeedbackSetter({feedbackRef}:{feedbackRef:React.MutableRefObject<GetSet>}) { \r\n  return <div> \r\n    <button onClick={() => feedbackRef.current?.Set([{type:0, msg:'success !!'}] )} >Success</button> <br/> \r\n    <button onClick={() => feedbackRef.current?.Set([{type:1, msg:'note?'}] )} >Note</button> <br/> \r\n    <button onClick={() => feedbackRef.current?.Set([{type:2, msg:'warning !!'}] )} >Warning</button> <br/> \r\n    <button onClick={() => feedbackRef.current?.Set([{type:3, msg:'failure !!'}] )} >Failure</button> <br/> \r\n  </div> \r\n}\r\n\r\nfunction FeedbackCrudSetter({feedbackRef}:{feedbackRef:React.MutableRefObject<GetSet>}) { \r\n  const responses = [{actionType: 'create', success:true, data:{}, err:[]}]; \r\n  const responses2 = [{actionType: 'update', success:true, data:{}, err:[]}]; \r\n  const responses3 = [{actionType: 'delete', success:true, data:{}, err:[]}]; \r\n  return <div> \r\n    <button onClick={() => feedbackRef.current?.Set(responses)} >Create</button> <br/> \r\n    <button onClick={() => feedbackRef.current?.Set(responses2)} >Update</button> <br/> \r\n    <button onClick={() => feedbackRef.current?.Set(responses3)} >Delete</button> <br/> \r\n  </div> \r\n}\r\n\r\n\r\n/*function TestFeedbackStory({...props}:{child:any, setter:any}) { \r\n  const feedbackRef = useRef<GetSet>(); \r\n  \r\n  return <div>\r\n    <FeedbackComponent {...{feedbackRef}}> \r\n      <props.child/> \r\n    </FeedbackComponent> \r\n    <props.setter {...{feedbackRef}} /> \r\n  </div> \r\n}*/\r\n\r\nfunction TestFeedbackStory({...props}:{child:any, setter:any}) { \r\n  const feedbackRef = useRef<GetSet>(); \r\n  return <div> \r\n    <props.child {...{feedbackRef}} /> \r\n    <props.setter {...{feedbackRef}} /> \r\n  </div> \r\n} \r\n\r\n\r\nexport default { \r\n  title: 'Feedback', \r\n  component: TestFeedbackStory, \r\n} \r\n\r\nconst Template = args => <TestFeedbackStory {...args} /> \r\n\r\nexport const TestFeedbackSingleLine = Template.bind({}) \r\nTestFeedbackSingleLine.args = { \r\n  child: TestFeedback, \r\n  setter: FeedbackSetter \r\n} \r\n\r\nexport const TestFeedbackLines = Template.bind({}) \r\nTestFeedbackLines.args = { \r\n  child: FeedbackLines, \r\n  setter: FeedbackSetter \r\n} \r\n\r\nexport const TestFeedbackCrud = Template.bind({}) \r\nTestFeedbackCrud.args = { \r\n  child: FeedbackCruds, \r\n  setter: FeedbackCrudSetter \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedbackcrud.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\stories\\dao.stories.tsx",["598"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\fetcher.class.ts",["599"],"import axios from 'axios'; \r\nimport {ParseCollection} from './mongooseparser.utils'; \r\n\r\n\r\n// Crud Mongoose =======================================\r\nexport class Fetcher { \r\n  public baseUrl:string = ''; \r\n\r\n  constructor(baseUrl:string) { \r\n    this.baseUrl = baseUrl; \r\n  }\r\n\r\n  // Access -----------------------------------------------\r\n  public async Access() { \r\n    return await axios.get(this.baseUrl); \r\n  } \r\n\r\n  /* \r\n  PUT ...api/collections \r\n    req.body => accessors:string[] \r\n    res:ICrudResponse[] \r\n  */ \r\n  // Collections ..........................................\r\n  public async Collections(accessors:string[]): Promise<ICrudResponse[]> { \r\n    const axiosResponses = (await axios.put(this.baseUrl+'collections/', accessors)).data as ICrudResponse[]; \r\n    return axiosResponses.map( r => { \r\n      const parsedCollection = ParseCollection(r.data); \r\n      return {...r, data:parsedCollection} as ICrudResponse; \r\n    }); \r\n  } \r\n\r\n  // Validate .............................................\r\n  public async Validate(accessor:string, entries:IEntry[]) { \r\n    return await axios.put(this.baseUrl+'validate/'+accessor, entries); \r\n  } \r\n\r\n  // Ids ..................................................\r\n  public async Ids(accessor:string): Promise<string[]>{ \r\n    return (await axios.get(this.baseUrl+'ids/'+accessor)).data; \r\n  } \r\n\r\n\r\n  //?? public async CreateUpdate ?? \r\n\r\n\r\n  // Create ...............................................\r\n  public async Create(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toCreate = entries.map(e => { \r\n      const {_id, _v, ...data} = e; \r\n      return data; \r\n    }); \r\n    return (await axios.put(this.baseUrl+'create/'+accessor, toCreate)).data; \r\n  } \r\n\r\n  // ICrudResponse ?? or IEntry ??\r\n  // Read .................................................\r\n  public async Read(accessor:string, ids?:string[]): Promise<ICrudResponse[]> {\r\n    const responses = await axios.put(this.baseUrl+'read/'+accessor, ids); \r\n    return responses.data; \r\n  }\r\n\r\n  // Update ...............................................\r\n  public async Update(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    return (await axios.put(this.baseUrl+'update/'+accessor, entries)).data; \r\n  }\r\n\r\n  // Delete ...............................................\r\n  /* Sends an array of objects with the only property being '_id' ... [{_id}] */\r\n  public async Delete(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toDelete = entries.map(e => { \r\n      const {_id, ...data} = e; \r\n      return {_id}; \r\n    }); \r\n    return (await axios.put(this.baseUrl+'delete/'+accessor, toDelete)).data; \r\n  } \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\stories\\mockcrud.ts",["600","601","602","603","604","605","606"],"import { Fetcher } from '../../_mongooseparser';\r\nimport {Collection} from '../collection.class'; \r\nimport {ICrud} from '../dao.class'; \r\nimport {mockDb} from './mockdb'; \r\n\r\n\r\n\r\nfunction GetMockCollections(accessors?: string[] | undefined) { \r\n  if(!accessors) \r\n    return mockDb; \r\n  const collections:ICollection[] = []; \r\n  accessors?.forEach( accessor => { \r\n    const found = mockDb.find( c => c.accessor===accessor); \r\n    if(found) \r\n      collections.push(found); \r\n  }) \r\n  return collections; \r\n}\r\n\r\n\r\n// Collections ..........................................\r\nasync function Collections(accessors?: string[] | undefined): Promise<ICrudResponse[]> { \r\n  const collections = GetMockCollections(accessors); \r\n  return collections.map( data => { \r\n    return {actionType:'read', success:true, data, err:[]} as ICrudResponse; \r\n  })\r\n}\r\n\r\n// Create ...............................................\r\nasync function Create(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n  const toCreate = entries.map(e => { \r\n    const {_id, _v, ...data} = e; \r\n    return data; \r\n  }); \r\n\r\n  const [icollection] = GetMockCollections([accessor]); \r\n  const collection = new Collection(icollection); \r\n\r\n  // increment ids ...\r\n  collection.Create(entries); \r\n  return entries.map( data => { \r\n    return {actionType:'create', success:true, data, err:[]} as ICrudResponse; \r\n  }) \r\n} \r\n\r\n// Read .................................................\r\nasync function Read(accessor:string, ids?:string[]): Promise<ICrudResponse[]> {\r\n  const [icollection] = GetMockCollections([accessor]); \r\n  const collection = new Collection(icollection); \r\n  const read = collection.Read(ids);\r\n  return read.map( data => { \r\n    return {actionType:'read', success:true, data, err:[]} as ICrudResponse; \r\n  }) \r\n}\r\n\r\n// Update ...............................................\r\nasync function Update(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n  const [icollection] = GetMockCollections([accessor]); \r\n  const collection = new Collection(icollection); \r\n  collection.Update(entries); \r\n  return entries.map( data => { \r\n    return {actionType:'update', success:true, data, err:[]} as ICrudResponse; \r\n  }) \r\n}\r\n\r\n// Delete ...............................................\r\n/* Sends an array of objects with the only property being '_id' ... [{_id}] */\r\nasync function Delete(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n  const [icollection] = GetMockCollections([accessor]); \r\n  const collection = new Collection(icollection); \r\n  collection.Delete(entries); \r\n  return entries.map( data => { \r\n    return {actionType:'delete', success:true, data, err:[]} as ICrudResponse; \r\n  }) \r\n} \r\n\r\n// MockCrud\r\n//export const crud:ICrud = { Collections, Create, Delete, Read, Update} \r\n\r\nconst baseUrl = `https://fjg-mongoose-heroku.herokuapp.com/api/`; \r\nexport const crud = new Fetcher(baseUrl); ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\stories\\mockdb.ts",["607","608"],"import { ValidatorArrayLength, ValidatorMinMaxNumber, ValidatorRegex, ValidatorRequired } from '../validators';\r\nimport {collections} from './mockdata';\r\n\r\n\r\nconst mockCollectiona:ICollection = {accessor:'collectiona', label:'Collection A', \r\n  ifields: [ \r\n    // _id\r\n    {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n    {accessor:'name', label:'Name', defaultValue:'', type:'string', validators:[ \r\n      ValidatorRequired(), \r\n    ]}, \r\n    {accessor:'age', label:'Age', defaultValue:0, type:'number', validators:[ \r\n      ValidatorRequired(), \r\n      ValidatorMinMaxNumber(0), \r\n    ]}, \r\n  ], entries:[ \r\n    {_id:'1', name:'jo', age:12}, \r\n    {_id:'2', name:'biz', age:52} \r\n  ]\r\n} \r\n\r\nconst mockCollectionb:ICollection = {accessor:'collectionb', label:'Collection B', \r\n  ifields: [ \r\n    // _id\r\n    {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n    {accessor:'question', label:'Question', defaultValue:'', type:'string', validators:[ \r\n      ValidatorRequired(), \r\n    ]}, \r\n  ], entries:[ \r\n    {_id:'1', question:'question 1'}, \r\n    {_id:'2', question:'question 2'} \r\n  ]\r\n} \r\n\r\n\r\nexport const mockDb:ICollection[] = [ \r\n  mockCollectiona, \r\n  mockCollectionb, \r\n  ...collections, \r\n] \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\stories\\mockdata.ts",["609","610"],"import { ValidatorArrayLength, ValidatorMinMaxNumber, ValidatorRegex, ValidatorRequired } from '../validators';\r\n\r\n// QUESTIONS \r\nconst questions:ICollection = {accessor:'questions', label:'Questions', \r\nifields: [ \r\n  // _id\r\n  {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n  // form\r\n  {accessor:'form', label:'Form', defaultValue:'', type:'string', \r\n  validators:[ValidatorRequired()]}, \r\n  // instructions\r\n  {accessor:'instructions', label:'Instructions', defaultValue:'', type:'string', isArray:true}, \r\n  // labels\r\n  {accessor:'labels', label:'Labels', defaultValue:'', type:'string', isArray:true, \r\n  validators:[ValidatorRequired()]}, \r\n  // optional\r\n  {accessor:'optional', label:'Optional', defaultValue:false, type:'boolean'}, \r\n  //order \r\n  {accessor:'order', label:'Order', defaultValue:0, type:'number'}, \r\n  // qId\r\n  {accessor:'qId', label:'Qid', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // responseType\r\n  {accessor:'responseType', label:'Response type', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // section\r\n  {accessor:'section', label:'Section', defaultValue:'', type:'string'}, \r\n\r\n], entries:[ \r\n  {_id:'1', form:'1', instructions:[1], labels:['question 1'], qId:'q1', responseType:'1'}, \r\n  {_id:'2', form:'1', instructions:[1], labels:['question 2'], qId:'q2', responseType:'1'}, \r\n  {_id:'3', form:'1', instructions:[1], labels:['question 3'], qId:'q3', responseType:'1'}, \r\n  {_id:'4', form:'1', instructions:[1], labels:['question 4'], qId:'q4', responseType:'1'}, \r\n  {_id:'5', form:'1', instructions:[1], labels:['question 5'], qId:'q5', responseType:'1'}, \r\n\r\n  {_id:'6', form:'2', instructions:[2], labels:['question 6'], qId:'q6', responseType:'2'}, \r\n  {_id:'7', form:'2', instructions:[2], labels:['question 7'], qId:'q7', responseType:'2'}, \r\n  {_id:'8', form:'2', instructions:[2], labels:['question 8'], qId:'q8', responseType:'2'}, \r\n  {_id:'9', form:'2', instructions:[2], labels:['question 9'], qId:'q9', responseType:'2'}, \r\n  {_id:'10', form:'2', instructions:[1], labels:['question 10'], qId:'q10', responseType:'3'}, \r\n]\r\n} \r\n\r\n\r\n// RESPONSES \r\nconst responses:ICollection = {accessor:'responses', label:'Responses', \r\nifields: [ \r\n  // _id\r\n  {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n  // rId\r\n  {accessor:'rId', label:'Rid', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // responseType\r\n  {accessor:'responseType', label:'Response type', defaultValue:{}, type:'mixed', isMixed:true, validators:[ValidatorRequired()]}, \r\n\r\n], entries:[ \r\n  { \r\n    _id:'1', rId: 'weekdays', \r\n    responseType: { \r\n      type: 'String', \r\n      enum: ['monday', 'thuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'], \r\n    }, \r\n  }, \r\n  { \r\n    _id:'2', rId: 'disagreeagree', \r\n    responseType: { \r\n      type: 'String', \r\n      enum: ['strongly disagree', 'disagree', 'neutral', 'agree', 'strongly agree'], \r\n    }, \r\n  }, \r\n  { \r\n    _id:'3', rId: '0-7', \r\n    responseType: { \r\n      type: 'String', \r\n      enum: [0, 1, 2, 3, 4, 5, 6, 7], \r\n    }, \r\n  } \r\n] \r\n} \r\n\r\n// FORMS\r\nconst forms:ICollection = {accessor:'forms', label:'Forms', \r\nifields: [ \r\n  // _id\r\n  {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n  // fId\r\n  {accessor:'fId', label:'Fid', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // titles\r\n  {accessor:'titles', label:'Titles', defaultValue:'', type:'string', isArray:true, \r\n  validators:[ValidatorRequired()]}, \r\n\r\n], entries:[ \r\n  { \r\n    _id: '1', fId: 'f1', \r\n    titles: ['Title form 1', 'titre form 1'], \r\n  }, \r\n  { \r\n    _id: '2', fId: 'f2', \r\n    titles: ['Title form 2', 'titre form 2'], \r\n  },\r\n  { \r\n    _id: '3', fId: 'f3', \r\n    titles: ['Title form 3', 'titre form 3'], \r\n  } \r\n] \r\n} \r\n\r\n// INSTRUCTIONS\r\nconst instructions:ICollection = {accessor:'instructions', label:'Instructions', \r\nifields: [ \r\n  // _id\r\n  {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n  // iId\r\n  {accessor:'iId', label:'Iid', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // labels\r\n  {accessor:'labels', label:'Labels', defaultValue:'', type:'string', isArray:true, \r\n  validators:[ValidatorRequired()]}, \r\n\r\n], entries:[ \r\n  { \r\n    _id: '1', iId: 'i1', \r\n    label: ['Instruction 1', 'Instruction 1'], \r\n  }, \r\n  { \r\n    _id: '2', iId: 'i2', \r\n    labels: ['Instruction 2', 'Instruction 2'], \r\n  } \r\n] \r\n} \r\n\r\n\r\n\r\n// ANSWERS \r\nconst answers:ICollection = {accessor:'answers', label:'Answers', \r\nifields: [ \r\n  // _id\r\n  {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n  // patient\r\n  {accessor:'patient', label:'Patient', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // patient\r\n  {accessor:'date', label:'Date', defaultValue:Date.now(), type:'date', validators:[ValidatorRequired()]}, \r\n  // question\r\n  {accessor:'question', label:'Question', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // answer\r\n  {accessor:'answer', label:'Answer', defaultValue:-1, type:'number', validators:[ValidatorRequired()]}, \r\n], entries:[] \r\n} \r\n\r\nconst patients:ICollection = {accessor:'patients', label:'Patients', \r\nifields: [ \r\n  // _id\r\n  {accessor:'_id', label:'', defaultValue:'', type:'string'}, // string ? or objectId ? \r\n  // ramq\r\n  {accessor:'ramq', label:'Ramq', defaultValue:'', type:'string', validators:[ValidatorRegex('^[a-zA-Z]{4}[0-9]{8}$')]}, \r\n  // firstname\r\n  {accessor:'firstName', label:'First name', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  // patient\r\n  {accessor:'lastName', label:'Last Name', defaultValue:'', type:'string', validators:[ValidatorRequired()]}, \r\n  \r\n], entries:[] \r\n} \r\n\r\nexport const collections = [questions, responses, forms, instructions, patients, answers]; ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\validators.tsx",["611"],"import { IsEmpty, IsInRange, IsNull } from '../_utils'; \r\n\r\nconsole.log(new RegExp(\"^[a-zA-Z]{4}[0-9]{8}$\").test('JEAF23118301')); \r\n\r\n\r\nexport const ValidatorRequired = ():IValidator => { \r\n  return (value:any) => !IsNull(value); \r\n} \r\n\r\nexport const ValidatorMinMaxNumber = (min?:number, max?:number):IValidator => { \r\n  return (value:any) => IsInRange(value, min, max); \r\n} \r\n\r\nexport const ValidatorArrayLength = (min?:number, max?:number):IValidator => { \r\n  return (value:any[] = []) => { \r\n    if(!Array.isArray(value)) \r\n      return false; \r\n    return IsInRange(value.length, min, max) \r\n  }; \r\n} \r\n\r\nexport const ValidatorRegex = (regex:string):IValidator => { \r\n  return (value:string) => { \r\n    const result = new RegExp(regex).test(value);\r\n    console.log([value, regex, result]); \r\n    return result; \r\n  }; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\stories\\admin.stories.tsx",["612","613","614","615","616","617","618","619","620"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\reader\\reader.stories.tsx",["621"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\editor\\editor.stories.tsx",["622"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\editor\\editor.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\reader\\reader.component.tsx",["623"],"import { GetDefaultValueFromIField, GetSelectedValuesFromOptions, IsEmpty } from \"../../../reusable/_utils\";\r\n\r\n\r\nexport type IReaderFunc = ({...props}:IReader) => JSX.Element; \r\nexport interface IReader { \r\n  value:any; \r\n  options?:IOption[]; \r\n  ifield:IField;    // type:IType ?? \r\n} \r\ninterface IProps extends IReader { \r\n  func:IReaderFunc; \r\n} \r\n\r\nexport function GetReadValue(value:any, options:IOption[], ifield:IField) { \r\n  return IsEmpty(options) ? \r\n    value ?? GetDefaultValueFromIField(ifield): \r\n    GetSelectedValuesFromOptions(value, options).map(o=>o.label); \r\n} \r\n\r\nexport function GetDefaultReaderFunc(ifield:IField) { \r\n  if(ifield.isArray) \r\n    return ReadMany; \r\n  if(ifield.isMixed) \r\n    return ReadMixed; \r\n  return ReadOne; \r\n} \r\n\r\nexport function Reader({ifield, options=[], ...props}:IProps) { \r\n  const value = GetReadValue(props.value, options, ifield); \r\n  props.func = props.func ?? GetDefaultReaderFunc(ifield); \r\n  return <props.func {...{value, options, ifield}} /> \r\n} \r\n\r\n\r\n\r\n\r\n\r\nfunction ReadOne({value, options, ifield}:IReader) { \r\n  if(ifield.type === 'boolean') \r\n    return <span>{JSON.stringify(value)}</span> \r\n  return <span>{value}</span> \r\n} \r\n\r\nfunction ReadMany({value, options, ifield}:IReader) { \r\n  const isShort = JSON.stringify(value).length < 15; \r\n\r\n  if(!Array.isArray(value)) \r\n    return <span>{JSON.stringify(value)}</span> \r\n\r\n  if(isShort) { \r\n    return <span>[{value.map( (e, i) => { \r\n        return <span key={i}>{i!==0 && ', '}{JSON.stringify(e)}</span> \r\n    })}]</span> \r\n  } \r\n  return <span> \r\n    <div className={'readmany-long'}> \r\n      {value.map( (e, i) => { \r\n        return <div key={i}>{i}. {JSON.stringify(e)}</div> \r\n      })} \r\n    </div> \r\n  </span>\r\n} \r\n\r\n\r\nfunction ReadMixed({value, options, ifield}:IReader) { \r\n  return <div>{JSON.stringify(value)}</div> \r\n} \r\n\r\nfunction ReadDefault({value, options, ifield}:IReader) { \r\n  return <div>{JSON.stringify(value)}</div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\reader\\_reader.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\input\\input.stories.tsx",["624"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\inputarray\\inputarray.stories.tsx",["625"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\inputselect\\imputselection.stories.tsx",["626"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\input\\_input.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\inputarray\\_inputarray.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\inputselect\\_inputselect.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\inputselect\\inputselect.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\inputarray\\inputarray.component.tsx",["627","628"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\input\\input.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\editor_reader\\inputselect\\inputselect.component.tsx",[],{"ruleId":"629","replacedBy":"630"},{"ruleId":"631","replacedBy":"632"},{"ruleId":"629","replacedBy":"630"},{"ruleId":"631","replacedBy":"632"},{"ruleId":"629","replacedBy":"633"},{"ruleId":"631","replacedBy":"634"},{"ruleId":"629","replacedBy":"635"},{"ruleId":"631","replacedBy":"636"},{"ruleId":"637","severity":1,"message":"638","line":62,"column":37,"nodeType":"639","messageId":"640","endLine":62,"endColumn":47},{"ruleId":"629","replacedBy":"641"},{"ruleId":"631","replacedBy":"642"},{"ruleId":"643","severity":1,"message":"644","line":4,"column":9,"nodeType":"645","messageId":"646","endLine":4,"endColumn":15},{"ruleId":"647","severity":1,"message":"648","line":34,"column":22,"nodeType":"649","messageId":"650","endLine":34,"endColumn":24},{"ruleId":"647","severity":1,"message":"648","line":34,"column":47,"nodeType":"649","messageId":"650","endLine":34,"endColumn":49},{"ruleId":"629","replacedBy":"651"},{"ruleId":"631","replacedBy":"652"},{"ruleId":"643","severity":1,"message":"653","line":1,"column":16,"nodeType":"645","messageId":"646","endLine":1,"endColumn":26},{"ruleId":"647","severity":1,"message":"648","line":28,"column":20,"nodeType":"649","messageId":"650","endLine":28,"endColumn":22},{"ruleId":"647","severity":1,"message":"648","line":28,"column":36,"nodeType":"649","messageId":"650","endLine":28,"endColumn":38},{"ruleId":"643","severity":1,"message":"654","line":165,"column":12,"nodeType":"645","messageId":"646","endLine":165,"endColumn":22},{"ruleId":"643","severity":1,"message":"655","line":168,"column":11,"nodeType":"645","messageId":"646","endLine":168,"endColumn":15},{"ruleId":"629","replacedBy":"656"},{"ruleId":"631","replacedBy":"657"},{"ruleId":"643","severity":1,"message":"658","line":5,"column":20,"nodeType":"645","messageId":"646","endLine":5,"endColumn":30},{"ruleId":"643","severity":1,"message":"659","line":2,"column":15,"nodeType":"645","messageId":"646","endLine":2,"endColumn":26},{"ruleId":"643","severity":1,"message":"660","line":2,"column":38,"nodeType":"645","messageId":"646","endLine":2,"endColumn":45},{"ruleId":"643","severity":1,"message":"661","line":2,"column":63,"nodeType":"645","messageId":"646","endLine":2,"endColumn":75},{"ruleId":"643","severity":1,"message":"662","line":2,"column":77,"nodeType":"645","messageId":"646","endLine":2,"endColumn":89},{"ruleId":"663","severity":1,"message":"664","line":45,"column":6,"nodeType":"665","endLine":45,"endColumn":37,"suggestions":"666"},{"ruleId":"663","severity":1,"message":"667","line":45,"column":7,"nodeType":"668","endLine":45,"endColumn":36},{"ruleId":"663","severity":1,"message":"669","line":12,"column":6,"nodeType":"665","endLine":12,"endColumn":34,"suggestions":"670"},{"ruleId":"663","severity":1,"message":"667","line":12,"column":7,"nodeType":"668","endLine":12,"endColumn":33},{"ruleId":"643","severity":1,"message":"671","line":3,"column":9,"nodeType":"645","messageId":"646","endLine":3,"endColumn":19},{"ruleId":"643","severity":1,"message":"672","line":3,"column":21,"nodeType":"645","messageId":"646","endLine":3,"endColumn":31},{"ruleId":"643","severity":1,"message":"673","line":2,"column":34,"nodeType":"645","messageId":"646","endLine":2,"endColumn":41},{"ruleId":"643","severity":1,"message":"674","line":7,"column":7,"nodeType":"645","messageId":"646","endLine":7,"endColumn":16},{"ruleId":"629","replacedBy":"675"},{"ruleId":"631","replacedBy":"676"},{"ruleId":"643","severity":1,"message":"677","line":2,"column":9,"nodeType":"645","messageId":"646","endLine":2,"endColumn":19},{"ruleId":"643","severity":1,"message":"678","line":2,"column":40,"nodeType":"645","messageId":"646","endLine":2,"endColumn":44},{"ruleId":"643","severity":1,"message":"679","line":2,"column":46,"nodeType":"645","messageId":"646","endLine":2,"endColumn":53},{"ruleId":"643","severity":1,"message":"680","line":2,"column":55,"nodeType":"645","messageId":"646","endLine":2,"endColumn":64},{"ruleId":"643","severity":1,"message":"681","line":2,"column":74,"nodeType":"645","messageId":"646","endLine":2,"endColumn":79},{"ruleId":"643","severity":1,"message":"682","line":2,"column":81,"nodeType":"645","messageId":"646","endLine":2,"endColumn":87},{"ruleId":"643","severity":1,"message":"683","line":4,"column":9,"nodeType":"645","messageId":"646","endLine":4,"endColumn":16},{"ruleId":"643","severity":1,"message":"684","line":8,"column":7,"nodeType":"645","messageId":"646","endLine":8,"endColumn":10},{"ruleId":"643","severity":1,"message":"685","line":9,"column":7,"nodeType":"645","messageId":"646","endLine":9,"endColumn":18},{"ruleId":"643","severity":1,"message":"686","line":26,"column":7,"nodeType":"645","messageId":"646","endLine":26,"endColumn":29},{"ruleId":"643","severity":1,"message":"687","line":52,"column":9,"nodeType":"645","messageId":"646","endLine":52,"endColumn":27},{"ruleId":"643","severity":1,"message":"688","line":54,"column":9,"nodeType":"645","messageId":"646","endLine":54,"endColumn":17},{"ruleId":"643","severity":1,"message":"689","line":92,"column":10,"nodeType":"645","messageId":"646","endLine":92,"endColumn":19},{"ruleId":"643","severity":1,"message":"690","line":123,"column":10,"nodeType":"645","messageId":"646","endLine":123,"endColumn":21},{"ruleId":"629","replacedBy":"691"},{"ruleId":"631","replacedBy":"692"},{"ruleId":"693","severity":1,"message":"694","line":27,"column":47,"nodeType":"695","messageId":"696","endLine":27,"endColumn":62},{"ruleId":"697","severity":1,"message":"698","line":69,"column":68,"nodeType":"699","messageId":"700","endLine":69,"endColumn":81},{"ruleId":"643","severity":1,"message":"701","line":8,"column":10,"nodeType":"645","messageId":"646","endLine":8,"endColumn":19},{"ruleId":"663","severity":1,"message":"702","line":60,"column":6,"nodeType":"665","endLine":60,"endColumn":13,"suggestions":"703"},{"ruleId":"663","severity":1,"message":"704","line":21,"column":6,"nodeType":"665","endLine":21,"endColumn":8,"suggestions":"705"},{"ruleId":"663","severity":1,"message":"706","line":23,"column":6,"nodeType":"665","endLine":23,"endColumn":8,"suggestions":"707"},{"ruleId":"643","severity":1,"message":"708","line":5,"column":11,"nodeType":"645","messageId":"646","endLine":5,"endColumn":22},{"ruleId":"663","severity":1,"message":"709","line":43,"column":6,"nodeType":"665","endLine":43,"endColumn":13,"suggestions":"710"},{"ruleId":"643","severity":1,"message":"711","line":1,"column":28,"nodeType":"645","messageId":"646","endLine":1,"endColumn":37},{"ruleId":"643","severity":1,"message":"712","line":1,"column":39,"nodeType":"645","messageId":"646","endLine":1,"endColumn":47},{"ruleId":"643","severity":1,"message":"672","line":2,"column":19,"nodeType":"645","messageId":"646","endLine":2,"endColumn":29},{"ruleId":"643","severity":1,"message":"671","line":3,"column":10,"nodeType":"645","messageId":"646","endLine":3,"endColumn":20},{"ruleId":"629","replacedBy":"713"},{"ruleId":"631","replacedBy":"714"},{"ruleId":"663","severity":1,"message":"715","line":13,"column":6,"nodeType":"665","endLine":13,"endColumn":8,"suggestions":"716"},{"ruleId":"663","severity":1,"message":"717","line":29,"column":44,"nodeType":"665","endLine":29,"endColumn":46,"suggestions":"718"},{"ruleId":"643","severity":1,"message":"711","line":1,"column":10,"nodeType":"645","messageId":"646","endLine":1,"endColumn":19},{"ruleId":"663","severity":1,"message":"719","line":7,"column":45,"nodeType":"665","endLine":7,"endColumn":47,"suggestions":"720"},{"ruleId":"643","severity":1,"message":"712","line":1,"column":29,"nodeType":"645","messageId":"646","endLine":1,"endColumn":37},{"ruleId":"643","severity":1,"message":"671","line":3,"column":19,"nodeType":"645","messageId":"646","endLine":3,"endColumn":29},{"ruleId":"643","severity":1,"message":"721","line":14,"column":10,"nodeType":"645","messageId":"646","endLine":14,"endColumn":20},{"ruleId":"643","severity":1,"message":"722","line":14,"column":22,"nodeType":"645","messageId":"646","endLine":14,"endColumn":36},{"ruleId":"643","severity":1,"message":"723","line":14,"column":38,"nodeType":"645","messageId":"646","endLine":14,"endColumn":51},{"ruleId":"643","severity":1,"message":"712","line":1,"column":29,"nodeType":"645","messageId":"646","endLine":1,"endColumn":37},{"ruleId":"643","severity":1,"message":"724","line":2,"column":18,"nodeType":"645","messageId":"646","endLine":2,"endColumn":24},{"ruleId":"643","severity":1,"message":"725","line":27,"column":27,"nodeType":"645","messageId":"646","endLine":27,"endColumn":32},{"ruleId":"643","severity":1,"message":"726","line":31,"column":18,"nodeType":"645","messageId":"646","endLine":31,"endColumn":42},{"ruleId":"643","severity":1,"message":"727","line":31,"column":14,"nodeType":"645","messageId":"646","endLine":31,"endColumn":15},{"ruleId":"643","severity":1,"message":"728","line":31,"column":17,"nodeType":"645","messageId":"646","endLine":31,"endColumn":20},{"ruleId":"643","severity":1,"message":"729","line":31,"column":22,"nodeType":"645","messageId":"646","endLine":31,"endColumn":23},{"ruleId":"643","severity":1,"message":"730","line":72,"column":10,"nodeType":"645","messageId":"646","endLine":72,"endColumn":24},{"ruleId":"643","severity":1,"message":"731","line":76,"column":17,"nodeType":"645","messageId":"646","endLine":76,"endColumn":25},{"ruleId":"643","severity":1,"message":"732","line":76,"column":39,"nodeType":"645","messageId":"646","endLine":76,"endColumn":49},{"ruleId":"643","severity":1,"message":"733","line":77,"column":16,"nodeType":"645","messageId":"646","endLine":77,"endColumn":26},{"ruleId":"643","severity":1,"message":"734","line":77,"column":41,"nodeType":"645","messageId":"646","endLine":77,"endColumn":52},{"ruleId":"643","severity":1,"message":"735","line":92,"column":30,"nodeType":"645","messageId":"646","endLine":92,"endColumn":31},{"ruleId":"643","severity":1,"message":"736","line":118,"column":10,"nodeType":"645","messageId":"646","endLine":118,"endColumn":20},{"ruleId":"737","severity":1,"message":"738","line":125,"column":28,"nodeType":"739","endLine":126,"endColumn":14},{"ruleId":"629","replacedBy":"740"},{"ruleId":"631","replacedBy":"741"},{"ruleId":"643","severity":1,"message":"742","line":30,"column":6,"nodeType":"645","messageId":"646","endLine":30,"endColumn":18},{"ruleId":"643","severity":1,"message":"743","line":3,"column":10,"nodeType":"645","messageId":"646","endLine":3,"endColumn":17},{"ruleId":"643","severity":1,"message":"744","line":3,"column":31,"nodeType":"645","messageId":"646","endLine":3,"endColumn":42},{"ruleId":"643","severity":1,"message":"745","line":72,"column":13,"nodeType":"645","messageId":"646","endLine":72,"endColumn":17},{"ruleId":"663","severity":1,"message":"746","line":33,"column":6,"nodeType":"665","endLine":33,"endColumn":26,"suggestions":"747"},{"ruleId":"643","severity":1,"message":"748","line":6,"column":10,"nodeType":"645","messageId":"646","endLine":6,"endColumn":18},{"ruleId":"643","severity":1,"message":"749","line":4,"column":19,"nodeType":"645","messageId":"646","endLine":4,"endColumn":26},{"ruleId":"643","severity":1,"message":"750","line":16,"column":41,"nodeType":"645","messageId":"646","endLine":16,"endColumn":49},{"ruleId":"643","severity":1,"message":"751","line":16,"column":76,"nodeType":"645","messageId":"646","endLine":16,"endColumn":88},{"ruleId":"643","severity":1,"message":"752","line":16,"column":90,"nodeType":"645","messageId":"646","endLine":16,"endColumn":96},{"ruleId":"753","severity":1,"message":"754","line":48,"column":1,"nodeType":"755","endLine":51,"endColumn":2},{"ruleId":"753","severity":1,"message":"754","line":41,"column":1,"nodeType":"755","endLine":44,"endColumn":2},{"ruleId":"643","severity":1,"message":"756","line":71,"column":22,"nodeType":"645","messageId":"646","endLine":71,"endColumn":26},{"ruleId":"643","severity":1,"message":"757","line":3,"column":9,"nodeType":"645","messageId":"646","endLine":3,"endColumn":14},{"ruleId":"643","severity":1,"message":"758","line":22,"column":16,"nodeType":"645","messageId":"646","endLine":22,"endColumn":27},{"ruleId":"643","severity":1,"message":"759","line":30,"column":16,"nodeType":"645","messageId":"646","endLine":30,"endColumn":22},{"ruleId":"643","severity":1,"message":"760","line":31,"column":9,"nodeType":"645","messageId":"646","endLine":31,"endColumn":17},{"ruleId":"643","severity":1,"message":"761","line":47,"column":16,"nodeType":"645","messageId":"646","endLine":47,"endColumn":20},{"ruleId":"643","severity":1,"message":"762","line":57,"column":16,"nodeType":"645","messageId":"646","endLine":57,"endColumn":22},{"ruleId":"643","severity":1,"message":"763","line":68,"column":16,"nodeType":"645","messageId":"646","endLine":68,"endColumn":22},{"ruleId":"643","severity":1,"message":"764","line":1,"column":10,"nodeType":"645","messageId":"646","endLine":1,"endColumn":30},{"ruleId":"643","severity":1,"message":"765","line":1,"column":55,"nodeType":"645","messageId":"646","endLine":1,"endColumn":69},{"ruleId":"643","severity":1,"message":"764","line":1,"column":10,"nodeType":"645","messageId":"646","endLine":1,"endColumn":30},{"ruleId":"643","severity":1,"message":"766","line":1,"column":32,"nodeType":"645","messageId":"646","endLine":1,"endColumn":53},{"ruleId":"643","severity":1,"message":"683","line":1,"column":10,"nodeType":"645","messageId":"646","endLine":1,"endColumn":17},{"ruleId":"643","severity":1,"message":"767","line":2,"column":10,"nodeType":"645","messageId":"646","endLine":2,"endColumn":20},{"ruleId":"643","severity":1,"message":"653","line":5,"column":17,"nodeType":"645","messageId":"646","endLine":5,"endColumn":27},{"ruleId":"643","severity":1,"message":"683","line":7,"column":10,"nodeType":"645","messageId":"646","endLine":7,"endColumn":17},{"ruleId":"643","severity":1,"message":"768","line":10,"column":10,"nodeType":"645","messageId":"646","endLine":10,"endColumn":18},{"ruleId":"643","severity":1,"message":"769","line":11,"column":10,"nodeType":"645","messageId":"646","endLine":11,"endColumn":16},{"ruleId":"643","severity":1,"message":"770","line":12,"column":10,"nodeType":"645","messageId":"646","endLine":12,"endColumn":21},{"ruleId":"643","severity":1,"message":"771","line":12,"column":23,"nodeType":"645","messageId":"646","endLine":12,"endColumn":34},{"ruleId":"643","severity":1,"message":"772","line":12,"column":36,"nodeType":"645","messageId":"646","endLine":12,"endColumn":44},{"ruleId":"753","severity":1,"message":"754","line":37,"column":1,"nodeType":"755","endLine":40,"endColumn":2},{"ruleId":"753","severity":1,"message":"754","line":4,"column":1,"nodeType":"755","endLine":7,"endColumn":2},{"ruleId":"753","severity":1,"message":"754","line":4,"column":1,"nodeType":"755","endLine":7,"endColumn":2},{"ruleId":"643","severity":1,"message":"773","line":69,"column":10,"nodeType":"645","messageId":"646","endLine":69,"endColumn":21},{"ruleId":"753","severity":1,"message":"754","line":19,"column":1,"nodeType":"755","endLine":22,"endColumn":2},{"ruleId":"753","severity":1,"message":"754","line":17,"column":1,"nodeType":"755","endLine":20,"endColumn":2},{"ruleId":"753","severity":1,"message":"754","line":17,"column":1,"nodeType":"755","endLine":20,"endColumn":2},{"ruleId":"663","severity":1,"message":"774","line":84,"column":6,"nodeType":"665","endLine":84,"endColumn":38,"suggestions":"775"},{"ruleId":"663","severity":1,"message":"667","line":84,"column":7,"nodeType":"668","endLine":84,"endColumn":37},"no-native-reassign",["776"],"no-negated-in-lhs",["777"],["776"],["777"],["776"],["777"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression",["776"],["777"],"@typescript-eslint/no-unused-vars","'IsNull' is defined but never used.","Identifier","unusedVar","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator",["776"],["777"],"'useContext' is defined but never used.","'collection' is assigned a value but never used.","'read' is assigned a value but never used.",["776"],["777"],"'IUseToggle' is defined but never used.","'ArrxContext' is defined but never used.","'Element' is defined but never used.","'ElementIndex' is defined but never used.","'ElementValue' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'index' and 'values'. Either include them or remove the dependency array.","ArrayExpression",["778"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["779"],"'GetValueAt' is defined but never used.","'SetValueAt' is defined but never used.","'IEditor' is defined but never used.","'boolField' is assigned a value but never used.",["776"],["777"],"'Comparator' is defined but never used.","'Pick' is defined but never used.","'ToArray' is defined but never used.","'Intersect' is defined but never used.","'Union' is defined but never used.","'Groups' is defined but never used.","'IsEmpty' is defined but never used.","'nul' is assigned a value but never used.","'empty' is assigned a value but never used.","'objIdVal' is assigned a value but never used.","'indexes' is assigned a value but never used.","'groupOf3' is assigned a value but never used.","'TestSorts' is defined but never used.","'TestFilters' is defined but never used.",["776"],["777"],"no-new-wrappers","Do not use Number as a constructor.","NewExpression","noConstructor","use-isnan","Use the isNaN function to compare with NaN.","BinaryExpression","comparisonWithNaN","'useUpdate' is defined but never used.","React Hook useEffect has missing dependencies: '_value' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["780"],"React Hook useEffect has a missing dependency: 'Load'. Either include it or remove the dependency array.",["781"],"React Hook useEffect has missing dependencies: 'Collections', 'Load', and 'accessors'. Either include them or remove the dependency array.",["782"],"'IUseStateAt' is defined but never used.","React Hook useEffect has missing dependencies: 'SetValue', 'Value', and 'accessor'. Either include them or remove the dependency array. If 'SetValue' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["783"],"'useEffect' is defined but never used.","'useState' is defined but never used.",["776"],["777"],"React Hook useEffect has missing dependencies: 'Load', 'accessors', and 'dao'. Either include them or remove the dependency array.",["784"],"React Hook useMemo has a missing dependency: 'crud'. Either include it or remove the dependency array.",["785"],"React Hook useMemo has a missing dependency: 'ifields'. Either include it or remove the dependency array.",["786"],"'ramqIField' is assigned a value but never used.","'firstNameField' is assigned a value but never used.","'lastNameField' is assigned a value but never used.","'Reader' is defined but never used.","'pages' is assigned a value but never used.","'SubmitAnswersAndNextPage' is defined but never used.","'a' is assigned a value but never used.","'mid' is assigned a value but never used.","'b' is assigned a value but never used.","'AbbrevIndexes2' is defined but never used.","'fistLeft' is assigned a value but never used.","'firstRight' is assigned a value but never used.","'secondLeft' is assigned a value but never used.","'secondRight' is assigned a value but never used.","'T' is defined but never used.","'TestAbbrev' is defined but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText",["776"],["777"],"'FeedbackHook' is defined but never used.","'Session' is defined but never used.","'IUseSession' is defined but never used.","'date' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'IniColumns'. Either include it or remove the dependency array.",["787"],"'feedback' is defined but never used.","'IReader' is defined but never used.","'Validate' is assigned a value but never used.","'CreateUpdate' is assigned a value but never used.","'Delete' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'data' is assigned a value but never used.","'ICrud' is defined but never used.","'Collections' is defined but never used.","'Create' is defined but never used.","'toCreate' is assigned a value but never used.","'Read' is defined but never used.","'Update' is defined but never used.","'Delete' is defined but never used.","'ValidatorArrayLength' is defined but never used.","'ValidatorRegex' is defined but never used.","'ValidatorMinMaxNumber' is defined but never used.","'DaoContext' is defined but never used.","'AdminRow' is defined but never used.","'Header' is defined but never used.","'PagerFromTo' is defined but never used.","'PageOfPages' is defined but never used.","'PagerBtn' is defined but never used.","'ReadDefault' is defined but never used.","React Hook useEffect has missing dependencies: '_values' and 'index'. Either include them or remove the dependency array. If 'setValue' needs the current value of 'index', you can also switch to useReducer instead of useState and read 'index' in the reducer.",["788"],"no-global-assign","no-unsafe-negation",{"desc":"789","fix":"790"},{"desc":"791","fix":"792"},{"desc":"793","fix":"794"},{"desc":"795","fix":"796"},{"desc":"797","fix":"798"},{"desc":"799","fix":"800"},{"desc":"801","fix":"802"},{"desc":"803","fix":"804"},{"desc":"805","fix":"806"},{"desc":"807","fix":"808"},{"desc":"809","fix":"810"},"Update the dependencies array to be: [index, values]",{"range":"811","text":"812"},"Update the dependencies array to be: [callback]",{"range":"813","text":"814"},"Update the dependencies array to be: [_value, props, value]",{"range":"815","text":"816"},"Update the dependencies array to be: [Load]",{"range":"817","text":"818"},"Update the dependencies array to be: [Collections, Load, accessors]",{"range":"819","text":"820"},"Update the dependencies array to be: [SetValue, Value, accessor, value]",{"range":"821","text":"822"},"Update the dependencies array to be: [Load, accessors, dao]",{"range":"823","text":"824"},"Update the dependencies array to be: [crud]",{"range":"825","text":"826"},"Update the dependencies array to be: [ifields]",{"range":"827","text":"828"},"Update the dependencies array to be: [IniColumns, collectionAccessor]",{"range":"829","text":"830"},"Update the dependencies array to be: [_values, index]",{"range":"831","text":"832"},[1586,1617],"[index, values]",[304,332],"[callback]",[2239,2246],"[_value, props, value]",[580,582],"[Load]",[745,747],"[Collections, Load, accessors]",[1231,1238],"[SetValue, Value, accessor, value]",[480,482],"[Load, accessors, dao]",[940,942],"[crud]",[200,202],"[ifields]",[1044,1064],"[IniColumns, collectionAccessor]",[2724,2756],"[_values, index]"]