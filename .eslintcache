[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\input.utils.ts":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\inputarray\\inputarray.component.tsx":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\inputarray\\inputarray.hook.tsx":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\experiments.tsx":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\_utils.ts":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\_input.ts":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\input\\input.component.tsx":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\inputarray\\readarray.component.tsx":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\select\\select.component.tsx":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\select\\select.hook.tsx":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\select\\selectheader.component.tsx":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\select\\RemovableItems.component.tsx":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\select\\options.component.tsx":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\field\\field.class.ts":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testinputs.tsx":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testinputarrays.tsx":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testIsNull.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testarrayutils.tsx":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\objx\\_objx.ts":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\objx\\objx.component.tsx":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\objx\\fields.components.tsx":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\useloader\\_useloader.ts":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\useloader\\useloader.hook.tsx":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\_mongooseparser.ts":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudaxios.ts":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientheader.component.tsx":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentifier.component.tsx":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientinfos.component.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientsloader.component.tsx":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireloader.component.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireforms.component.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnairepage.page.tsx":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\arrx\\_arrx.ts":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\arrx\\arrx.component.tsx":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testArrx.tsx":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testarrx.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\arrx2\\_arrx.ts":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\arrx2\\arrx.component.tsx":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\objx2\\_objx.ts":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\objx2\\objx.component.tsx":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\objx2\\objx.hook.ts":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testselect.tsx":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testinput2.tsx":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input2\\input\\input.component.tsx":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\usepage\\usePage.tsx":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\arrx2\\arrx.hook.ts":"59","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testarrx3.tsx":"60","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\arrx3\\arrx.component.tsx":"61","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\arrx3\\objx.component.tsx":"62"},{"size":600,"mtime":1609529670659,"results":"63","hashOfConfig":"64"},{"size":684,"mtime":1610046902090,"results":"65","hashOfConfig":"64"},{"size":362,"mtime":499162500000,"results":"66","hashOfConfig":"64"},{"size":225,"mtime":1609475507334,"results":"67","hashOfConfig":"64"},{"size":119,"mtime":1609476074144,"results":"68","hashOfConfig":"64"},{"size":117,"mtime":1609476049273,"results":"69","hashOfConfig":"64"},{"size":496,"mtime":1609883323259,"results":"70","hashOfConfig":"64"},{"size":1628,"mtime":1609534858379,"results":"71","hashOfConfig":"64"},{"size":2724,"mtime":1610053638536,"results":"72","hashOfConfig":"64"},{"size":970,"mtime":1609787735783,"results":"73","hashOfConfig":"64"},{"size":699,"mtime":1610155067684,"results":"74","hashOfConfig":"64"},{"size":693,"mtime":1610152063091,"results":"75","hashOfConfig":"64"},{"size":643,"mtime":1609791814153,"results":"76","hashOfConfig":"64"},{"size":1432,"mtime":1610133369532,"results":"77","hashOfConfig":"64"},{"size":3330,"mtime":1609805687249,"results":"78","hashOfConfig":"64"},{"size":1698,"mtime":1610154963843,"results":"79","hashOfConfig":"64"},{"size":1775,"mtime":1610135395752,"results":"80","hashOfConfig":"64"},{"size":489,"mtime":1609790785285,"results":"81","hashOfConfig":"64"},{"size":1566,"mtime":1609790444636,"results":"82","hashOfConfig":"64"},{"size":2174,"mtime":1610067180456,"results":"83","hashOfConfig":"64"},{"size":977,"mtime":1610068539668,"results":"84","hashOfConfig":"64"},{"size":497,"mtime":1609787735852,"results":"85","hashOfConfig":"64"},{"size":1025,"mtime":1609790418274,"results":"86","hashOfConfig":"64"},{"size":2351,"mtime":1609452679027,"results":"87","hashOfConfig":"64"},{"size":842,"mtime":1609794966770,"results":"88","hashOfConfig":"64"},{"size":1151,"mtime":1609795352133,"results":"89","hashOfConfig":"64"},{"size":776,"mtime":1609796410662,"results":"90","hashOfConfig":"64"},{"size":1238,"mtime":1609805930810,"results":"91","hashOfConfig":"64"},{"size":223,"mtime":1609788148850,"results":"92","hashOfConfig":"64"},{"size":478,"mtime":1609452679078,"results":"93","hashOfConfig":"64"},{"size":1420,"mtime":1609976051100,"results":"94","hashOfConfig":"64"},{"size":98,"mtime":1609788148795,"results":"95","hashOfConfig":"64"},{"size":1301,"mtime":1609804782791,"results":"96","hashOfConfig":"64"},{"size":329,"mtime":1609788021109,"results":"97","hashOfConfig":"64"},{"size":1819,"mtime":1609452679070,"results":"98","hashOfConfig":"64"},{"size":1608,"mtime":1609452679069,"results":"99","hashOfConfig":"64"},{"size":2252,"mtime":1609452679073,"results":"100","hashOfConfig":"64"},{"size":2239,"mtime":1609979770974,"results":"101","hashOfConfig":"64"},{"size":222,"mtime":1609965015785,"results":"102","hashOfConfig":"64"},{"size":908,"mtime":1609891033736,"results":"103","hashOfConfig":"64"},{"size":1601,"mtime":1609893388314,"results":"104","hashOfConfig":"64"},{"size":1383,"mtime":1609974282355,"results":"105","hashOfConfig":"64"},{"size":1663,"mtime":1609979895800,"results":"106","hashOfConfig":"64"},{"size":4453,"mtime":1610069866296,"results":"107","hashOfConfig":"64"},{"size":1134,"mtime":1609979572737,"results":"108","hashOfConfig":"64"},{"size":133,"mtime":1609978711077,"results":"109","hashOfConfig":"64"},{"size":1460,"mtime":1609983161743,"results":"110","hashOfConfig":"64"},{"size":2449,"mtime":1610062912048,"results":"111","hashOfConfig":"64"},{"size":3950,"mtime":1610155605090,"results":"112","hashOfConfig":"64"},{"size":520,"mtime":1610143452275,"results":"113","hashOfConfig":"64"},{"size":3367,"mtime":1610155548895,"results":"114","hashOfConfig":"64"},{"size":210,"mtime":1610060070186,"results":"115","hashOfConfig":"64"},{"size":2593,"mtime":1610141741995,"results":"116","hashOfConfig":"64"},{"size":832,"mtime":1610141741995,"results":"117","hashOfConfig":"64"},{"size":2231,"mtime":1610068717728,"results":"118","hashOfConfig":"64"},{"size":479,"mtime":1610135575520,"results":"119","hashOfConfig":"64"},{"size":1439,"mtime":1610135145722,"results":"120","hashOfConfig":"64"},{"size":1677,"mtime":1610139136310,"results":"121","hashOfConfig":"64"},{"size":1525,"mtime":1610143684519,"results":"122","hashOfConfig":"64"},{"size":3592,"mtime":1610155006760,"results":"123","hashOfConfig":"64"},{"size":2609,"mtime":1610150914643,"results":"124","hashOfConfig":"64"},{"size":1279,"mtime":1610151402430,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},"ke513i",{"filePath":"129","messages":"130","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"128"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"138"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"138"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"138"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"138"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"138"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"138"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"138"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"138"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"138"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"138"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["266","267"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",["268","269","270","271","272","273"],"import React from 'react'; \nimport {Switch, Route} from 'react-router-dom'; \nimport Nav from './components/nav/nav.component'; \nimport Home from './pages/home.page'; \nimport Patient from './pages/patient/patient.page'; \nimport Admin from './pages/admin/admin.page'; \nimport Experiments from './pages/experiments/experiments'; \n\n\nexport default function App() { \n  //type test = Input_Object.; \n\n  return <Experiments />\n  //return <AdminSection/> \n  /*return <div> \n  <Nav/> \n  <Switch> \n    <Route exact path='/' component={Home} /> \n    <Route path='/patient' component={Patient} /> \n    <Route path='/admin' component={Admin} /> \n  </Switch> \n  </div> */\n} \n\n//export default App;\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\menu.components.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",[],["274","275"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\input.utils.ts",[],["276","277"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\inputarray\\inputarray.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\experiments.tsx",["278","279","280","281","282","283"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\_utils.ts",["284","285","286"],"import {Filter, Remove, ToArray, Union, Combine, Duplicates, Order, CommonPredicates} from './arrays.utils'; \r\nimport {SetSize, SetWidth, IEvent, IsPressEnter, OnEnter, GetInputType, GetValueFromInput} from './htmlelement.utils'; \r\nimport {Copy, Edit, Read, IsEmpty, IsNull, GetDefaultValueByType, GetTypeByValue} from './valuetypetesting.utils'; \r\nimport {Field} from './field/field.class'; \r\n\r\n\r\nexport {Filter, Remove, ToArray, Union, Combine, Duplicates, Order, CommonPredicates} \r\nexport {SetSize, SetWidth, IsPressEnter, OnEnter, GetInputType, GetValueFromInput} \r\nexport type {IEvent} \r\nexport {Copy, Edit, Read, IsEmpty, IsNull, GetDefaultValueByType, GetTypeByValue} \r\nexport {Field} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",["287"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\input\\input.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\inputarray\\readarray.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\select\\select.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\select\\select.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\select\\selectheader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\select\\RemovableItems.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input\\select\\options.component.tsx",["288"],"import React, {useContext, useEffect} from 'react'; \r\n//import {IOption} from '../../reusable/_input'; \r\nimport {SelectContext} from './select.component'; \r\n\r\n\r\n// OPTIONS ======================================\r\ninterface IOptions { \r\n  label?:string; // defines a optgroup with a label \r\n  options:IOption[]; \r\n  [key:string]:any; \r\n} \r\n//const OptionsContext = React.createContext({}); \r\nexport function Options({label, options}:IOptions) { \r\n  const {setOptions} = useContext(SelectContext); \r\n  \r\n  useEffect(() => { \r\n    setOptions( (prev:any) => [...prev, ...options] ); \r\n  }, []); \r\n\r\n  return <div > \r\n    {label ? (<div className={'select_body_label'}>{label}</div>) : null} \r\n    {options.map( (option,i) => { \r\n      return <Option key={i} option={option} /> \r\n    })} \r\n  </div> \r\n} \r\n\r\nfunction Option({option}:{option:IOption}) { \r\n  const {SelectValue} = useContext(SelectContext); \r\n  return <div className={'select_body_option'} onClick={() => SelectValue(option.value)}> \r\n    {option.label} \r\n  </div>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\field\\field.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testinputs.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testinputarrays.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testIsNull.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testarrayutils.tsx",["289","290","291"],"import React from 'react'; \r\nimport {Filter, Combine, Duplicates, IsEmpty, CommonPredicates, Order} from '../../reusable/utils/_utils'; \r\nconst {ByIndexes, Intersect, Exclusion, Compare} = CommonPredicates; \r\n\r\n\r\n// EXPERIMENTS ==================================\r\nexport function TestArrayUtils() { \r\n  const strings = [{name:'a'}, {name:'b'}, {name:'b'}, {name:'c'}, {name:'d'}, {name:'e'}, {name:'d'}]; \r\n  const ordering = ['e','a', 'c']; \r\n  const intersect = ['a','b','d']; \r\n\r\n  const intersects = Filter(ordering, Intersect(intersect)); \r\n  const exclusions = Filter(ordering, Exclusion(intersect)); \r\n  const ordered = Order(strings, ordering, (a:any, b:any) => a['name']===b ); \r\n\r\n  const combine = Combine(ordering, strings, (a,b) => a===b.name).map(([a,b]) => b); \r\n\r\n  const test = Filter(strings, ByIndexes([5,4,1])); \r\n\r\n  const {duplicates, unics} = Duplicates(strings, (a:any, b:any) => JSON.stringify(a) === JSON.stringify(b) ); \r\n\r\n  return <div> \r\n    {JSON.stringify(duplicates)} \r\n    <br/>\r\n    {JSON.stringify(unics)} \r\n    <br/>\r\n    {JSON.stringify(test)} \r\n    <br/>\r\n    {JSON.stringify(intersects)} \r\n    <br/>\r\n    {JSON.stringify(exclusions)} \r\n    <br/>\r\n    {JSON.stringify(ordered)} \r\n  </div> \r\n} \r\n\r\n\r\n",["292","293"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\objx\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\objx\\objx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\objx\\fields.components.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\useloader\\_useloader.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\useloader\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudaxios.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["294"],"export interface IMongooseModel { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\n//async function ParseFields() \r\nexport function ParseField(field:IMongooseField):IField { \r\n  const {path, instance, options} = field; \r\n  const ifield:IField = {} as IField; \r\n  ifield.accessor = path; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.options = options; \r\n  ifield.type = GetType(field); \r\n  ifield.enums = options['enum'] ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, ifield.options); \r\n  \r\n  ifield.isEnum = options['enum']? true: false; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = instance.toLowerCase() === 'objectid'; \r\n  //ifield.isMixed = \r\n  //ifield.validators = \r\n  return ifield; \r\n} \r\n\r\nfunction GetType({instance, $embeddedSchemaType}:IMongooseField) { \r\n  if(instance.toLocaleLowerCase() === 'array') \r\n    return ($embeddedSchemaType?.instance ?? '').toLocaleLowerCase(); \r\n  return instance.toLocaleLowerCase(); \r\n} \r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",["295"],"import React, {useState} from 'react'; \r\nimport {CrudMongoose} from '../../reusable/mongooseparser/_mongooseparser'; \r\nimport {IsNull, IsEmpty} from '../../reusable/utils/_utils'; \r\n\r\nimport {PatientHeader} from './components/patientheader.component'; \r\nimport {PatientsLoader} from './components/patientsloader.component'; \r\nimport {PatientIdentifier} from './components/patientidentifier.component'; \r\nimport {PatientInfos} from './components/patientinfos.component'; \r\nimport QuestionnairePage from '../questionnaire/questionnairepage.page';\r\n\r\n/*import {QuestionnaireLoader} from './components/questionnaireloader.component'; \r\nimport {Questionnaire} from './components/questionnaire.component'; */\r\n\r\ninterface IPatientContext { \r\n  patients:ICollection; \r\n  setPatients:any; \r\n\r\n  patient:IEntry; \r\n  setPatient:any; \r\n\r\n  patientUpdated:boolean; \r\n  setPatientUpdated:any; \r\n} \r\n// PATIENT ======================================\r\nexport const PatientContext = React.createContext({} as IPatientContext); \r\nexport const CrudContext = React.createContext({} as {crud:CrudMongoose});\r\n\r\nexport default function Patient() { \r\n  const crud = new CrudMongoose(`https://fjg-mongoose-heroku.herokuapp.com/api/`); \r\n  const [patient, setPatient] = useState<IEntry>({} as IEntry); \r\n  const [patientUpdated, setPatientUpdated] = useState(false); \r\n  const [patients, setPatients] = useState({} as ICollection); \r\n  \r\n  const context = {crud, patients, setPatients, \r\n    patient, setPatient, \r\n    patientUpdated, setPatientUpdated} as IPatientContext; \r\n\r\n  if(!patientUpdated) \r\n    return <div> \r\n      <CrudContext.Provider value={{crud}} >\r\n        <PatientContext.Provider value={context} > \r\n          <PatientHeader /> \r\n          {IsEmpty(patients) && <PatientsLoader/>} \r\n          {!IsEmpty(patients) && IsEmpty(patient) && <PatientIdentifier/>} \r\n          {!IsEmpty(patients) && !IsEmpty(patient) && <PatientInfos/>} \r\n        </PatientContext.Provider> \r\n      </CrudContext.Provider>\r\n    </div> \r\n\r\n  return <div> \r\n    <CrudContext.Provider value={{crud}} >\r\n      <PatientContext.Provider value={context} > \r\n        <QuestionnairePage/> \r\n      </PatientContext.Provider> \r\n    </CrudContext.Provider>\r\n  </div>  \r\n} \r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientheader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientidentifier.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientinfos.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientsloader.component.tsx",["296"],"import {useContext, useEffect} from 'react'; \r\nimport {useLoader} from '../../../reusable/useloader/_useloader'; \r\n\r\nimport {CrudContext, PatientContext} from '../patient.page'; \r\n\r\n\r\n// PatientsCollectionLoader ===================== \r\nexport function PatientsLoader() { \r\n  const {crud} = useContext(CrudContext); \r\n  const {setPatients} = useContext(PatientContext); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const loadfunc = async () => { \r\n    const response:IResponse = await crud.Collection('patients'); \r\n    if(response.success) \r\n      setPatients(() => response.data as ICollection); \r\n  }; \r\n\r\n  useEffect(() => {Load(loadfunc)}, []); \r\n\r\n\r\n  /* ?????? TO ADD IN USELOADER ??????\r\n  function Component(props) {\r\n    const [fetched, setFetched] = React.useState(false);\r\n    React.useEffect(() => {\r\n      const ac = new AbortController();\r\n      Promise.all([\r\n        fetch('http://placekitten.com/1000/1000', {signal: ac.signal}),\r\n        fetch('http://placekitten.com/2000/2000', {signal: ac.signal})\r\n      ]).then(() => setFetched(true))\r\n        .catch(ex => console.error(ex));\r\n      return () => ac.abort(); // Abort both fetches on unmount\r\n    }, []);\r\n    return fetched;\r\n  }\r\n  */\r\n\r\n  if(!state.ready) \r\n    return <div> Loading ... </div> \r\n  if(state.ready && !state.success) \r\n    return <div> Oh no! An error occured ... </div> \r\n  return null; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireloader.component.tsx",["297"],"import {useEffect, useContext} from 'react'; \r\nimport {useLoader} from '../../../reusable/useloader/_useloader'; \r\nimport {CrudContext} from '../../patient/patient.page';\r\nimport {QuestionnaireContext} from '../questionnairepage.page';\r\n\r\n\r\n\r\n// PatientsCollectionLoader ===================== \r\nexport function QuestionnaireLoader() { \r\n  const {crud} = useContext(CrudContext); \r\n\r\n  const {setQuestions, setResponses} = useContext(QuestionnaireContext); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const loadfunc = async () => { \r\n    const questions:IResponse = await crud.Collection('questions'); \r\n    if(questions.success) \r\n      setQuestions(() => questions.data as ICollection); \r\n    console.log(questions);\r\n\r\n    const responses:IResponse = await crud.Collection('responses'); \r\n    if(responses.success) \r\n      setResponses(() => responses.data as ICollection); \r\n  }; \r\n\r\n  useEffect(() => {Load(loadfunc)}, []); \r\n\r\n\r\n  /* ?????? TO ADD IN USELOADER ??????\r\n  function Component(props) {\r\n    const [fetched, setFetched] = React.useState(false);\r\n    React.useEffect(() => {\r\n      const ac = new AbortController();\r\n      Promise.all([\r\n        fetch('http://placekitten.com/1000/1000', {signal: ac.signal}),\r\n        fetch('http://placekitten.com/2000/2000', {signal: ac.signal})\r\n      ]).then(() => setFetched(true))\r\n        .catch(ex => console.error(ex));\r\n      return () => ac.abort(); // Abort both fetches on unmount\r\n    }, []);\r\n    return fetched;\r\n  }\r\n  */\r\n\r\n  if(!state.ready) \r\n    return <div> Loading ... </div> \r\n  if(state.ready && !state.success) \r\n    return <div> Oh no! An error occured ... </div> \r\n  return null; \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaireforms.component.tsx",["298","299","300","301","302","303","304","305","306","307","308","309","310","311","312"],"import React, {useContext, useState} from 'react'; \r\nimport {Objx, ObjxContext, Fields, FieldLabel, FieldContext, FieldValue} from '../../../reusable/objx/_objx'; \r\nimport {Select, Options, InputArray} from '../../../reusable/input/_input'; \r\nimport {CrudContext, PatientContext} from '../../patient/patient.page'; \r\nimport {QuestionnaireContext} from '../questionnairepage.page'; \r\nimport {Arrx, Element, ArrxContext, ElementContext} from '../../../reusable/arrx/_arrx'; \r\n\r\ninterface IResponseType { \r\n  type: string; \r\n  enum?: any[]; \r\n  range?: any; \r\n} \r\n\r\ninterface IAnswer { \r\n  pid:string; \r\n  qid:string; \r\n  optional:boolean; \r\n  labels: string[]; \r\n  responseType: IResponseType; \r\n  //date: ; \r\n  answer:any; \r\n} \r\n\r\nfunction useAnswers() { \r\n  const {crud} = useContext(CrudContext); \r\n  const {patient:{_id:pid}} = useContext(PatientContext); \r\n  const {questions, responses} = useContext(QuestionnaireContext); \r\n  \r\n  const GetResponseType = (id:string) => { \r\n    const response = responses.entries.find(r=>r._id===id); \r\n    if(response) \r\n      return response['responseType']; \r\n    return 'no responses'; \r\n  }\r\n\r\n  const blankAnswers:IAnswer[] = questions.entries.map( q => { \r\n    return {pid, \r\n      qid:q._id, \r\n      labels:q['labels'], \r\n      optional: q['optional'], \r\n      responseType: GetResponseType(q['responseType']), \r\n      answer:null, \r\n    } as IAnswer; \r\n  }); \r\n  const [answers, setAnswers] = useState<IAnswer[]>(blankAnswers); \r\n  return {answers, setAnswers}; \r\n} \r\n\r\nexport const AnswersContext = React.createContext({} as {answers:any[], setAnswers:any}); \r\n// QUESTIONNAIRE ================================\r\nexport function Questionnaire() { \r\n  const {answers:values, setAnswers} = useAnswers(); \r\n  const setValues = (newValues:any) => {\r\n    console.log(newValues);\r\n    setAnswers(newValues); \r\n    return newValues; \r\n  } \r\n\r\n  return <div> \r\n    <Arrx {...{values, setValues}}> \r\n      <QLabel/> \r\n      <QValue/> \r\n      <QAnswer/> \r\n      <br/>\r\n    </Arrx>\r\n  </div> \r\n} \r\n\r\nfunction QLabel() { \r\n  const {value} = useContext(ElementContext); \r\n  const {labels, answer} = value as IAnswer; \r\n\r\n  return <span>{labels[0]}:</span> \r\n} \r\n\r\nfunction QValue() { \r\n  const {value, setValue, index} = useContext(ElementContext); \r\n  const {responseType, answer} = value as IAnswer; \r\n\r\n  return <span> \r\n    {JSON.stringify(answer)}; \r\n  </span> \r\n} \r\n\r\nfunction QAnswer() { \r\n  //console.log('QAnswer'); \r\n  const {value, setValue, index} = useContext(ElementContext); \r\n  const {responseType, answer} = value as IAnswer; \r\n  //console.log(answer); \r\n\r\n  //const [Answer, SetAnswer] = useState(answer); \r\n\r\n  const SetValue = (newAnswer:any) => { \r\n    const newValue = {...(value as IAnswer)}; \r\n    newValue.answer = newAnswer; \r\n    setValue(newValue); \r\n  } \r\n  \r\n  if(responseType.enum) { \r\n    const options:IOption[] = responseType.enum.map( (o,i) => { \r\n      return {value:i, label:o} as IOption; \r\n    }); \r\n    return <Select {...{value:answer, setValue:SetValue}} > \r\n      <Options {...{options}}/> \r\n    </Select> \r\n  } \r\n  return <span>{JSON.stringify(answer)}</span> \r\n} \r\n\r\n\r\n\r\n/*\r\nconst AnswerContext = React.createContext({} as {answer:any, setAnswer:any}); \r\nfunction Answers({children}:React.PropsWithChildren<any>) { \r\n  const {answers, setAnswers} = useAnswers(); \r\n\r\n  return <AnswersContext.Provider value={{answers, setAnswers}}> \r\n    {answers.map(a => { \r\n      <AnswerContext.Provider value={} > \r\n\r\n      </AnswerContext.Provider> \r\n    })}\r\n  </AnswersContext.Provider> \r\n} \r\n\r\n\r\nfunction DisplayQuestion({entry}:{entry:any}) { \r\n  const [obj, setObj] = useState(entry); \r\n  const {}\r\n  const fieldsToDisplay = ['labels', 'responseType']; \r\n  const IFields = ifields.filter(f => fieldsToDisplay.includes(f.accessor)); \r\n\r\n  return <Objx {...{obj, setObj, ifields:IFields}}> \r\n    -------------------------------------\r\n    <Fields> \r\n      <FieldLabel/> \r\n      <FieldValue /> \r\n      <br/> \r\n      ... \r\n    </Fields> \r\n    ------------------------------------- \r\n  </Objx> \r\n}\r\n\r\nfunction QuestionLabel() { \r\n  const {obj, setObj, ifields} = useContext(ObjxContext); \r\n  const {value, setValue, ifield} = useContext(FieldContext); \r\n\r\n  return <div> \r\n\r\n  </div> \r\n} \r\n\r\nfunction ResponseChoice() { \r\n  const {obj, setObj, ifields} = useContext(ObjxContext); \r\n  const {value, setValue, ifield} = useContext(FieldContext); \r\n\r\n\r\n\r\n  return <div> \r\n\r\n  </div> \r\n}\r\n*/","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnairepage.page.tsx",["313"],"import React, {useState} from 'react'; \r\nimport { CrudMongoose } from '../../reusable/mongooseparser/mongooseaxios';\r\nimport { IsEmpty } from '../../reusable/utils/_utils';\r\nimport { QuestionnaireLoader } from './components/questionnaireloader.component';\r\nimport { Questionnaire } from './components/questionnaireforms.component';\r\n\r\ninterface IQuestionnaireContext { \r\n  questions:ICollection; \r\n  setQuestions:any; \r\n  responses: ICollection; \r\n  setResponses: any; \r\n} \r\n\r\nexport const QuestionnaireContext = React.createContext({} as IQuestionnaireContext); \r\nexport default function QuestionnairePage() { \r\n  const [questions, setQuestions] = useState({} as ICollection); \r\n  const [responses, setResponses] = useState({} as ICollection); \r\n\r\n  const context = {questions, setQuestions, responses, setResponses}; \r\n  return <div> \r\n    <QuestionnaireContext.Provider value={context}> \r\n      <h1>Questionnaire</h1>\r\n      {(IsEmpty(questions) || IsEmpty(responses)) && <QuestionnaireLoader /> } \r\n      {!(IsEmpty(questions) || IsEmpty(responses)) && <Questionnaire /> } \r\n    </QuestionnaireContext.Provider> \r\n  </div> \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\arrx\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testArrx.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testarrx.tsx",["314","315","316","317","318","319","320","321","322","323"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\arrx2\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\arrx2\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\objx2\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\objx2\\objx.component.tsx",["324","325"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {IObjx, IUseObjx, useObjx } from './objx.hook';\r\nimport {Input} from '../../reusable/input/_input'; \r\nimport {OnEnter} from '../../reusable/utils/_utils';\r\n\r\n\r\nexport const ObjxContext = React.createContext({} as IUseObjx); \r\nconst FieldsContext = React.createContext({} as any); \r\nexport const FieldContext = React.createContext({} as {ifield:IField}); \r\n\r\n// OBJX =========================================\r\nexport function Objx({children, ...props}:React.PropsWithChildren<IObjx>) { \r\n  const context:IUseObjx = useObjx(props); \r\n  // render --------------------------------------\r\n  return <ObjxContext.Provider value={context}> \r\n    {children} \r\n  </ObjxContext.Provider>; \r\n} \r\n\r\n// FIELDS =======================================\r\nexport function Fields({ifields, children}:React.PropsWithChildren<{ifields?:IField[]}>) { \r\n  const context = useContext(ObjxContext); \r\n  const IFields = ifields ?? context.ifields; \r\n\r\n  return <FieldsContext.Provider value={{}}> \r\n    {IFields.map( (ifield:IField, index:number) => { \r\n      return <Field key={index} {...{ifield}} >{children}</Field> \r\n    })} \r\n  </FieldsContext.Provider> \r\n}\r\n\r\nexport function Field({ifield, children}:React.PropsWithChildren<{ifield:IField}>) {\r\n  return <FieldContext.Provider value={{ifield}} > \r\n    {children} \r\n  </FieldContext.Provider> \r\n}\r\n\r\n\r\n// Typical field element =============================\r\n// Field Label\r\nexport function FieldLabel() { \r\n  const {ifield:{label}} = useContext(FieldContext); \r\n  return <span>{label}</span> \r\n}\r\n\r\n// Field Read\r\nexport function FieldRead() { \r\n  const {ReadField: Read} = useContext(ObjxContext); \r\n  const {ifield} = useContext(FieldContext); \r\n  return <span>{JSON.stringify(Read(ifield))}</span> \r\n}\r\n\r\n// Field Edit \r\nexport function FieldEdit({...props}:React.PropsWithChildren<React.HTMLAttributes<HTMLInputElement>>) { \r\n  console.log('Field');\r\n  const {ReadField: Read, EditField: Edit} = useContext(ObjxContext); \r\n  const {ifield} = useContext(FieldContext); \r\n  const [value, setValue] = useState(Read(ifield)); \r\n  \r\n  //console.log([Read(ifield), value]); \r\n  //const ReInitValue = JSON.stringify(Read(ifield)) === JSON.stringify(value); \r\n\r\n  useEffect(() => { \r\n    if(Read(ifield) !== value)\r\n      setValue(Read(ifield)); \r\n  }, [Read(ifield)]); \r\n\r\n  const {type, defaultValue} = ifield; \r\n\r\n  const onKeyUp = (event:any) => OnEnter(event, () => { \r\n    Edit(value, ifield); \r\n  }); \r\n\r\n  return <Input {...{type, value, setValue, defaultValue, onKeyUp, ...props}} /> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\objx2\\objx.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testselect.tsx",["326","327"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testinput2.tsx",["328","329","330","331","332","333"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\input2\\input\\input.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\usepage\\usePage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\arrx2\\arrx.hook.ts",["334"],"import {useContext} from 'react'; \r\nimport {ElementContext} from './arrx.component'; \r\n\r\nexport interface IArrx { \r\n  type:string; \r\n//  inputType?:string; \r\n  values:any[]; \r\n  //setValues:any; \r\n  defaultValue:any; \r\n} \r\n\r\nexport interface IUseArrx extends IArrx { \r\n  //CreateElement:(newValue:any)=>void; \r\n  ReadElement:(at?:number)=>any; \r\n  //UpdateElement:(newValue:any, at:number)=>void; \r\n  //DeleteElement:(at:number)=>void; \r\n} \r\n\r\nexport function useArrx(props:IArrx):IUseArrx { \r\n  const values = props.values ?? []; \r\n  //const {setValues, defaultValue} = props; \r\n  const {defaultValue} = props; \r\n\r\n  /*function GetIndex(at?:number) { \r\n    const {index} = useContext(ElementContext); \r\n    return at ?? index; \r\n  } */\r\n\r\n  /*function Create(newValue:any) { \r\n    setValues([...values, newValue]); \r\n  } */\r\n\r\n  function ReadElement(at?:number) { \r\n    const Index = useContext(ElementContext); \r\n    const index = at ?? -1; \r\n    return !(index >=0) ? defaultValue: (values[index] ?? defaultValue); \r\n  } \r\n\r\n  /*function Update(newValue:any, at:number) { \r\n    setValues((prev:any) => { \r\n      const newValues = [...prev]; \r\n      newValues[at] = newValue; \r\n      return newValues; \r\n    }); \r\n  } \r\n\r\n  function Delete(at:number) { \r\n    const newValues = [...values]; \r\n    newValues.splice(at, 1); \r\n    setValues(newValues); \r\n  } */\r\n  return {...props, values, ReadElement}\r\n  //return {...props, values, CreateElement: Create, ReadElement: Read, UpdateElement: Update, DeleteElement: Delete}; \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\experiments\\testarrx3.tsx",["335","336","337","338","339","340","341"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\arrx3\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\arrx3\\objx.component.tsx",[],{"ruleId":"342","replacedBy":"343"},{"ruleId":"344","replacedBy":"345"},{"ruleId":"346","severity":1,"message":"347","line":2,"column":9,"nodeType":"348","messageId":"349","endLine":2,"endColumn":15},{"ruleId":"346","severity":1,"message":"350","line":2,"column":17,"nodeType":"348","messageId":"349","endLine":2,"endColumn":22},{"ruleId":"346","severity":1,"message":"351","line":3,"column":8,"nodeType":"348","messageId":"349","endLine":3,"endColumn":11},{"ruleId":"346","severity":1,"message":"352","line":4,"column":8,"nodeType":"348","messageId":"349","endLine":4,"endColumn":12},{"ruleId":"346","severity":1,"message":"353","line":5,"column":8,"nodeType":"348","messageId":"349","endLine":5,"endColumn":15},{"ruleId":"346","severity":1,"message":"354","line":6,"column":8,"nodeType":"348","messageId":"349","endLine":6,"endColumn":13},{"ruleId":"342","replacedBy":"343"},{"ruleId":"344","replacedBy":"345"},{"ruleId":"342","replacedBy":"355"},{"ruleId":"344","replacedBy":"356"},{"ruleId":"357","severity":1,"message":"358","line":2,"column":9,"nodeType":"348","messageId":"349","endLine":2,"endColumn":19},{"ruleId":"357","severity":1,"message":"359","line":3,"column":9,"nodeType":"348","messageId":"349","endLine":3,"endColumn":24},{"ruleId":"357","severity":1,"message":"360","line":4,"column":9,"nodeType":"348","messageId":"349","endLine":4,"endColumn":20},{"ruleId":"357","severity":1,"message":"361","line":5,"column":9,"nodeType":"348","messageId":"349","endLine":5,"endColumn":19},{"ruleId":"357","severity":1,"message":"362","line":6,"column":9,"nodeType":"348","messageId":"349","endLine":6,"endColumn":23},{"ruleId":"357","severity":1,"message":"363","line":9,"column":9,"nodeType":"348","messageId":"349","endLine":9,"endColumn":19},{"ruleId":"357","severity":1,"message":"364","line":3,"column":9,"nodeType":"348","messageId":"349","endLine":3,"endColumn":13},{"ruleId":"357","severity":1,"message":"365","line":3,"column":15,"nodeType":"348","messageId":"349","endLine":3,"endColumn":19},{"ruleId":"357","severity":1,"message":"366","line":3,"column":21,"nodeType":"348","messageId":"349","endLine":3,"endColumn":25},{"ruleId":"357","severity":1,"message":"367","line":2,"column":9,"nodeType":"348","messageId":"349","endLine":2,"endColumn":15},{"ruleId":"368","severity":1,"message":"369","line":18,"column":6,"nodeType":"370","endLine":18,"endColumn":8,"suggestions":"371"},{"ruleId":"357","severity":1,"message":"372","line":2,"column":38,"nodeType":"348","messageId":"349","endLine":2,"endColumn":45},{"ruleId":"357","severity":1,"message":"373","line":3,"column":41,"nodeType":"348","messageId":"349","endLine":3,"endColumn":48},{"ruleId":"357","severity":1,"message":"374","line":16,"column":9,"nodeType":"348","messageId":"349","endLine":16,"endColumn":16},{"ruleId":"342","replacedBy":"375"},{"ruleId":"344","replacedBy":"376"},{"ruleId":"377","severity":1,"message":"378","line":49,"column":37,"nodeType":"379","messageId":"380","endLine":49,"endColumn":47},{"ruleId":"357","severity":1,"message":"367","line":3,"column":9,"nodeType":"348","messageId":"349","endLine":3,"endColumn":15},{"ruleId":"368","severity":1,"message":"381","line":18,"column":37,"nodeType":"370","endLine":18,"endColumn":39,"suggestions":"382"},{"ruleId":"368","severity":1,"message":"381","line":26,"column":37,"nodeType":"370","endLine":26,"endColumn":39,"suggestions":"383"},{"ruleId":"357","severity":1,"message":"384","line":2,"column":9,"nodeType":"348","messageId":"349","endLine":2,"endColumn":13},{"ruleId":"357","severity":1,"message":"385","line":2,"column":15,"nodeType":"348","messageId":"349","endLine":2,"endColumn":26},{"ruleId":"357","severity":1,"message":"386","line":2,"column":28,"nodeType":"348","messageId":"349","endLine":2,"endColumn":34},{"ruleId":"357","severity":1,"message":"387","line":2,"column":36,"nodeType":"348","messageId":"349","endLine":2,"endColumn":46},{"ruleId":"357","severity":1,"message":"388","line":2,"column":48,"nodeType":"348","messageId":"349","endLine":2,"endColumn":60},{"ruleId":"357","severity":1,"message":"389","line":2,"column":62,"nodeType":"348","messageId":"349","endLine":2,"endColumn":72},{"ruleId":"357","severity":1,"message":"390","line":3,"column":26,"nodeType":"348","messageId":"349","endLine":3,"endColumn":36},{"ruleId":"357","severity":1,"message":"391","line":6,"column":15,"nodeType":"348","messageId":"349","endLine":6,"endColumn":22},{"ruleId":"357","severity":1,"message":"392","line":6,"column":24,"nodeType":"348","messageId":"349","endLine":6,"endColumn":35},{"ruleId":"357","severity":1,"message":"393","line":25,"column":10,"nodeType":"348","messageId":"349","endLine":25,"endColumn":14},{"ruleId":"357","severity":1,"message":"394","line":71,"column":18,"nodeType":"348","messageId":"349","endLine":71,"endColumn":24},{"ruleId":"357","severity":1,"message":"395","line":77,"column":17,"nodeType":"348","messageId":"349","endLine":77,"endColumn":25},{"ruleId":"357","severity":1,"message":"396","line":77,"column":27,"nodeType":"348","messageId":"349","endLine":77,"endColumn":32},{"ruleId":"357","severity":1,"message":"397","line":78,"column":10,"nodeType":"348","messageId":"349","endLine":78,"endColumn":22},{"ruleId":"357","severity":1,"message":"396","line":87,"column":27,"nodeType":"348","messageId":"349","endLine":87,"endColumn":32},{"ruleId":"357","severity":1,"message":"398","line":2,"column":10,"nodeType":"348","messageId":"349","endLine":2,"endColumn":22},{"ruleId":"357","severity":1,"message":"399","line":1,"column":38,"nodeType":"348","messageId":"349","endLine":1,"endColumn":47},{"ruleId":"357","severity":1,"message":"391","line":2,"column":38,"nodeType":"348","messageId":"349","endLine":2,"endColumn":45},{"ruleId":"357","severity":1,"message":"400","line":2,"column":77,"nodeType":"348","messageId":"349","endLine":2,"endColumn":88},{"ruleId":"357","severity":1,"message":"384","line":3,"column":9,"nodeType":"348","messageId":"349","endLine":3,"endColumn":13},{"ruleId":"357","severity":1,"message":"401","line":3,"column":36,"nodeType":"348","messageId":"349","endLine":3,"endColumn":41},{"ruleId":"357","severity":1,"message":"387","line":4,"column":3,"nodeType":"348","messageId":"349","endLine":4,"endColumn":13},{"ruleId":"357","severity":1,"message":"402","line":4,"column":15,"nodeType":"348","messageId":"349","endLine":4,"endColumn":24},{"ruleId":"357","severity":1,"message":"403","line":4,"column":26,"nodeType":"348","messageId":"349","endLine":4,"endColumn":35},{"ruleId":"404","severity":1,"message":"405","line":62,"column":10,"nodeType":"348","messageId":"406","endLine":62,"endColumn":20},{"ruleId":"357","severity":1,"message":"407","line":64,"column":10,"nodeType":"348","messageId":"349","endLine":64,"endColumn":19},{"ruleId":"368","severity":1,"message":"408","line":66,"column":6,"nodeType":"370","endLine":66,"endColumn":20,"suggestions":"409"},{"ruleId":"368","severity":1,"message":"410","line":66,"column":7,"nodeType":"411","endLine":66,"endColumn":19},{"ruleId":"357","severity":1,"message":"412","line":66,"column":10,"nodeType":"348","messageId":"349","endLine":66,"endColumn":14},{"ruleId":"357","severity":1,"message":"413","line":66,"column":16,"nodeType":"348","messageId":"349","endLine":66,"endColumn":28},{"ruleId":"357","severity":1,"message":"414","line":6,"column":10,"nodeType":"348","messageId":"349","endLine":6,"endColumn":14},{"ruleId":"357","severity":1,"message":"415","line":6,"column":16,"nodeType":"348","messageId":"349","endLine":6,"endColumn":23},{"ruleId":"357","severity":1,"message":"416","line":9,"column":10,"nodeType":"348","messageId":"349","endLine":9,"endColumn":13},{"ruleId":"357","severity":1,"message":"417","line":9,"column":15,"nodeType":"348","messageId":"349","endLine":9,"endColumn":21},{"ruleId":"357","severity":1,"message":"418","line":10,"column":10,"nodeType":"348","messageId":"349","endLine":10,"endColumn":14},{"ruleId":"357","severity":1,"message":"419","line":10,"column":16,"nodeType":"348","messageId":"349","endLine":10,"endColumn":23},{"ruleId":"357","severity":1,"message":"420","line":34,"column":11,"nodeType":"348","messageId":"349","endLine":34,"endColumn":16},{"ruleId":"357","severity":1,"message":"391","line":2,"column":38,"nodeType":"348","messageId":"349","endLine":2,"endColumn":45},{"ruleId":"357","severity":1,"message":"401","line":3,"column":36,"nodeType":"348","messageId":"349","endLine":3,"endColumn":41},{"ruleId":"357","severity":1,"message":"364","line":4,"column":9,"nodeType":"348","messageId":"349","endLine":4,"endColumn":13},{"ruleId":"357","severity":1,"message":"366","line":4,"column":21,"nodeType":"348","messageId":"349","endLine":4,"endColumn":25},{"ruleId":"357","severity":1,"message":"421","line":15,"column":10,"nodeType":"348","messageId":"349","endLine":15,"endColumn":15},{"ruleId":"357","severity":1,"message":"395","line":15,"column":17,"nodeType":"348","messageId":"349","endLine":15,"endColumn":25},{"ruleId":"357","severity":1,"message":"422","line":68,"column":10,"nodeType":"348","messageId":"349","endLine":68,"endColumn":22},"no-native-reassign",["423"],"no-negated-in-lhs",["424"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Nav' is defined but never used.","'Home' is defined but never used.","'Patient' is defined but never used.","'Admin' is defined but never used.",["423"],["424"],"@typescript-eslint/no-unused-vars","'TestInputs' is defined but never used.","'TestInputArrays' is defined but never used.","'TestSelects' is defined but never used.","'TestIsNull' is defined but never used.","'TestArrayUtils' is defined but never used.","'TestInput2' is defined but never used.","'Copy' is defined but never used.","'Edit' is defined but never used.","'Read' is defined but never used.","'IsNull' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'options' and 'setOptions'. Either include them or remove the dependency array.","ArrayExpression",["425"],"'IsEmpty' is defined but never used.","'Compare' is assigned a value but never used.","'combine' is assigned a value but never used.",["423"],["424"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","React Hook useEffect has missing dependencies: 'Load' and 'loadfunc'. Either include them or remove the dependency array.",["426"],["427"],"'Objx' is defined but never used.","'ObjxContext' is defined but never used.","'Fields' is defined but never used.","'FieldLabel' is defined but never used.","'FieldContext' is defined but never used.","'FieldValue' is defined but never used.","'InputArray' is defined but never used.","'Element' is defined but never used.","'ArrxContext' is defined but never used.","'crud' is assigned a value but never used.","'answer' is assigned a value but never used.","'setValue' is assigned a value but never used.","'index' is assigned a value but never used.","'responseType' is assigned a value but never used.","'CrudMongoose' is defined but never used.","'useEffect' is defined but never used.","'ElementRead' is defined but never used.","'Field' is defined but never used.","'FieldRead' is defined but never used.","'FieldEdit' is defined but never used.","@typescript-eslint/no-redeclare","'NestedEdit' is already defined.","redeclared","'ReadField' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'Read', 'ifield', and 'value'. Either include them or remove the dependency array.",["428"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'type' is assigned a value but never used.","'defaultValue' is assigned a value but never used.","'nums' is assigned a value but never used.","'setNums' is assigned a value but never used.","'str' is assigned a value but never used.","'setStr' is assigned a value but never used.","'bool' is assigned a value but never used.","'setBool' is assigned a value but never used.","'Index' is assigned a value but never used.","'value' is assigned a value but never used.","'ElementValue' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"431","fix":"433"},{"desc":"434","fix":"435"},"Update the dependencies array to be: [options, setOptions]",{"range":"436","text":"437"},"Update the dependencies array to be: [Load, loadfunc]",{"range":"438","text":"439"},{"range":"440","text":"439"},"Update the dependencies array to be: [Read, ifield, value]",{"range":"441","text":"442"},[585,587],"[options, setOptions]",[593,595],"[Load, loadfunc]",[924,926],[2317,2331],"[Read, ifield, value]"]