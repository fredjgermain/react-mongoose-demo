[{"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js":"1","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js":"2","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js":"3","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx":"4","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx":"5","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts":"6","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts":"7","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts":"8","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts":"9","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts":"10","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx":"11","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx":"12","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx":"13","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx":"14","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx":"15","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx":"16","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts":"17","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts":"18","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts":"19","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts":"20","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts":"21","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx":"22","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx":"23","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts":"24","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts":"25","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts":"26","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx":"27","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx":"28","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts":"29","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx":"30","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx":"31","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx":"32","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts":"33","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx":"34","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts":"35","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx":"36","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts":"37","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx":"38","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx":"39","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts":"40","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx":"41","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx":"42","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx":"43","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx":"44","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx":"45","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx":"46","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx":"47","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx":"48","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx":"49","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx":"50","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx":"51","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\loadpatient.component.tsx":"52","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\loadquestionnaire.component.tsx":"53","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx":"54","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\displayquestion.component.tsx":"55","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaire.utils.tsx":"56","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\paging.component.tsx":"57","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts":"58","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts":"59","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx":"60","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudmongoose.class.ts":"61","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testcrud\\testcrud.experiment.tsx":"62","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_crud.ts":"63","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\crud\\useactive.hook.tsx":"64","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\predloader.component.tsx":"65","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx":"66","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\testrender.tsx":"67","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\renderer.component.tsx":"68","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testarray\\testarrayutils.experiment.tsx":"69","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils2.ts":"70","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays2.utils.ts":"71","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\value.utils.ts":"72"},{"size":621,"mtime":1612141670677,"results":"73","hashOfConfig":"74"},{"size":992,"mtime":1612555537033,"results":"75","hashOfConfig":"74"},{"size":362,"mtime":499162500000,"results":"76","hashOfConfig":"74"},{"size":912,"mtime":1612469327163,"results":"77","hashOfConfig":"74"},{"size":496,"mtime":1612141670563,"results":"78","hashOfConfig":"74"},{"size":1495,"mtime":1612141671254,"results":"79","hashOfConfig":"74"},{"size":3352,"mtime":1612560508025,"results":"80","hashOfConfig":"74"},{"size":2460,"mtime":1612554957776,"results":"81","hashOfConfig":"74"},{"size":1900,"mtime":1612141671217,"results":"82","hashOfConfig":"74"},{"size":3091,"mtime":1612141671217,"results":"83","hashOfConfig":"74"},{"size":1780,"mtime":1612141670967,"results":"84","hashOfConfig":"74"},{"size":2274,"mtime":1612141671117,"results":"85","hashOfConfig":"74"},{"size":1473,"mtime":1612141671140,"results":"86","hashOfConfig":"74"},{"size":462,"mtime":1612141671142,"results":"87","hashOfConfig":"74"},{"size":1042,"mtime":1612141671142,"results":"88","hashOfConfig":"74"},{"size":982,"mtime":1612141671141,"results":"89","hashOfConfig":"74"},{"size":6089,"mtime":1612482932320,"results":"90","hashOfConfig":"74"},{"size":287,"mtime":1612382530122,"results":"91","hashOfConfig":"74"},{"size":341,"mtime":1612382805121,"results":"92","hashOfConfig":"74"},{"size":838,"mtime":1612554979612,"results":"93","hashOfConfig":"74"},{"size":112,"mtime":1612141670932,"results":"94","hashOfConfig":"74"},{"size":1301,"mtime":1612141671147,"results":"95","hashOfConfig":"74"},{"size":688,"mtime":1611105433287,"results":"96","hashOfConfig":"74"},{"size":1330,"mtime":1611105734495,"results":"97","hashOfConfig":"74"},{"size":124,"mtime":1611105257047,"results":"98","hashOfConfig":"74"},{"size":233,"mtime":1612141670928,"results":"99","hashOfConfig":"74"},{"size":3111,"mtime":1612141671125,"results":"100","hashOfConfig":"74"},{"size":1385,"mtime":1612141671125,"results":"101","hashOfConfig":"74"},{"size":510,"mtime":1612141670929,"results":"102","hashOfConfig":"74"},{"size":1532,"mtime":1612141670991,"results":"103","hashOfConfig":"74"},{"size":2116,"mtime":1612141671020,"results":"104","hashOfConfig":"74"},{"size":943,"mtime":1612141671021,"results":"105","hashOfConfig":"74"},{"size":447,"mtime":1612141670931,"results":"106","hashOfConfig":"74"},{"size":4285,"mtime":1611356030017,"results":"107","hashOfConfig":"74"},{"size":107,"mtime":1612141670933,"results":"108","hashOfConfig":"74"},{"size":2743,"mtime":1612141671148,"results":"109","hashOfConfig":"74"},{"size":79,"mtime":1612141670934,"results":"110","hashOfConfig":"74"},{"size":338,"mtime":1612141671148,"results":"111","hashOfConfig":"74"},{"size":1540,"mtime":1612469132190,"results":"112","hashOfConfig":"74"},{"size":231,"mtime":1612141670930,"results":"113","hashOfConfig":"74"},{"size":1927,"mtime":1612141671121,"results":"114","hashOfConfig":"74"},{"size":1598,"mtime":1612141670985,"results":"115","hashOfConfig":"74"},{"size":4408,"mtime":1612141670676,"results":"116","hashOfConfig":"74"},{"size":515,"mtime":1612398095700,"results":"117","hashOfConfig":"74"},{"size":1426,"mtime":1612469986798,"results":"118","hashOfConfig":"74"},{"size":1304,"mtime":1612395256953,"results":"119","hashOfConfig":"74"},{"size":1099,"mtime":1612398310296,"results":"120","hashOfConfig":"74"},{"size":2477,"mtime":1612473852060,"results":"121","hashOfConfig":"74"},{"size":1808,"mtime":1612483113644,"results":"122","hashOfConfig":"74"},{"size":3568,"mtime":1612398748187,"results":"123","hashOfConfig":"74"},{"size":1087,"mtime":1612141670927,"results":"124","hashOfConfig":"74"},{"size":655,"mtime":1612398529932,"results":"125","hashOfConfig":"74"},{"size":1092,"mtime":1612398948278,"results":"126","hashOfConfig":"74"},{"size":736,"mtime":1612141670564,"results":"127","hashOfConfig":"74"},{"size":2673,"mtime":1612141670908,"results":"128","hashOfConfig":"74"},{"size":1364,"mtime":1612399470590,"results":"129","hashOfConfig":"74"},{"size":2585,"mtime":1612399179478,"results":"130","hashOfConfig":"74"},{"size":2690,"mtime":1612394054258,"results":"131","hashOfConfig":"74"},{"size":2800,"mtime":1612387165429,"results":"132","hashOfConfig":"74"},{"size":431,"mtime":1612382505474,"results":"133","hashOfConfig":"74"},{"size":2669,"mtime":1612469768616,"results":"134","hashOfConfig":"74"},{"size":2238,"mtime":1612394941169,"results":"135","hashOfConfig":"74"},{"size":137,"mtime":1612397882586,"results":"136","hashOfConfig":"74"},{"size":2194,"mtime":1612474171413,"results":"137","hashOfConfig":"74"},{"size":663,"mtime":1612482168663,"results":"138","hashOfConfig":"74"},{"size":129,"mtime":1612482242441,"results":"139","hashOfConfig":"74"},{"size":400,"mtime":1612555406200,"results":"140","hashOfConfig":"74"},{"size":1566,"mtime":1612485433043,"results":"141","hashOfConfig":"74"},{"size":3860,"mtime":1612660720712,"results":"142","hashOfConfig":"74"},{"size":346,"mtime":1612660524953,"results":"143","hashOfConfig":"74"},{"size":4616,"mtime":1612660479754,"results":"144","hashOfConfig":"74"},{"size":1913,"mtime":1612558696964,"results":"145","hashOfConfig":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},"ke513i",{"filePath":"149","messages":"150","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"148"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"157"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"157"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"157"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"157"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"157"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"203"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"208"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"157"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"157"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"157"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"157"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"157"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"169"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"157"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"157"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"157"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"177"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"157"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"157"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"157"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"302","usedDeprecatedRules":"157"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\index.js",[],["317","318"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\App.js",["319","320"],"import React from 'react'; \r\n\r\nimport {TestArrayUtil} from './experiments/testarray/testarrayutils.experiment';\r\nimport {TestRenderer} from './experiments/renderer/testrender';\r\n\r\nimport {CrudContexter} from './reusable/_crud'; \r\nimport Nav from './components/nav/nav.component'; \r\nimport {Switch, Route} from 'react-router-dom'; \r\nimport {PreLoader} from './components/predloader.component'; \r\n\r\n// Pages\r\nimport Home from './pages/home/home.page.tsx'; \r\nimport Admin from './pages/admin/admin.page.tsx'; \r\nimport Patient from './pages/patient/patient.page.tsx'; \r\n\r\nconst baseUrl = `https://fjg-mongoose-heroku.herokuapp.com/api/`; \r\n\r\nexport default function App() { \r\n  return <TestArrayUtil/>\r\n\r\n\r\n  return <CrudContexter {...{baseUrl}}> \r\n    <Nav/> \r\n    <PreLoader/> \r\n    <Switch>\r\n      <Route exact path={'/'} component={Home} />\r\n      <Route path={'/admin'} component={Admin} />\r\n      <Route path={'/patient'} component={Patient} />\r\n    </Switch>\r\n  </CrudContexter> \r\n} \r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reportWebVitals.js",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\admin.page.tsx",["321"],"import React, {useContext, useEffect} from 'react'; \r\nimport {CrudContext} from '../../reusable/_crud'; \r\nimport {FeedBack} from '../../components/feedback/feedback.component'; \r\nimport {IsEmpty} from '../../reusable/_utils'; \r\n\r\nimport {CollectionSelector} from './components/collectionselector.component'; \r\nimport {AdminTablr} from './components/admintablr.component'; \r\n\r\nimport '../../css/table.css'; \r\n\r\n\r\n\r\n\r\n// ADMIN PAGE ====================================\r\nexport default function Admin() { \r\n  const {state, activeCollection, setActiveCollection} = useContext(CrudContext); \r\n\r\n  useEffect(() => { \r\n    setActiveCollection({} as ICollection); \r\n  }, []); \r\n\r\n  return <div> \r\n    <h2>Admin</h2> \r\n    <FeedBack/> \r\n    {state.ready && state.success && <CollectionSelector /> } \r\n    {!IsEmpty(activeCollection) && <AdminTablr/>} \r\n  </div> \r\n}\r\n\r\n//{!IsEmpty(activeCollection) && <AdminTablr/>} \r\n\r\n",["322","323"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\nav\\nav.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\htmlelement.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays.utils.ts",["324"],"// ARRAY METHODS ################################\r\n\r\n\r\n// Common predicate ----------------------------\r\nconst Compare = (array:any[], comparator:(a:any, b:any) => boolean = () => true) => (b:any, i:number, ar:any[]) => \r\n  array.some(a => comparator(a, b)); \r\n\r\nconst IsDuplicate = (comparator:(a:any, b:any) => boolean = () => true) => (b:any, i:number, ar:any[]) => \r\n  ar.some(a => comparator(a, b) && a!==b); \r\n\r\nconst IsUnic = (comparator:(a:any, b:any) => boolean = () => true) => (b:any, i:number, ar:any[]) => \r\n  !ar.some(a => comparator(a, b) && a!==b); \r\n\r\nconst ByIndexes = (indexes:number[]) => (b:any, i:number, ar:any[]) => \r\n  indexes.includes(i); \r\n\r\nconst Intersect = (array:any[], comparator:(a:any, b:any) => boolean = () => true) => (b:any) => \r\n  array.some(a => comparator(a, b) && a===b); \r\n\r\nconst Exclusion = (array:any[], comparator:(a:any, b:any) => boolean = () => true) => (b:any) => \r\n  !array.some(a => comparator(a, b) && a===b); \r\n\r\nexport const CommonPredicates = {IsDuplicate, IsUnic, ByIndexes, Intersect, Exclusion, Compare}; \r\n\r\n/*=> (b:any, i:number, ar:any[]) => \r\n  indexes.includes(i); */\r\n\r\n// ToArray ======================================\r\nexport function ToArray(toArray:any|any[]):any[] { \r\n  return toArray !== undefined ? [toArray].flat() : []; \r\n} \r\n\r\n\r\n// Remove =======================================\r\nexport function Remove(array:any[], predicate:(e:any, i:number, a:any[])=>boolean ):[any[], any[]] { \r\n  const removed = array.filter(predicate); \r\n  const kept = array.filter( (e,i,a) => !predicate(e,i,a) ); \r\n  return [kept, removed]; \r\n} \r\n\r\n// Union ========================================\r\nexport function Union(array:any[], toUnite:any|any[], predicate:(e:any, i:number, a:any[])=>boolean = () => true):any[] { \r\n  return [...array, ...ToArray(toUnite).filter(predicate)]; \r\n} \r\n\r\n\r\n// Filter =======================================\r\nexport function Filter<T>(array:T[] = [], predicate:(e:T, i:number, a:T[])=>boolean = () => true) \r\n: {selection: T[], indexes: number[]} \r\n{ \r\n  const selection:T[] = []; \r\n  const indexes:number[] = []; \r\n  array.forEach( (e,i,a) => { \r\n    if(predicate(e,i,a)) { \r\n      selection.push(e); \r\n      indexes.push(i); \r\n    } \r\n  }) \r\n  return {selection, indexes}; \r\n} \r\n\r\n// Order ========================================\r\nexport function Order<T>(toOrder:T[], ordering:any[], compare:(a:any, b:any)=>boolean = (a:any, b:any) => a === b ) { \r\n  return Combine(ordering, toOrder, compare).map(combine => { \r\n    const [a, b] = combine; \r\n    return b; \r\n  }); \r\n} \r\n\r\n// DUPLICATES ===================================\r\nexport function Duplicates(array:any[], compare:(a:any, b:any)=>boolean = (a:any, b:any) => a === b ):{duplicates:any[], unics:any[]} { \r\n  const {selection:duplicates} = Filter(array, IsDuplicate(compare)); \r\n  const {selection:unics} = Filter(array, IsUnic(compare)); \r\n  return {duplicates, unics}; \r\n} \r\n\r\n\r\n// COMBINE =========================================\r\nexport function Combine(As:any[], Bs:any[], compare:(a:any, b:any)=>boolean = () => true ) { \r\n  const combines:any[] = []; \r\n  As.forEach( a => { \r\n    Bs.forEach( b => compare(a,b) ? combines.push([a,b]): null) \r\n  }) \r\n  return combines; \r\n} \r\n\r\nexport const ArrayMethods = {}; \r\n//const combine = Combine(ordering, strings, (a,b) => a===b.name).map(([a,b]) => b); ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\valuetypetesting.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseaxios.ts",[],["325","326"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\mongooseparser.utils.ts",["327"],"import {IsEmpty, IsInRange} from '../_utils';\r\n\r\nexport interface IMongooseCollection { \r\n  accessor:string; \r\n  label:string; \r\n  fields: IMongooseField[]; \r\n  entries: IEntry[]; \r\n} \r\n\r\nexport interface IMongooseField { \r\n  path:string;  // accessor \r\n  instance:string; \r\n  validators: any; \r\n  options: { \r\n    ref?: string; \r\n    label?: string; \r\n    sortType?: string; \r\n    defaultValue?: any; \r\n    format?: string; \r\n    enum?: any[]; \r\n    abbrev?: boolean; \r\n    [key:string]:any; \r\n  }; \r\n  $embeddedSchemaType?:{ \r\n    instance:string; \r\n  }; \r\n  [key:string]:any; \r\n} \r\n\r\n\r\n// Parser functions =============================\r\nexport function ParseCollection(model:any):ICollection { \r\n  const accessor = model['accessor']; \r\n  const label = model['label']; \r\n  const ifields = ParseFields(model['fields']); \r\n  const entries = model['entries']; \r\n  return {accessor, label, ifields, entries}; \r\n} \r\n\r\nexport function ParseFields(fields:any):IField[] { \r\n  const mongooseFields:IMongooseField[] = Object.keys(fields).map(f => fields[f]); \r\n  return mongooseFields.map(f=>ParseField(f)); \r\n} \r\n\r\nexport function ParseField(field:IMongooseField):IField { \r\n  const {path, instance, options, $embeddedSchemaType} = field; \r\n  const ifield:IField = {} as IField; \r\n\r\n  ifield.accessor = path ?? ''; \r\n  ifield.label = options.label ?? ''; \r\n  ifield.type = options?.ref ?? $embeddedSchemaType?.instance ?? field.instance.toLowerCase(); \r\n  ifield.isMixed = instance.toLowerCase() === 'mixed'; \r\n  ifield.isEnum = !!options?.enum; \r\n  ifield.isArray = instance.toLowerCase() === 'array'; \r\n  ifield.isModel = !!options?.ref; \r\n  ifield.isAbbrev = !!options?.abbrev; \r\n  ifield.validators = GetValidators(field); \r\n  ifield.isRequired = field.options['required'] ?? false; \r\n  ifield.regex = field.options['regex']? field.options['regex']: undefined; \r\n\r\n  ifield.enums = options.enum ?? []; \r\n  ifield.format = options.format ?? \"${value}\"; \r\n  ifield.sort = options.sortType ?? ''; \r\n  ifield.defaultValue = GetDefaultValue(ifield.type, field.options); \r\n\r\n  return ifield; \r\n} \r\n\r\n\r\nfunction GetDefaultValue(type:string, options:any):any { \r\n  if(options['defaultValue']) \r\n    return options['defaultValue']; \r\n  if(options['default']) \r\n    return options['default']; \r\n  if(type === 'boolean') \r\n    return false; \r\n  if(type === 'number') \r\n    return 0; \r\n  return ''; \r\n} \r\n\r\n\r\nfunction GetValidators(field:IMongooseField):IValidator[] { \r\n  const required = (value:any) => { \r\n    return !IsEmpty(value); \r\n  }; \r\n\r\n  const regex = (value:any) => { \r\n    if(field.options['regex']) \r\n      return new RegExp(field.options['regex']).test(value); \r\n    return true; \r\n  } \r\n\r\n  const range = (value:any) => { \r\n    return IsInRange(value, field.options['min'], field.options['max']); \r\n  } \r\n\r\n  let validators:IValidator[] = []; \r\n  if(field.options['required']) \r\n    validators.push(required); \r\n  if(field.options['regex']) \r\n    validators.push(regex); \r\n  if(field.options['min'] || field.options['max']) \r\n    validators.push(range); \r\n  return validators; \r\n} \r\n\r\n\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\arrx\\arrx.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\objx\\objx.component.tsx",[],["328","329"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\cells.component.tsx",["330","331","332"],"import React, {useContext} from 'react'; \r\nimport {RowContext} from './rows.component'; \r\nimport {TablrContext} from './tablr.component'; \r\nimport {IsNull, GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\n\r\n// CELLS ========================================\r\nconst CellsContext = React.createContext({}); \r\ninterface ICells{ ifields:IField[]; } \r\nexport function Cells({ifields, children}:React.PropsWithChildren<ICells>) { \r\n\r\n  // Render -------------------------------------\r\n  return <CellsContext.Provider value={{}} > \r\n    {ifields.map((ifield) => { \r\n      return <Cell key={ifield.accessor} {...{ifield}}>{children}</Cell>; \r\n    })} \r\n  </CellsContext.Provider> \r\n} \r\n\r\n\r\n// Row --------------------------------------------\r\ninterface ICell { ifield: IField; } \r\ninterface ICellContext { value:any, row:number, ifield:IField} \r\nexport const CellContext = React.createContext({} as ICellContext); \r\nexport function Cell({ifield, children}:React.PropsWithChildren<ICell>) { \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n\r\n  const data = datas[row]; \r\n  const value = IsEmpty(data) ? GetDefaultValueFromIField(ifield): datas[row][ifield.accessor]; \r\n  const context = {value, row, ifield} as ICellContext; \r\n  \r\n  // RENDER -------------------------------------\r\n  return <CellContext.Provider value={context}> \r\n      <td>{!children && JSON.stringify(value) || children}</td> \r\n    </CellContext.Provider> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\tablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\rows.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\tablr\\headers.component.tsx",["333","334","335"],"import React, {useContext} from 'react'; \r\n\r\n\r\n// HEADER =======================================\r\ninterface IHeader {}\r\nexport function Header({children}:React.PropsWithChildren<IHeader>) { \r\n  return <thead> \r\n    <tr>{children}</tr> \r\n  </thead> \r\n} \r\n\r\n// HEADS ---------------------------------------\r\nconst HeadsContext = React.createContext({}); \r\nexport function Heads({ifields, children}:React.PropsWithChildren<{ ifields:IField[] }>) { \r\n\r\n  return <HeadsContext.Provider value={{}}> \r\n    {ifields.map( (ifield, key) => { \r\n      return <Head {...{key, ifield}}>{children}</Head>\r\n    })} \r\n  </HeadsContext.Provider> \r\n}\r\n\r\n// HEAD ---------------------------------------\r\nexport const HeadContext = React.createContext({} as {ifield:IField}); \r\nexport function Head({ifield, children}:React.PropsWithChildren<{ ifield:IField }>) { \r\n\r\n  return <HeadContext.Provider value={{ifield}}>\r\n    <th>{!children && ifield.label || children}</th>\r\n  </HeadContext.Provider>\r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\dao.class.ts",["336"],"import {Order} from '../_utils'; \r\nimport {Collection} from './collection.class'; \r\n\r\n\r\n\r\nexport interface ICrud { \r\n  Collections:(accessors?:string[]) => Promise<ICrudResponse[]>; \r\n  Create: (accessor:string, toCreate:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Read: (accessor:string, id?:string[]) => Promise<ICrudResponse[]>;          /// ??\r\n  Update: (accessor:string, toUpdate:IEntry[]) => Promise<ICrudResponse[]>; \r\n  Delete: (accessor:string, toDelete:IEntry[]) => Promise<ICrudResponse[]>; \r\n} \r\n\r\n\r\n// DAO #############################################\r\nexport class DAO { \r\n  public collections:ICollection[] = [] as ICollection[]; \r\n\r\n  private crud:ICrud = {} as ICrud; \r\n\r\n  constructor(crud:ICrud) { \r\n    this.crud = crud; \r\n  } \r\n\r\n  // Get ICollections ----------------------------- \r\n  public GetICollections(accessors?:string[]):ICollection[] { \r\n    if(!accessors) \r\n      return this.collections; \r\n    const compare = (a:string, b:ICollection) => {return a === b.accessor}; \r\n    return Order<ICollection>(this.collections, accessors, compare); \r\n  } \r\n\r\n  // Get IFields -----------------------------------\r\n  public GetIFields(accessor:string, fields?:string[]):IField[] { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    if(!fields) \r\n      return collection?.ifields ?? []; \r\n    const compare = (a:string, b:IField) => {return a === b.accessor}; \r\n    return Order<IField>(collection?.ifields ?? [], fields, compare); \r\n  }\r\n\r\n  // GEt Entries --------------------------------------\r\n  public GetIEntries(accessor:string, ids?:string[]):IEntry[] { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    if(!ids)\r\n      return collection?.entries ?? []; \r\n    const compare = (a:string, b:IEntry) => {return a === b._id}; \r\n    return Order<IEntry>(collection?.entries ?? [], ids, compare); \r\n  }\r\n\r\n  // Get Default IEntry ----------------------------------\r\n  public GetDefaultIEntry(accessor:string):IEntry { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    return new Collection(collection).GetDefaultIEntry(); \r\n  } \r\n  \r\n  // GET FOREIGN ELEMENTS -----------------------------\r\n  public GetForeignElements(ifield:IField) \r\n    : {foreignCollection:ICollection|undefined, abbrevField:IField|undefined} \r\n  { \r\n    const foreignCollection = this.collections.find(c => c.accessor === ifield.type); \r\n    const abbrevField = foreignCollection?.ifields.find(f=>f.isAbbrev); \r\n    return {foreignCollection, abbrevField}; \r\n  } \r\n\r\n  // Get Options ----------------------------------------\r\n  public GetIOptions(ifield:IField):IOption[] { \r\n    \r\n    if(ifield.isEnum)\r\n      return ifield.enums?.map(e => {return {value:e, label:e}}) ?? [] as IOption[];  \r\n    if(!ifield.isModel) \r\n      return [] as IOption[]; \r\n    const {foreignCollection, abbrevField} = this.GetForeignElements(ifield); \r\n    if(!foreignCollection || !abbrevField) \r\n      return [] as IOption[]; \r\n    return foreignCollection.entries?.map( e => { \r\n      return {value:e._id, label:e[abbrevField.accessor]} as IOption; \r\n    }); \r\n  } \r\n\r\n  // COLLECTIONS -------------------------------------------\r\n  public async Collections(accessors?:string[]):Promise<ICrudResponse[]> { \r\n    const responses = (await this.crud.Collections(accessors)) as ICrudResponse[]; \r\n    const icollections = responses.filter(r => r.success).map(r => r.data as ICollection); \r\n    this.PushUpdateCollection(icollections); \r\n    return responses; \r\n  } \r\n\r\n  private PushUpdateCollection(icollections:ICollection[]) { \r\n    icollections.forEach( newCol => { \r\n      const index = this.collections.findIndex(col => col.accessor === newCol.accessor); \r\n      if(index >=0) \r\n        this.collections[index] = newCol; \r\n      else \r\n        this.collections.push(newCol); \r\n    }) \r\n  } \r\n\r\n  /* Create -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Create(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Create(accessor, entries)) as ICrudResponse[]; \r\n    const created = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Create(created); \r\n    return responses; \r\n  } \r\n\r\n  /* Read -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  Create/Update read data to local. \r\n  */\r\n  public async Read(accessor:string, ids?:string[]):Promise<IEntry[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Read(accessor, ids)) as ICrudResponse[]; \r\n    const read = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    return read; \r\n  } \r\n\r\n  /* Update -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Update(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Update(accessor, entries)) as ICrudResponse[]; \r\n    const updated = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Update(updated); \r\n    return responses; \r\n  } \r\n\r\n  /* Delete -------------------------------------------\r\n  Local and remote Collection might become inconsistent if 'collection' is not found. \r\n  */\r\n  public async Delete(accessor:string, entries:IEntry[]):Promise<ICrudResponse[]> { \r\n    const [collection] = this.GetICollections([accessor]); \r\n    // risk inconsistencies \r\n    const responses = (await this.crud.Delete(accessor, entries)) as ICrudResponse[]; \r\n    const deleted = responses.filter(r=>r.success).map(r=>r.data as IEntry); \r\n    new Collection(collection).Delete(deleted); \r\n    return responses; \r\n  } \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_dao.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_mongooseparser.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useloader.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useloader.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\toggle.component.tsx",[],["337","338"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\toggle\\usetoggle.hook.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usetoggle.ts",[],["339","340"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_arrx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\select\\select.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_input.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\input\\input.component.tsx",["341"],"import React from 'react'; \r\n//import CSS from ''\r\nimport {IEvent, IsNull, OnEnter, SetSize, SetWidth, \r\n  GetDefaultValueByType, GetTypeByValue, GetInputType, GetValueFromInput} from '../../_utils'; \r\n\r\n\r\n// INPUT ========================================\r\nexport interface IInput extends React.HTMLAttributes<HTMLInputElement> { \r\n  value:any; \r\n  setValue:any; \r\n  type?:string; \r\n  defaultValue?:any; \r\n  inputType?:string; \r\n  onEnterUp?:() => void; \r\n  width?: number; \r\n  [key:string]:any; \r\n} \r\nexport function Input(\r\n  {\r\n    value, setValue, \r\n    type=GetTypeByValue(value??''), \r\n    defaultValue=GetDefaultValueByType(type??'string'), \r\n    inputType=GetInputType(type??''), \r\n    onEnterUp=() => {}, \r\n    ...props\r\n  }:IInput) \r\n{ \r\n  const onChange = (event:IEvent) => setValue(GetInputValueOrDefault(event, defaultValue)); \r\n  const Value = IsNull(value) ? defaultValue: value; \r\n  const onKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => OnEnter(event, onEnterUp); \r\n\r\n  const width = props.width ?? SetSize(value); \r\n  const style = {width: `${width+2}ch`}; \r\n\r\n  if(type === 'boolean') \r\n    return <input {...{type:inputType, checked:Value, onChange, onKeyUp,  ...props}} /> \r\n  return <input {...{type:inputType, value:Value, onChange, onKeyUp, ...props}} style={style} /> \r\n} \r\n\r\n\r\n// GetValue --------------------------------------\r\nfunction GetInputValueOrDefault (event:IEvent, defaultValue:any) { \r\n  const value = GetValueFromInput(event); \r\n  return IsNull(value) ? defaultValue: value; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.component.tsx",["342","343","344","345","346","347"],"import React, { useContext, useEffect, useState } from 'react'; \r\nimport {Arrx, ArrxContext, Elements, Element, ElementContext, ElementIndex, ElementValue} from '../../_arrx'; \r\nimport {Input} from '../../_input'; \r\nimport {IInputArray, IUseInputArray, useInputArray} from './inputarray.hook'; \r\n\r\n\r\nexport const InputArrayContext = React.createContext({} as IUseInputArray); \r\nexport function InputArray({...props}:React.PropsWithChildren<IInputArray>) { \r\n  const context = useInputArray(props); \r\n  const {values} = props; \r\n  \r\n  return <InputArrayContext.Provider value={context} > \r\n    <Arrx {...{values}} > \r\n      <Elements> \r\n        <UpdateElement/> <DeleteBtn/>\r\n        <br/> \r\n      </Elements> \r\n      <CreateElement/>\r\n    </Arrx> \r\n  </InputArrayContext.Provider> \r\n} \r\n\r\n\r\n// Create element =======================================\r\nfunction CreateElement() { \r\n  const {type, defaultValue, Create} = useContext(InputArrayContext); \r\n  const [value, setValue] = useState(defaultValue); \r\n\r\n  const onEnterUp = () => {\r\n    Create(value); \r\n    setValue(() => defaultValue); // reset input to defaultValue after creation. \r\n  }; \r\n  return <Input {...{value, setValue, defaultValue, type, onEnterUp}}  /> \r\n} \r\n\r\n// Update element =======================================\r\nfunction UpdateElement() { \r\n  const {values, type, defaultValue, Update} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n\r\n  const [value, setValue] = useState(values[index]); \r\n  useEffect(() => { \r\n    setValue(values[index]); \r\n  }, [JSON.stringify(values[index])]); \r\n\r\n  const onEnterUp = () => Update(index, value); \r\n  return <Input {...{value, setValue, type, defaultValue, onEnterUp}} />\r\n}\r\n\r\n// Delete Btn ===================================\r\nexport function DeleteBtn({children, ...props}:React.PropsWithChildren<React.ButtonHTMLAttributes<HTMLButtonElement>>) { \r\n  const {Delete} = useContext(InputArrayContext); \r\n  const {index} = useContext(ElementContext); \r\n  return <button onClick={() => Delete(index)} {...props}> \r\n    {!children ? 'x' : children} \r\n  </button> \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\inputarray\\inputarray.hook.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_tablr.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\rendering\\renderers.utils.tsx",[],["348","349"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_usepage.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\usepage.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_useupdate.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\customhooks\\useupdate.hook.tsx",["350","351"],"import {useEffect, useRef} from 'react'; \r\n\r\nexport function useUpdate(callback:() => void, changeling:any) { \r\n  const flagFirstRender = useRef(true); \r\n  \r\n  useEffect(() => { \r\n    if(flagFirstRender.current) { \r\n      flagFirstRender.current = false; \r\n      return; \r\n    } \r\n    callback(); \r\n  }, [JSON.stringify(changeling)]); \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\patient.page.tsx",["352","353","354","355","356","357","358"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {IsEmpty, GetValueAt, SetValueAt} from '../../reusable/_utils'; \r\nimport {PatientProfile} from './components/patientprofile.component'; \r\nimport {Questionnaire} from '../questionnaire/questionnaire.page'; \r\nimport {LoadPatients } from './components/loadpatient.component'; \r\nimport { CrudContext } from '../../reusable/_crud';\r\n//import {RamqIdentification} from './components/ramqidentitication.component';\r\n\r\n\r\n\r\n// PATIENT PAGE =================================\r\ninterface IPatientProfileContext { \r\n  patientProfile: IEntry; \r\n  setPatientProfile: React.Dispatch<IEntry>; \r\n} \r\nexport const PatientProfileContext = React.createContext({} as IPatientProfileContext); \r\nexport default function Patient() { \r\n  const {activeCollection, setActiveCollection, GetICollections} = useContext(CrudContext); \r\n  const [patientProfile, setPatientProfile] = useState({} as IEntry); \r\n\r\n\r\n  useEffect(() => {\r\n    if(activeCollection.accessor !== 'patients') { \r\n      const [patients] = GetICollections(['patients']); \r\n      if(patients) \r\n        setActiveCollection(patients); \r\n    } \r\n  }, [activeCollection]); \r\n\r\n  /*useEffect(() => {\r\n    if(activeCollection.accessor !== 'patients') {\r\n\r\n      const [patients] = GetICollections(['patients']); \r\n      if(patients) \r\n        setActiveCollection(patients); \r\n    } \r\n  }, [activeCollection.accessor]) */\r\n  \r\n\r\n  const context = {patientProfile, setPatientProfile}; \r\n  return <PatientProfileContext.Provider value={context} > \r\n    <h2>Patient</h2>\r\n    {activeCollection.accessor}\r\n  </PatientProfileContext.Provider> \r\n} \r\n\r\n/*\r\n{!IsEmpty(activeCollection) && IsEmpty(patientProfile) && <PatientProfile/>} \r\n      {!IsEmpty(patientProfile) && <Questionnaire/>} \r\n*/","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_objx.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\reader\\reader.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\components\\editor\\editor.component.tsx",["359"],"import React, { useEffect, useState } from 'react'; \r\nimport {Input, InputArray, Select} from '../../_input'; \r\nimport {GetDefaultValueFromIField, IsEmpty} from '../../_utils'; \r\nimport {useUpdate} from '../../_useupdate'; \r\n\r\n\r\n\r\n// Reader =======================================\r\ninterface IEditor{ \r\n  ifield:IField; \r\n  value:any; \r\n  setValue:React.Dispatch<any>; \r\n  options?:IOption[]; \r\n} \r\nexport function Editor({ ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) { \r\n  const {defaultValue, type} = ifield; \r\n  const _options = options ?? [] as IOption[]; \r\n  const [_value, _setValue] = useState(value); \r\n\r\n  // synchronize from parent value\r\n  useEffect(() => { \r\n    if(value !== _value) \r\n      _setValue(value); \r\n  }, [value]); \r\n\r\n  // synchronize to parent value \r\n  useUpdate(() => {setValue(_value)},_value); \r\n\r\n  // Edit Many\r\n  if(ifield.isArray) {\r\n    if(IsEmpty(options)) \r\n      return <InputArray {...{defaultValue, type, values:_value, setValues:_setValue}} /> \r\n    return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:true}} /> \r\n  }\r\n  // Edit Mixed\r\n  if(ifield.isMixed) \r\n    return <EditMixed {...{ifield, value, setValue}} /> \r\n\r\n  // Edit One\r\n  if(IsEmpty(options)) \r\n    return <Input {...{value:_value, setValue:_setValue, type, defaultValue}} /> \r\n  return <Select {...{value:_value, setValue:_setValue, options:_options, multiple:false}} /> \r\n} \r\n\r\n\r\nfunction EditMixed ({ifield, value=GetDefaultValueFromIField(ifield), setValue, options}:IEditor) {\r\n  return <span>{JSON.stringify(value)}</span>\r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testReaderEditor.tsx",["360","361"],"import React, { useState } from 'react'; \r\nimport {Reader, Editor, Select} from '../reusable/_input'; \r\nimport {GetValueAt, SetValueAt} from '../reusable/_utils'; \r\n\r\n\r\nconst numField:IField = {accessor:'num', label:'Accessor', type:'number', defaultValue:0, options:{}} as IField; \r\nconst strField:IField = {accessor:'str', label:'Accessor', type:'string', defaultValue:'', options:{}} as IField; \r\nconst boolField:IField = {accessor:'bool', label:'Accessor', type:'boolean', defaultValue:false, options:{}} as IField; \r\n\r\nconst numOptions:IOption[] = [ \r\n  {value: 0, label:'value 0'}, \r\n  {value: 1, label:'value 1'}, \r\n  {value: 2, label:'value 2'}, \r\n  {value: 3, label:'value 3'}, \r\n] \r\n\r\nconst strOptions:IOption[] = [ \r\n  {value: 'a', label:'value a'}, \r\n  {value: 'b', label:'value b'}, \r\n  {value: 'c', label:'value c'}, \r\n  {value: 'd', label:'value d'}, \r\n] \r\n\r\nconst boolOptions:IOption[] = [ \r\n  {value: false, label:'female'}, \r\n  {value: true, label:'male'}, \r\n] \r\n\r\nconst testRead:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n  {value: 12, ifield: {...numField}}, \r\n  {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n  {value: 'bababa', ifield:{...strField} }, \r\n  {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n  {value: false, ifield:{...boolField} }, \r\n  {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n  // options\r\n  {value: 2, ifield:{...numField}, options:numOptions }, \r\n  {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n  {value: 'b', ifield:{...strField}, options:strOptions}, \r\n  {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n  {value: false, ifield:{...boolField}, options:strOptions}, \r\n  {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n] \r\n\r\n  /*const testEditor:{value:any, ifield:IField, options?:IOption[]}[] = [ \r\n    {value: 12, ifield: {...numField}}, \r\n    {value: [12, 15], ifield:{...numField, isArray:true} }, \r\n    {value: 'bababa', ifield:{...strField} }, \r\n    {value: ['cacaca', 'dadadad'], ifield:{...strField, isArray:true} }, \r\n    {value: false, ifield:{...boolField} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true} }, \r\n\r\n    // options\r\n    {value: 2, ifield:{...numField}, options:numOptions }, \r\n    {value: [3,2], ifield:{...numField, isArray:true}, options:numOptions }, \r\n    {value: 'b', ifield:{...strField}, options:strOptions}, \r\n    {value: ['b', 'c'], ifield:{...strField, isArray:true}, options:strOptions}, \r\n    {value: false, ifield:{...boolField, options:strOptions} }, \r\n    {value: [false, true], ifield:{...boolField, isArray:true}, options:boolOptions}, \r\n  ] */\r\n\r\n/*\r\nfunction useStateAt(_value:any) { \r\n  const [value, setValue] = useState(_value); \r\n  const ValueAt = (keys?:any[], newValue?:any) => { \r\n    if(newValue && JSON.stringify(ValueAt(keys)) !== newValue) \r\n      return SetValueAt(value, newValue, keys); \r\n    return GetValueAt(value, keys); \r\n  } \r\n  return ValueAt; \r\n} \r\n  \r\nexport function TestValueAt() { \r\n  const VALUE = {a:[15,46], b:[96,45]} \r\n  const valueAt = useStateAt(VALUE); \r\n  const value = valueAt(['a',0]); \r\n  const setValue = valueAt(['a',0]); \r\n\r\n  return <div> \r\n    <Editor {...{value}} /> \r\n  </div> \r\n} */\r\n\r\n\r\n// Test select when value is not in the avaible options */ \r\nexport function TestSelect () { \r\n  const [value, setValue] = useState(['-1']); \r\n  const options = [ \r\n    {value:'0', label:'option 0'}, \r\n    {value:'1', label:'option 1'}, \r\n    {value:'2', label:'option 2'}, \r\n    {value:'3', label:'option 3'} \r\n  ] \r\n\r\n  return <Select {...{value, setValue, options, multiple:true}} /> \r\n} \r\n\r\nexport function TestEditors() {\r\n  \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <TestEditor {...e} /></div> \r\n    })} \r\n    <br/>\r\n    asdsadsadas\r\n    <br/>\r\n  </div> \r\n}\r\n\r\n\r\nexport function TestEditor({ifield, options, ...props}:{value:any, ifield:IField, options?:IOption[]}) { \r\n  const [value, setValue] = useState(props.value); \r\n  return <div> \r\n    <div>{JSON.stringify(value)}</div> \r\n    <Editor {...{ifield, value, setValue, options}} /> \r\n    <br/>\r\n  </div>\r\n}\r\n\r\n\r\nexport function TestReader() { \r\n  return <div>\r\n    {testRead.map( (e,i) => { \r\n      return <div key={i}>{e.ifield.accessor} : <Reader {...e} /></div> \r\n    })} \r\n  </div> \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\collectionselector.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\admintablr.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\feedback\\feedback.component.tsx",["362","363"],"import React, {useContext} from 'react'; \r\nimport {CrudContext} from '../../reusable/_crud'; \r\nimport {Arrx} from '../../reusable/_arrx'; \r\n\r\nimport '../../css/feedback.css'; \r\n\r\n\r\n// Feedback =====================================\r\nexport function FeedBack() { \r\n  const {state} = useContext(CrudContext); \r\n\r\n  return <div> \r\n    {!state.ready && <span>LOADING ... </span>} \r\n    {state.ready && <span>Ready </span>} \r\n    {state.ready && !state.success && 'an errors occured'} \r\n  </div> \r\n} \r\n\r\nfunction CrudFeedBack() { \r\n  const {state} = useContext(CrudContext); \r\n  // assumes state is ready and successful \r\n  const responses = state.response as ICrudResponse[]; // ICrudResponse[] \r\n  \r\n  return <div> \r\n    #Responses : {responses.length} \r\n  </div> \r\n  /*{actionType, success, data, err} \r\n  \r\n  const successMsg:any = { \r\n    create:'Creation succeed', \r\n    update:'Update succeed', \r\n    delete:'Deletion succeed', \r\n  } \r\n  const errorMsg:any = { \r\n    create:'Creation failed ', \r\n    update:'Update failed', \r\n    delete:'Deletion failed', \r\n  } \r\n\r\n  const className = success ? 'success' : 'failure'; \r\n\r\n  return <div className={className}> \r\n    <div>{success ? successMsg[actionType] : errorMsg[actionType]}</div> \r\n    {!success && <Arrx {...{values:(err)}} />} \r\n    </div> */\r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\linecrud.component.tsx",["364","365"],"import React, {useContext} from 'react'; \r\nimport {DaoContext, EActionType} from '../../../reusable/_dao'; \r\n\r\nimport {Rows, Row, RowContext, Cells, Cell, CellContext} from '../../../reusable/_tablr'; \r\nimport {CreateBtn, DeleteBtn, UpdateBtn} from './crudbtn.component'; \r\nimport {CellRender} from './cellrenderer.component';\r\n\r\n\r\n\r\nexport function InlineUpdateDelete({page, cols, colBtn}:{page:number[], cols:IField[], colBtn:IField}) { \r\n  return <Rows {...{rows:page}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <CellRender/> \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <UpdateBtn/><DeleteBtn/> \r\n    </Cell> \r\n  </Rows> \r\n} \r\n\r\nexport function InlineCreate({cols, colBtn}:{cols:IField[], colBtn:IField}) { \r\n  const {activeMode} = useContext(DaoContext); \r\n  const isCreate = activeMode === EActionType.CREATE; \r\n\r\n  return <Row {...{row:-1}}> \r\n    <Cells {...{ifields:cols}}> \r\n      <span></span>\r\n      {isCreate && <CellRender/> } \r\n    </Cells> \r\n    <Cell {...{ifield:colBtn}}> \r\n      <CreateBtn/> \r\n    </Cell> \r\n  </Row> \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\crudbtn.component.tsx",["366"],"import React, {useContext} from 'react'; \r\nimport {RowContext, TablrContext} from '../../../reusable/_tablr'; \r\nimport {CrudContext} from '../../../reusable/_crud'; \r\nimport {EActionType} from '../../../reusable/_dao'; \r\n\r\n\r\n\r\n// Create .......................................\r\nexport function CreateBtn() { \r\n  const {activeCollection:{accessor}, Create} = useContext(CrudContext); \r\n  const action = (entry:any) => Create(accessor, entry); \r\n\r\n  const mode = EActionType.CREATE; \r\n  const labels = {affirm:'Create', confirm:'Confirm creation', cancel:'Cancel creation'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Update .......................................\r\nexport function UpdateBtn() { \r\n  const {activeCollection:{accessor}, Update} = useContext(CrudContext);\r\n  const action = (entry:any) => Update(accessor, entry); \r\n\r\n  const mode = EActionType.UPDATE; \r\n  const labels = {affirm:'Update', confirm:'Confirm update', cancel:'Cancel update'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n// Delete .......................................\r\nexport function DeleteBtn() { \r\n  const {activeCollection:{accessor}, Delete} = useContext(CrudContext);\r\n  const action = (entry:any) => Delete(accessor, entry); \r\n\r\n  const mode = EActionType.DELETE; \r\n  const labels = {affirm:'Delete', confirm:'Confirm deletion', cancel:'Cancel deletion'}; \r\n  return <CrudBtn {...{mode, labels, action}} /> \r\n} \r\n\r\n\r\n\r\n// CRUD BTN =====================================\r\ninterface CrudBtn { \r\n  mode: EActionType; \r\n  labels:{ \r\n    affirm:string, \r\n    confirm:string, \r\n    cancel:string, \r\n  }; \r\n  action:(entry:any)=>Promise<void>; \r\n} \r\nfunction CrudBtn ({mode, labels, action}:CrudBtn) { \r\n  const {activeEntry, activeMode, SetActive, ResetActive, IsActive} = useContext(CrudContext); \r\n  const {datas} = useContext(TablrContext); \r\n  const {row} = useContext(RowContext); \r\n  const id = datas[row] ? datas[row]?._id: ''; \r\n\r\n  const isMode = activeMode === mode; \r\n\r\n  const Affirm = () => { \r\n    SetActive(id, mode); \r\n  } \r\n  const Cancel = () => { \r\n    ResetActive(); \r\n  }; \r\n  const Confirm = async () => { \r\n    await action(activeEntry); \r\n    Cancel(); \r\n  } \r\n\r\n  return <span> \r\n    {IsActive(id) && isMode && <button onClick={Confirm}>{labels.confirm}</button>} \r\n    {IsActive(id) && isMode && <button onClick={Cancel}>{labels.cancel}</button>} \r\n    {!IsActive(id) && <button onClick={Affirm}>{labels.affirm}</button>} \r\n  </span> \r\n}","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\admin\\components\\cellrenderer.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\patientprofile.component.tsx",["367"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\questionnaire.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\patient\\components\\loadpatient.component.tsx",["368","369"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\loadquestionnaire.component.tsx",["370","371"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\paging.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\displayquestion.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\questionnaire.utils.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\questionnaire\\components\\paging.component.tsx",["372","373","374"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\collection.class.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\usedao.hook.ts",["375"],"import {useMemo} from 'react'; \r\nimport {useLoader, IState} from '../_useloader'; \r\nimport {DAO} from './dao.class'; \r\n\r\n\r\nexport enum EActionType { \r\n  CREATE = 'create', \r\n  READ = 'read', \r\n  UPDATE = 'update', \r\n  DELETE = 'delete', \r\n}\r\n\r\n\r\n\r\n// USE DAO ======================================\r\nexport interface IUseDao{ \r\n  state:IState; \r\n\r\n  // Get collections, entry, fields data \r\n  GetICollections:(accessors?:string[]) => ICollection[]; \r\n  GetIFields:(accessor:string, fields?:string[]) => IField[]; \r\n  GetIEntries:(accessor:string, ids?:string[]) => IEntry[]; \r\n  GetDefaultIEntry:(accessor:string) => IEntry; \r\n  \r\n  // Get foreign elements\r\n  GetForeignElements: (ifield:IField) => {foreignCollection:ICollection|undefined, abbrevField:IField|undefined}, \r\n\r\n  // Ge options \r\n  GetIOptions: (ifield:IField) => IOption[]; \r\n\r\n  // load remote collections. \r\n  Collections:(accessors:string[]) => Promise<void>; \r\n\r\n  // Crud functionalities. \r\n  Create: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n  Read: (accessor:string, id?:string[]) => Promise<void>; \r\n  Update: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n  Delete: (accessor:string, entries:IEntry[]) => Promise<void>; \r\n} \r\n\r\n\r\n\r\n// USE DAO ======================================\r\nexport function useDao(dao:DAO):IUseDao { \r\n  // Hooks \r\n  const Dao = useMemo(() => dao, []); \r\n  const {state, Load} = useLoader(); \r\n\r\n  const GetICollections = (accessors?:string[]) => Dao.GetICollections(accessors); \r\n  const GetIFields = (accessor:string, fields?:string[]) => Dao.GetIFields(accessor, fields); \r\n  const GetIEntries = (accessor:string, ids?:string[]) => Dao.GetIEntries(accessor, ids); \r\n  const GetDefaultIEntry = (accessor:string) => Dao.GetDefaultIEntry(accessor); \r\n  // Get foreign elements\r\n  const GetForeignElements = (ifield:IField) => Dao.GetForeignElements(ifield); \r\n  // Get options \r\n  const GetIOptions = (ifield:IField) => Dao.GetIOptions(ifield); \r\n\r\n  // Collections \r\n  const Collections = async (accessors:string[]) => \r\n    Load(() => Dao.Collections(accessors)); \r\n\r\n  // Crud functionalities \r\n  // async Validate ... \r\n  // async Ids ... \r\n  const Create = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Create(accessor, entries)); \r\n  const Read = async (accessor:string, ids?:string[]) => \r\n    Load(() => Dao.Read(accessor, ids)); \r\n  const Update = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Update(accessor, entries)); \r\n  const Delete = async (accessor:string, entries:IEntry[]) => \r\n    Load(() => Dao.Delete(accessor, entries)); \r\n\r\n  return { \r\n    state, \r\n    GetICollections, GetIFields, GetIEntries, GetDefaultIEntry, \r\n    GetForeignElements, GetIOptions, \r\n    Collections, Create, Read, Update, Delete \r\n  }; \r\n}\r\n\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\dao\\daocontexter.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\mongooseparser\\crudmongoose.class.ts",["376"],"import axios from 'axios'; \r\nimport {ParseCollection} from './mongooseparser.utils'; \r\n\r\n\r\n// Crud Mongoose =======================================\r\nexport class CrudMongoose { \r\n  public baseUrl:string = ''; \r\n\r\n  constructor(baseUrl:string) { \r\n    this.baseUrl = baseUrl; \r\n  }\r\n\r\n  // Access -----------------------------------------------\r\n  public async Access() { \r\n    return await axios.get(this.baseUrl); \r\n  } \r\n\r\n  /* \r\n  PUT ...api/collections \r\n    req.body => accessors:string[] \r\n    res:ICrudResponse[] \r\n  */ \r\n  // Collections ..........................................\r\n  public async Collections(accessors:string[]): Promise<ICrudResponse[]> { \r\n    const axiosResponses = (await axios.put(this.baseUrl+'collections/', accessors)).data as ICrudResponse[]; \r\n    return axiosResponses.map( r => { \r\n      const parsedCollection = ParseCollection(r.data); \r\n      return {...r, data:parsedCollection} as ICrudResponse; \r\n    }); \r\n  } \r\n\r\n  // Validate .............................................\r\n  public async Validate(accessor:string, entries:IEntry[]) { \r\n    return await axios.put(this.baseUrl+'validate/'+accessor, entries); \r\n  } \r\n\r\n  // Ids ..................................................\r\n  public async Ids(accessor:string): Promise<string[]>{ \r\n    return (await axios.get(this.baseUrl+'ids/'+accessor)).data; \r\n  } \r\n\r\n\r\n  //?? public async CreateUpdate ?? \r\n\r\n\r\n  // Create ...............................................\r\n  public async Create(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toCreate = entries.map(e => { \r\n      const {_id, _v, ...data} = e; \r\n      return data; \r\n    }); \r\n    return (await axios.put(this.baseUrl+'create/'+accessor, toCreate)).data; \r\n  } \r\n\r\n  // ICrudResponse ?? or IEntry ??\r\n  // Read .................................................\r\n  public async Read(accessor:string, ids?:string[]): Promise<ICrudResponse[]> {\r\n    return (await axios.put(this.baseUrl+'read/'+accessor, ids)).data; \r\n  }\r\n\r\n  // Update ...............................................\r\n  public async Update(accessor:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    return (await axios.put(this.baseUrl+'update/'+accessor, entries)).data; \r\n  }\r\n\r\n  // Delete ...............................................\r\n  /* Sends an array of objects with the only property being '_id' ... [{_id}] */\r\n  public async Delete(modelName:string, entries:IEntry[]): Promise<ICrudResponse[]> { \r\n    const toDelete = entries.map(e => { \r\n      const {_id, ...data} = e; \r\n      return {_id}; \r\n    }); \r\n    return (await axios.put(this.baseUrl+'delete/'+modelName, toDelete)).data; \r\n  } \r\n} ","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testcrud\\testcrud.experiment.tsx",["377"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_crud.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\crud\\useactive.hook.tsx",["378","379"],"import React, {useContext, useEffect, useState} from 'react'; \r\nimport {IUseDao, useDao, ICrud, DAO, DaoContext} from '../_dao'; \r\nimport {CrudMongoose} from '../_mongooseparser'; \r\n\r\n\r\n\r\n// ICrudContext ------------------------------------------- \r\ninterface ICrudContext extends IUseDao { \r\n  activeCollection: ICollection; \r\n  setActiveCollection: React.Dispatch<ICollection>; \r\n  activeEntry: IEntry; \r\n  setActiveEntry: React.Dispatch<IEntry>; \r\n  activeMode: string; \r\n  setActiveMode: React.Dispatch<string>; \r\n  ResetActive: () => void, \r\n  SetActive: (id:string, mode:string) => void, \r\n  IsActive: (id:string) => boolean; \r\n} \r\nexport const CrudContext = React.createContext({} as ICrudContext); \r\n\r\n\r\n\r\n// CrudContexter ========================================== \r\nexport function CrudContexter({baseUrl, children}:React.PropsWithChildren<{baseUrl:string}>) { \r\n  const dao = new DAO(new CrudMongoose(baseUrl) as ICrud); \r\n  const usedao = useDao(dao); \r\n  const useactive = useActive(usedao); \r\n  const context = {...usedao, ...useactive}; \r\n  return <CrudContext.Provider value={context} > \r\n    {children} \r\n  </CrudContext.Provider> \r\n} \r\n\r\n\r\n\r\n// UseCrud ================================================ \r\nexport function useActive(useDao:IUseDao) { \r\n  const [activeCollection, setActiveCollection] = useState({} as ICollection); \r\n\r\n  const [activeEntry, setActiveEntry] = useState({} as IEntry); \r\n  const [activeMode, setActiveMode] = useState('read'); \r\n\r\n  useEffect(() => { \r\n    ResetActive(); \r\n  }, [activeCollection]); \r\n\r\n  function ResetActive() { \r\n    setActiveEntry({} as IEntry); \r\n    setActiveMode('read'); \r\n  } \r\n\r\n  function SetActive(id:string, mode:string) { \r\n    const [entry] = useDao.GetIEntries(activeCollection?.accessor, [id]); \r\n    const defaultEntry = useDao.GetDefaultIEntry(activeCollection?.accessor); \r\n    setActiveEntry(entry ?? defaultEntry); \r\n    setActiveMode(mode); \r\n  }\r\n\r\n  function IsActive(id:string):boolean { \r\n    return id === activeEntry?._id; \r\n  } \r\n\r\n  return {activeCollection, setActiveCollection, \r\n    activeEntry, setActiveEntry, \r\n    activeMode, setActiveMode, \r\n    ResetActive, SetActive, IsActive \r\n  }; \r\n} \r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\components\\predloader.component.tsx",["380"],"import {useContext, useEffect} from 'react'; \r\nimport {CrudContext} from '../reusable/_crud'; \r\n\r\n\r\n// Prelaoder ===============================================\r\nexport function PreLoader() { \r\n  const {state, Collections, GetICollections} = useContext(CrudContext); \r\n\r\n  useEffect(() => { \r\n    Collections(['questions','responses', 'forms', 'instructions', 'patients', 'answers']); \r\n  }, []); \r\n\r\n  const ready = state.ready && state.success; \r\n  const [forms] = GetICollections(['forms']); \r\n\r\n  return <div> \r\n    <h1>Test Crud</h1> \r\n    <div>{forms && forms.entries.length}</div> \r\n    {!ready && 'loading ...'} \r\n    {ready && 'ready !'} \r\n  </div> \r\n}\r\n","D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\pages\\home\\home.page.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\testrender.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\renderer\\renderer.component.tsx",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\experiments\\testarray\\testarrayutils.experiment.tsx",["381","382","383"],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\_utils2.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\arrays2.utils.ts",[],"D:\\01-Projects\\02-FullStacks\\01-React-Mongoose\\react-mongoose-demo\\src\\reusable\\utils\\value.utils.ts",[],{"ruleId":"384","replacedBy":"385"},{"ruleId":"386","replacedBy":"387"},{"ruleId":"388","severity":1,"message":"389","line":4,"column":9,"nodeType":"390","messageId":"391","endLine":4,"endColumn":21},{"ruleId":"392","severity":1,"message":"393","line":22,"column":3,"nodeType":"394","messageId":"395","endLine":30,"endColumn":19},{"ruleId":"396","severity":1,"message":"397","line":20,"column":6,"nodeType":"398","endLine":20,"endColumn":8,"suggestions":"399"},{"ruleId":"384","replacedBy":"385"},{"ruleId":"386","replacedBy":"387"},{"ruleId":"400","severity":1,"message":"401","line":65,"column":12,"nodeType":"390","messageId":"391","endLine":65,"endColumn":13},{"ruleId":"384","replacedBy":"402"},{"ruleId":"386","replacedBy":"403"},{"ruleId":"404","severity":1,"message":"405","line":62,"column":37,"nodeType":"406","messageId":"407","endLine":62,"endColumn":47},{"ruleId":"384","replacedBy":"408"},{"ruleId":"386","replacedBy":"409"},{"ruleId":"400","severity":1,"message":"410","line":4,"column":9,"nodeType":"390","messageId":"391","endLine":4,"endColumn":15},{"ruleId":"411","severity":1,"message":"412","line":34,"column":22,"nodeType":"413","messageId":"414","endLine":34,"endColumn":24},{"ruleId":"411","severity":1,"message":"412","line":34,"column":47,"nodeType":"413","messageId":"414","endLine":34,"endColumn":49},{"ruleId":"400","severity":1,"message":"415","line":1,"column":16,"nodeType":"390","messageId":"391","endLine":1,"endColumn":26},{"ruleId":"411","severity":1,"message":"412","line":28,"column":20,"nodeType":"413","messageId":"414","endLine":28,"endColumn":22},{"ruleId":"411","severity":1,"message":"412","line":28,"column":36,"nodeType":"413","messageId":"414","endLine":28,"endColumn":38},{"ruleId":"400","severity":1,"message":"416","line":116,"column":12,"nodeType":"390","messageId":"391","endLine":116,"endColumn":22},{"ruleId":"384","replacedBy":"417"},{"ruleId":"386","replacedBy":"418"},{"ruleId":"384","replacedBy":"419"},{"ruleId":"386","replacedBy":"420"},{"ruleId":"400","severity":1,"message":"421","line":3,"column":43,"nodeType":"390","messageId":"391","endLine":3,"endColumn":51},{"ruleId":"400","severity":1,"message":"422","line":2,"column":15,"nodeType":"390","messageId":"391","endLine":2,"endColumn":26},{"ruleId":"400","severity":1,"message":"423","line":2,"column":38,"nodeType":"390","messageId":"391","endLine":2,"endColumn":45},{"ruleId":"400","severity":1,"message":"424","line":2,"column":63,"nodeType":"390","messageId":"391","endLine":2,"endColumn":75},{"ruleId":"400","severity":1,"message":"425","line":2,"column":77,"nodeType":"390","messageId":"391","endLine":2,"endColumn":89},{"ruleId":"396","severity":1,"message":"426","line":44,"column":6,"nodeType":"398","endLine":44,"endColumn":37,"suggestions":"427"},{"ruleId":"396","severity":1,"message":"428","line":44,"column":7,"nodeType":"429","endLine":44,"endColumn":36},{"ruleId":"384","replacedBy":"430"},{"ruleId":"386","replacedBy":"431"},{"ruleId":"396","severity":1,"message":"432","line":12,"column":6,"nodeType":"398","endLine":12,"endColumn":34,"suggestions":"433"},{"ruleId":"396","severity":1,"message":"428","line":12,"column":7,"nodeType":"429","endLine":12,"endColumn":33},{"ruleId":"400","severity":1,"message":"434","line":2,"column":9,"nodeType":"390","messageId":"391","endLine":2,"endColumn":16},{"ruleId":"400","severity":1,"message":"435","line":2,"column":18,"nodeType":"390","messageId":"391","endLine":2,"endColumn":28},{"ruleId":"400","severity":1,"message":"436","line":2,"column":30,"nodeType":"390","messageId":"391","endLine":2,"endColumn":40},{"ruleId":"400","severity":1,"message":"437","line":3,"column":9,"nodeType":"390","messageId":"391","endLine":3,"endColumn":23},{"ruleId":"400","severity":1,"message":"438","line":4,"column":9,"nodeType":"390","messageId":"391","endLine":4,"endColumn":22},{"ruleId":"400","severity":1,"message":"439","line":5,"column":9,"nodeType":"390","messageId":"391","endLine":5,"endColumn":21},{"ruleId":"396","severity":1,"message":"440","line":28,"column":6,"nodeType":"398","endLine":28,"endColumn":24,"suggestions":"441"},{"ruleId":"396","severity":1,"message":"442","line":24,"column":6,"nodeType":"398","endLine":24,"endColumn":13,"suggestions":"443"},{"ruleId":"400","severity":1,"message":"435","line":3,"column":9,"nodeType":"390","messageId":"391","endLine":3,"endColumn":19},{"ruleId":"400","severity":1,"message":"436","line":3,"column":21,"nodeType":"390","messageId":"391","endLine":3,"endColumn":31},{"ruleId":"400","severity":1,"message":"444","line":3,"column":9,"nodeType":"390","messageId":"391","endLine":3,"endColumn":13},{"ruleId":"400","severity":1,"message":"445","line":19,"column":10,"nodeType":"390","messageId":"391","endLine":19,"endColumn":22},{"ruleId":"400","severity":1,"message":"446","line":4,"column":20,"nodeType":"390","messageId":"391","endLine":4,"endColumn":30},{"ruleId":"400","severity":1,"message":"447","line":4,"column":45,"nodeType":"390","messageId":"391","endLine":4,"endColumn":56},{"ruleId":"448","severity":1,"message":"449","line":50,"column":10,"nodeType":"390","messageId":"450","endLine":50,"endColumn":17},{"ruleId":"400","severity":1,"message":"451","line":9,"column":9,"nodeType":"390","messageId":"391","endLine":9,"endColumn":15},{"ruleId":"400","severity":1,"message":"452","line":3,"column":9,"nodeType":"390","messageId":"391","endLine":3,"endColumn":17},{"ruleId":"396","severity":1,"message":"453","line":20,"column":6,"nodeType":"398","endLine":20,"endColumn":8,"suggestions":"454"},{"ruleId":"400","severity":1,"message":"455","line":11,"column":10,"nodeType":"390","messageId":"391","endLine":11,"endColumn":21},{"ruleId":"396","severity":1,"message":"456","line":31,"column":6,"nodeType":"398","endLine":31,"endColumn":8,"suggestions":"457"},{"ruleId":"400","severity":1,"message":"458","line":9,"column":10,"nodeType":"390","messageId":"391","endLine":9,"endColumn":17},{"ruleId":"400","severity":1,"message":"459","line":33,"column":28,"nodeType":"390","messageId":"391","endLine":33,"endColumn":36},{"ruleId":"400","severity":1,"message":"460","line":33,"column":39,"nodeType":"390","messageId":"391","endLine":33,"endColumn":45},{"ruleId":"396","severity":1,"message":"461","line":46,"column":34,"nodeType":"398","endLine":46,"endColumn":36,"suggestions":"462"},{"ruleId":"400","severity":1,"message":"463","line":70,"column":22,"nodeType":"390","messageId":"391","endLine":70,"endColumn":26},{"ruleId":"396","severity":1,"message":"464","line":18,"column":6,"nodeType":"398","endLine":18,"endColumn":8,"suggestions":"465"},{"ruleId":"400","severity":1,"message":"415","line":1,"column":16,"nodeType":"390","messageId":"391","endLine":1,"endColumn":26},{"ruleId":"400","severity":1,"message":"466","line":2,"column":38,"nodeType":"390","messageId":"391","endLine":2,"endColumn":48},{"ruleId":"396","severity":1,"message":"464","line":11,"column":6,"nodeType":"398","endLine":11,"endColumn":8,"suggestions":"467"},{"ruleId":"400","severity":1,"message":"468","line":2,"column":9,"nodeType":"390","messageId":"391","endLine":2,"endColumn":16},{"ruleId":"400","severity":1,"message":"469","line":3,"column":9,"nodeType":"390","messageId":"391","endLine":3,"endColumn":19},{"ruleId":"392","severity":1,"message":"393","line":35,"column":3,"nodeType":"394","messageId":"395","endLine":42,"endColumn":9},"no-native-reassign",["470"],"no-negated-in-lhs",["471"],"no-unused-vars","'TestRenderer' is defined but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setActiveCollection'. Either include it or remove the dependency array.","ArrayExpression",["472"],"@typescript-eslint/no-unused-vars","'a' is assigned a value but never used.",["470"],["471"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression",["470"],["471"],"'IsNull' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'useContext' is defined but never used.","'collection' is assigned a value but never used.",["470"],["471"],["470"],["471"],"'SetWidth' is defined but never used.","'ArrxContext' is defined but never used.","'Element' is defined but never used.","'ElementIndex' is defined but never used.","'ElementValue' is defined but never used.","React Hook useEffect has missing dependencies: 'index' and 'values'. Either include them or remove the dependency array.",["473"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression",["470"],["471"],"React Hook useEffect has a missing dependency: 'callback'. Either include it or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["474"],"'IsEmpty' is defined but never used.","'GetValueAt' is defined but never used.","'SetValueAt' is defined but never used.","'PatientProfile' is defined but never used.","'Questionnaire' is defined but never used.","'LoadPatients' is defined but never used.","React Hook useEffect has missing dependencies: 'GetICollections' and 'setActiveCollection'. Either include them or remove the dependency array.",["475"],"React Hook useEffect has a missing dependency: '_value'. Either include it or remove the dependency array.",["476"],"'Arrx' is defined but never used.","'CrudFeedBack' is defined but never used.","'RowContext' is defined but never used.","'CellContext' is defined but never used.","@typescript-eslint/no-redeclare","'CrudBtn' is already defined.","redeclared","'Reader' is defined but never used.","'FeedBack' is defined but never used.","React Hook useEffect has a missing dependency: 'GetPatient'. Either include it or remove the dependency array.",["477"],"'Collections' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetQuestionnaire'. Either include it or remove the dependency array.",["478"],"'answers' is assigned a value but never used.","'accessor' is assigned a value but never used.","'Create' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'dao'. Either include it or remove the dependency array.",["479"],"'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'Collections'. Either include it or remove the dependency array.",["480"],"'DaoContext' is defined but never used.",["481"],"'ToArray' is defined but never used.","'Comparator' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"482","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"490","fix":"491"},{"desc":"492","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"498","fix":"500"},"Update the dependencies array to be: [setActiveCollection]",{"range":"501","text":"502"},"Update the dependencies array to be: [index, values]",{"range":"503","text":"504"},"Update the dependencies array to be: [callback]",{"range":"505","text":"506"},"Update the dependencies array to be: [GetICollections, activeCollection, setActiveCollection]",{"range":"507","text":"508"},"Update the dependencies array to be: [_value, value]",{"range":"509","text":"510"},"Update the dependencies array to be: [GetPatient]",{"range":"511","text":"512"},"Update the dependencies array to be: [GetQuestionnaire]",{"range":"513","text":"514"},"Update the dependencies array to be: [dao]",{"range":"515","text":"516"},"Update the dependencies array to be: [Collections]",{"range":"517","text":"518"},{"range":"519","text":"518"},[663,665],"[setActiveCollection]",[1560,1591],"[index, values]",[304,332],"[callback]",[1158,1176],"[GetICollections, activeCollection, setActiveCollection]",[762,769],"[_value, value]",[594,596],"[GetPatient]",[1036,1038],"[GetQuestionnaire]",[1369,1371],"[dao]",[618,620],"[Collections]",[392,394]]